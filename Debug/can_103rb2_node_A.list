
can_103rb2_node_A.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000034c8  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  080035d4  080035d4  000045d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003600  08003600  0000500c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08003600  08003600  0000500c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08003600  08003600  0000500c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003600  08003600  00004600  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003604  08003604  00004604  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08003608  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000c4  2000000c  08003614  0000500c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000d0  08003614  000050d0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000500c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000828f  00000000  00000000  00005035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000017fa  00000000  00000000  0000d2c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000850  00000000  00000000  0000eac0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000065b  00000000  00000000  0000f310  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00001d09  00000000  00000000  0000f96b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a5aa  00000000  00000000  00011674  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000843af  00000000  00000000  0001bc1e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0009ffcd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000021ec  00000000  00000000  000a0010  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004a  00000000  00000000  000a21fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	080035bc 	.word	0x080035bc

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	080035bc 	.word	0x080035bc

0800014c <ISM330_I2C_Read>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
// ---------- I2C Read/Write ----------
uint8_t ISM330_I2C_Read(uint8_t reg)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b088      	sub	sp, #32
 8000150:	af04      	add	r7, sp, #16
 8000152:	4603      	mov	r3, r0
 8000154:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    HAL_I2C_Mem_Read(&hi2c1, ISM330_ADDR, reg, I2C_MEMADD_SIZE_8BIT, &value, 1, HAL_MAX_DELAY);
 8000156:	79fb      	ldrb	r3, [r7, #7]
 8000158:	b29a      	uxth	r2, r3
 800015a:	f04f 33ff 	mov.w	r3, #4294967295
 800015e:	9302      	str	r3, [sp, #8]
 8000160:	2301      	movs	r3, #1
 8000162:	9301      	str	r3, [sp, #4]
 8000164:	f107 030f 	add.w	r3, r7, #15
 8000168:	9300      	str	r3, [sp, #0]
 800016a:	2301      	movs	r3, #1
 800016c:	21d4      	movs	r1, #212	@ 0xd4
 800016e:	4804      	ldr	r0, [pc, #16]	@ (8000180 <ISM330_I2C_Read+0x34>)
 8000170:	f001 ffc6 	bl	8002100 <HAL_I2C_Mem_Read>
    return value;
 8000174:	7bfb      	ldrb	r3, [r7, #15]
}
 8000176:	4618      	mov	r0, r3
 8000178:	3710      	adds	r7, #16
 800017a:	46bd      	mov	sp, r7
 800017c:	bd80      	pop	{r7, pc}
 800017e:	bf00      	nop
 8000180:	20000028 	.word	0x20000028

08000184 <ISM330_I2C_Write>:

void ISM330_I2C_Write(uint8_t reg, uint8_t value)
{
 8000184:	b580      	push	{r7, lr}
 8000186:	b086      	sub	sp, #24
 8000188:	af04      	add	r7, sp, #16
 800018a:	4603      	mov	r3, r0
 800018c:	460a      	mov	r2, r1
 800018e:	71fb      	strb	r3, [r7, #7]
 8000190:	4613      	mov	r3, r2
 8000192:	71bb      	strb	r3, [r7, #6]
    HAL_I2C_Mem_Write(&hi2c1, ISM330_ADDR, reg, I2C_MEMADD_SIZE_8BIT, &value, 1, HAL_MAX_DELAY);
 8000194:	79fb      	ldrb	r3, [r7, #7]
 8000196:	b29a      	uxth	r2, r3
 8000198:	f04f 33ff 	mov.w	r3, #4294967295
 800019c:	9302      	str	r3, [sp, #8]
 800019e:	2301      	movs	r3, #1
 80001a0:	9301      	str	r3, [sp, #4]
 80001a2:	1dbb      	adds	r3, r7, #6
 80001a4:	9300      	str	r3, [sp, #0]
 80001a6:	2301      	movs	r3, #1
 80001a8:	21d4      	movs	r1, #212	@ 0xd4
 80001aa:	4803      	ldr	r0, [pc, #12]	@ (80001b8 <ISM330_I2C_Write+0x34>)
 80001ac:	f001 feae 	bl	8001f0c <HAL_I2C_Mem_Write>
}
 80001b0:	bf00      	nop
 80001b2:	3708      	adds	r7, #8
 80001b4:	46bd      	mov	sp, r7
 80001b6:	bd80      	pop	{r7, pc}
 80001b8:	20000028 	.word	0x20000028

080001bc <ISM330_Init>:

// ---------- Init Sensor ----------
void ISM330_Init(void)
{
 80001bc:	b580      	push	{r7, lr}
 80001be:	b082      	sub	sp, #8
 80001c0:	af00      	add	r7, sp, #0
    uint8_t whoami = ISM330_I2C_Read(ISM330_WHO_AM_I);
 80001c2:	200f      	movs	r0, #15
 80001c4:	f7ff ffc2 	bl	800014c <ISM330_I2C_Read>
 80001c8:	4603      	mov	r3, r0
 80001ca:	71fb      	strb	r3, [r7, #7]
    if (whoami != ISM330_WHO_AM_I_VAL) while(1); // error
 80001cc:	79fb      	ldrb	r3, [r7, #7]
 80001ce:	2b6b      	cmp	r3, #107	@ 0x6b
 80001d0:	d001      	beq.n	80001d6 <ISM330_Init+0x1a>
 80001d2:	bf00      	nop
 80001d4:	e7fd      	b.n	80001d2 <ISM330_Init+0x16>

    // Accelerometer: 104 Hz, Â±2g
    ISM330_I2C_Write(ISM330_CTRL1_XL, 0x40);
 80001d6:	2140      	movs	r1, #64	@ 0x40
 80001d8:	2010      	movs	r0, #16
 80001da:	f7ff ffd3 	bl	8000184 <ISM330_I2C_Write>

    // Gyroscope: 104 Hz, 250 dps
    ISM330_I2C_Write(ISM330_CTRL2_G, 0x40);
 80001de:	2140      	movs	r1, #64	@ 0x40
 80001e0:	2011      	movs	r0, #17
 80001e2:	f7ff ffcf 	bl	8000184 <ISM330_I2C_Write>
}
 80001e6:	bf00      	nop
 80001e8:	3708      	adds	r7, #8
 80001ea:	46bd      	mov	sp, r7
 80001ec:	bd80      	pop	{r7, pc}
	...

080001f0 <ISM330DHCX_ReadRaw>:
    accel[2] = (int16_t)(buffer[11] << 8 | buffer[10]);
}
extern I2C_HandleTypeDef hi2c1; // or whichever I2C instance you're using

void ISM330DHCX_ReadRaw(MotionRaw_T* motion)
{
 80001f0:	b580      	push	{r7, lr}
 80001f2:	b08a      	sub	sp, #40	@ 0x28
 80001f4:	af04      	add	r7, sp, #16
 80001f6:	6078      	str	r0, [r7, #4]
    uint8_t rawData[12]; // 6 bytes accel + 6 bytes gyro

    // Read accelerometer data
    HAL_I2C_Mem_Read(&hi2c1, ISM330_ADDR, ISM330_OUTX_L_A, I2C_MEMADD_SIZE_8BIT, &rawData[0], 6, HAL_MAX_DELAY);
 80001f8:	f04f 33ff 	mov.w	r3, #4294967295
 80001fc:	9302      	str	r3, [sp, #8]
 80001fe:	2306      	movs	r3, #6
 8000200:	9301      	str	r3, [sp, #4]
 8000202:	f107 030c 	add.w	r3, r7, #12
 8000206:	9300      	str	r3, [sp, #0]
 8000208:	2301      	movs	r3, #1
 800020a:	2228      	movs	r2, #40	@ 0x28
 800020c:	21d4      	movs	r1, #212	@ 0xd4
 800020e:	4829      	ldr	r0, [pc, #164]	@ (80002b4 <ISM330DHCX_ReadRaw+0xc4>)
 8000210:	f001 ff76 	bl	8002100 <HAL_I2C_Mem_Read>

    // Read gyroscope data
    HAL_I2C_Mem_Read(&hi2c1, ISM330_ADDR, ISM330_OUTX_L_G, I2C_MEMADD_SIZE_8BIT, &rawData[6], 6, HAL_MAX_DELAY);
 8000214:	f04f 33ff 	mov.w	r3, #4294967295
 8000218:	9302      	str	r3, [sp, #8]
 800021a:	2306      	movs	r3, #6
 800021c:	9301      	str	r3, [sp, #4]
 800021e:	f107 030c 	add.w	r3, r7, #12
 8000222:	3306      	adds	r3, #6
 8000224:	9300      	str	r3, [sp, #0]
 8000226:	2301      	movs	r3, #1
 8000228:	2222      	movs	r2, #34	@ 0x22
 800022a:	21d4      	movs	r1, #212	@ 0xd4
 800022c:	4821      	ldr	r0, [pc, #132]	@ (80002b4 <ISM330DHCX_ReadRaw+0xc4>)
 800022e:	f001 ff67 	bl	8002100 <HAL_I2C_Mem_Read>

    // Convert LSB to int16_t
    motion->ax = (int16_t)(rawData[1] << 8 | rawData[0]);
 8000232:	7b7b      	ldrb	r3, [r7, #13]
 8000234:	b21b      	sxth	r3, r3
 8000236:	021b      	lsls	r3, r3, #8
 8000238:	b21a      	sxth	r2, r3
 800023a:	7b3b      	ldrb	r3, [r7, #12]
 800023c:	b21b      	sxth	r3, r3
 800023e:	4313      	orrs	r3, r2
 8000240:	b21a      	sxth	r2, r3
 8000242:	687b      	ldr	r3, [r7, #4]
 8000244:	801a      	strh	r2, [r3, #0]
    motion->ay = (int16_t)(rawData[3] << 8 | rawData[2]);
 8000246:	7bfb      	ldrb	r3, [r7, #15]
 8000248:	b21b      	sxth	r3, r3
 800024a:	021b      	lsls	r3, r3, #8
 800024c:	b21a      	sxth	r2, r3
 800024e:	7bbb      	ldrb	r3, [r7, #14]
 8000250:	b21b      	sxth	r3, r3
 8000252:	4313      	orrs	r3, r2
 8000254:	b21a      	sxth	r2, r3
 8000256:	687b      	ldr	r3, [r7, #4]
 8000258:	805a      	strh	r2, [r3, #2]
    motion->az = (int16_t)(rawData[5] << 8 | rawData[4]);
 800025a:	7c7b      	ldrb	r3, [r7, #17]
 800025c:	b21b      	sxth	r3, r3
 800025e:	021b      	lsls	r3, r3, #8
 8000260:	b21a      	sxth	r2, r3
 8000262:	7c3b      	ldrb	r3, [r7, #16]
 8000264:	b21b      	sxth	r3, r3
 8000266:	4313      	orrs	r3, r2
 8000268:	b21a      	sxth	r2, r3
 800026a:	687b      	ldr	r3, [r7, #4]
 800026c:	809a      	strh	r2, [r3, #4]

    motion->gx = (int16_t)(rawData[7] << 8 | rawData[6]);
 800026e:	7cfb      	ldrb	r3, [r7, #19]
 8000270:	b21b      	sxth	r3, r3
 8000272:	021b      	lsls	r3, r3, #8
 8000274:	b21a      	sxth	r2, r3
 8000276:	7cbb      	ldrb	r3, [r7, #18]
 8000278:	b21b      	sxth	r3, r3
 800027a:	4313      	orrs	r3, r2
 800027c:	b21a      	sxth	r2, r3
 800027e:	687b      	ldr	r3, [r7, #4]
 8000280:	80da      	strh	r2, [r3, #6]
    motion->gy = (int16_t)(rawData[9] << 8 | rawData[8]);
 8000282:	7d7b      	ldrb	r3, [r7, #21]
 8000284:	b21b      	sxth	r3, r3
 8000286:	021b      	lsls	r3, r3, #8
 8000288:	b21a      	sxth	r2, r3
 800028a:	7d3b      	ldrb	r3, [r7, #20]
 800028c:	b21b      	sxth	r3, r3
 800028e:	4313      	orrs	r3, r2
 8000290:	b21a      	sxth	r2, r3
 8000292:	687b      	ldr	r3, [r7, #4]
 8000294:	811a      	strh	r2, [r3, #8]
    motion->gz = (int16_t)(rawData[11] << 8 | rawData[10]);
 8000296:	7dfb      	ldrb	r3, [r7, #23]
 8000298:	b21b      	sxth	r3, r3
 800029a:	021b      	lsls	r3, r3, #8
 800029c:	b21a      	sxth	r2, r3
 800029e:	7dbb      	ldrb	r3, [r7, #22]
 80002a0:	b21b      	sxth	r3, r3
 80002a2:	4313      	orrs	r3, r2
 80002a4:	b21a      	sxth	r2, r3
 80002a6:	687b      	ldr	r3, [r7, #4]
 80002a8:	815a      	strh	r2, [r3, #10]
}
 80002aa:	bf00      	nop
 80002ac:	3718      	adds	r7, #24
 80002ae:	46bd      	mov	sp, r7
 80002b0:	bd80      	pop	{r7, pc}
 80002b2:	bf00      	nop
 80002b4:	20000028 	.word	0x20000028

080002b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80002b8:	b580      	push	{r7, lr}
 80002ba:	b084      	sub	sp, #16
 80002bc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80002be:	f000 fb6f 	bl	80009a0 <HAL_Init>
  /* USER CODE BEGIN Init */
  MotionRaw_T motion;
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80002c2:	f000 f871 	bl	80003a8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80002c6:	f000 f933 	bl	8000530 <MX_GPIO_Init>
  MX_CAN_Init();
 80002ca:	f000 f8e1 	bl	8000490 <MX_CAN_Init>
  MX_I2C1_Init();
 80002ce:	f000 f8b1 	bl	8000434 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  // Start CAN peripheral
  if (HAL_CAN_Start(&hcan) != HAL_OK)
 80002d2:	4823      	ldr	r0, [pc, #140]	@ (8000360 <main+0xa8>)
 80002d4:	f000 fdae 	bl	8000e34 <HAL_CAN_Start>
 80002d8:	4603      	mov	r3, r0
 80002da:	2b00      	cmp	r3, #0
 80002dc:	d001      	beq.n	80002e2 <main+0x2a>
  {
    Error_Handler();
 80002de:	f000 f995 	bl	800060c <Error_Handler>
  }

  // Enable CAN RX interrupt
  if (HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK)
 80002e2:	2102      	movs	r1, #2
 80002e4:	481e      	ldr	r0, [pc, #120]	@ (8000360 <main+0xa8>)
 80002e6:	f000 ffd9 	bl	800129c <HAL_CAN_ActivateNotification>
 80002ea:	4603      	mov	r3, r0
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	d001      	beq.n	80002f4 <main+0x3c>
  {
    Error_Handler();
 80002f0:	f000 f98c 	bl	800060c <Error_Handler>
  }

  // Configure CAN TX Header
  TxHeader.DLC = 8;
 80002f4:	4b1b      	ldr	r3, [pc, #108]	@ (8000364 <main+0xac>)
 80002f6:	2208      	movs	r2, #8
 80002f8:	611a      	str	r2, [r3, #16]
  TxHeader.IDE = CAN_ID_STD;
 80002fa:	4b1a      	ldr	r3, [pc, #104]	@ (8000364 <main+0xac>)
 80002fc:	2200      	movs	r2, #0
 80002fe:	609a      	str	r2, [r3, #8]
  TxHeader.RTR = CAN_RTR_DATA;
 8000300:	4b18      	ldr	r3, [pc, #96]	@ (8000364 <main+0xac>)
 8000302:	2200      	movs	r2, #0
 8000304:	60da      	str	r2, [r3, #12]
  TxHeader.StdId = 0x321;
 8000306:	4b17      	ldr	r3, [pc, #92]	@ (8000364 <main+0xac>)
 8000308:	f240 3221 	movw	r2, #801	@ 0x321
 800030c:	601a      	str	r2, [r3, #0]

  // Load sample data
  TxData[0] = 0x11;
 800030e:	4b16      	ldr	r3, [pc, #88]	@ (8000368 <main+0xb0>)
 8000310:	2211      	movs	r2, #17
 8000312:	701a      	strb	r2, [r3, #0]
  TxData[1] = 0x22;
 8000314:	4b14      	ldr	r3, [pc, #80]	@ (8000368 <main+0xb0>)
 8000316:	2222      	movs	r2, #34	@ 0x22
 8000318:	705a      	strb	r2, [r3, #1]
  TxData[2] = 0x33;
 800031a:	4b13      	ldr	r3, [pc, #76]	@ (8000368 <main+0xb0>)
 800031c:	2233      	movs	r2, #51	@ 0x33
 800031e:	709a      	strb	r2, [r3, #2]
  TxData[3] = 0x44;
 8000320:	4b11      	ldr	r3, [pc, #68]	@ (8000368 <main+0xb0>)
 8000322:	2244      	movs	r2, #68	@ 0x44
 8000324:	70da      	strb	r2, [r3, #3]
  TxData[4] = 0x55;
 8000326:	4b10      	ldr	r3, [pc, #64]	@ (8000368 <main+0xb0>)
 8000328:	2255      	movs	r2, #85	@ 0x55
 800032a:	711a      	strb	r2, [r3, #4]
  TxData[5] = 0x66;
 800032c:	4b0e      	ldr	r3, [pc, #56]	@ (8000368 <main+0xb0>)
 800032e:	2266      	movs	r2, #102	@ 0x66
 8000330:	715a      	strb	r2, [r3, #5]
  TxData[6] = 0x77;
 8000332:	4b0d      	ldr	r3, [pc, #52]	@ (8000368 <main+0xb0>)
 8000334:	2277      	movs	r2, #119	@ 0x77
 8000336:	719a      	strb	r2, [r3, #6]
  TxData[7] = 0x88;
 8000338:	4b0b      	ldr	r3, [pc, #44]	@ (8000368 <main+0xb0>)
 800033a:	2288      	movs	r2, #136	@ 0x88
 800033c:	71da      	strb	r2, [r3, #7]
  // Init I2C1 via CubeMX or manually
  ISM330_Init();
 800033e:	f7ff ff3d 	bl	80001bc <ISM330_Init>
//	    HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
//	    // Wait 1 second
//	    HAL_Delay(1000); // just idle loop


	    ISM330DHCX_ReadRaw(&motion);
 8000342:	1d3b      	adds	r3, r7, #4
 8000344:	4618      	mov	r0, r3
 8000346:	f7ff ff53 	bl	80001f0 <ISM330DHCX_ReadRaw>
	    sendMotionStatusToNodeA(&motion);
 800034a:	1d3b      	adds	r3, r7, #4
 800034c:	4618      	mov	r0, r3
 800034e:	f000 f91d 	bl	800058c <sendMotionStatusToNodeA>
	    HAL_Delay(1000); // just idle loop
 8000352:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000356:	f000 fb85 	bl	8000a64 <HAL_Delay>
	    ISM330DHCX_ReadRaw(&motion);
 800035a:	bf00      	nop
 800035c:	e7f1      	b.n	8000342 <main+0x8a>
 800035e:	bf00      	nop
 8000360:	2000007c 	.word	0x2000007c
 8000364:	200000a4 	.word	0x200000a4
 8000368:	200000bc 	.word	0x200000bc

0800036c <HAL_CAN_RxFifo0MsgPendingCallback>:
  }
  /* USER CODE END 3 */
}

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800036c:	b580      	push	{r7, lr}
 800036e:	b08c      	sub	sp, #48	@ 0x30
 8000370:	af00      	add	r7, sp, #0
 8000372:	6078      	str	r0, [r7, #4]
    CAN_RxHeaderTypeDef RxHeader;
    uint8_t RxData[8];

    HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, RxData);
 8000374:	f107 030c 	add.w	r3, r7, #12
 8000378:	f107 0214 	add.w	r2, r7, #20
 800037c:	2100      	movs	r1, #0
 800037e:	6878      	ldr	r0, [r7, #4]
 8000380:	f000 fe6b 	bl	800105a <HAL_CAN_GetRxMessage>

    handleCANRxMessage(RxHeader.StdId, RxData, RxHeader.DLC);
 8000384:	697b      	ldr	r3, [r7, #20]
 8000386:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000388:	b2d2      	uxtb	r2, r2
 800038a:	f107 010c 	add.w	r1, r7, #12
 800038e:	4618      	mov	r0, r3
 8000390:	f000 fab6 	bl	8000900 <handleCANRxMessage>

    HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);  // Blink LED when message received
 8000394:	2120      	movs	r1, #32
 8000396:	4803      	ldr	r0, [pc, #12]	@ (80003a4 <HAL_CAN_RxFifo0MsgPendingCallback+0x38>)
 8000398:	f001 fc5a 	bl	8001c50 <HAL_GPIO_TogglePin>
}
 800039c:	bf00      	nop
 800039e:	3730      	adds	r7, #48	@ 0x30
 80003a0:	46bd      	mov	sp, r7
 80003a2:	bd80      	pop	{r7, pc}
 80003a4:	40010800 	.word	0x40010800

080003a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80003a8:	b580      	push	{r7, lr}
 80003aa:	b090      	sub	sp, #64	@ 0x40
 80003ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80003ae:	f107 0318 	add.w	r3, r7, #24
 80003b2:	2228      	movs	r2, #40	@ 0x28
 80003b4:	2100      	movs	r1, #0
 80003b6:	4618      	mov	r0, r3
 80003b8:	f003 f8c6 	bl	8003548 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80003bc:	1d3b      	adds	r3, r7, #4
 80003be:	2200      	movs	r2, #0
 80003c0:	601a      	str	r2, [r3, #0]
 80003c2:	605a      	str	r2, [r3, #4]
 80003c4:	609a      	str	r2, [r3, #8]
 80003c6:	60da      	str	r2, [r3, #12]
 80003c8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80003ca:	2301      	movs	r3, #1
 80003cc:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80003ce:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80003d2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80003d4:	2300      	movs	r3, #0
 80003d6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80003d8:	2301      	movs	r3, #1
 80003da:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80003dc:	2302      	movs	r3, #2
 80003de:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80003e0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80003e4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80003e6:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 80003ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80003ec:	f107 0318 	add.w	r3, r7, #24
 80003f0:	4618      	mov	r0, r3
 80003f2:	f002 fcad 	bl	8002d50 <HAL_RCC_OscConfig>
 80003f6:	4603      	mov	r3, r0
 80003f8:	2b00      	cmp	r3, #0
 80003fa:	d001      	beq.n	8000400 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80003fc:	f000 f906 	bl	800060c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000400:	230f      	movs	r3, #15
 8000402:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000404:	2302      	movs	r3, #2
 8000406:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000408:	2300      	movs	r3, #0
 800040a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800040c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000410:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000412:	2300      	movs	r3, #0
 8000414:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000416:	1d3b      	adds	r3, r7, #4
 8000418:	2102      	movs	r1, #2
 800041a:	4618      	mov	r0, r3
 800041c:	f002 ff1a 	bl	8003254 <HAL_RCC_ClockConfig>
 8000420:	4603      	mov	r3, r0
 8000422:	2b00      	cmp	r3, #0
 8000424:	d001      	beq.n	800042a <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000426:	f000 f8f1 	bl	800060c <Error_Handler>
  }
}
 800042a:	bf00      	nop
 800042c:	3740      	adds	r7, #64	@ 0x40
 800042e:	46bd      	mov	sp, r7
 8000430:	bd80      	pop	{r7, pc}
	...

08000434 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000434:	b580      	push	{r7, lr}
 8000436:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000438:	4b12      	ldr	r3, [pc, #72]	@ (8000484 <MX_I2C1_Init+0x50>)
 800043a:	4a13      	ldr	r2, [pc, #76]	@ (8000488 <MX_I2C1_Init+0x54>)
 800043c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800043e:	4b11      	ldr	r3, [pc, #68]	@ (8000484 <MX_I2C1_Init+0x50>)
 8000440:	4a12      	ldr	r2, [pc, #72]	@ (800048c <MX_I2C1_Init+0x58>)
 8000442:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000444:	4b0f      	ldr	r3, [pc, #60]	@ (8000484 <MX_I2C1_Init+0x50>)
 8000446:	2200      	movs	r2, #0
 8000448:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800044a:	4b0e      	ldr	r3, [pc, #56]	@ (8000484 <MX_I2C1_Init+0x50>)
 800044c:	2200      	movs	r2, #0
 800044e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000450:	4b0c      	ldr	r3, [pc, #48]	@ (8000484 <MX_I2C1_Init+0x50>)
 8000452:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000456:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000458:	4b0a      	ldr	r3, [pc, #40]	@ (8000484 <MX_I2C1_Init+0x50>)
 800045a:	2200      	movs	r2, #0
 800045c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800045e:	4b09      	ldr	r3, [pc, #36]	@ (8000484 <MX_I2C1_Init+0x50>)
 8000460:	2200      	movs	r2, #0
 8000462:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000464:	4b07      	ldr	r3, [pc, #28]	@ (8000484 <MX_I2C1_Init+0x50>)
 8000466:	2200      	movs	r2, #0
 8000468:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800046a:	4b06      	ldr	r3, [pc, #24]	@ (8000484 <MX_I2C1_Init+0x50>)
 800046c:	2200      	movs	r2, #0
 800046e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000470:	4804      	ldr	r0, [pc, #16]	@ (8000484 <MX_I2C1_Init+0x50>)
 8000472:	f001 fc07 	bl	8001c84 <HAL_I2C_Init>
 8000476:	4603      	mov	r3, r0
 8000478:	2b00      	cmp	r3, #0
 800047a:	d001      	beq.n	8000480 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800047c:	f000 f8c6 	bl	800060c <Error_Handler>
  }
}
 8000480:	bf00      	nop
 8000482:	bd80      	pop	{r7, pc}
 8000484:	20000028 	.word	0x20000028
 8000488:	40005400 	.word	0x40005400
 800048c:	000186a0 	.word	0x000186a0

08000490 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8000490:	b580      	push	{r7, lr}
 8000492:	b08a      	sub	sp, #40	@ 0x28
 8000494:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 8000496:	4b24      	ldr	r3, [pc, #144]	@ (8000528 <MX_CAN_Init+0x98>)
 8000498:	4a24      	ldr	r2, [pc, #144]	@ (800052c <MX_CAN_Init+0x9c>)
 800049a:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 9;
 800049c:	4b22      	ldr	r3, [pc, #136]	@ (8000528 <MX_CAN_Init+0x98>)
 800049e:	2209      	movs	r2, #9
 80004a0:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 80004a2:	4b21      	ldr	r3, [pc, #132]	@ (8000528 <MX_CAN_Init+0x98>)
 80004a4:	2200      	movs	r2, #0
 80004a6:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80004a8:	4b1f      	ldr	r3, [pc, #124]	@ (8000528 <MX_CAN_Init+0x98>)
 80004aa:	2200      	movs	r2, #0
 80004ac:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_5TQ;
 80004ae:	4b1e      	ldr	r3, [pc, #120]	@ (8000528 <MX_CAN_Init+0x98>)
 80004b0:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 80004b4:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_2TQ;
 80004b6:	4b1c      	ldr	r3, [pc, #112]	@ (8000528 <MX_CAN_Init+0x98>)
 80004b8:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80004bc:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 80004be:	4b1a      	ldr	r3, [pc, #104]	@ (8000528 <MX_CAN_Init+0x98>)
 80004c0:	2200      	movs	r2, #0
 80004c2:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 80004c4:	4b18      	ldr	r3, [pc, #96]	@ (8000528 <MX_CAN_Init+0x98>)
 80004c6:	2200      	movs	r2, #0
 80004c8:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 80004ca:	4b17      	ldr	r3, [pc, #92]	@ (8000528 <MX_CAN_Init+0x98>)
 80004cc:	2200      	movs	r2, #0
 80004ce:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 80004d0:	4b15      	ldr	r3, [pc, #84]	@ (8000528 <MX_CAN_Init+0x98>)
 80004d2:	2200      	movs	r2, #0
 80004d4:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 80004d6:	4b14      	ldr	r3, [pc, #80]	@ (8000528 <MX_CAN_Init+0x98>)
 80004d8:	2200      	movs	r2, #0
 80004da:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 80004dc:	4b12      	ldr	r3, [pc, #72]	@ (8000528 <MX_CAN_Init+0x98>)
 80004de:	2200      	movs	r2, #0
 80004e0:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 80004e2:	4811      	ldr	r0, [pc, #68]	@ (8000528 <MX_CAN_Init+0x98>)
 80004e4:	f000 fae2 	bl	8000aac <HAL_CAN_Init>
 80004e8:	4603      	mov	r3, r0
 80004ea:	2b00      	cmp	r3, #0
 80004ec:	d001      	beq.n	80004f2 <MX_CAN_Init+0x62>
  {
    Error_Handler();
 80004ee:	f000 f88d 	bl	800060c <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */
  CAN_FilterTypeDef filterConfig;
  filterConfig.FilterActivation = ENABLE;
 80004f2:	2301      	movs	r3, #1
 80004f4:	623b      	str	r3, [r7, #32]
  filterConfig.FilterBank = 0;
 80004f6:	2300      	movs	r3, #0
 80004f8:	617b      	str	r3, [r7, #20]
  filterConfig.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 80004fa:	2300      	movs	r3, #0
 80004fc:	613b      	str	r3, [r7, #16]
  filterConfig.FilterIdHigh = 0x0000;
 80004fe:	2300      	movs	r3, #0
 8000500:	603b      	str	r3, [r7, #0]
  filterConfig.FilterIdLow = 0x0000;
 8000502:	2300      	movs	r3, #0
 8000504:	607b      	str	r3, [r7, #4]
  filterConfig.FilterMaskIdHigh = 0x0000;
 8000506:	2300      	movs	r3, #0
 8000508:	60bb      	str	r3, [r7, #8]
  filterConfig.FilterMaskIdLow = 0x0000;
 800050a:	2300      	movs	r3, #0
 800050c:	60fb      	str	r3, [r7, #12]
  filterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 800050e:	2300      	movs	r3, #0
 8000510:	61bb      	str	r3, [r7, #24]
  filterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8000512:	2301      	movs	r3, #1
 8000514:	61fb      	str	r3, [r7, #28]

  HAL_CAN_ConfigFilter(&hcan, &filterConfig);
 8000516:	463b      	mov	r3, r7
 8000518:	4619      	mov	r1, r3
 800051a:	4803      	ldr	r0, [pc, #12]	@ (8000528 <MX_CAN_Init+0x98>)
 800051c:	f000 fbc1 	bl	8000ca2 <HAL_CAN_ConfigFilter>

  /* USER CODE END CAN_Init 2 */

}
 8000520:	bf00      	nop
 8000522:	3728      	adds	r7, #40	@ 0x28
 8000524:	46bd      	mov	sp, r7
 8000526:	bd80      	pop	{r7, pc}
 8000528:	2000007c 	.word	0x2000007c
 800052c:	40006400 	.word	0x40006400

08000530 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000530:	b480      	push	{r7}
 8000532:	b085      	sub	sp, #20
 8000534:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000536:	4b14      	ldr	r3, [pc, #80]	@ (8000588 <MX_GPIO_Init+0x58>)
 8000538:	699b      	ldr	r3, [r3, #24]
 800053a:	4a13      	ldr	r2, [pc, #76]	@ (8000588 <MX_GPIO_Init+0x58>)
 800053c:	f043 0320 	orr.w	r3, r3, #32
 8000540:	6193      	str	r3, [r2, #24]
 8000542:	4b11      	ldr	r3, [pc, #68]	@ (8000588 <MX_GPIO_Init+0x58>)
 8000544:	699b      	ldr	r3, [r3, #24]
 8000546:	f003 0320 	and.w	r3, r3, #32
 800054a:	60fb      	str	r3, [r7, #12]
 800054c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800054e:	4b0e      	ldr	r3, [pc, #56]	@ (8000588 <MX_GPIO_Init+0x58>)
 8000550:	699b      	ldr	r3, [r3, #24]
 8000552:	4a0d      	ldr	r2, [pc, #52]	@ (8000588 <MX_GPIO_Init+0x58>)
 8000554:	f043 0304 	orr.w	r3, r3, #4
 8000558:	6193      	str	r3, [r2, #24]
 800055a:	4b0b      	ldr	r3, [pc, #44]	@ (8000588 <MX_GPIO_Init+0x58>)
 800055c:	699b      	ldr	r3, [r3, #24]
 800055e:	f003 0304 	and.w	r3, r3, #4
 8000562:	60bb      	str	r3, [r7, #8]
 8000564:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000566:	4b08      	ldr	r3, [pc, #32]	@ (8000588 <MX_GPIO_Init+0x58>)
 8000568:	699b      	ldr	r3, [r3, #24]
 800056a:	4a07      	ldr	r2, [pc, #28]	@ (8000588 <MX_GPIO_Init+0x58>)
 800056c:	f043 0308 	orr.w	r3, r3, #8
 8000570:	6193      	str	r3, [r2, #24]
 8000572:	4b05      	ldr	r3, [pc, #20]	@ (8000588 <MX_GPIO_Init+0x58>)
 8000574:	699b      	ldr	r3, [r3, #24]
 8000576:	f003 0308 	and.w	r3, r3, #8
 800057a:	607b      	str	r3, [r7, #4]
 800057c:	687b      	ldr	r3, [r7, #4]

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 800057e:	bf00      	nop
 8000580:	3714      	adds	r7, #20
 8000582:	46bd      	mov	sp, r7
 8000584:	bc80      	pop	{r7}
 8000586:	4770      	bx	lr
 8000588:	40021000 	.word	0x40021000

0800058c <sendMotionStatusToNodeA>:

/* USER CODE BEGIN 4 */
void sendMotionStatusToNodeA(const MotionRaw_T* motion)
{
 800058c:	b580      	push	{r7, lr}
 800058e:	b08c      	sub	sp, #48	@ 0x30
 8000590:	af00      	add	r7, sp, #0
 8000592:	6078      	str	r0, [r7, #4]
    CAN_TxHeaderTypeDef txHeader;
    uint8_t txData[8];
    uint32_t txMailbox;

    txHeader.IDE = CAN_ID_STD;
 8000594:	2300      	movs	r3, #0
 8000596:	623b      	str	r3, [r7, #32]
    txHeader.RTR = CAN_RTR_DATA;
 8000598:	2300      	movs	r3, #0
 800059a:	627b      	str	r3, [r7, #36]	@ 0x24
    txHeader.DLC = 8;
 800059c:	2308      	movs	r3, #8
 800059e:	62bb      	str	r3, [r7, #40]	@ 0x28

    // Frame 1: ax, ay, az
    txHeader.StdId = 0x400;
 80005a0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80005a4:	61bb      	str	r3, [r7, #24]
    memcpy(txData, &motion->ax, 6); // ax, ay, az
 80005a6:	6879      	ldr	r1, [r7, #4]
 80005a8:	f107 0310 	add.w	r3, r7, #16
 80005ac:	2206      	movs	r2, #6
 80005ae:	4618      	mov	r0, r3
 80005b0:	f002 fff6 	bl	80035a0 <memcpy>
    txData[6] = 0xAA; // marker or padding
 80005b4:	23aa      	movs	r3, #170	@ 0xaa
 80005b6:	75bb      	strb	r3, [r7, #22]
    txData[7] = 0x55;
 80005b8:	2355      	movs	r3, #85	@ 0x55
 80005ba:	75fb      	strb	r3, [r7, #23]
    HAL_CAN_AddTxMessage(&hcan, &txHeader, txData, &txMailbox);
 80005bc:	f107 030c 	add.w	r3, r7, #12
 80005c0:	f107 0210 	add.w	r2, r7, #16
 80005c4:	f107 0118 	add.w	r1, r7, #24
 80005c8:	480f      	ldr	r0, [pc, #60]	@ (8000608 <sendMotionStatusToNodeA+0x7c>)
 80005ca:	f000 fc77 	bl	8000ebc <HAL_CAN_AddTxMessage>

    // Frame 2: gx, gy, gz
    txHeader.StdId = 0x401;
 80005ce:	f240 4301 	movw	r3, #1025	@ 0x401
 80005d2:	61bb      	str	r3, [r7, #24]
    memcpy(txData, &motion->gx, 6); // gx, gy, gz
 80005d4:	687b      	ldr	r3, [r7, #4]
 80005d6:	1d99      	adds	r1, r3, #6
 80005d8:	f107 0310 	add.w	r3, r7, #16
 80005dc:	2206      	movs	r2, #6
 80005de:	4618      	mov	r0, r3
 80005e0:	f002 ffde 	bl	80035a0 <memcpy>
    txData[6] = 0xCC;
 80005e4:	23cc      	movs	r3, #204	@ 0xcc
 80005e6:	75bb      	strb	r3, [r7, #22]
    txData[7] = 0x33;
 80005e8:	2333      	movs	r3, #51	@ 0x33
 80005ea:	75fb      	strb	r3, [r7, #23]
    HAL_CAN_AddTxMessage(&hcan, &txHeader, txData, &txMailbox);
 80005ec:	f107 030c 	add.w	r3, r7, #12
 80005f0:	f107 0210 	add.w	r2, r7, #16
 80005f4:	f107 0118 	add.w	r1, r7, #24
 80005f8:	4803      	ldr	r0, [pc, #12]	@ (8000608 <sendMotionStatusToNodeA+0x7c>)
 80005fa:	f000 fc5f 	bl	8000ebc <HAL_CAN_AddTxMessage>
}
 80005fe:	bf00      	nop
 8000600:	3730      	adds	r7, #48	@ 0x30
 8000602:	46bd      	mov	sp, r7
 8000604:	bd80      	pop	{r7, pc}
 8000606:	bf00      	nop
 8000608:	2000007c 	.word	0x2000007c

0800060c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800060c:	b480      	push	{r7}
 800060e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000610:	b672      	cpsid	i
}
 8000612:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000614:	bf00      	nop
 8000616:	e7fd      	b.n	8000614 <Error_Handler+0x8>

08000618 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000618:	b480      	push	{r7}
 800061a:	b085      	sub	sp, #20
 800061c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800061e:	4b15      	ldr	r3, [pc, #84]	@ (8000674 <HAL_MspInit+0x5c>)
 8000620:	699b      	ldr	r3, [r3, #24]
 8000622:	4a14      	ldr	r2, [pc, #80]	@ (8000674 <HAL_MspInit+0x5c>)
 8000624:	f043 0301 	orr.w	r3, r3, #1
 8000628:	6193      	str	r3, [r2, #24]
 800062a:	4b12      	ldr	r3, [pc, #72]	@ (8000674 <HAL_MspInit+0x5c>)
 800062c:	699b      	ldr	r3, [r3, #24]
 800062e:	f003 0301 	and.w	r3, r3, #1
 8000632:	60bb      	str	r3, [r7, #8]
 8000634:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000636:	4b0f      	ldr	r3, [pc, #60]	@ (8000674 <HAL_MspInit+0x5c>)
 8000638:	69db      	ldr	r3, [r3, #28]
 800063a:	4a0e      	ldr	r2, [pc, #56]	@ (8000674 <HAL_MspInit+0x5c>)
 800063c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000640:	61d3      	str	r3, [r2, #28]
 8000642:	4b0c      	ldr	r3, [pc, #48]	@ (8000674 <HAL_MspInit+0x5c>)
 8000644:	69db      	ldr	r3, [r3, #28]
 8000646:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800064a:	607b      	str	r3, [r7, #4]
 800064c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800064e:	4b0a      	ldr	r3, [pc, #40]	@ (8000678 <HAL_MspInit+0x60>)
 8000650:	685b      	ldr	r3, [r3, #4]
 8000652:	60fb      	str	r3, [r7, #12]
 8000654:	68fb      	ldr	r3, [r7, #12]
 8000656:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800065a:	60fb      	str	r3, [r7, #12]
 800065c:	68fb      	ldr	r3, [r7, #12]
 800065e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000662:	60fb      	str	r3, [r7, #12]
 8000664:	4a04      	ldr	r2, [pc, #16]	@ (8000678 <HAL_MspInit+0x60>)
 8000666:	68fb      	ldr	r3, [r7, #12]
 8000668:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800066a:	bf00      	nop
 800066c:	3714      	adds	r7, #20
 800066e:	46bd      	mov	sp, r7
 8000670:	bc80      	pop	{r7}
 8000672:	4770      	bx	lr
 8000674:	40021000 	.word	0x40021000
 8000678:	40010000 	.word	0x40010000

0800067c <HAL_CAN_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hcan: CAN handle pointer
  * @retval None
  */
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	b088      	sub	sp, #32
 8000680:	af00      	add	r7, sp, #0
 8000682:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000684:	f107 0310 	add.w	r3, r7, #16
 8000688:	2200      	movs	r2, #0
 800068a:	601a      	str	r2, [r3, #0]
 800068c:	605a      	str	r2, [r3, #4]
 800068e:	609a      	str	r2, [r3, #8]
 8000690:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 8000692:	687b      	ldr	r3, [r7, #4]
 8000694:	681b      	ldr	r3, [r3, #0]
 8000696:	4a20      	ldr	r2, [pc, #128]	@ (8000718 <HAL_CAN_MspInit+0x9c>)
 8000698:	4293      	cmp	r3, r2
 800069a:	d139      	bne.n	8000710 <HAL_CAN_MspInit+0x94>
  {
    /* USER CODE BEGIN CAN1_MspInit 0 */

    /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800069c:	4b1f      	ldr	r3, [pc, #124]	@ (800071c <HAL_CAN_MspInit+0xa0>)
 800069e:	69db      	ldr	r3, [r3, #28]
 80006a0:	4a1e      	ldr	r2, [pc, #120]	@ (800071c <HAL_CAN_MspInit+0xa0>)
 80006a2:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80006a6:	61d3      	str	r3, [r2, #28]
 80006a8:	4b1c      	ldr	r3, [pc, #112]	@ (800071c <HAL_CAN_MspInit+0xa0>)
 80006aa:	69db      	ldr	r3, [r3, #28]
 80006ac:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80006b0:	60fb      	str	r3, [r7, #12]
 80006b2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006b4:	4b19      	ldr	r3, [pc, #100]	@ (800071c <HAL_CAN_MspInit+0xa0>)
 80006b6:	699b      	ldr	r3, [r3, #24]
 80006b8:	4a18      	ldr	r2, [pc, #96]	@ (800071c <HAL_CAN_MspInit+0xa0>)
 80006ba:	f043 0304 	orr.w	r3, r3, #4
 80006be:	6193      	str	r3, [r2, #24]
 80006c0:	4b16      	ldr	r3, [pc, #88]	@ (800071c <HAL_CAN_MspInit+0xa0>)
 80006c2:	699b      	ldr	r3, [r3, #24]
 80006c4:	f003 0304 	and.w	r3, r3, #4
 80006c8:	60bb      	str	r3, [r7, #8]
 80006ca:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80006cc:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80006d0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006d2:	2300      	movs	r3, #0
 80006d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006d6:	2300      	movs	r3, #0
 80006d8:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006da:	f107 0310 	add.w	r3, r7, #16
 80006de:	4619      	mov	r1, r3
 80006e0:	480f      	ldr	r0, [pc, #60]	@ (8000720 <HAL_CAN_MspInit+0xa4>)
 80006e2:	f001 f931 	bl	8001948 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80006e6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80006ea:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006ec:	2302      	movs	r3, #2
 80006ee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80006f0:	2303      	movs	r3, #3
 80006f2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006f4:	f107 0310 	add.w	r3, r7, #16
 80006f8:	4619      	mov	r1, r3
 80006fa:	4809      	ldr	r0, [pc, #36]	@ (8000720 <HAL_CAN_MspInit+0xa4>)
 80006fc:	f001 f924 	bl	8001948 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8000700:	2200      	movs	r2, #0
 8000702:	2100      	movs	r1, #0
 8000704:	2014      	movs	r0, #20
 8000706:	f001 f8e8 	bl	80018da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800070a:	2014      	movs	r0, #20
 800070c:	f001 f901 	bl	8001912 <HAL_NVIC_EnableIRQ>

    /* USER CODE END CAN1_MspInit 1 */

  }

}
 8000710:	bf00      	nop
 8000712:	3720      	adds	r7, #32
 8000714:	46bd      	mov	sp, r7
 8000716:	bd80      	pop	{r7, pc}
 8000718:	40006400 	.word	0x40006400
 800071c:	40021000 	.word	0x40021000
 8000720:	40010800 	.word	0x40010800

08000724 <HAL_I2C_MspInit>:
    /* USER CODE END CAN1_MspDeInit 1 */
  }

}
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	b088      	sub	sp, #32
 8000728:	af00      	add	r7, sp, #0
 800072a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800072c:	f107 0310 	add.w	r3, r7, #16
 8000730:	2200      	movs	r2, #0
 8000732:	601a      	str	r2, [r3, #0]
 8000734:	605a      	str	r2, [r3, #4]
 8000736:	609a      	str	r2, [r3, #8]
 8000738:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	681b      	ldr	r3, [r3, #0]
 800073e:	4a15      	ldr	r2, [pc, #84]	@ (8000794 <HAL_I2C_MspInit+0x70>)
 8000740:	4293      	cmp	r3, r2
 8000742:	d123      	bne.n	800078c <HAL_I2C_MspInit+0x68>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000744:	4b14      	ldr	r3, [pc, #80]	@ (8000798 <HAL_I2C_MspInit+0x74>)
 8000746:	699b      	ldr	r3, [r3, #24]
 8000748:	4a13      	ldr	r2, [pc, #76]	@ (8000798 <HAL_I2C_MspInit+0x74>)
 800074a:	f043 0308 	orr.w	r3, r3, #8
 800074e:	6193      	str	r3, [r2, #24]
 8000750:	4b11      	ldr	r3, [pc, #68]	@ (8000798 <HAL_I2C_MspInit+0x74>)
 8000752:	699b      	ldr	r3, [r3, #24]
 8000754:	f003 0308 	and.w	r3, r3, #8
 8000758:	60fb      	str	r3, [r7, #12]
 800075a:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800075c:	23c0      	movs	r3, #192	@ 0xc0
 800075e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000760:	2312      	movs	r3, #18
 8000762:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000764:	2303      	movs	r3, #3
 8000766:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000768:	f107 0310 	add.w	r3, r7, #16
 800076c:	4619      	mov	r1, r3
 800076e:	480b      	ldr	r0, [pc, #44]	@ (800079c <HAL_I2C_MspInit+0x78>)
 8000770:	f001 f8ea 	bl	8001948 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000774:	4b08      	ldr	r3, [pc, #32]	@ (8000798 <HAL_I2C_MspInit+0x74>)
 8000776:	69db      	ldr	r3, [r3, #28]
 8000778:	4a07      	ldr	r2, [pc, #28]	@ (8000798 <HAL_I2C_MspInit+0x74>)
 800077a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800077e:	61d3      	str	r3, [r2, #28]
 8000780:	4b05      	ldr	r3, [pc, #20]	@ (8000798 <HAL_I2C_MspInit+0x74>)
 8000782:	69db      	ldr	r3, [r3, #28]
 8000784:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000788:	60bb      	str	r3, [r7, #8]
 800078a:	68bb      	ldr	r3, [r7, #8]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 800078c:	bf00      	nop
 800078e:	3720      	adds	r7, #32
 8000790:	46bd      	mov	sp, r7
 8000792:	bd80      	pop	{r7, pc}
 8000794:	40005400 	.word	0x40005400
 8000798:	40021000 	.word	0x40021000
 800079c:	40010c00 	.word	0x40010c00

080007a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007a0:	b480      	push	{r7}
 80007a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80007a4:	bf00      	nop
 80007a6:	e7fd      	b.n	80007a4 <NMI_Handler+0x4>

080007a8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007a8:	b480      	push	{r7}
 80007aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007ac:	bf00      	nop
 80007ae:	e7fd      	b.n	80007ac <HardFault_Handler+0x4>

080007b0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80007b0:	b480      	push	{r7}
 80007b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80007b4:	bf00      	nop
 80007b6:	e7fd      	b.n	80007b4 <MemManage_Handler+0x4>

080007b8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80007b8:	b480      	push	{r7}
 80007ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80007bc:	bf00      	nop
 80007be:	e7fd      	b.n	80007bc <BusFault_Handler+0x4>

080007c0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80007c0:	b480      	push	{r7}
 80007c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80007c4:	bf00      	nop
 80007c6:	e7fd      	b.n	80007c4 <UsageFault_Handler+0x4>

080007c8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80007c8:	b480      	push	{r7}
 80007ca:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80007cc:	bf00      	nop
 80007ce:	46bd      	mov	sp, r7
 80007d0:	bc80      	pop	{r7}
 80007d2:	4770      	bx	lr

080007d4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80007d4:	b480      	push	{r7}
 80007d6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80007d8:	bf00      	nop
 80007da:	46bd      	mov	sp, r7
 80007dc:	bc80      	pop	{r7}
 80007de:	4770      	bx	lr

080007e0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80007e0:	b480      	push	{r7}
 80007e2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80007e4:	bf00      	nop
 80007e6:	46bd      	mov	sp, r7
 80007e8:	bc80      	pop	{r7}
 80007ea:	4770      	bx	lr

080007ec <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80007f0:	f000 f91c 	bl	8000a2c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80007f4:	bf00      	nop
 80007f6:	bd80      	pop	{r7, pc}

080007f8 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 80007fc:	4802      	ldr	r0, [pc, #8]	@ (8000808 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 80007fe:	f000 fd72 	bl	80012e6 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8000802:	bf00      	nop
 8000804:	bd80      	pop	{r7, pc}
 8000806:	bf00      	nop
 8000808:	2000007c 	.word	0x2000007c

0800080c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800080c:	b480      	push	{r7}
 800080e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000810:	bf00      	nop
 8000812:	46bd      	mov	sp, r7
 8000814:	bc80      	pop	{r7}
 8000816:	4770      	bx	lr

08000818 <sendFuelEconomyMessage>:
// Global data storage
vehicleInfo_T vehicleData;
EngineeInfo_T engineData;
extern CAN_HandleTypeDef hcan;
// Send fuel economy status
void sendFuelEconomyMessage(uint8_t status) {
 8000818:	b580      	push	{r7, lr}
 800081a:	b08c      	sub	sp, #48	@ 0x30
 800081c:	af00      	add	r7, sp, #0
 800081e:	4603      	mov	r3, r0
 8000820:	71fb      	strb	r3, [r7, #7]
    CAN_TxHeaderTypeDef TxHeader;
    uint8_t txData[8] = {0};
 8000822:	f107 0310 	add.w	r3, r7, #16
 8000826:	2200      	movs	r2, #0
 8000828:	601a      	str	r2, [r3, #0]
 800082a:	605a      	str	r2, [r3, #4]
    uint32_t txMailbox;

    TxHeader.StdId = 0x500;
 800082c:	f44f 63a0 	mov.w	r3, #1280	@ 0x500
 8000830:	61bb      	str	r3, [r7, #24]
    TxHeader.IDE = CAN_ID_STD;
 8000832:	2300      	movs	r3, #0
 8000834:	623b      	str	r3, [r7, #32]
    TxHeader.RTR = CAN_RTR_DATA;
 8000836:	2300      	movs	r3, #0
 8000838:	627b      	str	r3, [r7, #36]	@ 0x24
    TxHeader.DLC = 1;
 800083a:	2301      	movs	r3, #1
 800083c:	62bb      	str	r3, [r7, #40]	@ 0x28

    txData[0] = status;
 800083e:	79fb      	ldrb	r3, [r7, #7]
 8000840:	743b      	strb	r3, [r7, #16]

    HAL_CAN_AddTxMessage(&hcan, &TxHeader, txData, &txMailbox);
 8000842:	f107 030c 	add.w	r3, r7, #12
 8000846:	f107 0210 	add.w	r2, r7, #16
 800084a:	f107 0118 	add.w	r1, r7, #24
 800084e:	4803      	ldr	r0, [pc, #12]	@ (800085c <sendFuelEconomyMessage+0x44>)
 8000850:	f000 fb34 	bl	8000ebc <HAL_CAN_AddTxMessage>
}
 8000854:	bf00      	nop
 8000856:	3730      	adds	r7, #48	@ 0x30
 8000858:	46bd      	mov	sp, r7
 800085a:	bd80      	pop	{r7, pc}
 800085c:	2000007c 	.word	0x2000007c

08000860 <FuelEconomy_Ctrl>:

// Decision logic
void FuelEconomy_Ctrl(void) {
 8000860:	b580      	push	{r7, lr}
 8000862:	b082      	sub	sp, #8
 8000864:	af00      	add	r7, sp, #0
    uint8_t fuelEconomyStatus = 0;
 8000866:	2300      	movs	r3, #0
 8000868:	71fb      	strb	r3, [r7, #7]

    uint8_t EngineSpeed = engineData.EngineeRPM;
 800086a:	4b23      	ldr	r3, [pc, #140]	@ (80008f8 <FuelEconomy_Ctrl+0x98>)
 800086c:	781b      	ldrb	r3, [r3, #0]
 800086e:	71bb      	strb	r3, [r7, #6]
    uint8_t VehicleSpeed = vehicleData.vehicleSpeed;
 8000870:	4b22      	ldr	r3, [pc, #136]	@ (80008fc <FuelEconomy_Ctrl+0x9c>)
 8000872:	781b      	ldrb	r3, [r3, #0]
 8000874:	717b      	strb	r3, [r7, #5]

    if (EngineSpeed > 100) {
 8000876:	79bb      	ldrb	r3, [r7, #6]
 8000878:	2b64      	cmp	r3, #100	@ 0x64
 800087a:	d938      	bls.n	80008ee <FuelEconomy_Ctrl+0x8e>
        if (VehicleSpeed > 0 && VehicleSpeed < 30)
 800087c:	797b      	ldrb	r3, [r7, #5]
 800087e:	2b00      	cmp	r3, #0
 8000880:	d005      	beq.n	800088e <FuelEconomy_Ctrl+0x2e>
 8000882:	797b      	ldrb	r3, [r7, #5]
 8000884:	2b1d      	cmp	r3, #29
 8000886:	d802      	bhi.n	800088e <FuelEconomy_Ctrl+0x2e>
            fuelEconomyStatus = 0; //0x14
 8000888:	2300      	movs	r3, #0
 800088a:	71fb      	strb	r3, [r7, #7]
 800088c:	e02b      	b.n	80008e6 <FuelEconomy_Ctrl+0x86>
        else if (VehicleSpeed >= 30 && VehicleSpeed < 60)
 800088e:	797b      	ldrb	r3, [r7, #5]
 8000890:	2b1d      	cmp	r3, #29
 8000892:	d905      	bls.n	80008a0 <FuelEconomy_Ctrl+0x40>
 8000894:	797b      	ldrb	r3, [r7, #5]
 8000896:	2b3b      	cmp	r3, #59	@ 0x3b
 8000898:	d802      	bhi.n	80008a0 <FuelEconomy_Ctrl+0x40>
            fuelEconomyStatus = 1; //0x32
 800089a:	2301      	movs	r3, #1
 800089c:	71fb      	strb	r3, [r7, #7]
 800089e:	e022      	b.n	80008e6 <FuelEconomy_Ctrl+0x86>
        else if (VehicleSpeed >= 60 && VehicleSpeed < 90)
 80008a0:	797b      	ldrb	r3, [r7, #5]
 80008a2:	2b3b      	cmp	r3, #59	@ 0x3b
 80008a4:	d905      	bls.n	80008b2 <FuelEconomy_Ctrl+0x52>
 80008a6:	797b      	ldrb	r3, [r7, #5]
 80008a8:	2b59      	cmp	r3, #89	@ 0x59
 80008aa:	d802      	bhi.n	80008b2 <FuelEconomy_Ctrl+0x52>
            fuelEconomyStatus = 2; //0x50
 80008ac:	2302      	movs	r3, #2
 80008ae:	71fb      	strb	r3, [r7, #7]
 80008b0:	e019      	b.n	80008e6 <FuelEconomy_Ctrl+0x86>
        else if (VehicleSpeed >= 90 && VehicleSpeed < 120)
 80008b2:	797b      	ldrb	r3, [r7, #5]
 80008b4:	2b59      	cmp	r3, #89	@ 0x59
 80008b6:	d905      	bls.n	80008c4 <FuelEconomy_Ctrl+0x64>
 80008b8:	797b      	ldrb	r3, [r7, #5]
 80008ba:	2b77      	cmp	r3, #119	@ 0x77
 80008bc:	d802      	bhi.n	80008c4 <FuelEconomy_Ctrl+0x64>
           fuelEconomyStatus = 3; //0x64
 80008be:	2303      	movs	r3, #3
 80008c0:	71fb      	strb	r3, [r7, #7]
 80008c2:	e010      	b.n	80008e6 <FuelEconomy_Ctrl+0x86>
        else if (VehicleSpeed >= 120 && VehicleSpeed < 160)
 80008c4:	797b      	ldrb	r3, [r7, #5]
 80008c6:	2b77      	cmp	r3, #119	@ 0x77
 80008c8:	d905      	bls.n	80008d6 <FuelEconomy_Ctrl+0x76>
 80008ca:	797b      	ldrb	r3, [r7, #5]
 80008cc:	2b9f      	cmp	r3, #159	@ 0x9f
 80008ce:	d802      	bhi.n	80008d6 <FuelEconomy_Ctrl+0x76>
            fuelEconomyStatus = 4;//0x82
 80008d0:	2304      	movs	r3, #4
 80008d2:	71fb      	strb	r3, [r7, #7]
 80008d4:	e007      	b.n	80008e6 <FuelEconomy_Ctrl+0x86>
        else if (VehicleSpeed >= 160 && VehicleSpeed < 200)
 80008d6:	797b      	ldrb	r3, [r7, #5]
 80008d8:	2b9f      	cmp	r3, #159	@ 0x9f
 80008da:	d904      	bls.n	80008e6 <FuelEconomy_Ctrl+0x86>
 80008dc:	797b      	ldrb	r3, [r7, #5]
 80008de:	2bc7      	cmp	r3, #199	@ 0xc7
 80008e0:	d801      	bhi.n	80008e6 <FuelEconomy_Ctrl+0x86>
            fuelEconomyStatus = 5;//0xB4
 80008e2:	2305      	movs	r3, #5
 80008e4:	71fb      	strb	r3, [r7, #7]

        sendFuelEconomyMessage(fuelEconomyStatus);
 80008e6:	79fb      	ldrb	r3, [r7, #7]
 80008e8:	4618      	mov	r0, r3
 80008ea:	f7ff ff95 	bl	8000818 <sendFuelEconomyMessage>
    }
}
 80008ee:	bf00      	nop
 80008f0:	3708      	adds	r7, #8
 80008f2:	46bd      	mov	sp, r7
 80008f4:	bd80      	pop	{r7, pc}
 80008f6:	bf00      	nop
 80008f8:	200000c8 	.word	0x200000c8
 80008fc:	200000c4 	.word	0x200000c4

08000900 <handleCANRxMessage>:

// Called from RX callback
void handleCANRxMessage(uint32_t id, uint8_t* data, uint8_t dlc)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	b084      	sub	sp, #16
 8000904:	af00      	add	r7, sp, #0
 8000906:	60f8      	str	r0, [r7, #12]
 8000908:	60b9      	str	r1, [r7, #8]
 800090a:	4613      	mov	r3, r2
 800090c:	71fb      	strb	r3, [r7, #7]
    if (id == 0x200 && dlc >= sizeof(vehicleInfo_T))
 800090e:	68fb      	ldr	r3, [r7, #12]
 8000910:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8000914:	d108      	bne.n	8000928 <handleCANRxMessage+0x28>
 8000916:	79fb      	ldrb	r3, [r7, #7]
 8000918:	2b03      	cmp	r3, #3
 800091a:	d905      	bls.n	8000928 <handleCANRxMessage+0x28>
    {
        memcpy(&vehicleData, data, sizeof(vehicleInfo_T));
 800091c:	68bb      	ldr	r3, [r7, #8]
 800091e:	681b      	ldr	r3, [r3, #0]
 8000920:	461a      	mov	r2, r3
 8000922:	4b0a      	ldr	r3, [pc, #40]	@ (800094c <handleCANRxMessage+0x4c>)
 8000924:	601a      	str	r2, [r3, #0]
 8000926:	e00b      	b.n	8000940 <handleCANRxMessage+0x40>
    }
    else if (id == 0x300 && dlc >= sizeof(EngineeInfo_T))
 8000928:	68fb      	ldr	r3, [r7, #12]
 800092a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800092e:	d107      	bne.n	8000940 <handleCANRxMessage+0x40>
 8000930:	79fb      	ldrb	r3, [r7, #7]
 8000932:	2b03      	cmp	r3, #3
 8000934:	d904      	bls.n	8000940 <handleCANRxMessage+0x40>
    {
        memcpy(&engineData, data, sizeof(EngineeInfo_T));
 8000936:	68bb      	ldr	r3, [r7, #8]
 8000938:	681b      	ldr	r3, [r3, #0]
 800093a:	461a      	mov	r2, r3
 800093c:	4b04      	ldr	r3, [pc, #16]	@ (8000950 <handleCANRxMessage+0x50>)
 800093e:	601a      	str	r2, [r3, #0]
    }

    FuelEconomy_Ctrl();
 8000940:	f7ff ff8e 	bl	8000860 <FuelEconomy_Ctrl>
}
 8000944:	bf00      	nop
 8000946:	3710      	adds	r7, #16
 8000948:	46bd      	mov	sp, r7
 800094a:	bd80      	pop	{r7, pc}
 800094c:	200000c4 	.word	0x200000c4
 8000950:	200000c8 	.word	0x200000c8

08000954 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000954:	f7ff ff5a 	bl	800080c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000958:	480b      	ldr	r0, [pc, #44]	@ (8000988 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800095a:	490c      	ldr	r1, [pc, #48]	@ (800098c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800095c:	4a0c      	ldr	r2, [pc, #48]	@ (8000990 <LoopFillZerobss+0x16>)
  movs r3, #0
 800095e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000960:	e002      	b.n	8000968 <LoopCopyDataInit>

08000962 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000962:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000964:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000966:	3304      	adds	r3, #4

08000968 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000968:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800096a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800096c:	d3f9      	bcc.n	8000962 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800096e:	4a09      	ldr	r2, [pc, #36]	@ (8000994 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000970:	4c09      	ldr	r4, [pc, #36]	@ (8000998 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000972:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000974:	e001      	b.n	800097a <LoopFillZerobss>

08000976 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000976:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000978:	3204      	adds	r2, #4

0800097a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800097a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800097c:	d3fb      	bcc.n	8000976 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800097e:	f002 fdeb 	bl	8003558 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000982:	f7ff fc99 	bl	80002b8 <main>
  bx lr
 8000986:	4770      	bx	lr
  ldr r0, =_sdata
 8000988:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800098c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000990:	08003608 	.word	0x08003608
  ldr r2, =_sbss
 8000994:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000998:	200000d0 	.word	0x200000d0

0800099c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800099c:	e7fe      	b.n	800099c <ADC1_2_IRQHandler>
	...

080009a0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80009a4:	4b08      	ldr	r3, [pc, #32]	@ (80009c8 <HAL_Init+0x28>)
 80009a6:	681b      	ldr	r3, [r3, #0]
 80009a8:	4a07      	ldr	r2, [pc, #28]	@ (80009c8 <HAL_Init+0x28>)
 80009aa:	f043 0310 	orr.w	r3, r3, #16
 80009ae:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80009b0:	2003      	movs	r0, #3
 80009b2:	f000 ff87 	bl	80018c4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80009b6:	2000      	movs	r0, #0
 80009b8:	f000 f808 	bl	80009cc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80009bc:	f7ff fe2c 	bl	8000618 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80009c0:	2300      	movs	r3, #0
}
 80009c2:	4618      	mov	r0, r3
 80009c4:	bd80      	pop	{r7, pc}
 80009c6:	bf00      	nop
 80009c8:	40022000 	.word	0x40022000

080009cc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	b082      	sub	sp, #8
 80009d0:	af00      	add	r7, sp, #0
 80009d2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80009d4:	4b12      	ldr	r3, [pc, #72]	@ (8000a20 <HAL_InitTick+0x54>)
 80009d6:	681a      	ldr	r2, [r3, #0]
 80009d8:	4b12      	ldr	r3, [pc, #72]	@ (8000a24 <HAL_InitTick+0x58>)
 80009da:	781b      	ldrb	r3, [r3, #0]
 80009dc:	4619      	mov	r1, r3
 80009de:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80009e2:	fbb3 f3f1 	udiv	r3, r3, r1
 80009e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80009ea:	4618      	mov	r0, r3
 80009ec:	f000 ff9f 	bl	800192e <HAL_SYSTICK_Config>
 80009f0:	4603      	mov	r3, r0
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	d001      	beq.n	80009fa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80009f6:	2301      	movs	r3, #1
 80009f8:	e00e      	b.n	8000a18 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	2b0f      	cmp	r3, #15
 80009fe:	d80a      	bhi.n	8000a16 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a00:	2200      	movs	r2, #0
 8000a02:	6879      	ldr	r1, [r7, #4]
 8000a04:	f04f 30ff 	mov.w	r0, #4294967295
 8000a08:	f000 ff67 	bl	80018da <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a0c:	4a06      	ldr	r2, [pc, #24]	@ (8000a28 <HAL_InitTick+0x5c>)
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000a12:	2300      	movs	r3, #0
 8000a14:	e000      	b.n	8000a18 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000a16:	2301      	movs	r3, #1
}
 8000a18:	4618      	mov	r0, r3
 8000a1a:	3708      	adds	r7, #8
 8000a1c:	46bd      	mov	sp, r7
 8000a1e:	bd80      	pop	{r7, pc}
 8000a20:	20000000 	.word	0x20000000
 8000a24:	20000008 	.word	0x20000008
 8000a28:	20000004 	.word	0x20000004

08000a2c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a2c:	b480      	push	{r7}
 8000a2e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a30:	4b05      	ldr	r3, [pc, #20]	@ (8000a48 <HAL_IncTick+0x1c>)
 8000a32:	781b      	ldrb	r3, [r3, #0]
 8000a34:	461a      	mov	r2, r3
 8000a36:	4b05      	ldr	r3, [pc, #20]	@ (8000a4c <HAL_IncTick+0x20>)
 8000a38:	681b      	ldr	r3, [r3, #0]
 8000a3a:	4413      	add	r3, r2
 8000a3c:	4a03      	ldr	r2, [pc, #12]	@ (8000a4c <HAL_IncTick+0x20>)
 8000a3e:	6013      	str	r3, [r2, #0]
}
 8000a40:	bf00      	nop
 8000a42:	46bd      	mov	sp, r7
 8000a44:	bc80      	pop	{r7}
 8000a46:	4770      	bx	lr
 8000a48:	20000008 	.word	0x20000008
 8000a4c:	200000cc 	.word	0x200000cc

08000a50 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a50:	b480      	push	{r7}
 8000a52:	af00      	add	r7, sp, #0
  return uwTick;
 8000a54:	4b02      	ldr	r3, [pc, #8]	@ (8000a60 <HAL_GetTick+0x10>)
 8000a56:	681b      	ldr	r3, [r3, #0]
}
 8000a58:	4618      	mov	r0, r3
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	bc80      	pop	{r7}
 8000a5e:	4770      	bx	lr
 8000a60:	200000cc 	.word	0x200000cc

08000a64 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b084      	sub	sp, #16
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000a6c:	f7ff fff0 	bl	8000a50 <HAL_GetTick>
 8000a70:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000a76:	68fb      	ldr	r3, [r7, #12]
 8000a78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000a7c:	d005      	beq.n	8000a8a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000a7e:	4b0a      	ldr	r3, [pc, #40]	@ (8000aa8 <HAL_Delay+0x44>)
 8000a80:	781b      	ldrb	r3, [r3, #0]
 8000a82:	461a      	mov	r2, r3
 8000a84:	68fb      	ldr	r3, [r7, #12]
 8000a86:	4413      	add	r3, r2
 8000a88:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000a8a:	bf00      	nop
 8000a8c:	f7ff ffe0 	bl	8000a50 <HAL_GetTick>
 8000a90:	4602      	mov	r2, r0
 8000a92:	68bb      	ldr	r3, [r7, #8]
 8000a94:	1ad3      	subs	r3, r2, r3
 8000a96:	68fa      	ldr	r2, [r7, #12]
 8000a98:	429a      	cmp	r2, r3
 8000a9a:	d8f7      	bhi.n	8000a8c <HAL_Delay+0x28>
  {
  }
}
 8000a9c:	bf00      	nop
 8000a9e:	bf00      	nop
 8000aa0:	3710      	adds	r7, #16
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	bd80      	pop	{r7, pc}
 8000aa6:	bf00      	nop
 8000aa8:	20000008 	.word	0x20000008

08000aac <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	b084      	sub	sp, #16
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	d101      	bne.n	8000abe <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8000aba:	2301      	movs	r3, #1
 8000abc:	e0ed      	b.n	8000c9a <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000ac4:	b2db      	uxtb	r3, r3
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	d102      	bne.n	8000ad0 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8000aca:	6878      	ldr	r0, [r7, #4]
 8000acc:	f7ff fdd6 	bl	800067c <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	681a      	ldr	r2, [r3, #0]
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	681b      	ldr	r3, [r3, #0]
 8000ada:	f042 0201 	orr.w	r2, r2, #1
 8000ade:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000ae0:	f7ff ffb6 	bl	8000a50 <HAL_GetTick>
 8000ae4:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000ae6:	e012      	b.n	8000b0e <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000ae8:	f7ff ffb2 	bl	8000a50 <HAL_GetTick>
 8000aec:	4602      	mov	r2, r0
 8000aee:	68fb      	ldr	r3, [r7, #12]
 8000af0:	1ad3      	subs	r3, r2, r3
 8000af2:	2b0a      	cmp	r3, #10
 8000af4:	d90b      	bls.n	8000b0e <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000afa:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	2205      	movs	r2, #5
 8000b06:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000b0a:	2301      	movs	r3, #1
 8000b0c:	e0c5      	b.n	8000c9a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	681b      	ldr	r3, [r3, #0]
 8000b12:	685b      	ldr	r3, [r3, #4]
 8000b14:	f003 0301 	and.w	r3, r3, #1
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d0e5      	beq.n	8000ae8 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	681a      	ldr	r2, [r3, #0]
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	681b      	ldr	r3, [r3, #0]
 8000b26:	f022 0202 	bic.w	r2, r2, #2
 8000b2a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000b2c:	f7ff ff90 	bl	8000a50 <HAL_GetTick>
 8000b30:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000b32:	e012      	b.n	8000b5a <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000b34:	f7ff ff8c 	bl	8000a50 <HAL_GetTick>
 8000b38:	4602      	mov	r2, r0
 8000b3a:	68fb      	ldr	r3, [r7, #12]
 8000b3c:	1ad3      	subs	r3, r2, r3
 8000b3e:	2b0a      	cmp	r3, #10
 8000b40:	d90b      	bls.n	8000b5a <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000b46:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	2205      	movs	r2, #5
 8000b52:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000b56:	2301      	movs	r3, #1
 8000b58:	e09f      	b.n	8000c9a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	681b      	ldr	r3, [r3, #0]
 8000b5e:	685b      	ldr	r3, [r3, #4]
 8000b60:	f003 0302 	and.w	r3, r3, #2
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	d1e5      	bne.n	8000b34 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	7e1b      	ldrb	r3, [r3, #24]
 8000b6c:	2b01      	cmp	r3, #1
 8000b6e:	d108      	bne.n	8000b82 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	681a      	ldr	r2, [r3, #0]
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	681b      	ldr	r3, [r3, #0]
 8000b7a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8000b7e:	601a      	str	r2, [r3, #0]
 8000b80:	e007      	b.n	8000b92 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	681b      	ldr	r3, [r3, #0]
 8000b86:	681a      	ldr	r2, [r3, #0]
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8000b90:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	7e5b      	ldrb	r3, [r3, #25]
 8000b96:	2b01      	cmp	r3, #1
 8000b98:	d108      	bne.n	8000bac <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	681b      	ldr	r3, [r3, #0]
 8000b9e:	681a      	ldr	r2, [r3, #0]
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8000ba8:	601a      	str	r2, [r3, #0]
 8000baa:	e007      	b.n	8000bbc <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	681a      	ldr	r2, [r3, #0]
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	681b      	ldr	r3, [r3, #0]
 8000bb6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8000bba:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	7e9b      	ldrb	r3, [r3, #26]
 8000bc0:	2b01      	cmp	r3, #1
 8000bc2:	d108      	bne.n	8000bd6 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	681a      	ldr	r2, [r3, #0]
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	681b      	ldr	r3, [r3, #0]
 8000bce:	f042 0220 	orr.w	r2, r2, #32
 8000bd2:	601a      	str	r2, [r3, #0]
 8000bd4:	e007      	b.n	8000be6 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	681b      	ldr	r3, [r3, #0]
 8000bda:	681a      	ldr	r2, [r3, #0]
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	f022 0220 	bic.w	r2, r2, #32
 8000be4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	7edb      	ldrb	r3, [r3, #27]
 8000bea:	2b01      	cmp	r3, #1
 8000bec:	d108      	bne.n	8000c00 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	681b      	ldr	r3, [r3, #0]
 8000bf2:	681a      	ldr	r2, [r3, #0]
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	f022 0210 	bic.w	r2, r2, #16
 8000bfc:	601a      	str	r2, [r3, #0]
 8000bfe:	e007      	b.n	8000c10 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	681a      	ldr	r2, [r3, #0]
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	681b      	ldr	r3, [r3, #0]
 8000c0a:	f042 0210 	orr.w	r2, r2, #16
 8000c0e:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	7f1b      	ldrb	r3, [r3, #28]
 8000c14:	2b01      	cmp	r3, #1
 8000c16:	d108      	bne.n	8000c2a <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	681a      	ldr	r2, [r3, #0]
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	681b      	ldr	r3, [r3, #0]
 8000c22:	f042 0208 	orr.w	r2, r2, #8
 8000c26:	601a      	str	r2, [r3, #0]
 8000c28:	e007      	b.n	8000c3a <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	681b      	ldr	r3, [r3, #0]
 8000c2e:	681a      	ldr	r2, [r3, #0]
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	f022 0208 	bic.w	r2, r2, #8
 8000c38:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	7f5b      	ldrb	r3, [r3, #29]
 8000c3e:	2b01      	cmp	r3, #1
 8000c40:	d108      	bne.n	8000c54 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	681b      	ldr	r3, [r3, #0]
 8000c46:	681a      	ldr	r2, [r3, #0]
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	f042 0204 	orr.w	r2, r2, #4
 8000c50:	601a      	str	r2, [r3, #0]
 8000c52:	e007      	b.n	8000c64 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	681a      	ldr	r2, [r3, #0]
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	681b      	ldr	r3, [r3, #0]
 8000c5e:	f022 0204 	bic.w	r2, r2, #4
 8000c62:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	689a      	ldr	r2, [r3, #8]
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	68db      	ldr	r3, [r3, #12]
 8000c6c:	431a      	orrs	r2, r3
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	691b      	ldr	r3, [r3, #16]
 8000c72:	431a      	orrs	r2, r3
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	695b      	ldr	r3, [r3, #20]
 8000c78:	ea42 0103 	orr.w	r1, r2, r3
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	685b      	ldr	r3, [r3, #4]
 8000c80:	1e5a      	subs	r2, r3, #1
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	681b      	ldr	r3, [r3, #0]
 8000c86:	430a      	orrs	r2, r1
 8000c88:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	2201      	movs	r2, #1
 8000c94:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8000c98:	2300      	movs	r3, #0
}
 8000c9a:	4618      	mov	r0, r3
 8000c9c:	3710      	adds	r7, #16
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	bd80      	pop	{r7, pc}

08000ca2 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8000ca2:	b480      	push	{r7}
 8000ca4:	b087      	sub	sp, #28
 8000ca6:	af00      	add	r7, sp, #0
 8000ca8:	6078      	str	r0, [r7, #4]
 8000caa:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000cb8:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8000cba:	7cfb      	ldrb	r3, [r7, #19]
 8000cbc:	2b01      	cmp	r3, #1
 8000cbe:	d003      	beq.n	8000cc8 <HAL_CAN_ConfigFilter+0x26>
 8000cc0:	7cfb      	ldrb	r3, [r7, #19]
 8000cc2:	2b02      	cmp	r3, #2
 8000cc4:	f040 80aa 	bne.w	8000e1c <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000cc8:	697b      	ldr	r3, [r7, #20]
 8000cca:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8000cce:	f043 0201 	orr.w	r2, r3, #1
 8000cd2:	697b      	ldr	r3, [r7, #20]
 8000cd4:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8000cd8:	683b      	ldr	r3, [r7, #0]
 8000cda:	695b      	ldr	r3, [r3, #20]
 8000cdc:	f003 031f 	and.w	r3, r3, #31
 8000ce0:	2201      	movs	r2, #1
 8000ce2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ce6:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8000ce8:	697b      	ldr	r3, [r7, #20]
 8000cea:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8000cee:	68fb      	ldr	r3, [r7, #12]
 8000cf0:	43db      	mvns	r3, r3
 8000cf2:	401a      	ands	r2, r3
 8000cf4:	697b      	ldr	r3, [r7, #20]
 8000cf6:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8000cfa:	683b      	ldr	r3, [r7, #0]
 8000cfc:	69db      	ldr	r3, [r3, #28]
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d123      	bne.n	8000d4a <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8000d02:	697b      	ldr	r3, [r7, #20]
 8000d04:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8000d08:	68fb      	ldr	r3, [r7, #12]
 8000d0a:	43db      	mvns	r3, r3
 8000d0c:	401a      	ands	r2, r3
 8000d0e:	697b      	ldr	r3, [r7, #20]
 8000d10:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000d14:	683b      	ldr	r3, [r7, #0]
 8000d16:	68db      	ldr	r3, [r3, #12]
 8000d18:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000d1a:	683b      	ldr	r3, [r7, #0]
 8000d1c:	685b      	ldr	r3, [r3, #4]
 8000d1e:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000d20:	683a      	ldr	r2, [r7, #0]
 8000d22:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000d24:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000d26:	697b      	ldr	r3, [r7, #20]
 8000d28:	3248      	adds	r2, #72	@ 0x48
 8000d2a:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000d2e:	683b      	ldr	r3, [r7, #0]
 8000d30:	689b      	ldr	r3, [r3, #8]
 8000d32:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8000d34:	683b      	ldr	r3, [r7, #0]
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000d3a:	683b      	ldr	r3, [r7, #0]
 8000d3c:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000d3e:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000d40:	6979      	ldr	r1, [r7, #20]
 8000d42:	3348      	adds	r3, #72	@ 0x48
 8000d44:	00db      	lsls	r3, r3, #3
 8000d46:	440b      	add	r3, r1
 8000d48:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8000d4a:	683b      	ldr	r3, [r7, #0]
 8000d4c:	69db      	ldr	r3, [r3, #28]
 8000d4e:	2b01      	cmp	r3, #1
 8000d50:	d122      	bne.n	8000d98 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8000d52:	697b      	ldr	r3, [r7, #20]
 8000d54:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8000d58:	68fb      	ldr	r3, [r7, #12]
 8000d5a:	431a      	orrs	r2, r3
 8000d5c:	697b      	ldr	r3, [r7, #20]
 8000d5e:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000d62:	683b      	ldr	r3, [r7, #0]
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000d68:	683b      	ldr	r3, [r7, #0]
 8000d6a:	685b      	ldr	r3, [r3, #4]
 8000d6c:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000d6e:	683a      	ldr	r2, [r7, #0]
 8000d70:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000d72:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000d74:	697b      	ldr	r3, [r7, #20]
 8000d76:	3248      	adds	r2, #72	@ 0x48
 8000d78:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000d7c:	683b      	ldr	r3, [r7, #0]
 8000d7e:	689b      	ldr	r3, [r3, #8]
 8000d80:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8000d82:	683b      	ldr	r3, [r7, #0]
 8000d84:	68db      	ldr	r3, [r3, #12]
 8000d86:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000d88:	683b      	ldr	r3, [r7, #0]
 8000d8a:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000d8c:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000d8e:	6979      	ldr	r1, [r7, #20]
 8000d90:	3348      	adds	r3, #72	@ 0x48
 8000d92:	00db      	lsls	r3, r3, #3
 8000d94:	440b      	add	r3, r1
 8000d96:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8000d98:	683b      	ldr	r3, [r7, #0]
 8000d9a:	699b      	ldr	r3, [r3, #24]
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d109      	bne.n	8000db4 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8000da0:	697b      	ldr	r3, [r7, #20]
 8000da2:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8000da6:	68fb      	ldr	r3, [r7, #12]
 8000da8:	43db      	mvns	r3, r3
 8000daa:	401a      	ands	r2, r3
 8000dac:	697b      	ldr	r3, [r7, #20]
 8000dae:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 8000db2:	e007      	b.n	8000dc4 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8000db4:	697b      	ldr	r3, [r7, #20]
 8000db6:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8000dba:	68fb      	ldr	r3, [r7, #12]
 8000dbc:	431a      	orrs	r2, r3
 8000dbe:	697b      	ldr	r3, [r7, #20]
 8000dc0:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8000dc4:	683b      	ldr	r3, [r7, #0]
 8000dc6:	691b      	ldr	r3, [r3, #16]
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d109      	bne.n	8000de0 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8000dcc:	697b      	ldr	r3, [r7, #20]
 8000dce:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8000dd2:	68fb      	ldr	r3, [r7, #12]
 8000dd4:	43db      	mvns	r3, r3
 8000dd6:	401a      	ands	r2, r3
 8000dd8:	697b      	ldr	r3, [r7, #20]
 8000dda:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 8000dde:	e007      	b.n	8000df0 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8000de0:	697b      	ldr	r3, [r7, #20]
 8000de2:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8000de6:	68fb      	ldr	r3, [r7, #12]
 8000de8:	431a      	orrs	r2, r3
 8000dea:	697b      	ldr	r3, [r7, #20]
 8000dec:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8000df0:	683b      	ldr	r3, [r7, #0]
 8000df2:	6a1b      	ldr	r3, [r3, #32]
 8000df4:	2b01      	cmp	r3, #1
 8000df6:	d107      	bne.n	8000e08 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8000df8:	697b      	ldr	r3, [r7, #20]
 8000dfa:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8000dfe:	68fb      	ldr	r3, [r7, #12]
 8000e00:	431a      	orrs	r2, r3
 8000e02:	697b      	ldr	r3, [r7, #20]
 8000e04:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000e08:	697b      	ldr	r3, [r7, #20]
 8000e0a:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8000e0e:	f023 0201 	bic.w	r2, r3, #1
 8000e12:	697b      	ldr	r3, [r7, #20]
 8000e14:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 8000e18:	2300      	movs	r3, #0
 8000e1a:	e006      	b.n	8000e2a <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000e20:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8000e28:	2301      	movs	r3, #1
  }
}
 8000e2a:	4618      	mov	r0, r3
 8000e2c:	371c      	adds	r7, #28
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	bc80      	pop	{r7}
 8000e32:	4770      	bx	lr

08000e34 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b084      	sub	sp, #16
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000e42:	b2db      	uxtb	r3, r3
 8000e44:	2b01      	cmp	r3, #1
 8000e46:	d12e      	bne.n	8000ea6 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	2202      	movs	r2, #2
 8000e4c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	681a      	ldr	r2, [r3, #0]
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	f022 0201 	bic.w	r2, r2, #1
 8000e5e:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8000e60:	f7ff fdf6 	bl	8000a50 <HAL_GetTick>
 8000e64:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8000e66:	e012      	b.n	8000e8e <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000e68:	f7ff fdf2 	bl	8000a50 <HAL_GetTick>
 8000e6c:	4602      	mov	r2, r0
 8000e6e:	68fb      	ldr	r3, [r7, #12]
 8000e70:	1ad3      	subs	r3, r2, r3
 8000e72:	2b0a      	cmp	r3, #10
 8000e74:	d90b      	bls.n	8000e8e <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000e7a:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	2205      	movs	r2, #5
 8000e86:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8000e8a:	2301      	movs	r3, #1
 8000e8c:	e012      	b.n	8000eb4 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	685b      	ldr	r3, [r3, #4]
 8000e94:	f003 0301 	and.w	r3, r3, #1
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d1e5      	bne.n	8000e68 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	e006      	b.n	8000eb4 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000eaa:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8000eb2:	2301      	movs	r3, #1
  }
}
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	3710      	adds	r7, #16
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	bd80      	pop	{r7, pc}

08000ebc <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8000ebc:	b480      	push	{r7}
 8000ebe:	b089      	sub	sp, #36	@ 0x24
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	60f8      	str	r0, [r7, #12]
 8000ec4:	60b9      	str	r1, [r7, #8]
 8000ec6:	607a      	str	r2, [r7, #4]
 8000ec8:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8000eca:	68fb      	ldr	r3, [r7, #12]
 8000ecc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000ed0:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8000ed2:	68fb      	ldr	r3, [r7, #12]
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	689b      	ldr	r3, [r3, #8]
 8000ed8:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8000eda:	7ffb      	ldrb	r3, [r7, #31]
 8000edc:	2b01      	cmp	r3, #1
 8000ede:	d003      	beq.n	8000ee8 <HAL_CAN_AddTxMessage+0x2c>
 8000ee0:	7ffb      	ldrb	r3, [r7, #31]
 8000ee2:	2b02      	cmp	r3, #2
 8000ee4:	f040 80ad 	bne.w	8001042 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8000ee8:	69bb      	ldr	r3, [r7, #24]
 8000eea:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d10a      	bne.n	8000f08 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8000ef2:	69bb      	ldr	r3, [r7, #24]
 8000ef4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d105      	bne.n	8000f08 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8000efc:	69bb      	ldr	r3, [r7, #24]
 8000efe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	f000 8095 	beq.w	8001032 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8000f08:	69bb      	ldr	r3, [r7, #24]
 8000f0a:	0e1b      	lsrs	r3, r3, #24
 8000f0c:	f003 0303 	and.w	r3, r3, #3
 8000f10:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8000f12:	2201      	movs	r2, #1
 8000f14:	697b      	ldr	r3, [r7, #20]
 8000f16:	409a      	lsls	r2, r3
 8000f18:	683b      	ldr	r3, [r7, #0]
 8000f1a:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8000f1c:	68bb      	ldr	r3, [r7, #8]
 8000f1e:	689b      	ldr	r3, [r3, #8]
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d10d      	bne.n	8000f40 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8000f24:	68bb      	ldr	r3, [r7, #8]
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8000f2a:	68bb      	ldr	r3, [r7, #8]
 8000f2c:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8000f2e:	68f9      	ldr	r1, [r7, #12]
 8000f30:	6809      	ldr	r1, [r1, #0]
 8000f32:	431a      	orrs	r2, r3
 8000f34:	697b      	ldr	r3, [r7, #20]
 8000f36:	3318      	adds	r3, #24
 8000f38:	011b      	lsls	r3, r3, #4
 8000f3a:	440b      	add	r3, r1
 8000f3c:	601a      	str	r2, [r3, #0]
 8000f3e:	e00f      	b.n	8000f60 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000f40:	68bb      	ldr	r3, [r7, #8]
 8000f42:	685b      	ldr	r3, [r3, #4]
 8000f44:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8000f46:	68bb      	ldr	r3, [r7, #8]
 8000f48:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000f4a:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8000f4c:	68bb      	ldr	r3, [r7, #8]
 8000f4e:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000f50:	68f9      	ldr	r1, [r7, #12]
 8000f52:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8000f54:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000f56:	697b      	ldr	r3, [r7, #20]
 8000f58:	3318      	adds	r3, #24
 8000f5a:	011b      	lsls	r3, r3, #4
 8000f5c:	440b      	add	r3, r1
 8000f5e:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8000f60:	68fb      	ldr	r3, [r7, #12]
 8000f62:	6819      	ldr	r1, [r3, #0]
 8000f64:	68bb      	ldr	r3, [r7, #8]
 8000f66:	691a      	ldr	r2, [r3, #16]
 8000f68:	697b      	ldr	r3, [r7, #20]
 8000f6a:	3318      	adds	r3, #24
 8000f6c:	011b      	lsls	r3, r3, #4
 8000f6e:	440b      	add	r3, r1
 8000f70:	3304      	adds	r3, #4
 8000f72:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8000f74:	68bb      	ldr	r3, [r7, #8]
 8000f76:	7d1b      	ldrb	r3, [r3, #20]
 8000f78:	2b01      	cmp	r3, #1
 8000f7a:	d111      	bne.n	8000fa0 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8000f7c:	68fb      	ldr	r3, [r7, #12]
 8000f7e:	681a      	ldr	r2, [r3, #0]
 8000f80:	697b      	ldr	r3, [r7, #20]
 8000f82:	3318      	adds	r3, #24
 8000f84:	011b      	lsls	r3, r3, #4
 8000f86:	4413      	add	r3, r2
 8000f88:	3304      	adds	r3, #4
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	68fa      	ldr	r2, [r7, #12]
 8000f8e:	6811      	ldr	r1, [r2, #0]
 8000f90:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8000f94:	697b      	ldr	r3, [r7, #20]
 8000f96:	3318      	adds	r3, #24
 8000f98:	011b      	lsls	r3, r3, #4
 8000f9a:	440b      	add	r3, r1
 8000f9c:	3304      	adds	r3, #4
 8000f9e:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	3307      	adds	r3, #7
 8000fa4:	781b      	ldrb	r3, [r3, #0]
 8000fa6:	061a      	lsls	r2, r3, #24
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	3306      	adds	r3, #6
 8000fac:	781b      	ldrb	r3, [r3, #0]
 8000fae:	041b      	lsls	r3, r3, #16
 8000fb0:	431a      	orrs	r2, r3
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	3305      	adds	r3, #5
 8000fb6:	781b      	ldrb	r3, [r3, #0]
 8000fb8:	021b      	lsls	r3, r3, #8
 8000fba:	4313      	orrs	r3, r2
 8000fbc:	687a      	ldr	r2, [r7, #4]
 8000fbe:	3204      	adds	r2, #4
 8000fc0:	7812      	ldrb	r2, [r2, #0]
 8000fc2:	4610      	mov	r0, r2
 8000fc4:	68fa      	ldr	r2, [r7, #12]
 8000fc6:	6811      	ldr	r1, [r2, #0]
 8000fc8:	ea43 0200 	orr.w	r2, r3, r0
 8000fcc:	697b      	ldr	r3, [r7, #20]
 8000fce:	011b      	lsls	r3, r3, #4
 8000fd0:	440b      	add	r3, r1
 8000fd2:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 8000fd6:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	3303      	adds	r3, #3
 8000fdc:	781b      	ldrb	r3, [r3, #0]
 8000fde:	061a      	lsls	r2, r3, #24
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	3302      	adds	r3, #2
 8000fe4:	781b      	ldrb	r3, [r3, #0]
 8000fe6:	041b      	lsls	r3, r3, #16
 8000fe8:	431a      	orrs	r2, r3
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	3301      	adds	r3, #1
 8000fee:	781b      	ldrb	r3, [r3, #0]
 8000ff0:	021b      	lsls	r3, r3, #8
 8000ff2:	4313      	orrs	r3, r2
 8000ff4:	687a      	ldr	r2, [r7, #4]
 8000ff6:	7812      	ldrb	r2, [r2, #0]
 8000ff8:	4610      	mov	r0, r2
 8000ffa:	68fa      	ldr	r2, [r7, #12]
 8000ffc:	6811      	ldr	r1, [r2, #0]
 8000ffe:	ea43 0200 	orr.w	r2, r3, r0
 8001002:	697b      	ldr	r3, [r7, #20]
 8001004:	011b      	lsls	r3, r3, #4
 8001006:	440b      	add	r3, r1
 8001008:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 800100c:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 800100e:	68fb      	ldr	r3, [r7, #12]
 8001010:	681a      	ldr	r2, [r3, #0]
 8001012:	697b      	ldr	r3, [r7, #20]
 8001014:	3318      	adds	r3, #24
 8001016:	011b      	lsls	r3, r3, #4
 8001018:	4413      	add	r3, r2
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	68fa      	ldr	r2, [r7, #12]
 800101e:	6811      	ldr	r1, [r2, #0]
 8001020:	f043 0201 	orr.w	r2, r3, #1
 8001024:	697b      	ldr	r3, [r7, #20]
 8001026:	3318      	adds	r3, #24
 8001028:	011b      	lsls	r3, r3, #4
 800102a:	440b      	add	r3, r1
 800102c:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 800102e:	2300      	movs	r3, #0
 8001030:	e00e      	b.n	8001050 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001032:	68fb      	ldr	r3, [r7, #12]
 8001034:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001036:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800103a:	68fb      	ldr	r3, [r7, #12]
 800103c:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 800103e:	2301      	movs	r3, #1
 8001040:	e006      	b.n	8001050 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001042:	68fb      	ldr	r3, [r7, #12]
 8001044:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001046:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800104a:	68fb      	ldr	r3, [r7, #12]
 800104c:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800104e:	2301      	movs	r3, #1
  }
}
 8001050:	4618      	mov	r0, r3
 8001052:	3724      	adds	r7, #36	@ 0x24
 8001054:	46bd      	mov	sp, r7
 8001056:	bc80      	pop	{r7}
 8001058:	4770      	bx	lr

0800105a <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 800105a:	b480      	push	{r7}
 800105c:	b087      	sub	sp, #28
 800105e:	af00      	add	r7, sp, #0
 8001060:	60f8      	str	r0, [r7, #12]
 8001062:	60b9      	str	r1, [r7, #8]
 8001064:	607a      	str	r2, [r7, #4]
 8001066:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001068:	68fb      	ldr	r3, [r7, #12]
 800106a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800106e:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8001070:	7dfb      	ldrb	r3, [r7, #23]
 8001072:	2b01      	cmp	r3, #1
 8001074:	d003      	beq.n	800107e <HAL_CAN_GetRxMessage+0x24>
 8001076:	7dfb      	ldrb	r3, [r7, #23]
 8001078:	2b02      	cmp	r3, #2
 800107a:	f040 8103 	bne.w	8001284 <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800107e:	68bb      	ldr	r3, [r7, #8]
 8001080:	2b00      	cmp	r3, #0
 8001082:	d10e      	bne.n	80010a2 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8001084:	68fb      	ldr	r3, [r7, #12]
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	68db      	ldr	r3, [r3, #12]
 800108a:	f003 0303 	and.w	r3, r3, #3
 800108e:	2b00      	cmp	r3, #0
 8001090:	d116      	bne.n	80010c0 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001092:	68fb      	ldr	r3, [r7, #12]
 8001094:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001096:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800109a:	68fb      	ldr	r3, [r7, #12]
 800109c:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 800109e:	2301      	movs	r3, #1
 80010a0:	e0f7      	b.n	8001292 <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80010a2:	68fb      	ldr	r3, [r7, #12]
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	691b      	ldr	r3, [r3, #16]
 80010a8:	f003 0303 	and.w	r3, r3, #3
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d107      	bne.n	80010c0 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80010b0:	68fb      	ldr	r3, [r7, #12]
 80010b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80010b4:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80010b8:	68fb      	ldr	r3, [r7, #12]
 80010ba:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 80010bc:	2301      	movs	r3, #1
 80010be:	e0e8      	b.n	8001292 <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80010c0:	68fb      	ldr	r3, [r7, #12]
 80010c2:	681a      	ldr	r2, [r3, #0]
 80010c4:	68bb      	ldr	r3, [r7, #8]
 80010c6:	331b      	adds	r3, #27
 80010c8:	011b      	lsls	r3, r3, #4
 80010ca:	4413      	add	r3, r2
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	f003 0204 	and.w	r2, r3, #4
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	689b      	ldr	r3, [r3, #8]
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d10c      	bne.n	80010f8 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80010de:	68fb      	ldr	r3, [r7, #12]
 80010e0:	681a      	ldr	r2, [r3, #0]
 80010e2:	68bb      	ldr	r3, [r7, #8]
 80010e4:	331b      	adds	r3, #27
 80010e6:	011b      	lsls	r3, r3, #4
 80010e8:	4413      	add	r3, r2
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	0d5b      	lsrs	r3, r3, #21
 80010ee:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	601a      	str	r2, [r3, #0]
 80010f6:	e00b      	b.n	8001110 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80010f8:	68fb      	ldr	r3, [r7, #12]
 80010fa:	681a      	ldr	r2, [r3, #0]
 80010fc:	68bb      	ldr	r3, [r7, #8]
 80010fe:	331b      	adds	r3, #27
 8001100:	011b      	lsls	r3, r3, #4
 8001102:	4413      	add	r3, r2
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	08db      	lsrs	r3, r3, #3
 8001108:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8001110:	68fb      	ldr	r3, [r7, #12]
 8001112:	681a      	ldr	r2, [r3, #0]
 8001114:	68bb      	ldr	r3, [r7, #8]
 8001116:	331b      	adds	r3, #27
 8001118:	011b      	lsls	r3, r3, #4
 800111a:	4413      	add	r3, r2
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	f003 0202 	and.w	r2, r3, #2
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 8001126:	68fb      	ldr	r3, [r7, #12]
 8001128:	681a      	ldr	r2, [r3, #0]
 800112a:	68bb      	ldr	r3, [r7, #8]
 800112c:	331b      	adds	r3, #27
 800112e:	011b      	lsls	r3, r3, #4
 8001130:	4413      	add	r3, r2
 8001132:	3304      	adds	r3, #4
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	f003 0308 	and.w	r3, r3, #8
 800113a:	2b00      	cmp	r3, #0
 800113c:	d003      	beq.n	8001146 <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	2208      	movs	r2, #8
 8001142:	611a      	str	r2, [r3, #16]
 8001144:	e00b      	b.n	800115e <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8001146:	68fb      	ldr	r3, [r7, #12]
 8001148:	681a      	ldr	r2, [r3, #0]
 800114a:	68bb      	ldr	r3, [r7, #8]
 800114c:	331b      	adds	r3, #27
 800114e:	011b      	lsls	r3, r3, #4
 8001150:	4413      	add	r3, r2
 8001152:	3304      	adds	r3, #4
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	f003 020f 	and.w	r2, r3, #15
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 800115e:	68fb      	ldr	r3, [r7, #12]
 8001160:	681a      	ldr	r2, [r3, #0]
 8001162:	68bb      	ldr	r3, [r7, #8]
 8001164:	331b      	adds	r3, #27
 8001166:	011b      	lsls	r3, r3, #4
 8001168:	4413      	add	r3, r2
 800116a:	3304      	adds	r3, #4
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	0a1b      	lsrs	r3, r3, #8
 8001170:	b2da      	uxtb	r2, r3
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8001176:	68fb      	ldr	r3, [r7, #12]
 8001178:	681a      	ldr	r2, [r3, #0]
 800117a:	68bb      	ldr	r3, [r7, #8]
 800117c:	331b      	adds	r3, #27
 800117e:	011b      	lsls	r3, r3, #4
 8001180:	4413      	add	r3, r2
 8001182:	3304      	adds	r3, #4
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	0c1b      	lsrs	r3, r3, #16
 8001188:	b29a      	uxth	r2, r3
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 800118e:	68fb      	ldr	r3, [r7, #12]
 8001190:	681a      	ldr	r2, [r3, #0]
 8001192:	68bb      	ldr	r3, [r7, #8]
 8001194:	011b      	lsls	r3, r3, #4
 8001196:	4413      	add	r3, r2
 8001198:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	b2da      	uxtb	r2, r3
 80011a0:	683b      	ldr	r3, [r7, #0]
 80011a2:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80011a4:	68fb      	ldr	r3, [r7, #12]
 80011a6:	681a      	ldr	r2, [r3, #0]
 80011a8:	68bb      	ldr	r3, [r7, #8]
 80011aa:	011b      	lsls	r3, r3, #4
 80011ac:	4413      	add	r3, r2
 80011ae:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	0a1a      	lsrs	r2, r3, #8
 80011b6:	683b      	ldr	r3, [r7, #0]
 80011b8:	3301      	adds	r3, #1
 80011ba:	b2d2      	uxtb	r2, r2
 80011bc:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80011be:	68fb      	ldr	r3, [r7, #12]
 80011c0:	681a      	ldr	r2, [r3, #0]
 80011c2:	68bb      	ldr	r3, [r7, #8]
 80011c4:	011b      	lsls	r3, r3, #4
 80011c6:	4413      	add	r3, r2
 80011c8:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	0c1a      	lsrs	r2, r3, #16
 80011d0:	683b      	ldr	r3, [r7, #0]
 80011d2:	3302      	adds	r3, #2
 80011d4:	b2d2      	uxtb	r2, r2
 80011d6:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80011d8:	68fb      	ldr	r3, [r7, #12]
 80011da:	681a      	ldr	r2, [r3, #0]
 80011dc:	68bb      	ldr	r3, [r7, #8]
 80011de:	011b      	lsls	r3, r3, #4
 80011e0:	4413      	add	r3, r2
 80011e2:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	0e1a      	lsrs	r2, r3, #24
 80011ea:	683b      	ldr	r3, [r7, #0]
 80011ec:	3303      	adds	r3, #3
 80011ee:	b2d2      	uxtb	r2, r2
 80011f0:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80011f2:	68fb      	ldr	r3, [r7, #12]
 80011f4:	681a      	ldr	r2, [r3, #0]
 80011f6:	68bb      	ldr	r3, [r7, #8]
 80011f8:	011b      	lsls	r3, r3, #4
 80011fa:	4413      	add	r3, r2
 80011fc:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001200:	681a      	ldr	r2, [r3, #0]
 8001202:	683b      	ldr	r3, [r7, #0]
 8001204:	3304      	adds	r3, #4
 8001206:	b2d2      	uxtb	r2, r2
 8001208:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 800120a:	68fb      	ldr	r3, [r7, #12]
 800120c:	681a      	ldr	r2, [r3, #0]
 800120e:	68bb      	ldr	r3, [r7, #8]
 8001210:	011b      	lsls	r3, r3, #4
 8001212:	4413      	add	r3, r2
 8001214:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	0a1a      	lsrs	r2, r3, #8
 800121c:	683b      	ldr	r3, [r7, #0]
 800121e:	3305      	adds	r3, #5
 8001220:	b2d2      	uxtb	r2, r2
 8001222:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8001224:	68fb      	ldr	r3, [r7, #12]
 8001226:	681a      	ldr	r2, [r3, #0]
 8001228:	68bb      	ldr	r3, [r7, #8]
 800122a:	011b      	lsls	r3, r3, #4
 800122c:	4413      	add	r3, r2
 800122e:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	0c1a      	lsrs	r2, r3, #16
 8001236:	683b      	ldr	r3, [r7, #0]
 8001238:	3306      	adds	r3, #6
 800123a:	b2d2      	uxtb	r2, r2
 800123c:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 800123e:	68fb      	ldr	r3, [r7, #12]
 8001240:	681a      	ldr	r2, [r3, #0]
 8001242:	68bb      	ldr	r3, [r7, #8]
 8001244:	011b      	lsls	r3, r3, #4
 8001246:	4413      	add	r3, r2
 8001248:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	0e1a      	lsrs	r2, r3, #24
 8001250:	683b      	ldr	r3, [r7, #0]
 8001252:	3307      	adds	r3, #7
 8001254:	b2d2      	uxtb	r2, r2
 8001256:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001258:	68bb      	ldr	r3, [r7, #8]
 800125a:	2b00      	cmp	r3, #0
 800125c:	d108      	bne.n	8001270 <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 800125e:	68fb      	ldr	r3, [r7, #12]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	68da      	ldr	r2, [r3, #12]
 8001264:	68fb      	ldr	r3, [r7, #12]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	f042 0220 	orr.w	r2, r2, #32
 800126c:	60da      	str	r2, [r3, #12]
 800126e:	e007      	b.n	8001280 <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8001270:	68fb      	ldr	r3, [r7, #12]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	691a      	ldr	r2, [r3, #16]
 8001276:	68fb      	ldr	r3, [r7, #12]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	f042 0220 	orr.w	r2, r2, #32
 800127e:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8001280:	2300      	movs	r3, #0
 8001282:	e006      	b.n	8001292 <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001284:	68fb      	ldr	r3, [r7, #12]
 8001286:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001288:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800128c:	68fb      	ldr	r3, [r7, #12]
 800128e:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001290:	2301      	movs	r3, #1
  }
}
 8001292:	4618      	mov	r0, r3
 8001294:	371c      	adds	r7, #28
 8001296:	46bd      	mov	sp, r7
 8001298:	bc80      	pop	{r7}
 800129a:	4770      	bx	lr

0800129c <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 800129c:	b480      	push	{r7}
 800129e:	b085      	sub	sp, #20
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6078      	str	r0, [r7, #4]
 80012a4:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80012ac:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80012ae:	7bfb      	ldrb	r3, [r7, #15]
 80012b0:	2b01      	cmp	r3, #1
 80012b2:	d002      	beq.n	80012ba <HAL_CAN_ActivateNotification+0x1e>
 80012b4:	7bfb      	ldrb	r3, [r7, #15]
 80012b6:	2b02      	cmp	r3, #2
 80012b8:	d109      	bne.n	80012ce <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	6959      	ldr	r1, [r3, #20]
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	683a      	ldr	r2, [r7, #0]
 80012c6:	430a      	orrs	r2, r1
 80012c8:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 80012ca:	2300      	movs	r3, #0
 80012cc:	e006      	b.n	80012dc <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80012d2:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80012da:	2301      	movs	r3, #1
  }
}
 80012dc:	4618      	mov	r0, r3
 80012de:	3714      	adds	r7, #20
 80012e0:	46bd      	mov	sp, r7
 80012e2:	bc80      	pop	{r7}
 80012e4:	4770      	bx	lr

080012e6 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80012e6:	b580      	push	{r7, lr}
 80012e8:	b08a      	sub	sp, #40	@ 0x28
 80012ea:	af00      	add	r7, sp, #0
 80012ec:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80012ee:	2300      	movs	r3, #0
 80012f0:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	695b      	ldr	r3, [r3, #20]
 80012f8:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	685b      	ldr	r3, [r3, #4]
 8001300:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	689b      	ldr	r3, [r3, #8]
 8001308:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	68db      	ldr	r3, [r3, #12]
 8001310:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	691b      	ldr	r3, [r3, #16]
 8001318:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	699b      	ldr	r3, [r3, #24]
 8001320:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8001322:	6a3b      	ldr	r3, [r7, #32]
 8001324:	f003 0301 	and.w	r3, r3, #1
 8001328:	2b00      	cmp	r3, #0
 800132a:	d07c      	beq.n	8001426 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 800132c:	69bb      	ldr	r3, [r7, #24]
 800132e:	f003 0301 	and.w	r3, r3, #1
 8001332:	2b00      	cmp	r3, #0
 8001334:	d023      	beq.n	800137e <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	2201      	movs	r2, #1
 800133c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 800133e:	69bb      	ldr	r3, [r7, #24]
 8001340:	f003 0302 	and.w	r3, r3, #2
 8001344:	2b00      	cmp	r3, #0
 8001346:	d003      	beq.n	8001350 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8001348:	6878      	ldr	r0, [r7, #4]
 800134a:	f000 f983 	bl	8001654 <HAL_CAN_TxMailbox0CompleteCallback>
 800134e:	e016      	b.n	800137e <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8001350:	69bb      	ldr	r3, [r7, #24]
 8001352:	f003 0304 	and.w	r3, r3, #4
 8001356:	2b00      	cmp	r3, #0
 8001358:	d004      	beq.n	8001364 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 800135a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800135c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001360:	627b      	str	r3, [r7, #36]	@ 0x24
 8001362:	e00c      	b.n	800137e <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8001364:	69bb      	ldr	r3, [r7, #24]
 8001366:	f003 0308 	and.w	r3, r3, #8
 800136a:	2b00      	cmp	r3, #0
 800136c:	d004      	beq.n	8001378 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 800136e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001370:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001374:	627b      	str	r3, [r7, #36]	@ 0x24
 8001376:	e002      	b.n	800137e <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8001378:	6878      	ldr	r0, [r7, #4]
 800137a:	f000 f986 	bl	800168a <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 800137e:	69bb      	ldr	r3, [r7, #24]
 8001380:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001384:	2b00      	cmp	r3, #0
 8001386:	d024      	beq.n	80013d2 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001390:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8001392:	69bb      	ldr	r3, [r7, #24]
 8001394:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001398:	2b00      	cmp	r3, #0
 800139a:	d003      	beq.n	80013a4 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 800139c:	6878      	ldr	r0, [r7, #4]
 800139e:	f000 f962 	bl	8001666 <HAL_CAN_TxMailbox1CompleteCallback>
 80013a2:	e016      	b.n	80013d2 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80013a4:	69bb      	ldr	r3, [r7, #24]
 80013a6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d004      	beq.n	80013b8 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80013ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013b0:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80013b4:	627b      	str	r3, [r7, #36]	@ 0x24
 80013b6:	e00c      	b.n	80013d2 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80013b8:	69bb      	ldr	r3, [r7, #24]
 80013ba:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d004      	beq.n	80013cc <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80013c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013c4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80013c8:	627b      	str	r3, [r7, #36]	@ 0x24
 80013ca:	e002      	b.n	80013d2 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80013cc:	6878      	ldr	r0, [r7, #4]
 80013ce:	f000 f965 	bl	800169c <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80013d2:	69bb      	ldr	r3, [r7, #24]
 80013d4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d024      	beq.n	8001426 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80013e4:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80013e6:	69bb      	ldr	r3, [r7, #24]
 80013e8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d003      	beq.n	80013f8 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80013f0:	6878      	ldr	r0, [r7, #4]
 80013f2:	f000 f941 	bl	8001678 <HAL_CAN_TxMailbox2CompleteCallback>
 80013f6:	e016      	b.n	8001426 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80013f8:	69bb      	ldr	r3, [r7, #24]
 80013fa:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d004      	beq.n	800140c <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8001402:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001404:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001408:	627b      	str	r3, [r7, #36]	@ 0x24
 800140a:	e00c      	b.n	8001426 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 800140c:	69bb      	ldr	r3, [r7, #24]
 800140e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001412:	2b00      	cmp	r3, #0
 8001414:	d004      	beq.n	8001420 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8001416:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001418:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800141c:	627b      	str	r3, [r7, #36]	@ 0x24
 800141e:	e002      	b.n	8001426 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8001420:	6878      	ldr	r0, [r7, #4]
 8001422:	f000 f944 	bl	80016ae <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8001426:	6a3b      	ldr	r3, [r7, #32]
 8001428:	f003 0308 	and.w	r3, r3, #8
 800142c:	2b00      	cmp	r3, #0
 800142e:	d00c      	beq.n	800144a <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8001430:	697b      	ldr	r3, [r7, #20]
 8001432:	f003 0310 	and.w	r3, r3, #16
 8001436:	2b00      	cmp	r3, #0
 8001438:	d007      	beq.n	800144a <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 800143a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800143c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001440:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	2210      	movs	r2, #16
 8001448:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 800144a:	6a3b      	ldr	r3, [r7, #32]
 800144c:	f003 0304 	and.w	r3, r3, #4
 8001450:	2b00      	cmp	r3, #0
 8001452:	d00b      	beq.n	800146c <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8001454:	697b      	ldr	r3, [r7, #20]
 8001456:	f003 0308 	and.w	r3, r3, #8
 800145a:	2b00      	cmp	r3, #0
 800145c:	d006      	beq.n	800146c <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	2208      	movs	r2, #8
 8001464:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8001466:	6878      	ldr	r0, [r7, #4]
 8001468:	f000 f92a 	bl	80016c0 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 800146c:	6a3b      	ldr	r3, [r7, #32]
 800146e:	f003 0302 	and.w	r3, r3, #2
 8001472:	2b00      	cmp	r3, #0
 8001474:	d009      	beq.n	800148a <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	68db      	ldr	r3, [r3, #12]
 800147c:	f003 0303 	and.w	r3, r3, #3
 8001480:	2b00      	cmp	r3, #0
 8001482:	d002      	beq.n	800148a <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8001484:	6878      	ldr	r0, [r7, #4]
 8001486:	f7fe ff71 	bl	800036c <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 800148a:	6a3b      	ldr	r3, [r7, #32]
 800148c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001490:	2b00      	cmp	r3, #0
 8001492:	d00c      	beq.n	80014ae <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8001494:	693b      	ldr	r3, [r7, #16]
 8001496:	f003 0310 	and.w	r3, r3, #16
 800149a:	2b00      	cmp	r3, #0
 800149c:	d007      	beq.n	80014ae <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 800149e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014a0:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80014a4:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	2210      	movs	r2, #16
 80014ac:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80014ae:	6a3b      	ldr	r3, [r7, #32]
 80014b0:	f003 0320 	and.w	r3, r3, #32
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d00b      	beq.n	80014d0 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80014b8:	693b      	ldr	r3, [r7, #16]
 80014ba:	f003 0308 	and.w	r3, r3, #8
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d006      	beq.n	80014d0 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	2208      	movs	r2, #8
 80014c8:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80014ca:	6878      	ldr	r0, [r7, #4]
 80014cc:	f000 f90a 	bl	80016e4 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80014d0:	6a3b      	ldr	r3, [r7, #32]
 80014d2:	f003 0310 	and.w	r3, r3, #16
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d009      	beq.n	80014ee <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	691b      	ldr	r3, [r3, #16]
 80014e0:	f003 0303 	and.w	r3, r3, #3
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d002      	beq.n	80014ee <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80014e8:	6878      	ldr	r0, [r7, #4]
 80014ea:	f000 f8f2 	bl	80016d2 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80014ee:	6a3b      	ldr	r3, [r7, #32]
 80014f0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d00b      	beq.n	8001510 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80014f8:	69fb      	ldr	r3, [r7, #28]
 80014fa:	f003 0310 	and.w	r3, r3, #16
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d006      	beq.n	8001510 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	2210      	movs	r2, #16
 8001508:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 800150a:	6878      	ldr	r0, [r7, #4]
 800150c:	f000 f8f3 	bl	80016f6 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8001510:	6a3b      	ldr	r3, [r7, #32]
 8001512:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001516:	2b00      	cmp	r3, #0
 8001518:	d00b      	beq.n	8001532 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 800151a:	69fb      	ldr	r3, [r7, #28]
 800151c:	f003 0308 	and.w	r3, r3, #8
 8001520:	2b00      	cmp	r3, #0
 8001522:	d006      	beq.n	8001532 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	2208      	movs	r2, #8
 800152a:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 800152c:	6878      	ldr	r0, [r7, #4]
 800152e:	f000 f8eb 	bl	8001708 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8001532:	6a3b      	ldr	r3, [r7, #32]
 8001534:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001538:	2b00      	cmp	r3, #0
 800153a:	d07b      	beq.n	8001634 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 800153c:	69fb      	ldr	r3, [r7, #28]
 800153e:	f003 0304 	and.w	r3, r3, #4
 8001542:	2b00      	cmp	r3, #0
 8001544:	d072      	beq.n	800162c <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001546:	6a3b      	ldr	r3, [r7, #32]
 8001548:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800154c:	2b00      	cmp	r3, #0
 800154e:	d008      	beq.n	8001562 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001556:	2b00      	cmp	r3, #0
 8001558:	d003      	beq.n	8001562 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 800155a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800155c:	f043 0301 	orr.w	r3, r3, #1
 8001560:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001562:	6a3b      	ldr	r3, [r7, #32]
 8001564:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001568:	2b00      	cmp	r3, #0
 800156a:	d008      	beq.n	800157e <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001572:	2b00      	cmp	r3, #0
 8001574:	d003      	beq.n	800157e <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8001576:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001578:	f043 0302 	orr.w	r3, r3, #2
 800157c:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800157e:	6a3b      	ldr	r3, [r7, #32]
 8001580:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001584:	2b00      	cmp	r3, #0
 8001586:	d008      	beq.n	800159a <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800158e:	2b00      	cmp	r3, #0
 8001590:	d003      	beq.n	800159a <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8001592:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001594:	f043 0304 	orr.w	r3, r3, #4
 8001598:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800159a:	6a3b      	ldr	r3, [r7, #32]
 800159c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d043      	beq.n	800162c <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d03e      	beq.n	800162c <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80015b4:	2b60      	cmp	r3, #96	@ 0x60
 80015b6:	d02b      	beq.n	8001610 <HAL_CAN_IRQHandler+0x32a>
 80015b8:	2b60      	cmp	r3, #96	@ 0x60
 80015ba:	d82e      	bhi.n	800161a <HAL_CAN_IRQHandler+0x334>
 80015bc:	2b50      	cmp	r3, #80	@ 0x50
 80015be:	d022      	beq.n	8001606 <HAL_CAN_IRQHandler+0x320>
 80015c0:	2b50      	cmp	r3, #80	@ 0x50
 80015c2:	d82a      	bhi.n	800161a <HAL_CAN_IRQHandler+0x334>
 80015c4:	2b40      	cmp	r3, #64	@ 0x40
 80015c6:	d019      	beq.n	80015fc <HAL_CAN_IRQHandler+0x316>
 80015c8:	2b40      	cmp	r3, #64	@ 0x40
 80015ca:	d826      	bhi.n	800161a <HAL_CAN_IRQHandler+0x334>
 80015cc:	2b30      	cmp	r3, #48	@ 0x30
 80015ce:	d010      	beq.n	80015f2 <HAL_CAN_IRQHandler+0x30c>
 80015d0:	2b30      	cmp	r3, #48	@ 0x30
 80015d2:	d822      	bhi.n	800161a <HAL_CAN_IRQHandler+0x334>
 80015d4:	2b10      	cmp	r3, #16
 80015d6:	d002      	beq.n	80015de <HAL_CAN_IRQHandler+0x2f8>
 80015d8:	2b20      	cmp	r3, #32
 80015da:	d005      	beq.n	80015e8 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80015dc:	e01d      	b.n	800161a <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 80015de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015e0:	f043 0308 	orr.w	r3, r3, #8
 80015e4:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80015e6:	e019      	b.n	800161c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 80015e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015ea:	f043 0310 	orr.w	r3, r3, #16
 80015ee:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80015f0:	e014      	b.n	800161c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 80015f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015f4:	f043 0320 	orr.w	r3, r3, #32
 80015f8:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80015fa:	e00f      	b.n	800161c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 80015fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015fe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001602:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001604:	e00a      	b.n	800161c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8001606:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001608:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800160c:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800160e:	e005      	b.n	800161c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8001610:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001612:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001616:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001618:	e000      	b.n	800161c <HAL_CAN_IRQHandler+0x336>
            break;
 800161a:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	699a      	ldr	r2, [r3, #24]
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 800162a:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	2204      	movs	r2, #4
 8001632:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8001634:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001636:	2b00      	cmp	r3, #0
 8001638:	d008      	beq.n	800164c <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800163e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001640:	431a      	orrs	r2, r3
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8001646:	6878      	ldr	r0, [r7, #4]
 8001648:	f000 f867 	bl	800171a <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 800164c:	bf00      	nop
 800164e:	3728      	adds	r7, #40	@ 0x28
 8001650:	46bd      	mov	sp, r7
 8001652:	bd80      	pop	{r7, pc}

08001654 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001654:	b480      	push	{r7}
 8001656:	b083      	sub	sp, #12
 8001658:	af00      	add	r7, sp, #0
 800165a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 800165c:	bf00      	nop
 800165e:	370c      	adds	r7, #12
 8001660:	46bd      	mov	sp, r7
 8001662:	bc80      	pop	{r7}
 8001664:	4770      	bx	lr

08001666 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001666:	b480      	push	{r7}
 8001668:	b083      	sub	sp, #12
 800166a:	af00      	add	r7, sp, #0
 800166c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 800166e:	bf00      	nop
 8001670:	370c      	adds	r7, #12
 8001672:	46bd      	mov	sp, r7
 8001674:	bc80      	pop	{r7}
 8001676:	4770      	bx	lr

08001678 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001678:	b480      	push	{r7}
 800167a:	b083      	sub	sp, #12
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8001680:	bf00      	nop
 8001682:	370c      	adds	r7, #12
 8001684:	46bd      	mov	sp, r7
 8001686:	bc80      	pop	{r7}
 8001688:	4770      	bx	lr

0800168a <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 800168a:	b480      	push	{r7}
 800168c:	b083      	sub	sp, #12
 800168e:	af00      	add	r7, sp, #0
 8001690:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8001692:	bf00      	nop
 8001694:	370c      	adds	r7, #12
 8001696:	46bd      	mov	sp, r7
 8001698:	bc80      	pop	{r7}
 800169a:	4770      	bx	lr

0800169c <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 800169c:	b480      	push	{r7}
 800169e:	b083      	sub	sp, #12
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80016a4:	bf00      	nop
 80016a6:	370c      	adds	r7, #12
 80016a8:	46bd      	mov	sp, r7
 80016aa:	bc80      	pop	{r7}
 80016ac:	4770      	bx	lr

080016ae <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80016ae:	b480      	push	{r7}
 80016b0:	b083      	sub	sp, #12
 80016b2:	af00      	add	r7, sp, #0
 80016b4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80016b6:	bf00      	nop
 80016b8:	370c      	adds	r7, #12
 80016ba:	46bd      	mov	sp, r7
 80016bc:	bc80      	pop	{r7}
 80016be:	4770      	bx	lr

080016c0 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 80016c0:	b480      	push	{r7}
 80016c2:	b083      	sub	sp, #12
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 80016c8:	bf00      	nop
 80016ca:	370c      	adds	r7, #12
 80016cc:	46bd      	mov	sp, r7
 80016ce:	bc80      	pop	{r7}
 80016d0:	4770      	bx	lr

080016d2 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80016d2:	b480      	push	{r7}
 80016d4:	b083      	sub	sp, #12
 80016d6:	af00      	add	r7, sp, #0
 80016d8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 80016da:	bf00      	nop
 80016dc:	370c      	adds	r7, #12
 80016de:	46bd      	mov	sp, r7
 80016e0:	bc80      	pop	{r7}
 80016e2:	4770      	bx	lr

080016e4 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80016e4:	b480      	push	{r7}
 80016e6:	b083      	sub	sp, #12
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80016ec:	bf00      	nop
 80016ee:	370c      	adds	r7, #12
 80016f0:	46bd      	mov	sp, r7
 80016f2:	bc80      	pop	{r7}
 80016f4:	4770      	bx	lr

080016f6 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80016f6:	b480      	push	{r7}
 80016f8:	b083      	sub	sp, #12
 80016fa:	af00      	add	r7, sp, #0
 80016fc:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80016fe:	bf00      	nop
 8001700:	370c      	adds	r7, #12
 8001702:	46bd      	mov	sp, r7
 8001704:	bc80      	pop	{r7}
 8001706:	4770      	bx	lr

08001708 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8001708:	b480      	push	{r7}
 800170a:	b083      	sub	sp, #12
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8001710:	bf00      	nop
 8001712:	370c      	adds	r7, #12
 8001714:	46bd      	mov	sp, r7
 8001716:	bc80      	pop	{r7}
 8001718:	4770      	bx	lr

0800171a <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 800171a:	b480      	push	{r7}
 800171c:	b083      	sub	sp, #12
 800171e:	af00      	add	r7, sp, #0
 8001720:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8001722:	bf00      	nop
 8001724:	370c      	adds	r7, #12
 8001726:	46bd      	mov	sp, r7
 8001728:	bc80      	pop	{r7}
 800172a:	4770      	bx	lr

0800172c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800172c:	b480      	push	{r7}
 800172e:	b085      	sub	sp, #20
 8001730:	af00      	add	r7, sp, #0
 8001732:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	f003 0307 	and.w	r3, r3, #7
 800173a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800173c:	4b0c      	ldr	r3, [pc, #48]	@ (8001770 <__NVIC_SetPriorityGrouping+0x44>)
 800173e:	68db      	ldr	r3, [r3, #12]
 8001740:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001742:	68ba      	ldr	r2, [r7, #8]
 8001744:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001748:	4013      	ands	r3, r2
 800174a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001750:	68bb      	ldr	r3, [r7, #8]
 8001752:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001754:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001758:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800175c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800175e:	4a04      	ldr	r2, [pc, #16]	@ (8001770 <__NVIC_SetPriorityGrouping+0x44>)
 8001760:	68bb      	ldr	r3, [r7, #8]
 8001762:	60d3      	str	r3, [r2, #12]
}
 8001764:	bf00      	nop
 8001766:	3714      	adds	r7, #20
 8001768:	46bd      	mov	sp, r7
 800176a:	bc80      	pop	{r7}
 800176c:	4770      	bx	lr
 800176e:	bf00      	nop
 8001770:	e000ed00 	.word	0xe000ed00

08001774 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001774:	b480      	push	{r7}
 8001776:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001778:	4b04      	ldr	r3, [pc, #16]	@ (800178c <__NVIC_GetPriorityGrouping+0x18>)
 800177a:	68db      	ldr	r3, [r3, #12]
 800177c:	0a1b      	lsrs	r3, r3, #8
 800177e:	f003 0307 	and.w	r3, r3, #7
}
 8001782:	4618      	mov	r0, r3
 8001784:	46bd      	mov	sp, r7
 8001786:	bc80      	pop	{r7}
 8001788:	4770      	bx	lr
 800178a:	bf00      	nop
 800178c:	e000ed00 	.word	0xe000ed00

08001790 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001790:	b480      	push	{r7}
 8001792:	b083      	sub	sp, #12
 8001794:	af00      	add	r7, sp, #0
 8001796:	4603      	mov	r3, r0
 8001798:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800179a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800179e:	2b00      	cmp	r3, #0
 80017a0:	db0b      	blt.n	80017ba <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80017a2:	79fb      	ldrb	r3, [r7, #7]
 80017a4:	f003 021f 	and.w	r2, r3, #31
 80017a8:	4906      	ldr	r1, [pc, #24]	@ (80017c4 <__NVIC_EnableIRQ+0x34>)
 80017aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017ae:	095b      	lsrs	r3, r3, #5
 80017b0:	2001      	movs	r0, #1
 80017b2:	fa00 f202 	lsl.w	r2, r0, r2
 80017b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80017ba:	bf00      	nop
 80017bc:	370c      	adds	r7, #12
 80017be:	46bd      	mov	sp, r7
 80017c0:	bc80      	pop	{r7}
 80017c2:	4770      	bx	lr
 80017c4:	e000e100 	.word	0xe000e100

080017c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80017c8:	b480      	push	{r7}
 80017ca:	b083      	sub	sp, #12
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	4603      	mov	r3, r0
 80017d0:	6039      	str	r1, [r7, #0]
 80017d2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017d8:	2b00      	cmp	r3, #0
 80017da:	db0a      	blt.n	80017f2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017dc:	683b      	ldr	r3, [r7, #0]
 80017de:	b2da      	uxtb	r2, r3
 80017e0:	490c      	ldr	r1, [pc, #48]	@ (8001814 <__NVIC_SetPriority+0x4c>)
 80017e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017e6:	0112      	lsls	r2, r2, #4
 80017e8:	b2d2      	uxtb	r2, r2
 80017ea:	440b      	add	r3, r1
 80017ec:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80017f0:	e00a      	b.n	8001808 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017f2:	683b      	ldr	r3, [r7, #0]
 80017f4:	b2da      	uxtb	r2, r3
 80017f6:	4908      	ldr	r1, [pc, #32]	@ (8001818 <__NVIC_SetPriority+0x50>)
 80017f8:	79fb      	ldrb	r3, [r7, #7]
 80017fa:	f003 030f 	and.w	r3, r3, #15
 80017fe:	3b04      	subs	r3, #4
 8001800:	0112      	lsls	r2, r2, #4
 8001802:	b2d2      	uxtb	r2, r2
 8001804:	440b      	add	r3, r1
 8001806:	761a      	strb	r2, [r3, #24]
}
 8001808:	bf00      	nop
 800180a:	370c      	adds	r7, #12
 800180c:	46bd      	mov	sp, r7
 800180e:	bc80      	pop	{r7}
 8001810:	4770      	bx	lr
 8001812:	bf00      	nop
 8001814:	e000e100 	.word	0xe000e100
 8001818:	e000ed00 	.word	0xe000ed00

0800181c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800181c:	b480      	push	{r7}
 800181e:	b089      	sub	sp, #36	@ 0x24
 8001820:	af00      	add	r7, sp, #0
 8001822:	60f8      	str	r0, [r7, #12]
 8001824:	60b9      	str	r1, [r7, #8]
 8001826:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	f003 0307 	and.w	r3, r3, #7
 800182e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001830:	69fb      	ldr	r3, [r7, #28]
 8001832:	f1c3 0307 	rsb	r3, r3, #7
 8001836:	2b04      	cmp	r3, #4
 8001838:	bf28      	it	cs
 800183a:	2304      	movcs	r3, #4
 800183c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800183e:	69fb      	ldr	r3, [r7, #28]
 8001840:	3304      	adds	r3, #4
 8001842:	2b06      	cmp	r3, #6
 8001844:	d902      	bls.n	800184c <NVIC_EncodePriority+0x30>
 8001846:	69fb      	ldr	r3, [r7, #28]
 8001848:	3b03      	subs	r3, #3
 800184a:	e000      	b.n	800184e <NVIC_EncodePriority+0x32>
 800184c:	2300      	movs	r3, #0
 800184e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001850:	f04f 32ff 	mov.w	r2, #4294967295
 8001854:	69bb      	ldr	r3, [r7, #24]
 8001856:	fa02 f303 	lsl.w	r3, r2, r3
 800185a:	43da      	mvns	r2, r3
 800185c:	68bb      	ldr	r3, [r7, #8]
 800185e:	401a      	ands	r2, r3
 8001860:	697b      	ldr	r3, [r7, #20]
 8001862:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001864:	f04f 31ff 	mov.w	r1, #4294967295
 8001868:	697b      	ldr	r3, [r7, #20]
 800186a:	fa01 f303 	lsl.w	r3, r1, r3
 800186e:	43d9      	mvns	r1, r3
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001874:	4313      	orrs	r3, r2
         );
}
 8001876:	4618      	mov	r0, r3
 8001878:	3724      	adds	r7, #36	@ 0x24
 800187a:	46bd      	mov	sp, r7
 800187c:	bc80      	pop	{r7}
 800187e:	4770      	bx	lr

08001880 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	b082      	sub	sp, #8
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	3b01      	subs	r3, #1
 800188c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001890:	d301      	bcc.n	8001896 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001892:	2301      	movs	r3, #1
 8001894:	e00f      	b.n	80018b6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001896:	4a0a      	ldr	r2, [pc, #40]	@ (80018c0 <SysTick_Config+0x40>)
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	3b01      	subs	r3, #1
 800189c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800189e:	210f      	movs	r1, #15
 80018a0:	f04f 30ff 	mov.w	r0, #4294967295
 80018a4:	f7ff ff90 	bl	80017c8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80018a8:	4b05      	ldr	r3, [pc, #20]	@ (80018c0 <SysTick_Config+0x40>)
 80018aa:	2200      	movs	r2, #0
 80018ac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80018ae:	4b04      	ldr	r3, [pc, #16]	@ (80018c0 <SysTick_Config+0x40>)
 80018b0:	2207      	movs	r2, #7
 80018b2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80018b4:	2300      	movs	r3, #0
}
 80018b6:	4618      	mov	r0, r3
 80018b8:	3708      	adds	r7, #8
 80018ba:	46bd      	mov	sp, r7
 80018bc:	bd80      	pop	{r7, pc}
 80018be:	bf00      	nop
 80018c0:	e000e010 	.word	0xe000e010

080018c4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	b082      	sub	sp, #8
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80018cc:	6878      	ldr	r0, [r7, #4]
 80018ce:	f7ff ff2d 	bl	800172c <__NVIC_SetPriorityGrouping>
}
 80018d2:	bf00      	nop
 80018d4:	3708      	adds	r7, #8
 80018d6:	46bd      	mov	sp, r7
 80018d8:	bd80      	pop	{r7, pc}

080018da <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80018da:	b580      	push	{r7, lr}
 80018dc:	b086      	sub	sp, #24
 80018de:	af00      	add	r7, sp, #0
 80018e0:	4603      	mov	r3, r0
 80018e2:	60b9      	str	r1, [r7, #8]
 80018e4:	607a      	str	r2, [r7, #4]
 80018e6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80018e8:	2300      	movs	r3, #0
 80018ea:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80018ec:	f7ff ff42 	bl	8001774 <__NVIC_GetPriorityGrouping>
 80018f0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80018f2:	687a      	ldr	r2, [r7, #4]
 80018f4:	68b9      	ldr	r1, [r7, #8]
 80018f6:	6978      	ldr	r0, [r7, #20]
 80018f8:	f7ff ff90 	bl	800181c <NVIC_EncodePriority>
 80018fc:	4602      	mov	r2, r0
 80018fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001902:	4611      	mov	r1, r2
 8001904:	4618      	mov	r0, r3
 8001906:	f7ff ff5f 	bl	80017c8 <__NVIC_SetPriority>
}
 800190a:	bf00      	nop
 800190c:	3718      	adds	r7, #24
 800190e:	46bd      	mov	sp, r7
 8001910:	bd80      	pop	{r7, pc}

08001912 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001912:	b580      	push	{r7, lr}
 8001914:	b082      	sub	sp, #8
 8001916:	af00      	add	r7, sp, #0
 8001918:	4603      	mov	r3, r0
 800191a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800191c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001920:	4618      	mov	r0, r3
 8001922:	f7ff ff35 	bl	8001790 <__NVIC_EnableIRQ>
}
 8001926:	bf00      	nop
 8001928:	3708      	adds	r7, #8
 800192a:	46bd      	mov	sp, r7
 800192c:	bd80      	pop	{r7, pc}

0800192e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800192e:	b580      	push	{r7, lr}
 8001930:	b082      	sub	sp, #8
 8001932:	af00      	add	r7, sp, #0
 8001934:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001936:	6878      	ldr	r0, [r7, #4]
 8001938:	f7ff ffa2 	bl	8001880 <SysTick_Config>
 800193c:	4603      	mov	r3, r0
}
 800193e:	4618      	mov	r0, r3
 8001940:	3708      	adds	r7, #8
 8001942:	46bd      	mov	sp, r7
 8001944:	bd80      	pop	{r7, pc}
	...

08001948 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001948:	b480      	push	{r7}
 800194a:	b08b      	sub	sp, #44	@ 0x2c
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
 8001950:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001952:	2300      	movs	r3, #0
 8001954:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001956:	2300      	movs	r3, #0
 8001958:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800195a:	e169      	b.n	8001c30 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800195c:	2201      	movs	r2, #1
 800195e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001960:	fa02 f303 	lsl.w	r3, r2, r3
 8001964:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001966:	683b      	ldr	r3, [r7, #0]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	69fa      	ldr	r2, [r7, #28]
 800196c:	4013      	ands	r3, r2
 800196e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001970:	69ba      	ldr	r2, [r7, #24]
 8001972:	69fb      	ldr	r3, [r7, #28]
 8001974:	429a      	cmp	r2, r3
 8001976:	f040 8158 	bne.w	8001c2a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800197a:	683b      	ldr	r3, [r7, #0]
 800197c:	685b      	ldr	r3, [r3, #4]
 800197e:	4a9a      	ldr	r2, [pc, #616]	@ (8001be8 <HAL_GPIO_Init+0x2a0>)
 8001980:	4293      	cmp	r3, r2
 8001982:	d05e      	beq.n	8001a42 <HAL_GPIO_Init+0xfa>
 8001984:	4a98      	ldr	r2, [pc, #608]	@ (8001be8 <HAL_GPIO_Init+0x2a0>)
 8001986:	4293      	cmp	r3, r2
 8001988:	d875      	bhi.n	8001a76 <HAL_GPIO_Init+0x12e>
 800198a:	4a98      	ldr	r2, [pc, #608]	@ (8001bec <HAL_GPIO_Init+0x2a4>)
 800198c:	4293      	cmp	r3, r2
 800198e:	d058      	beq.n	8001a42 <HAL_GPIO_Init+0xfa>
 8001990:	4a96      	ldr	r2, [pc, #600]	@ (8001bec <HAL_GPIO_Init+0x2a4>)
 8001992:	4293      	cmp	r3, r2
 8001994:	d86f      	bhi.n	8001a76 <HAL_GPIO_Init+0x12e>
 8001996:	4a96      	ldr	r2, [pc, #600]	@ (8001bf0 <HAL_GPIO_Init+0x2a8>)
 8001998:	4293      	cmp	r3, r2
 800199a:	d052      	beq.n	8001a42 <HAL_GPIO_Init+0xfa>
 800199c:	4a94      	ldr	r2, [pc, #592]	@ (8001bf0 <HAL_GPIO_Init+0x2a8>)
 800199e:	4293      	cmp	r3, r2
 80019a0:	d869      	bhi.n	8001a76 <HAL_GPIO_Init+0x12e>
 80019a2:	4a94      	ldr	r2, [pc, #592]	@ (8001bf4 <HAL_GPIO_Init+0x2ac>)
 80019a4:	4293      	cmp	r3, r2
 80019a6:	d04c      	beq.n	8001a42 <HAL_GPIO_Init+0xfa>
 80019a8:	4a92      	ldr	r2, [pc, #584]	@ (8001bf4 <HAL_GPIO_Init+0x2ac>)
 80019aa:	4293      	cmp	r3, r2
 80019ac:	d863      	bhi.n	8001a76 <HAL_GPIO_Init+0x12e>
 80019ae:	4a92      	ldr	r2, [pc, #584]	@ (8001bf8 <HAL_GPIO_Init+0x2b0>)
 80019b0:	4293      	cmp	r3, r2
 80019b2:	d046      	beq.n	8001a42 <HAL_GPIO_Init+0xfa>
 80019b4:	4a90      	ldr	r2, [pc, #576]	@ (8001bf8 <HAL_GPIO_Init+0x2b0>)
 80019b6:	4293      	cmp	r3, r2
 80019b8:	d85d      	bhi.n	8001a76 <HAL_GPIO_Init+0x12e>
 80019ba:	2b12      	cmp	r3, #18
 80019bc:	d82a      	bhi.n	8001a14 <HAL_GPIO_Init+0xcc>
 80019be:	2b12      	cmp	r3, #18
 80019c0:	d859      	bhi.n	8001a76 <HAL_GPIO_Init+0x12e>
 80019c2:	a201      	add	r2, pc, #4	@ (adr r2, 80019c8 <HAL_GPIO_Init+0x80>)
 80019c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019c8:	08001a43 	.word	0x08001a43
 80019cc:	08001a1d 	.word	0x08001a1d
 80019d0:	08001a2f 	.word	0x08001a2f
 80019d4:	08001a71 	.word	0x08001a71
 80019d8:	08001a77 	.word	0x08001a77
 80019dc:	08001a77 	.word	0x08001a77
 80019e0:	08001a77 	.word	0x08001a77
 80019e4:	08001a77 	.word	0x08001a77
 80019e8:	08001a77 	.word	0x08001a77
 80019ec:	08001a77 	.word	0x08001a77
 80019f0:	08001a77 	.word	0x08001a77
 80019f4:	08001a77 	.word	0x08001a77
 80019f8:	08001a77 	.word	0x08001a77
 80019fc:	08001a77 	.word	0x08001a77
 8001a00:	08001a77 	.word	0x08001a77
 8001a04:	08001a77 	.word	0x08001a77
 8001a08:	08001a77 	.word	0x08001a77
 8001a0c:	08001a25 	.word	0x08001a25
 8001a10:	08001a39 	.word	0x08001a39
 8001a14:	4a79      	ldr	r2, [pc, #484]	@ (8001bfc <HAL_GPIO_Init+0x2b4>)
 8001a16:	4293      	cmp	r3, r2
 8001a18:	d013      	beq.n	8001a42 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001a1a:	e02c      	b.n	8001a76 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001a1c:	683b      	ldr	r3, [r7, #0]
 8001a1e:	68db      	ldr	r3, [r3, #12]
 8001a20:	623b      	str	r3, [r7, #32]
          break;
 8001a22:	e029      	b.n	8001a78 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001a24:	683b      	ldr	r3, [r7, #0]
 8001a26:	68db      	ldr	r3, [r3, #12]
 8001a28:	3304      	adds	r3, #4
 8001a2a:	623b      	str	r3, [r7, #32]
          break;
 8001a2c:	e024      	b.n	8001a78 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001a2e:	683b      	ldr	r3, [r7, #0]
 8001a30:	68db      	ldr	r3, [r3, #12]
 8001a32:	3308      	adds	r3, #8
 8001a34:	623b      	str	r3, [r7, #32]
          break;
 8001a36:	e01f      	b.n	8001a78 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001a38:	683b      	ldr	r3, [r7, #0]
 8001a3a:	68db      	ldr	r3, [r3, #12]
 8001a3c:	330c      	adds	r3, #12
 8001a3e:	623b      	str	r3, [r7, #32]
          break;
 8001a40:	e01a      	b.n	8001a78 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001a42:	683b      	ldr	r3, [r7, #0]
 8001a44:	689b      	ldr	r3, [r3, #8]
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d102      	bne.n	8001a50 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001a4a:	2304      	movs	r3, #4
 8001a4c:	623b      	str	r3, [r7, #32]
          break;
 8001a4e:	e013      	b.n	8001a78 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001a50:	683b      	ldr	r3, [r7, #0]
 8001a52:	689b      	ldr	r3, [r3, #8]
 8001a54:	2b01      	cmp	r3, #1
 8001a56:	d105      	bne.n	8001a64 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001a58:	2308      	movs	r3, #8
 8001a5a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	69fa      	ldr	r2, [r7, #28]
 8001a60:	611a      	str	r2, [r3, #16]
          break;
 8001a62:	e009      	b.n	8001a78 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001a64:	2308      	movs	r3, #8
 8001a66:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	69fa      	ldr	r2, [r7, #28]
 8001a6c:	615a      	str	r2, [r3, #20]
          break;
 8001a6e:	e003      	b.n	8001a78 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001a70:	2300      	movs	r3, #0
 8001a72:	623b      	str	r3, [r7, #32]
          break;
 8001a74:	e000      	b.n	8001a78 <HAL_GPIO_Init+0x130>
          break;
 8001a76:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001a78:	69bb      	ldr	r3, [r7, #24]
 8001a7a:	2bff      	cmp	r3, #255	@ 0xff
 8001a7c:	d801      	bhi.n	8001a82 <HAL_GPIO_Init+0x13a>
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	e001      	b.n	8001a86 <HAL_GPIO_Init+0x13e>
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	3304      	adds	r3, #4
 8001a86:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001a88:	69bb      	ldr	r3, [r7, #24]
 8001a8a:	2bff      	cmp	r3, #255	@ 0xff
 8001a8c:	d802      	bhi.n	8001a94 <HAL_GPIO_Init+0x14c>
 8001a8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a90:	009b      	lsls	r3, r3, #2
 8001a92:	e002      	b.n	8001a9a <HAL_GPIO_Init+0x152>
 8001a94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a96:	3b08      	subs	r3, #8
 8001a98:	009b      	lsls	r3, r3, #2
 8001a9a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001a9c:	697b      	ldr	r3, [r7, #20]
 8001a9e:	681a      	ldr	r2, [r3, #0]
 8001aa0:	210f      	movs	r1, #15
 8001aa2:	693b      	ldr	r3, [r7, #16]
 8001aa4:	fa01 f303 	lsl.w	r3, r1, r3
 8001aa8:	43db      	mvns	r3, r3
 8001aaa:	401a      	ands	r2, r3
 8001aac:	6a39      	ldr	r1, [r7, #32]
 8001aae:	693b      	ldr	r3, [r7, #16]
 8001ab0:	fa01 f303 	lsl.w	r3, r1, r3
 8001ab4:	431a      	orrs	r2, r3
 8001ab6:	697b      	ldr	r3, [r7, #20]
 8001ab8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001aba:	683b      	ldr	r3, [r7, #0]
 8001abc:	685b      	ldr	r3, [r3, #4]
 8001abe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	f000 80b1 	beq.w	8001c2a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001ac8:	4b4d      	ldr	r3, [pc, #308]	@ (8001c00 <HAL_GPIO_Init+0x2b8>)
 8001aca:	699b      	ldr	r3, [r3, #24]
 8001acc:	4a4c      	ldr	r2, [pc, #304]	@ (8001c00 <HAL_GPIO_Init+0x2b8>)
 8001ace:	f043 0301 	orr.w	r3, r3, #1
 8001ad2:	6193      	str	r3, [r2, #24]
 8001ad4:	4b4a      	ldr	r3, [pc, #296]	@ (8001c00 <HAL_GPIO_Init+0x2b8>)
 8001ad6:	699b      	ldr	r3, [r3, #24]
 8001ad8:	f003 0301 	and.w	r3, r3, #1
 8001adc:	60bb      	str	r3, [r7, #8]
 8001ade:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001ae0:	4a48      	ldr	r2, [pc, #288]	@ (8001c04 <HAL_GPIO_Init+0x2bc>)
 8001ae2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ae4:	089b      	lsrs	r3, r3, #2
 8001ae6:	3302      	adds	r3, #2
 8001ae8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001aec:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001aee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001af0:	f003 0303 	and.w	r3, r3, #3
 8001af4:	009b      	lsls	r3, r3, #2
 8001af6:	220f      	movs	r2, #15
 8001af8:	fa02 f303 	lsl.w	r3, r2, r3
 8001afc:	43db      	mvns	r3, r3
 8001afe:	68fa      	ldr	r2, [r7, #12]
 8001b00:	4013      	ands	r3, r2
 8001b02:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	4a40      	ldr	r2, [pc, #256]	@ (8001c08 <HAL_GPIO_Init+0x2c0>)
 8001b08:	4293      	cmp	r3, r2
 8001b0a:	d013      	beq.n	8001b34 <HAL_GPIO_Init+0x1ec>
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	4a3f      	ldr	r2, [pc, #252]	@ (8001c0c <HAL_GPIO_Init+0x2c4>)
 8001b10:	4293      	cmp	r3, r2
 8001b12:	d00d      	beq.n	8001b30 <HAL_GPIO_Init+0x1e8>
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	4a3e      	ldr	r2, [pc, #248]	@ (8001c10 <HAL_GPIO_Init+0x2c8>)
 8001b18:	4293      	cmp	r3, r2
 8001b1a:	d007      	beq.n	8001b2c <HAL_GPIO_Init+0x1e4>
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	4a3d      	ldr	r2, [pc, #244]	@ (8001c14 <HAL_GPIO_Init+0x2cc>)
 8001b20:	4293      	cmp	r3, r2
 8001b22:	d101      	bne.n	8001b28 <HAL_GPIO_Init+0x1e0>
 8001b24:	2303      	movs	r3, #3
 8001b26:	e006      	b.n	8001b36 <HAL_GPIO_Init+0x1ee>
 8001b28:	2304      	movs	r3, #4
 8001b2a:	e004      	b.n	8001b36 <HAL_GPIO_Init+0x1ee>
 8001b2c:	2302      	movs	r3, #2
 8001b2e:	e002      	b.n	8001b36 <HAL_GPIO_Init+0x1ee>
 8001b30:	2301      	movs	r3, #1
 8001b32:	e000      	b.n	8001b36 <HAL_GPIO_Init+0x1ee>
 8001b34:	2300      	movs	r3, #0
 8001b36:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001b38:	f002 0203 	and.w	r2, r2, #3
 8001b3c:	0092      	lsls	r2, r2, #2
 8001b3e:	4093      	lsls	r3, r2
 8001b40:	68fa      	ldr	r2, [r7, #12]
 8001b42:	4313      	orrs	r3, r2
 8001b44:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001b46:	492f      	ldr	r1, [pc, #188]	@ (8001c04 <HAL_GPIO_Init+0x2bc>)
 8001b48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b4a:	089b      	lsrs	r3, r3, #2
 8001b4c:	3302      	adds	r3, #2
 8001b4e:	68fa      	ldr	r2, [r7, #12]
 8001b50:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001b54:	683b      	ldr	r3, [r7, #0]
 8001b56:	685b      	ldr	r3, [r3, #4]
 8001b58:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d006      	beq.n	8001b6e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001b60:	4b2d      	ldr	r3, [pc, #180]	@ (8001c18 <HAL_GPIO_Init+0x2d0>)
 8001b62:	689a      	ldr	r2, [r3, #8]
 8001b64:	492c      	ldr	r1, [pc, #176]	@ (8001c18 <HAL_GPIO_Init+0x2d0>)
 8001b66:	69bb      	ldr	r3, [r7, #24]
 8001b68:	4313      	orrs	r3, r2
 8001b6a:	608b      	str	r3, [r1, #8]
 8001b6c:	e006      	b.n	8001b7c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001b6e:	4b2a      	ldr	r3, [pc, #168]	@ (8001c18 <HAL_GPIO_Init+0x2d0>)
 8001b70:	689a      	ldr	r2, [r3, #8]
 8001b72:	69bb      	ldr	r3, [r7, #24]
 8001b74:	43db      	mvns	r3, r3
 8001b76:	4928      	ldr	r1, [pc, #160]	@ (8001c18 <HAL_GPIO_Init+0x2d0>)
 8001b78:	4013      	ands	r3, r2
 8001b7a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001b7c:	683b      	ldr	r3, [r7, #0]
 8001b7e:	685b      	ldr	r3, [r3, #4]
 8001b80:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d006      	beq.n	8001b96 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001b88:	4b23      	ldr	r3, [pc, #140]	@ (8001c18 <HAL_GPIO_Init+0x2d0>)
 8001b8a:	68da      	ldr	r2, [r3, #12]
 8001b8c:	4922      	ldr	r1, [pc, #136]	@ (8001c18 <HAL_GPIO_Init+0x2d0>)
 8001b8e:	69bb      	ldr	r3, [r7, #24]
 8001b90:	4313      	orrs	r3, r2
 8001b92:	60cb      	str	r3, [r1, #12]
 8001b94:	e006      	b.n	8001ba4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001b96:	4b20      	ldr	r3, [pc, #128]	@ (8001c18 <HAL_GPIO_Init+0x2d0>)
 8001b98:	68da      	ldr	r2, [r3, #12]
 8001b9a:	69bb      	ldr	r3, [r7, #24]
 8001b9c:	43db      	mvns	r3, r3
 8001b9e:	491e      	ldr	r1, [pc, #120]	@ (8001c18 <HAL_GPIO_Init+0x2d0>)
 8001ba0:	4013      	ands	r3, r2
 8001ba2:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001ba4:	683b      	ldr	r3, [r7, #0]
 8001ba6:	685b      	ldr	r3, [r3, #4]
 8001ba8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d006      	beq.n	8001bbe <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001bb0:	4b19      	ldr	r3, [pc, #100]	@ (8001c18 <HAL_GPIO_Init+0x2d0>)
 8001bb2:	685a      	ldr	r2, [r3, #4]
 8001bb4:	4918      	ldr	r1, [pc, #96]	@ (8001c18 <HAL_GPIO_Init+0x2d0>)
 8001bb6:	69bb      	ldr	r3, [r7, #24]
 8001bb8:	4313      	orrs	r3, r2
 8001bba:	604b      	str	r3, [r1, #4]
 8001bbc:	e006      	b.n	8001bcc <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001bbe:	4b16      	ldr	r3, [pc, #88]	@ (8001c18 <HAL_GPIO_Init+0x2d0>)
 8001bc0:	685a      	ldr	r2, [r3, #4]
 8001bc2:	69bb      	ldr	r3, [r7, #24]
 8001bc4:	43db      	mvns	r3, r3
 8001bc6:	4914      	ldr	r1, [pc, #80]	@ (8001c18 <HAL_GPIO_Init+0x2d0>)
 8001bc8:	4013      	ands	r3, r2
 8001bca:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001bcc:	683b      	ldr	r3, [r7, #0]
 8001bce:	685b      	ldr	r3, [r3, #4]
 8001bd0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d021      	beq.n	8001c1c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001bd8:	4b0f      	ldr	r3, [pc, #60]	@ (8001c18 <HAL_GPIO_Init+0x2d0>)
 8001bda:	681a      	ldr	r2, [r3, #0]
 8001bdc:	490e      	ldr	r1, [pc, #56]	@ (8001c18 <HAL_GPIO_Init+0x2d0>)
 8001bde:	69bb      	ldr	r3, [r7, #24]
 8001be0:	4313      	orrs	r3, r2
 8001be2:	600b      	str	r3, [r1, #0]
 8001be4:	e021      	b.n	8001c2a <HAL_GPIO_Init+0x2e2>
 8001be6:	bf00      	nop
 8001be8:	10320000 	.word	0x10320000
 8001bec:	10310000 	.word	0x10310000
 8001bf0:	10220000 	.word	0x10220000
 8001bf4:	10210000 	.word	0x10210000
 8001bf8:	10120000 	.word	0x10120000
 8001bfc:	10110000 	.word	0x10110000
 8001c00:	40021000 	.word	0x40021000
 8001c04:	40010000 	.word	0x40010000
 8001c08:	40010800 	.word	0x40010800
 8001c0c:	40010c00 	.word	0x40010c00
 8001c10:	40011000 	.word	0x40011000
 8001c14:	40011400 	.word	0x40011400
 8001c18:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001c1c:	4b0b      	ldr	r3, [pc, #44]	@ (8001c4c <HAL_GPIO_Init+0x304>)
 8001c1e:	681a      	ldr	r2, [r3, #0]
 8001c20:	69bb      	ldr	r3, [r7, #24]
 8001c22:	43db      	mvns	r3, r3
 8001c24:	4909      	ldr	r1, [pc, #36]	@ (8001c4c <HAL_GPIO_Init+0x304>)
 8001c26:	4013      	ands	r3, r2
 8001c28:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001c2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c2c:	3301      	adds	r3, #1
 8001c2e:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c30:	683b      	ldr	r3, [r7, #0]
 8001c32:	681a      	ldr	r2, [r3, #0]
 8001c34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c36:	fa22 f303 	lsr.w	r3, r2, r3
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	f47f ae8e 	bne.w	800195c <HAL_GPIO_Init+0x14>
  }
}
 8001c40:	bf00      	nop
 8001c42:	bf00      	nop
 8001c44:	372c      	adds	r7, #44	@ 0x2c
 8001c46:	46bd      	mov	sp, r7
 8001c48:	bc80      	pop	{r7}
 8001c4a:	4770      	bx	lr
 8001c4c:	40010400 	.word	0x40010400

08001c50 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001c50:	b480      	push	{r7}
 8001c52:	b085      	sub	sp, #20
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]
 8001c58:	460b      	mov	r3, r1
 8001c5a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	68db      	ldr	r3, [r3, #12]
 8001c60:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001c62:	887a      	ldrh	r2, [r7, #2]
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	4013      	ands	r3, r2
 8001c68:	041a      	lsls	r2, r3, #16
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	43d9      	mvns	r1, r3
 8001c6e:	887b      	ldrh	r3, [r7, #2]
 8001c70:	400b      	ands	r3, r1
 8001c72:	431a      	orrs	r2, r3
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	611a      	str	r2, [r3, #16]
}
 8001c78:	bf00      	nop
 8001c7a:	3714      	adds	r7, #20
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	bc80      	pop	{r7}
 8001c80:	4770      	bx	lr
	...

08001c84 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b084      	sub	sp, #16
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d101      	bne.n	8001c96 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001c92:	2301      	movs	r3, #1
 8001c94:	e12b      	b.n	8001eee <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001c9c:	b2db      	uxtb	r3, r3
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d106      	bne.n	8001cb0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001caa:	6878      	ldr	r0, [r7, #4]
 8001cac:	f7fe fd3a 	bl	8000724 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	2224      	movs	r2, #36	@ 0x24
 8001cb4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	681a      	ldr	r2, [r3, #0]
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	f022 0201 	bic.w	r2, r2, #1
 8001cc6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	681a      	ldr	r2, [r3, #0]
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001cd6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	681a      	ldr	r2, [r3, #0]
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001ce6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001ce8:	f001 fbfc 	bl	80034e4 <HAL_RCC_GetPCLK1Freq>
 8001cec:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	685b      	ldr	r3, [r3, #4]
 8001cf2:	4a81      	ldr	r2, [pc, #516]	@ (8001ef8 <HAL_I2C_Init+0x274>)
 8001cf4:	4293      	cmp	r3, r2
 8001cf6:	d807      	bhi.n	8001d08 <HAL_I2C_Init+0x84>
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	4a80      	ldr	r2, [pc, #512]	@ (8001efc <HAL_I2C_Init+0x278>)
 8001cfc:	4293      	cmp	r3, r2
 8001cfe:	bf94      	ite	ls
 8001d00:	2301      	movls	r3, #1
 8001d02:	2300      	movhi	r3, #0
 8001d04:	b2db      	uxtb	r3, r3
 8001d06:	e006      	b.n	8001d16 <HAL_I2C_Init+0x92>
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	4a7d      	ldr	r2, [pc, #500]	@ (8001f00 <HAL_I2C_Init+0x27c>)
 8001d0c:	4293      	cmp	r3, r2
 8001d0e:	bf94      	ite	ls
 8001d10:	2301      	movls	r3, #1
 8001d12:	2300      	movhi	r3, #0
 8001d14:	b2db      	uxtb	r3, r3
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d001      	beq.n	8001d1e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001d1a:	2301      	movs	r3, #1
 8001d1c:	e0e7      	b.n	8001eee <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	4a78      	ldr	r2, [pc, #480]	@ (8001f04 <HAL_I2C_Init+0x280>)
 8001d22:	fba2 2303 	umull	r2, r3, r2, r3
 8001d26:	0c9b      	lsrs	r3, r3, #18
 8001d28:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	685b      	ldr	r3, [r3, #4]
 8001d30:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	68ba      	ldr	r2, [r7, #8]
 8001d3a:	430a      	orrs	r2, r1
 8001d3c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	6a1b      	ldr	r3, [r3, #32]
 8001d44:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	685b      	ldr	r3, [r3, #4]
 8001d4c:	4a6a      	ldr	r2, [pc, #424]	@ (8001ef8 <HAL_I2C_Init+0x274>)
 8001d4e:	4293      	cmp	r3, r2
 8001d50:	d802      	bhi.n	8001d58 <HAL_I2C_Init+0xd4>
 8001d52:	68bb      	ldr	r3, [r7, #8]
 8001d54:	3301      	adds	r3, #1
 8001d56:	e009      	b.n	8001d6c <HAL_I2C_Init+0xe8>
 8001d58:	68bb      	ldr	r3, [r7, #8]
 8001d5a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001d5e:	fb02 f303 	mul.w	r3, r2, r3
 8001d62:	4a69      	ldr	r2, [pc, #420]	@ (8001f08 <HAL_I2C_Init+0x284>)
 8001d64:	fba2 2303 	umull	r2, r3, r2, r3
 8001d68:	099b      	lsrs	r3, r3, #6
 8001d6a:	3301      	adds	r3, #1
 8001d6c:	687a      	ldr	r2, [r7, #4]
 8001d6e:	6812      	ldr	r2, [r2, #0]
 8001d70:	430b      	orrs	r3, r1
 8001d72:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	69db      	ldr	r3, [r3, #28]
 8001d7a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8001d7e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	685b      	ldr	r3, [r3, #4]
 8001d86:	495c      	ldr	r1, [pc, #368]	@ (8001ef8 <HAL_I2C_Init+0x274>)
 8001d88:	428b      	cmp	r3, r1
 8001d8a:	d819      	bhi.n	8001dc0 <HAL_I2C_Init+0x13c>
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	1e59      	subs	r1, r3, #1
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	685b      	ldr	r3, [r3, #4]
 8001d94:	005b      	lsls	r3, r3, #1
 8001d96:	fbb1 f3f3 	udiv	r3, r1, r3
 8001d9a:	1c59      	adds	r1, r3, #1
 8001d9c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8001da0:	400b      	ands	r3, r1
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d00a      	beq.n	8001dbc <HAL_I2C_Init+0x138>
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	1e59      	subs	r1, r3, #1
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	685b      	ldr	r3, [r3, #4]
 8001dae:	005b      	lsls	r3, r3, #1
 8001db0:	fbb1 f3f3 	udiv	r3, r1, r3
 8001db4:	3301      	adds	r3, #1
 8001db6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001dba:	e051      	b.n	8001e60 <HAL_I2C_Init+0x1dc>
 8001dbc:	2304      	movs	r3, #4
 8001dbe:	e04f      	b.n	8001e60 <HAL_I2C_Init+0x1dc>
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	689b      	ldr	r3, [r3, #8]
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d111      	bne.n	8001dec <HAL_I2C_Init+0x168>
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	1e58      	subs	r0, r3, #1
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	6859      	ldr	r1, [r3, #4]
 8001dd0:	460b      	mov	r3, r1
 8001dd2:	005b      	lsls	r3, r3, #1
 8001dd4:	440b      	add	r3, r1
 8001dd6:	fbb0 f3f3 	udiv	r3, r0, r3
 8001dda:	3301      	adds	r3, #1
 8001ddc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	bf0c      	ite	eq
 8001de4:	2301      	moveq	r3, #1
 8001de6:	2300      	movne	r3, #0
 8001de8:	b2db      	uxtb	r3, r3
 8001dea:	e012      	b.n	8001e12 <HAL_I2C_Init+0x18e>
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	1e58      	subs	r0, r3, #1
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	6859      	ldr	r1, [r3, #4]
 8001df4:	460b      	mov	r3, r1
 8001df6:	009b      	lsls	r3, r3, #2
 8001df8:	440b      	add	r3, r1
 8001dfa:	0099      	lsls	r1, r3, #2
 8001dfc:	440b      	add	r3, r1
 8001dfe:	fbb0 f3f3 	udiv	r3, r0, r3
 8001e02:	3301      	adds	r3, #1
 8001e04:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	bf0c      	ite	eq
 8001e0c:	2301      	moveq	r3, #1
 8001e0e:	2300      	movne	r3, #0
 8001e10:	b2db      	uxtb	r3, r3
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d001      	beq.n	8001e1a <HAL_I2C_Init+0x196>
 8001e16:	2301      	movs	r3, #1
 8001e18:	e022      	b.n	8001e60 <HAL_I2C_Init+0x1dc>
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	689b      	ldr	r3, [r3, #8]
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d10e      	bne.n	8001e40 <HAL_I2C_Init+0x1bc>
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	1e58      	subs	r0, r3, #1
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	6859      	ldr	r1, [r3, #4]
 8001e2a:	460b      	mov	r3, r1
 8001e2c:	005b      	lsls	r3, r3, #1
 8001e2e:	440b      	add	r3, r1
 8001e30:	fbb0 f3f3 	udiv	r3, r0, r3
 8001e34:	3301      	adds	r3, #1
 8001e36:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e3a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001e3e:	e00f      	b.n	8001e60 <HAL_I2C_Init+0x1dc>
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	1e58      	subs	r0, r3, #1
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	6859      	ldr	r1, [r3, #4]
 8001e48:	460b      	mov	r3, r1
 8001e4a:	009b      	lsls	r3, r3, #2
 8001e4c:	440b      	add	r3, r1
 8001e4e:	0099      	lsls	r1, r3, #2
 8001e50:	440b      	add	r3, r1
 8001e52:	fbb0 f3f3 	udiv	r3, r0, r3
 8001e56:	3301      	adds	r3, #1
 8001e58:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e5c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001e60:	6879      	ldr	r1, [r7, #4]
 8001e62:	6809      	ldr	r1, [r1, #0]
 8001e64:	4313      	orrs	r3, r2
 8001e66:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	69da      	ldr	r2, [r3, #28]
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	6a1b      	ldr	r3, [r3, #32]
 8001e7a:	431a      	orrs	r2, r3
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	430a      	orrs	r2, r1
 8001e82:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	689b      	ldr	r3, [r3, #8]
 8001e8a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8001e8e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8001e92:	687a      	ldr	r2, [r7, #4]
 8001e94:	6911      	ldr	r1, [r2, #16]
 8001e96:	687a      	ldr	r2, [r7, #4]
 8001e98:	68d2      	ldr	r2, [r2, #12]
 8001e9a:	4311      	orrs	r1, r2
 8001e9c:	687a      	ldr	r2, [r7, #4]
 8001e9e:	6812      	ldr	r2, [r2, #0]
 8001ea0:	430b      	orrs	r3, r1
 8001ea2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	68db      	ldr	r3, [r3, #12]
 8001eaa:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	695a      	ldr	r2, [r3, #20]
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	699b      	ldr	r3, [r3, #24]
 8001eb6:	431a      	orrs	r2, r3
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	430a      	orrs	r2, r1
 8001ebe:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	681a      	ldr	r2, [r3, #0]
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	f042 0201 	orr.w	r2, r2, #1
 8001ece:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	2220      	movs	r2, #32
 8001eda:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8001eec:	2300      	movs	r3, #0
}
 8001eee:	4618      	mov	r0, r3
 8001ef0:	3710      	adds	r7, #16
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	bd80      	pop	{r7, pc}
 8001ef6:	bf00      	nop
 8001ef8:	000186a0 	.word	0x000186a0
 8001efc:	001e847f 	.word	0x001e847f
 8001f00:	003d08ff 	.word	0x003d08ff
 8001f04:	431bde83 	.word	0x431bde83
 8001f08:	10624dd3 	.word	0x10624dd3

08001f0c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	b088      	sub	sp, #32
 8001f10:	af02      	add	r7, sp, #8
 8001f12:	60f8      	str	r0, [r7, #12]
 8001f14:	4608      	mov	r0, r1
 8001f16:	4611      	mov	r1, r2
 8001f18:	461a      	mov	r2, r3
 8001f1a:	4603      	mov	r3, r0
 8001f1c:	817b      	strh	r3, [r7, #10]
 8001f1e:	460b      	mov	r3, r1
 8001f20:	813b      	strh	r3, [r7, #8]
 8001f22:	4613      	mov	r3, r2
 8001f24:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001f26:	f7fe fd93 	bl	8000a50 <HAL_GetTick>
 8001f2a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001f32:	b2db      	uxtb	r3, r3
 8001f34:	2b20      	cmp	r3, #32
 8001f36:	f040 80d9 	bne.w	80020ec <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001f3a:	697b      	ldr	r3, [r7, #20]
 8001f3c:	9300      	str	r3, [sp, #0]
 8001f3e:	2319      	movs	r3, #25
 8001f40:	2201      	movs	r2, #1
 8001f42:	496d      	ldr	r1, [pc, #436]	@ (80020f8 <HAL_I2C_Mem_Write+0x1ec>)
 8001f44:	68f8      	ldr	r0, [r7, #12]
 8001f46:	f000 fccd 	bl	80028e4 <I2C_WaitOnFlagUntilTimeout>
 8001f4a:	4603      	mov	r3, r0
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d001      	beq.n	8001f54 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8001f50:	2302      	movs	r3, #2
 8001f52:	e0cc      	b.n	80020ee <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001f5a:	2b01      	cmp	r3, #1
 8001f5c:	d101      	bne.n	8001f62 <HAL_I2C_Mem_Write+0x56>
 8001f5e:	2302      	movs	r3, #2
 8001f60:	e0c5      	b.n	80020ee <HAL_I2C_Mem_Write+0x1e2>
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	2201      	movs	r2, #1
 8001f66:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	f003 0301 	and.w	r3, r3, #1
 8001f74:	2b01      	cmp	r3, #1
 8001f76:	d007      	beq.n	8001f88 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	681a      	ldr	r2, [r3, #0]
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	f042 0201 	orr.w	r2, r2, #1
 8001f86:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	681a      	ldr	r2, [r3, #0]
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001f96:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	2221      	movs	r2, #33	@ 0x21
 8001f9c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	2240      	movs	r2, #64	@ 0x40
 8001fa4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	2200      	movs	r2, #0
 8001fac:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	6a3a      	ldr	r2, [r7, #32]
 8001fb2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8001fb8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001fbe:	b29a      	uxth	r2, r3
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	4a4d      	ldr	r2, [pc, #308]	@ (80020fc <HAL_I2C_Mem_Write+0x1f0>)
 8001fc8:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001fca:	88f8      	ldrh	r0, [r7, #6]
 8001fcc:	893a      	ldrh	r2, [r7, #8]
 8001fce:	8979      	ldrh	r1, [r7, #10]
 8001fd0:	697b      	ldr	r3, [r7, #20]
 8001fd2:	9301      	str	r3, [sp, #4]
 8001fd4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001fd6:	9300      	str	r3, [sp, #0]
 8001fd8:	4603      	mov	r3, r0
 8001fda:	68f8      	ldr	r0, [r7, #12]
 8001fdc:	f000 fb04 	bl	80025e8 <I2C_RequestMemoryWrite>
 8001fe0:	4603      	mov	r3, r0
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d052      	beq.n	800208c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8001fe6:	2301      	movs	r3, #1
 8001fe8:	e081      	b.n	80020ee <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001fea:	697a      	ldr	r2, [r7, #20]
 8001fec:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001fee:	68f8      	ldr	r0, [r7, #12]
 8001ff0:	f000 fd92 	bl	8002b18 <I2C_WaitOnTXEFlagUntilTimeout>
 8001ff4:	4603      	mov	r3, r0
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d00d      	beq.n	8002016 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ffe:	2b04      	cmp	r3, #4
 8002000:	d107      	bne.n	8002012 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	681a      	ldr	r2, [r3, #0]
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002010:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002012:	2301      	movs	r3, #1
 8002014:	e06b      	b.n	80020ee <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800201a:	781a      	ldrb	r2, [r3, #0]
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002026:	1c5a      	adds	r2, r3, #1
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002030:	3b01      	subs	r3, #1
 8002032:	b29a      	uxth	r2, r3
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800203c:	b29b      	uxth	r3, r3
 800203e:	3b01      	subs	r3, #1
 8002040:	b29a      	uxth	r2, r3
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	695b      	ldr	r3, [r3, #20]
 800204c:	f003 0304 	and.w	r3, r3, #4
 8002050:	2b04      	cmp	r3, #4
 8002052:	d11b      	bne.n	800208c <HAL_I2C_Mem_Write+0x180>
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002058:	2b00      	cmp	r3, #0
 800205a:	d017      	beq.n	800208c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002060:	781a      	ldrb	r2, [r3, #0]
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800206c:	1c5a      	adds	r2, r3, #1
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002076:	3b01      	subs	r3, #1
 8002078:	b29a      	uxth	r2, r3
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002082:	b29b      	uxth	r3, r3
 8002084:	3b01      	subs	r3, #1
 8002086:	b29a      	uxth	r2, r3
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002090:	2b00      	cmp	r3, #0
 8002092:	d1aa      	bne.n	8001fea <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002094:	697a      	ldr	r2, [r7, #20]
 8002096:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002098:	68f8      	ldr	r0, [r7, #12]
 800209a:	f000 fd85 	bl	8002ba8 <I2C_WaitOnBTFFlagUntilTimeout>
 800209e:	4603      	mov	r3, r0
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d00d      	beq.n	80020c0 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020a8:	2b04      	cmp	r3, #4
 80020aa:	d107      	bne.n	80020bc <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	681a      	ldr	r2, [r3, #0]
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80020ba:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80020bc:	2301      	movs	r3, #1
 80020be:	e016      	b.n	80020ee <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	681a      	ldr	r2, [r3, #0]
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80020ce:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	2220      	movs	r2, #32
 80020d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	2200      	movs	r2, #0
 80020dc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	2200      	movs	r2, #0
 80020e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80020e8:	2300      	movs	r3, #0
 80020ea:	e000      	b.n	80020ee <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80020ec:	2302      	movs	r3, #2
  }
}
 80020ee:	4618      	mov	r0, r3
 80020f0:	3718      	adds	r7, #24
 80020f2:	46bd      	mov	sp, r7
 80020f4:	bd80      	pop	{r7, pc}
 80020f6:	bf00      	nop
 80020f8:	00100002 	.word	0x00100002
 80020fc:	ffff0000 	.word	0xffff0000

08002100 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002100:	b580      	push	{r7, lr}
 8002102:	b08c      	sub	sp, #48	@ 0x30
 8002104:	af02      	add	r7, sp, #8
 8002106:	60f8      	str	r0, [r7, #12]
 8002108:	4608      	mov	r0, r1
 800210a:	4611      	mov	r1, r2
 800210c:	461a      	mov	r2, r3
 800210e:	4603      	mov	r3, r0
 8002110:	817b      	strh	r3, [r7, #10]
 8002112:	460b      	mov	r3, r1
 8002114:	813b      	strh	r3, [r7, #8]
 8002116:	4613      	mov	r3, r2
 8002118:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 800211a:	2300      	movs	r3, #0
 800211c:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800211e:	f7fe fc97 	bl	8000a50 <HAL_GetTick>
 8002122:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800212a:	b2db      	uxtb	r3, r3
 800212c:	2b20      	cmp	r3, #32
 800212e:	f040 8250 	bne.w	80025d2 <HAL_I2C_Mem_Read+0x4d2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002132:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002134:	9300      	str	r3, [sp, #0]
 8002136:	2319      	movs	r3, #25
 8002138:	2201      	movs	r2, #1
 800213a:	4982      	ldr	r1, [pc, #520]	@ (8002344 <HAL_I2C_Mem_Read+0x244>)
 800213c:	68f8      	ldr	r0, [r7, #12]
 800213e:	f000 fbd1 	bl	80028e4 <I2C_WaitOnFlagUntilTimeout>
 8002142:	4603      	mov	r3, r0
 8002144:	2b00      	cmp	r3, #0
 8002146:	d001      	beq.n	800214c <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8002148:	2302      	movs	r3, #2
 800214a:	e243      	b.n	80025d4 <HAL_I2C_Mem_Read+0x4d4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002152:	2b01      	cmp	r3, #1
 8002154:	d101      	bne.n	800215a <HAL_I2C_Mem_Read+0x5a>
 8002156:	2302      	movs	r3, #2
 8002158:	e23c      	b.n	80025d4 <HAL_I2C_Mem_Read+0x4d4>
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	2201      	movs	r2, #1
 800215e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	f003 0301 	and.w	r3, r3, #1
 800216c:	2b01      	cmp	r3, #1
 800216e:	d007      	beq.n	8002180 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	681a      	ldr	r2, [r3, #0]
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f042 0201 	orr.w	r2, r2, #1
 800217e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	681a      	ldr	r2, [r3, #0]
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800218e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	2222      	movs	r2, #34	@ 0x22
 8002194:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	2240      	movs	r2, #64	@ 0x40
 800219c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	2200      	movs	r2, #0
 80021a4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80021aa:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 80021b0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80021b6:	b29a      	uxth	r2, r3
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	4a62      	ldr	r2, [pc, #392]	@ (8002348 <HAL_I2C_Mem_Read+0x248>)
 80021c0:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80021c2:	88f8      	ldrh	r0, [r7, #6]
 80021c4:	893a      	ldrh	r2, [r7, #8]
 80021c6:	8979      	ldrh	r1, [r7, #10]
 80021c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021ca:	9301      	str	r3, [sp, #4]
 80021cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80021ce:	9300      	str	r3, [sp, #0]
 80021d0:	4603      	mov	r3, r0
 80021d2:	68f8      	ldr	r0, [r7, #12]
 80021d4:	f000 fa9e 	bl	8002714 <I2C_RequestMemoryRead>
 80021d8:	4603      	mov	r3, r0
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d001      	beq.n	80021e2 <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 80021de:	2301      	movs	r3, #1
 80021e0:	e1f8      	b.n	80025d4 <HAL_I2C_Mem_Read+0x4d4>
    }

    if (hi2c->XferSize == 0U)
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d113      	bne.n	8002212 <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80021ea:	2300      	movs	r3, #0
 80021ec:	61fb      	str	r3, [r7, #28]
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	695b      	ldr	r3, [r3, #20]
 80021f4:	61fb      	str	r3, [r7, #28]
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	699b      	ldr	r3, [r3, #24]
 80021fc:	61fb      	str	r3, [r7, #28]
 80021fe:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	681a      	ldr	r2, [r3, #0]
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800220e:	601a      	str	r2, [r3, #0]
 8002210:	e1cc      	b.n	80025ac <HAL_I2C_Mem_Read+0x4ac>
    }
    else if (hi2c->XferSize == 1U)
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002216:	2b01      	cmp	r3, #1
 8002218:	d11e      	bne.n	8002258 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	681a      	ldr	r2, [r3, #0]
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002228:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800222a:	b672      	cpsid	i
}
 800222c:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800222e:	2300      	movs	r3, #0
 8002230:	61bb      	str	r3, [r7, #24]
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	695b      	ldr	r3, [r3, #20]
 8002238:	61bb      	str	r3, [r7, #24]
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	699b      	ldr	r3, [r3, #24]
 8002240:	61bb      	str	r3, [r7, #24]
 8002242:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	681a      	ldr	r2, [r3, #0]
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002252:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002254:	b662      	cpsie	i
}
 8002256:	e035      	b.n	80022c4 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800225c:	2b02      	cmp	r3, #2
 800225e:	d11e      	bne.n	800229e <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	681a      	ldr	r2, [r3, #0]
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800226e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002270:	b672      	cpsid	i
}
 8002272:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002274:	2300      	movs	r3, #0
 8002276:	617b      	str	r3, [r7, #20]
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	695b      	ldr	r3, [r3, #20]
 800227e:	617b      	str	r3, [r7, #20]
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	699b      	ldr	r3, [r3, #24]
 8002286:	617b      	str	r3, [r7, #20]
 8002288:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	681a      	ldr	r2, [r3, #0]
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002298:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800229a:	b662      	cpsie	i
}
 800229c:	e012      	b.n	80022c4 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	681a      	ldr	r2, [r3, #0]
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80022ac:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80022ae:	2300      	movs	r3, #0
 80022b0:	613b      	str	r3, [r7, #16]
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	695b      	ldr	r3, [r3, #20]
 80022b8:	613b      	str	r3, [r7, #16]
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	699b      	ldr	r3, [r3, #24]
 80022c0:	613b      	str	r3, [r7, #16]
 80022c2:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 80022c4:	e172      	b.n	80025ac <HAL_I2C_Mem_Read+0x4ac>
    {
      if (hi2c->XferSize <= 3U)
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80022ca:	2b03      	cmp	r3, #3
 80022cc:	f200 811f 	bhi.w	800250e <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80022d4:	2b01      	cmp	r3, #1
 80022d6:	d123      	bne.n	8002320 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80022d8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80022da:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80022dc:	68f8      	ldr	r0, [r7, #12]
 80022de:	f000 fcab 	bl	8002c38 <I2C_WaitOnRXNEFlagUntilTimeout>
 80022e2:	4603      	mov	r3, r0
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d001      	beq.n	80022ec <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 80022e8:	2301      	movs	r3, #1
 80022ea:	e173      	b.n	80025d4 <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	691a      	ldr	r2, [r3, #16]
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022f6:	b2d2      	uxtb	r2, r2
 80022f8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022fe:	1c5a      	adds	r2, r3, #1
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002308:	3b01      	subs	r3, #1
 800230a:	b29a      	uxth	r2, r3
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002314:	b29b      	uxth	r3, r3
 8002316:	3b01      	subs	r3, #1
 8002318:	b29a      	uxth	r2, r3
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800231e:	e145      	b.n	80025ac <HAL_I2C_Mem_Read+0x4ac>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002324:	2b02      	cmp	r3, #2
 8002326:	d152      	bne.n	80023ce <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002328:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800232a:	9300      	str	r3, [sp, #0]
 800232c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800232e:	2200      	movs	r2, #0
 8002330:	4906      	ldr	r1, [pc, #24]	@ (800234c <HAL_I2C_Mem_Read+0x24c>)
 8002332:	68f8      	ldr	r0, [r7, #12]
 8002334:	f000 fad6 	bl	80028e4 <I2C_WaitOnFlagUntilTimeout>
 8002338:	4603      	mov	r3, r0
 800233a:	2b00      	cmp	r3, #0
 800233c:	d008      	beq.n	8002350 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 800233e:	2301      	movs	r3, #1
 8002340:	e148      	b.n	80025d4 <HAL_I2C_Mem_Read+0x4d4>
 8002342:	bf00      	nop
 8002344:	00100002 	.word	0x00100002
 8002348:	ffff0000 	.word	0xffff0000
 800234c:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8002350:	b672      	cpsid	i
}
 8002352:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	681a      	ldr	r2, [r3, #0]
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002362:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	691a      	ldr	r2, [r3, #16]
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800236e:	b2d2      	uxtb	r2, r2
 8002370:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002376:	1c5a      	adds	r2, r3, #1
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002380:	3b01      	subs	r3, #1
 8002382:	b29a      	uxth	r2, r3
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800238c:	b29b      	uxth	r3, r3
 800238e:	3b01      	subs	r3, #1
 8002390:	b29a      	uxth	r2, r3
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8002396:	b662      	cpsie	i
}
 8002398:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	691a      	ldr	r2, [r3, #16]
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023a4:	b2d2      	uxtb	r2, r2
 80023a6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023ac:	1c5a      	adds	r2, r3, #1
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80023b6:	3b01      	subs	r3, #1
 80023b8:	b29a      	uxth	r2, r3
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80023c2:	b29b      	uxth	r3, r3
 80023c4:	3b01      	subs	r3, #1
 80023c6:	b29a      	uxth	r2, r3
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80023cc:	e0ee      	b.n	80025ac <HAL_I2C_Mem_Read+0x4ac>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80023ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023d0:	9300      	str	r3, [sp, #0]
 80023d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80023d4:	2200      	movs	r2, #0
 80023d6:	4981      	ldr	r1, [pc, #516]	@ (80025dc <HAL_I2C_Mem_Read+0x4dc>)
 80023d8:	68f8      	ldr	r0, [r7, #12]
 80023da:	f000 fa83 	bl	80028e4 <I2C_WaitOnFlagUntilTimeout>
 80023de:	4603      	mov	r3, r0
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d001      	beq.n	80023e8 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 80023e4:	2301      	movs	r3, #1
 80023e6:	e0f5      	b.n	80025d4 <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	681a      	ldr	r2, [r3, #0]
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80023f6:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80023f8:	b672      	cpsid	i
}
 80023fa:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	691a      	ldr	r2, [r3, #16]
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002406:	b2d2      	uxtb	r2, r2
 8002408:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800240e:	1c5a      	adds	r2, r3, #1
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002418:	3b01      	subs	r3, #1
 800241a:	b29a      	uxth	r2, r3
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002424:	b29b      	uxth	r3, r3
 8002426:	3b01      	subs	r3, #1
 8002428:	b29a      	uxth	r2, r3
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800242e:	4b6c      	ldr	r3, [pc, #432]	@ (80025e0 <HAL_I2C_Mem_Read+0x4e0>)
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	08db      	lsrs	r3, r3, #3
 8002434:	4a6b      	ldr	r2, [pc, #428]	@ (80025e4 <HAL_I2C_Mem_Read+0x4e4>)
 8002436:	fba2 2303 	umull	r2, r3, r2, r3
 800243a:	0a1a      	lsrs	r2, r3, #8
 800243c:	4613      	mov	r3, r2
 800243e:	009b      	lsls	r3, r3, #2
 8002440:	4413      	add	r3, r2
 8002442:	00da      	lsls	r2, r3, #3
 8002444:	1ad3      	subs	r3, r2, r3
 8002446:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8002448:	6a3b      	ldr	r3, [r7, #32]
 800244a:	3b01      	subs	r3, #1
 800244c:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 800244e:	6a3b      	ldr	r3, [r7, #32]
 8002450:	2b00      	cmp	r3, #0
 8002452:	d118      	bne.n	8002486 <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	2200      	movs	r2, #0
 8002458:	631a      	str	r2, [r3, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	2220      	movs	r2, #32
 800245e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	2200      	movs	r2, #0
 8002466:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800246e:	f043 0220 	orr.w	r2, r3, #32
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	641a      	str	r2, [r3, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8002476:	b662      	cpsie	i
}
 8002478:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	2200      	movs	r2, #0
 800247e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

              return HAL_ERROR;
 8002482:	2301      	movs	r3, #1
 8002484:	e0a6      	b.n	80025d4 <HAL_I2C_Mem_Read+0x4d4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	695b      	ldr	r3, [r3, #20]
 800248c:	f003 0304 	and.w	r3, r3, #4
 8002490:	2b04      	cmp	r3, #4
 8002492:	d1d9      	bne.n	8002448 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	681a      	ldr	r2, [r3, #0]
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80024a2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	691a      	ldr	r2, [r3, #16]
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024ae:	b2d2      	uxtb	r2, r2
 80024b0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024b6:	1c5a      	adds	r2, r3, #1
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80024c0:	3b01      	subs	r3, #1
 80024c2:	b29a      	uxth	r2, r3
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80024cc:	b29b      	uxth	r3, r3
 80024ce:	3b01      	subs	r3, #1
 80024d0:	b29a      	uxth	r2, r3
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80024d6:	b662      	cpsie	i
}
 80024d8:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	691a      	ldr	r2, [r3, #16]
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024e4:	b2d2      	uxtb	r2, r2
 80024e6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024ec:	1c5a      	adds	r2, r3, #1
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80024f6:	3b01      	subs	r3, #1
 80024f8:	b29a      	uxth	r2, r3
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002502:	b29b      	uxth	r3, r3
 8002504:	3b01      	subs	r3, #1
 8002506:	b29a      	uxth	r2, r3
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800250c:	e04e      	b.n	80025ac <HAL_I2C_Mem_Read+0x4ac>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800250e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002510:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8002512:	68f8      	ldr	r0, [r7, #12]
 8002514:	f000 fb90 	bl	8002c38 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002518:	4603      	mov	r3, r0
 800251a:	2b00      	cmp	r3, #0
 800251c:	d001      	beq.n	8002522 <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 800251e:	2301      	movs	r3, #1
 8002520:	e058      	b.n	80025d4 <HAL_I2C_Mem_Read+0x4d4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	691a      	ldr	r2, [r3, #16]
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800252c:	b2d2      	uxtb	r2, r2
 800252e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002534:	1c5a      	adds	r2, r3, #1
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800253e:	3b01      	subs	r3, #1
 8002540:	b29a      	uxth	r2, r3
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800254a:	b29b      	uxth	r3, r3
 800254c:	3b01      	subs	r3, #1
 800254e:	b29a      	uxth	r2, r3
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	695b      	ldr	r3, [r3, #20]
 800255a:	f003 0304 	and.w	r3, r3, #4
 800255e:	2b04      	cmp	r3, #4
 8002560:	d124      	bne.n	80025ac <HAL_I2C_Mem_Read+0x4ac>
        {
          if (hi2c->XferSize == 3U)
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002566:	2b03      	cmp	r3, #3
 8002568:	d107      	bne.n	800257a <HAL_I2C_Mem_Read+0x47a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	681a      	ldr	r2, [r3, #0]
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002578:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	691a      	ldr	r2, [r3, #16]
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002584:	b2d2      	uxtb	r2, r2
 8002586:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800258c:	1c5a      	adds	r2, r3, #1
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002596:	3b01      	subs	r3, #1
 8002598:	b29a      	uxth	r2, r3
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80025a2:	b29b      	uxth	r3, r3
 80025a4:	3b01      	subs	r3, #1
 80025a6:	b29a      	uxth	r2, r3
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	f47f ae88 	bne.w	80022c6 <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	2220      	movs	r2, #32
 80025ba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	2200      	movs	r2, #0
 80025c2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	2200      	movs	r2, #0
 80025ca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80025ce:	2300      	movs	r3, #0
 80025d0:	e000      	b.n	80025d4 <HAL_I2C_Mem_Read+0x4d4>
  }
  else
  {
    return HAL_BUSY;
 80025d2:	2302      	movs	r3, #2
  }
}
 80025d4:	4618      	mov	r0, r3
 80025d6:	3728      	adds	r7, #40	@ 0x28
 80025d8:	46bd      	mov	sp, r7
 80025da:	bd80      	pop	{r7, pc}
 80025dc:	00010004 	.word	0x00010004
 80025e0:	20000000 	.word	0x20000000
 80025e4:	14f8b589 	.word	0x14f8b589

080025e8 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80025e8:	b580      	push	{r7, lr}
 80025ea:	b088      	sub	sp, #32
 80025ec:	af02      	add	r7, sp, #8
 80025ee:	60f8      	str	r0, [r7, #12]
 80025f0:	4608      	mov	r0, r1
 80025f2:	4611      	mov	r1, r2
 80025f4:	461a      	mov	r2, r3
 80025f6:	4603      	mov	r3, r0
 80025f8:	817b      	strh	r3, [r7, #10]
 80025fa:	460b      	mov	r3, r1
 80025fc:	813b      	strh	r3, [r7, #8]
 80025fe:	4613      	mov	r3, r2
 8002600:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	681a      	ldr	r2, [r3, #0]
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002610:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002612:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002614:	9300      	str	r3, [sp, #0]
 8002616:	6a3b      	ldr	r3, [r7, #32]
 8002618:	2200      	movs	r2, #0
 800261a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800261e:	68f8      	ldr	r0, [r7, #12]
 8002620:	f000 f960 	bl	80028e4 <I2C_WaitOnFlagUntilTimeout>
 8002624:	4603      	mov	r3, r0
 8002626:	2b00      	cmp	r3, #0
 8002628:	d00d      	beq.n	8002646 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002634:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002638:	d103      	bne.n	8002642 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002640:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002642:	2303      	movs	r3, #3
 8002644:	e05f      	b.n	8002706 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002646:	897b      	ldrh	r3, [r7, #10]
 8002648:	b2db      	uxtb	r3, r3
 800264a:	461a      	mov	r2, r3
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002654:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002656:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002658:	6a3a      	ldr	r2, [r7, #32]
 800265a:	492d      	ldr	r1, [pc, #180]	@ (8002710 <I2C_RequestMemoryWrite+0x128>)
 800265c:	68f8      	ldr	r0, [r7, #12]
 800265e:	f000 f9bb 	bl	80029d8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002662:	4603      	mov	r3, r0
 8002664:	2b00      	cmp	r3, #0
 8002666:	d001      	beq.n	800266c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8002668:	2301      	movs	r3, #1
 800266a:	e04c      	b.n	8002706 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800266c:	2300      	movs	r3, #0
 800266e:	617b      	str	r3, [r7, #20]
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	695b      	ldr	r3, [r3, #20]
 8002676:	617b      	str	r3, [r7, #20]
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	699b      	ldr	r3, [r3, #24]
 800267e:	617b      	str	r3, [r7, #20]
 8002680:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002682:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002684:	6a39      	ldr	r1, [r7, #32]
 8002686:	68f8      	ldr	r0, [r7, #12]
 8002688:	f000 fa46 	bl	8002b18 <I2C_WaitOnTXEFlagUntilTimeout>
 800268c:	4603      	mov	r3, r0
 800268e:	2b00      	cmp	r3, #0
 8002690:	d00d      	beq.n	80026ae <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002696:	2b04      	cmp	r3, #4
 8002698:	d107      	bne.n	80026aa <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	681a      	ldr	r2, [r3, #0]
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80026a8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80026aa:	2301      	movs	r3, #1
 80026ac:	e02b      	b.n	8002706 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80026ae:	88fb      	ldrh	r3, [r7, #6]
 80026b0:	2b01      	cmp	r3, #1
 80026b2:	d105      	bne.n	80026c0 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80026b4:	893b      	ldrh	r3, [r7, #8]
 80026b6:	b2da      	uxtb	r2, r3
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	611a      	str	r2, [r3, #16]
 80026be:	e021      	b.n	8002704 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80026c0:	893b      	ldrh	r3, [r7, #8]
 80026c2:	0a1b      	lsrs	r3, r3, #8
 80026c4:	b29b      	uxth	r3, r3
 80026c6:	b2da      	uxtb	r2, r3
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80026ce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80026d0:	6a39      	ldr	r1, [r7, #32]
 80026d2:	68f8      	ldr	r0, [r7, #12]
 80026d4:	f000 fa20 	bl	8002b18 <I2C_WaitOnTXEFlagUntilTimeout>
 80026d8:	4603      	mov	r3, r0
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d00d      	beq.n	80026fa <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026e2:	2b04      	cmp	r3, #4
 80026e4:	d107      	bne.n	80026f6 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	681a      	ldr	r2, [r3, #0]
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80026f4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80026f6:	2301      	movs	r3, #1
 80026f8:	e005      	b.n	8002706 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80026fa:	893b      	ldrh	r3, [r7, #8]
 80026fc:	b2da      	uxtb	r2, r3
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8002704:	2300      	movs	r3, #0
}
 8002706:	4618      	mov	r0, r3
 8002708:	3718      	adds	r7, #24
 800270a:	46bd      	mov	sp, r7
 800270c:	bd80      	pop	{r7, pc}
 800270e:	bf00      	nop
 8002710:	00010002 	.word	0x00010002

08002714 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002714:	b580      	push	{r7, lr}
 8002716:	b088      	sub	sp, #32
 8002718:	af02      	add	r7, sp, #8
 800271a:	60f8      	str	r0, [r7, #12]
 800271c:	4608      	mov	r0, r1
 800271e:	4611      	mov	r1, r2
 8002720:	461a      	mov	r2, r3
 8002722:	4603      	mov	r3, r0
 8002724:	817b      	strh	r3, [r7, #10]
 8002726:	460b      	mov	r3, r1
 8002728:	813b      	strh	r3, [r7, #8]
 800272a:	4613      	mov	r3, r2
 800272c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	681a      	ldr	r2, [r3, #0]
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800273c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	681a      	ldr	r2, [r3, #0]
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800274c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800274e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002750:	9300      	str	r3, [sp, #0]
 8002752:	6a3b      	ldr	r3, [r7, #32]
 8002754:	2200      	movs	r2, #0
 8002756:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800275a:	68f8      	ldr	r0, [r7, #12]
 800275c:	f000 f8c2 	bl	80028e4 <I2C_WaitOnFlagUntilTimeout>
 8002760:	4603      	mov	r3, r0
 8002762:	2b00      	cmp	r3, #0
 8002764:	d00d      	beq.n	8002782 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002770:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002774:	d103      	bne.n	800277e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800277c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800277e:	2303      	movs	r3, #3
 8002780:	e0aa      	b.n	80028d8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002782:	897b      	ldrh	r3, [r7, #10]
 8002784:	b2db      	uxtb	r3, r3
 8002786:	461a      	mov	r2, r3
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002790:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002792:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002794:	6a3a      	ldr	r2, [r7, #32]
 8002796:	4952      	ldr	r1, [pc, #328]	@ (80028e0 <I2C_RequestMemoryRead+0x1cc>)
 8002798:	68f8      	ldr	r0, [r7, #12]
 800279a:	f000 f91d 	bl	80029d8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800279e:	4603      	mov	r3, r0
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d001      	beq.n	80027a8 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80027a4:	2301      	movs	r3, #1
 80027a6:	e097      	b.n	80028d8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80027a8:	2300      	movs	r3, #0
 80027aa:	617b      	str	r3, [r7, #20]
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	695b      	ldr	r3, [r3, #20]
 80027b2:	617b      	str	r3, [r7, #20]
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	699b      	ldr	r3, [r3, #24]
 80027ba:	617b      	str	r3, [r7, #20]
 80027bc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80027be:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80027c0:	6a39      	ldr	r1, [r7, #32]
 80027c2:	68f8      	ldr	r0, [r7, #12]
 80027c4:	f000 f9a8 	bl	8002b18 <I2C_WaitOnTXEFlagUntilTimeout>
 80027c8:	4603      	mov	r3, r0
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d00d      	beq.n	80027ea <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027d2:	2b04      	cmp	r3, #4
 80027d4:	d107      	bne.n	80027e6 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	681a      	ldr	r2, [r3, #0]
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80027e4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80027e6:	2301      	movs	r3, #1
 80027e8:	e076      	b.n	80028d8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80027ea:	88fb      	ldrh	r3, [r7, #6]
 80027ec:	2b01      	cmp	r3, #1
 80027ee:	d105      	bne.n	80027fc <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80027f0:	893b      	ldrh	r3, [r7, #8]
 80027f2:	b2da      	uxtb	r2, r3
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	611a      	str	r2, [r3, #16]
 80027fa:	e021      	b.n	8002840 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80027fc:	893b      	ldrh	r3, [r7, #8]
 80027fe:	0a1b      	lsrs	r3, r3, #8
 8002800:	b29b      	uxth	r3, r3
 8002802:	b2da      	uxtb	r2, r3
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800280a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800280c:	6a39      	ldr	r1, [r7, #32]
 800280e:	68f8      	ldr	r0, [r7, #12]
 8002810:	f000 f982 	bl	8002b18 <I2C_WaitOnTXEFlagUntilTimeout>
 8002814:	4603      	mov	r3, r0
 8002816:	2b00      	cmp	r3, #0
 8002818:	d00d      	beq.n	8002836 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800281e:	2b04      	cmp	r3, #4
 8002820:	d107      	bne.n	8002832 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	681a      	ldr	r2, [r3, #0]
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002830:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002832:	2301      	movs	r3, #1
 8002834:	e050      	b.n	80028d8 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002836:	893b      	ldrh	r3, [r7, #8]
 8002838:	b2da      	uxtb	r2, r3
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002840:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002842:	6a39      	ldr	r1, [r7, #32]
 8002844:	68f8      	ldr	r0, [r7, #12]
 8002846:	f000 f967 	bl	8002b18 <I2C_WaitOnTXEFlagUntilTimeout>
 800284a:	4603      	mov	r3, r0
 800284c:	2b00      	cmp	r3, #0
 800284e:	d00d      	beq.n	800286c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002854:	2b04      	cmp	r3, #4
 8002856:	d107      	bne.n	8002868 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	681a      	ldr	r2, [r3, #0]
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002866:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002868:	2301      	movs	r3, #1
 800286a:	e035      	b.n	80028d8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	681a      	ldr	r2, [r3, #0]
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800287a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800287c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800287e:	9300      	str	r3, [sp, #0]
 8002880:	6a3b      	ldr	r3, [r7, #32]
 8002882:	2200      	movs	r2, #0
 8002884:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002888:	68f8      	ldr	r0, [r7, #12]
 800288a:	f000 f82b 	bl	80028e4 <I2C_WaitOnFlagUntilTimeout>
 800288e:	4603      	mov	r3, r0
 8002890:	2b00      	cmp	r3, #0
 8002892:	d00d      	beq.n	80028b0 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800289e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80028a2:	d103      	bne.n	80028ac <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80028aa:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80028ac:	2303      	movs	r3, #3
 80028ae:	e013      	b.n	80028d8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80028b0:	897b      	ldrh	r3, [r7, #10]
 80028b2:	b2db      	uxtb	r3, r3
 80028b4:	f043 0301 	orr.w	r3, r3, #1
 80028b8:	b2da      	uxtb	r2, r3
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80028c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028c2:	6a3a      	ldr	r2, [r7, #32]
 80028c4:	4906      	ldr	r1, [pc, #24]	@ (80028e0 <I2C_RequestMemoryRead+0x1cc>)
 80028c6:	68f8      	ldr	r0, [r7, #12]
 80028c8:	f000 f886 	bl	80029d8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80028cc:	4603      	mov	r3, r0
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d001      	beq.n	80028d6 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80028d2:	2301      	movs	r3, #1
 80028d4:	e000      	b.n	80028d8 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80028d6:	2300      	movs	r3, #0
}
 80028d8:	4618      	mov	r0, r3
 80028da:	3718      	adds	r7, #24
 80028dc:	46bd      	mov	sp, r7
 80028de:	bd80      	pop	{r7, pc}
 80028e0:	00010002 	.word	0x00010002

080028e4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80028e4:	b580      	push	{r7, lr}
 80028e6:	b084      	sub	sp, #16
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	60f8      	str	r0, [r7, #12]
 80028ec:	60b9      	str	r1, [r7, #8]
 80028ee:	603b      	str	r3, [r7, #0]
 80028f0:	4613      	mov	r3, r2
 80028f2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80028f4:	e048      	b.n	8002988 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80028f6:	683b      	ldr	r3, [r7, #0]
 80028f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028fc:	d044      	beq.n	8002988 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80028fe:	f7fe f8a7 	bl	8000a50 <HAL_GetTick>
 8002902:	4602      	mov	r2, r0
 8002904:	69bb      	ldr	r3, [r7, #24]
 8002906:	1ad3      	subs	r3, r2, r3
 8002908:	683a      	ldr	r2, [r7, #0]
 800290a:	429a      	cmp	r2, r3
 800290c:	d302      	bcc.n	8002914 <I2C_WaitOnFlagUntilTimeout+0x30>
 800290e:	683b      	ldr	r3, [r7, #0]
 8002910:	2b00      	cmp	r3, #0
 8002912:	d139      	bne.n	8002988 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002914:	68bb      	ldr	r3, [r7, #8]
 8002916:	0c1b      	lsrs	r3, r3, #16
 8002918:	b2db      	uxtb	r3, r3
 800291a:	2b01      	cmp	r3, #1
 800291c:	d10d      	bne.n	800293a <I2C_WaitOnFlagUntilTimeout+0x56>
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	695b      	ldr	r3, [r3, #20]
 8002924:	43da      	mvns	r2, r3
 8002926:	68bb      	ldr	r3, [r7, #8]
 8002928:	4013      	ands	r3, r2
 800292a:	b29b      	uxth	r3, r3
 800292c:	2b00      	cmp	r3, #0
 800292e:	bf0c      	ite	eq
 8002930:	2301      	moveq	r3, #1
 8002932:	2300      	movne	r3, #0
 8002934:	b2db      	uxtb	r3, r3
 8002936:	461a      	mov	r2, r3
 8002938:	e00c      	b.n	8002954 <I2C_WaitOnFlagUntilTimeout+0x70>
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	699b      	ldr	r3, [r3, #24]
 8002940:	43da      	mvns	r2, r3
 8002942:	68bb      	ldr	r3, [r7, #8]
 8002944:	4013      	ands	r3, r2
 8002946:	b29b      	uxth	r3, r3
 8002948:	2b00      	cmp	r3, #0
 800294a:	bf0c      	ite	eq
 800294c:	2301      	moveq	r3, #1
 800294e:	2300      	movne	r3, #0
 8002950:	b2db      	uxtb	r3, r3
 8002952:	461a      	mov	r2, r3
 8002954:	79fb      	ldrb	r3, [r7, #7]
 8002956:	429a      	cmp	r2, r3
 8002958:	d116      	bne.n	8002988 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	2200      	movs	r2, #0
 800295e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	2220      	movs	r2, #32
 8002964:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	2200      	movs	r2, #0
 800296c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002974:	f043 0220 	orr.w	r2, r3, #32
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	2200      	movs	r2, #0
 8002980:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002984:	2301      	movs	r3, #1
 8002986:	e023      	b.n	80029d0 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002988:	68bb      	ldr	r3, [r7, #8]
 800298a:	0c1b      	lsrs	r3, r3, #16
 800298c:	b2db      	uxtb	r3, r3
 800298e:	2b01      	cmp	r3, #1
 8002990:	d10d      	bne.n	80029ae <I2C_WaitOnFlagUntilTimeout+0xca>
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	695b      	ldr	r3, [r3, #20]
 8002998:	43da      	mvns	r2, r3
 800299a:	68bb      	ldr	r3, [r7, #8]
 800299c:	4013      	ands	r3, r2
 800299e:	b29b      	uxth	r3, r3
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	bf0c      	ite	eq
 80029a4:	2301      	moveq	r3, #1
 80029a6:	2300      	movne	r3, #0
 80029a8:	b2db      	uxtb	r3, r3
 80029aa:	461a      	mov	r2, r3
 80029ac:	e00c      	b.n	80029c8 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	699b      	ldr	r3, [r3, #24]
 80029b4:	43da      	mvns	r2, r3
 80029b6:	68bb      	ldr	r3, [r7, #8]
 80029b8:	4013      	ands	r3, r2
 80029ba:	b29b      	uxth	r3, r3
 80029bc:	2b00      	cmp	r3, #0
 80029be:	bf0c      	ite	eq
 80029c0:	2301      	moveq	r3, #1
 80029c2:	2300      	movne	r3, #0
 80029c4:	b2db      	uxtb	r3, r3
 80029c6:	461a      	mov	r2, r3
 80029c8:	79fb      	ldrb	r3, [r7, #7]
 80029ca:	429a      	cmp	r2, r3
 80029cc:	d093      	beq.n	80028f6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80029ce:	2300      	movs	r3, #0
}
 80029d0:	4618      	mov	r0, r3
 80029d2:	3710      	adds	r7, #16
 80029d4:	46bd      	mov	sp, r7
 80029d6:	bd80      	pop	{r7, pc}

080029d8 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80029d8:	b580      	push	{r7, lr}
 80029da:	b084      	sub	sp, #16
 80029dc:	af00      	add	r7, sp, #0
 80029de:	60f8      	str	r0, [r7, #12]
 80029e0:	60b9      	str	r1, [r7, #8]
 80029e2:	607a      	str	r2, [r7, #4]
 80029e4:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80029e6:	e071      	b.n	8002acc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	695b      	ldr	r3, [r3, #20]
 80029ee:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80029f2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80029f6:	d123      	bne.n	8002a40 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	681a      	ldr	r2, [r3, #0]
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002a06:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002a10:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	2200      	movs	r2, #0
 8002a16:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	2220      	movs	r2, #32
 8002a1c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	2200      	movs	r2, #0
 8002a24:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a2c:	f043 0204 	orr.w	r2, r3, #4
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	2200      	movs	r2, #0
 8002a38:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002a3c:	2301      	movs	r3, #1
 8002a3e:	e067      	b.n	8002b10 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a46:	d041      	beq.n	8002acc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a48:	f7fe f802 	bl	8000a50 <HAL_GetTick>
 8002a4c:	4602      	mov	r2, r0
 8002a4e:	683b      	ldr	r3, [r7, #0]
 8002a50:	1ad3      	subs	r3, r2, r3
 8002a52:	687a      	ldr	r2, [r7, #4]
 8002a54:	429a      	cmp	r2, r3
 8002a56:	d302      	bcc.n	8002a5e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d136      	bne.n	8002acc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8002a5e:	68bb      	ldr	r3, [r7, #8]
 8002a60:	0c1b      	lsrs	r3, r3, #16
 8002a62:	b2db      	uxtb	r3, r3
 8002a64:	2b01      	cmp	r3, #1
 8002a66:	d10c      	bne.n	8002a82 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	695b      	ldr	r3, [r3, #20]
 8002a6e:	43da      	mvns	r2, r3
 8002a70:	68bb      	ldr	r3, [r7, #8]
 8002a72:	4013      	ands	r3, r2
 8002a74:	b29b      	uxth	r3, r3
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	bf14      	ite	ne
 8002a7a:	2301      	movne	r3, #1
 8002a7c:	2300      	moveq	r3, #0
 8002a7e:	b2db      	uxtb	r3, r3
 8002a80:	e00b      	b.n	8002a9a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	699b      	ldr	r3, [r3, #24]
 8002a88:	43da      	mvns	r2, r3
 8002a8a:	68bb      	ldr	r3, [r7, #8]
 8002a8c:	4013      	ands	r3, r2
 8002a8e:	b29b      	uxth	r3, r3
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	bf14      	ite	ne
 8002a94:	2301      	movne	r3, #1
 8002a96:	2300      	moveq	r3, #0
 8002a98:	b2db      	uxtb	r3, r3
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d016      	beq.n	8002acc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	2220      	movs	r2, #32
 8002aa8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	2200      	movs	r2, #0
 8002ab0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ab8:	f043 0220 	orr.w	r2, r3, #32
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	2200      	movs	r2, #0
 8002ac4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002ac8:	2301      	movs	r3, #1
 8002aca:	e021      	b.n	8002b10 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002acc:	68bb      	ldr	r3, [r7, #8]
 8002ace:	0c1b      	lsrs	r3, r3, #16
 8002ad0:	b2db      	uxtb	r3, r3
 8002ad2:	2b01      	cmp	r3, #1
 8002ad4:	d10c      	bne.n	8002af0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	695b      	ldr	r3, [r3, #20]
 8002adc:	43da      	mvns	r2, r3
 8002ade:	68bb      	ldr	r3, [r7, #8]
 8002ae0:	4013      	ands	r3, r2
 8002ae2:	b29b      	uxth	r3, r3
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	bf14      	ite	ne
 8002ae8:	2301      	movne	r3, #1
 8002aea:	2300      	moveq	r3, #0
 8002aec:	b2db      	uxtb	r3, r3
 8002aee:	e00b      	b.n	8002b08 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	699b      	ldr	r3, [r3, #24]
 8002af6:	43da      	mvns	r2, r3
 8002af8:	68bb      	ldr	r3, [r7, #8]
 8002afa:	4013      	ands	r3, r2
 8002afc:	b29b      	uxth	r3, r3
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	bf14      	ite	ne
 8002b02:	2301      	movne	r3, #1
 8002b04:	2300      	moveq	r3, #0
 8002b06:	b2db      	uxtb	r3, r3
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	f47f af6d 	bne.w	80029e8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8002b0e:	2300      	movs	r3, #0
}
 8002b10:	4618      	mov	r0, r3
 8002b12:	3710      	adds	r7, #16
 8002b14:	46bd      	mov	sp, r7
 8002b16:	bd80      	pop	{r7, pc}

08002b18 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002b18:	b580      	push	{r7, lr}
 8002b1a:	b084      	sub	sp, #16
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	60f8      	str	r0, [r7, #12]
 8002b20:	60b9      	str	r1, [r7, #8]
 8002b22:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002b24:	e034      	b.n	8002b90 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002b26:	68f8      	ldr	r0, [r7, #12]
 8002b28:	f000 f8e3 	bl	8002cf2 <I2C_IsAcknowledgeFailed>
 8002b2c:	4603      	mov	r3, r0
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d001      	beq.n	8002b36 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002b32:	2301      	movs	r3, #1
 8002b34:	e034      	b.n	8002ba0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002b36:	68bb      	ldr	r3, [r7, #8]
 8002b38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b3c:	d028      	beq.n	8002b90 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b3e:	f7fd ff87 	bl	8000a50 <HAL_GetTick>
 8002b42:	4602      	mov	r2, r0
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	1ad3      	subs	r3, r2, r3
 8002b48:	68ba      	ldr	r2, [r7, #8]
 8002b4a:	429a      	cmp	r2, r3
 8002b4c:	d302      	bcc.n	8002b54 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002b4e:	68bb      	ldr	r3, [r7, #8]
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d11d      	bne.n	8002b90 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	695b      	ldr	r3, [r3, #20]
 8002b5a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002b5e:	2b80      	cmp	r3, #128	@ 0x80
 8002b60:	d016      	beq.n	8002b90 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	2200      	movs	r2, #0
 8002b66:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	2220      	movs	r2, #32
 8002b6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	2200      	movs	r2, #0
 8002b74:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b7c:	f043 0220 	orr.w	r2, r3, #32
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	2200      	movs	r2, #0
 8002b88:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002b8c:	2301      	movs	r3, #1
 8002b8e:	e007      	b.n	8002ba0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	695b      	ldr	r3, [r3, #20]
 8002b96:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002b9a:	2b80      	cmp	r3, #128	@ 0x80
 8002b9c:	d1c3      	bne.n	8002b26 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002b9e:	2300      	movs	r3, #0
}
 8002ba0:	4618      	mov	r0, r3
 8002ba2:	3710      	adds	r7, #16
 8002ba4:	46bd      	mov	sp, r7
 8002ba6:	bd80      	pop	{r7, pc}

08002ba8 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002ba8:	b580      	push	{r7, lr}
 8002baa:	b084      	sub	sp, #16
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	60f8      	str	r0, [r7, #12]
 8002bb0:	60b9      	str	r1, [r7, #8]
 8002bb2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002bb4:	e034      	b.n	8002c20 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002bb6:	68f8      	ldr	r0, [r7, #12]
 8002bb8:	f000 f89b 	bl	8002cf2 <I2C_IsAcknowledgeFailed>
 8002bbc:	4603      	mov	r3, r0
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d001      	beq.n	8002bc6 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002bc2:	2301      	movs	r3, #1
 8002bc4:	e034      	b.n	8002c30 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002bc6:	68bb      	ldr	r3, [r7, #8]
 8002bc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bcc:	d028      	beq.n	8002c20 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002bce:	f7fd ff3f 	bl	8000a50 <HAL_GetTick>
 8002bd2:	4602      	mov	r2, r0
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	1ad3      	subs	r3, r2, r3
 8002bd8:	68ba      	ldr	r2, [r7, #8]
 8002bda:	429a      	cmp	r2, r3
 8002bdc:	d302      	bcc.n	8002be4 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002bde:	68bb      	ldr	r3, [r7, #8]
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d11d      	bne.n	8002c20 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	695b      	ldr	r3, [r3, #20]
 8002bea:	f003 0304 	and.w	r3, r3, #4
 8002bee:	2b04      	cmp	r3, #4
 8002bf0:	d016      	beq.n	8002c20 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	2220      	movs	r2, #32
 8002bfc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	2200      	movs	r2, #0
 8002c04:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c0c:	f043 0220 	orr.w	r2, r3, #32
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	2200      	movs	r2, #0
 8002c18:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002c1c:	2301      	movs	r3, #1
 8002c1e:	e007      	b.n	8002c30 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	695b      	ldr	r3, [r3, #20]
 8002c26:	f003 0304 	and.w	r3, r3, #4
 8002c2a:	2b04      	cmp	r3, #4
 8002c2c:	d1c3      	bne.n	8002bb6 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002c2e:	2300      	movs	r3, #0
}
 8002c30:	4618      	mov	r0, r3
 8002c32:	3710      	adds	r7, #16
 8002c34:	46bd      	mov	sp, r7
 8002c36:	bd80      	pop	{r7, pc}

08002c38 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002c38:	b580      	push	{r7, lr}
 8002c3a:	b084      	sub	sp, #16
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	60f8      	str	r0, [r7, #12]
 8002c40:	60b9      	str	r1, [r7, #8]
 8002c42:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002c44:	e049      	b.n	8002cda <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	695b      	ldr	r3, [r3, #20]
 8002c4c:	f003 0310 	and.w	r3, r3, #16
 8002c50:	2b10      	cmp	r3, #16
 8002c52:	d119      	bne.n	8002c88 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f06f 0210 	mvn.w	r2, #16
 8002c5c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	2200      	movs	r2, #0
 8002c62:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	2220      	movs	r2, #32
 8002c68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	2200      	movs	r2, #0
 8002c70:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	2200      	movs	r2, #0
 8002c80:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002c84:	2301      	movs	r3, #1
 8002c86:	e030      	b.n	8002cea <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c88:	f7fd fee2 	bl	8000a50 <HAL_GetTick>
 8002c8c:	4602      	mov	r2, r0
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	1ad3      	subs	r3, r2, r3
 8002c92:	68ba      	ldr	r2, [r7, #8]
 8002c94:	429a      	cmp	r2, r3
 8002c96:	d302      	bcc.n	8002c9e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002c98:	68bb      	ldr	r3, [r7, #8]
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d11d      	bne.n	8002cda <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	695b      	ldr	r3, [r3, #20]
 8002ca4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002ca8:	2b40      	cmp	r3, #64	@ 0x40
 8002caa:	d016      	beq.n	8002cda <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	2200      	movs	r2, #0
 8002cb0:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	2220      	movs	r2, #32
 8002cb6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	2200      	movs	r2, #0
 8002cbe:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cc6:	f043 0220 	orr.w	r2, r3, #32
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8002cd6:	2301      	movs	r3, #1
 8002cd8:	e007      	b.n	8002cea <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	695b      	ldr	r3, [r3, #20]
 8002ce0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002ce4:	2b40      	cmp	r3, #64	@ 0x40
 8002ce6:	d1ae      	bne.n	8002c46 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002ce8:	2300      	movs	r3, #0
}
 8002cea:	4618      	mov	r0, r3
 8002cec:	3710      	adds	r7, #16
 8002cee:	46bd      	mov	sp, r7
 8002cf0:	bd80      	pop	{r7, pc}

08002cf2 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002cf2:	b480      	push	{r7}
 8002cf4:	b083      	sub	sp, #12
 8002cf6:	af00      	add	r7, sp, #0
 8002cf8:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	695b      	ldr	r3, [r3, #20]
 8002d00:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002d04:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002d08:	d11b      	bne.n	8002d42 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002d12:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	2200      	movs	r2, #0
 8002d18:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	2220      	movs	r2, #32
 8002d1e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	2200      	movs	r2, #0
 8002d26:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d2e:	f043 0204 	orr.w	r2, r3, #4
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	2200      	movs	r2, #0
 8002d3a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8002d3e:	2301      	movs	r3, #1
 8002d40:	e000      	b.n	8002d44 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002d42:	2300      	movs	r3, #0
}
 8002d44:	4618      	mov	r0, r3
 8002d46:	370c      	adds	r7, #12
 8002d48:	46bd      	mov	sp, r7
 8002d4a:	bc80      	pop	{r7}
 8002d4c:	4770      	bx	lr
	...

08002d50 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002d50:	b580      	push	{r7, lr}
 8002d52:	b086      	sub	sp, #24
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d101      	bne.n	8002d62 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002d5e:	2301      	movs	r3, #1
 8002d60:	e272      	b.n	8003248 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f003 0301 	and.w	r3, r3, #1
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	f000 8087 	beq.w	8002e7e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002d70:	4b92      	ldr	r3, [pc, #584]	@ (8002fbc <HAL_RCC_OscConfig+0x26c>)
 8002d72:	685b      	ldr	r3, [r3, #4]
 8002d74:	f003 030c 	and.w	r3, r3, #12
 8002d78:	2b04      	cmp	r3, #4
 8002d7a:	d00c      	beq.n	8002d96 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002d7c:	4b8f      	ldr	r3, [pc, #572]	@ (8002fbc <HAL_RCC_OscConfig+0x26c>)
 8002d7e:	685b      	ldr	r3, [r3, #4]
 8002d80:	f003 030c 	and.w	r3, r3, #12
 8002d84:	2b08      	cmp	r3, #8
 8002d86:	d112      	bne.n	8002dae <HAL_RCC_OscConfig+0x5e>
 8002d88:	4b8c      	ldr	r3, [pc, #560]	@ (8002fbc <HAL_RCC_OscConfig+0x26c>)
 8002d8a:	685b      	ldr	r3, [r3, #4]
 8002d8c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002d90:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002d94:	d10b      	bne.n	8002dae <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d96:	4b89      	ldr	r3, [pc, #548]	@ (8002fbc <HAL_RCC_OscConfig+0x26c>)
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d06c      	beq.n	8002e7c <HAL_RCC_OscConfig+0x12c>
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	685b      	ldr	r3, [r3, #4]
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d168      	bne.n	8002e7c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002daa:	2301      	movs	r3, #1
 8002dac:	e24c      	b.n	8003248 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	685b      	ldr	r3, [r3, #4]
 8002db2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002db6:	d106      	bne.n	8002dc6 <HAL_RCC_OscConfig+0x76>
 8002db8:	4b80      	ldr	r3, [pc, #512]	@ (8002fbc <HAL_RCC_OscConfig+0x26c>)
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	4a7f      	ldr	r2, [pc, #508]	@ (8002fbc <HAL_RCC_OscConfig+0x26c>)
 8002dbe:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002dc2:	6013      	str	r3, [r2, #0]
 8002dc4:	e02e      	b.n	8002e24 <HAL_RCC_OscConfig+0xd4>
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	685b      	ldr	r3, [r3, #4]
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d10c      	bne.n	8002de8 <HAL_RCC_OscConfig+0x98>
 8002dce:	4b7b      	ldr	r3, [pc, #492]	@ (8002fbc <HAL_RCC_OscConfig+0x26c>)
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	4a7a      	ldr	r2, [pc, #488]	@ (8002fbc <HAL_RCC_OscConfig+0x26c>)
 8002dd4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002dd8:	6013      	str	r3, [r2, #0]
 8002dda:	4b78      	ldr	r3, [pc, #480]	@ (8002fbc <HAL_RCC_OscConfig+0x26c>)
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	4a77      	ldr	r2, [pc, #476]	@ (8002fbc <HAL_RCC_OscConfig+0x26c>)
 8002de0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002de4:	6013      	str	r3, [r2, #0]
 8002de6:	e01d      	b.n	8002e24 <HAL_RCC_OscConfig+0xd4>
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	685b      	ldr	r3, [r3, #4]
 8002dec:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002df0:	d10c      	bne.n	8002e0c <HAL_RCC_OscConfig+0xbc>
 8002df2:	4b72      	ldr	r3, [pc, #456]	@ (8002fbc <HAL_RCC_OscConfig+0x26c>)
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	4a71      	ldr	r2, [pc, #452]	@ (8002fbc <HAL_RCC_OscConfig+0x26c>)
 8002df8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002dfc:	6013      	str	r3, [r2, #0]
 8002dfe:	4b6f      	ldr	r3, [pc, #444]	@ (8002fbc <HAL_RCC_OscConfig+0x26c>)
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	4a6e      	ldr	r2, [pc, #440]	@ (8002fbc <HAL_RCC_OscConfig+0x26c>)
 8002e04:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002e08:	6013      	str	r3, [r2, #0]
 8002e0a:	e00b      	b.n	8002e24 <HAL_RCC_OscConfig+0xd4>
 8002e0c:	4b6b      	ldr	r3, [pc, #428]	@ (8002fbc <HAL_RCC_OscConfig+0x26c>)
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	4a6a      	ldr	r2, [pc, #424]	@ (8002fbc <HAL_RCC_OscConfig+0x26c>)
 8002e12:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002e16:	6013      	str	r3, [r2, #0]
 8002e18:	4b68      	ldr	r3, [pc, #416]	@ (8002fbc <HAL_RCC_OscConfig+0x26c>)
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	4a67      	ldr	r2, [pc, #412]	@ (8002fbc <HAL_RCC_OscConfig+0x26c>)
 8002e1e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002e22:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	685b      	ldr	r3, [r3, #4]
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d013      	beq.n	8002e54 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e2c:	f7fd fe10 	bl	8000a50 <HAL_GetTick>
 8002e30:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e32:	e008      	b.n	8002e46 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002e34:	f7fd fe0c 	bl	8000a50 <HAL_GetTick>
 8002e38:	4602      	mov	r2, r0
 8002e3a:	693b      	ldr	r3, [r7, #16]
 8002e3c:	1ad3      	subs	r3, r2, r3
 8002e3e:	2b64      	cmp	r3, #100	@ 0x64
 8002e40:	d901      	bls.n	8002e46 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002e42:	2303      	movs	r3, #3
 8002e44:	e200      	b.n	8003248 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e46:	4b5d      	ldr	r3, [pc, #372]	@ (8002fbc <HAL_RCC_OscConfig+0x26c>)
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d0f0      	beq.n	8002e34 <HAL_RCC_OscConfig+0xe4>
 8002e52:	e014      	b.n	8002e7e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e54:	f7fd fdfc 	bl	8000a50 <HAL_GetTick>
 8002e58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e5a:	e008      	b.n	8002e6e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002e5c:	f7fd fdf8 	bl	8000a50 <HAL_GetTick>
 8002e60:	4602      	mov	r2, r0
 8002e62:	693b      	ldr	r3, [r7, #16]
 8002e64:	1ad3      	subs	r3, r2, r3
 8002e66:	2b64      	cmp	r3, #100	@ 0x64
 8002e68:	d901      	bls.n	8002e6e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002e6a:	2303      	movs	r3, #3
 8002e6c:	e1ec      	b.n	8003248 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e6e:	4b53      	ldr	r3, [pc, #332]	@ (8002fbc <HAL_RCC_OscConfig+0x26c>)
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d1f0      	bne.n	8002e5c <HAL_RCC_OscConfig+0x10c>
 8002e7a:	e000      	b.n	8002e7e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e7c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f003 0302 	and.w	r3, r3, #2
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d063      	beq.n	8002f52 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002e8a:	4b4c      	ldr	r3, [pc, #304]	@ (8002fbc <HAL_RCC_OscConfig+0x26c>)
 8002e8c:	685b      	ldr	r3, [r3, #4]
 8002e8e:	f003 030c 	and.w	r3, r3, #12
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d00b      	beq.n	8002eae <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002e96:	4b49      	ldr	r3, [pc, #292]	@ (8002fbc <HAL_RCC_OscConfig+0x26c>)
 8002e98:	685b      	ldr	r3, [r3, #4]
 8002e9a:	f003 030c 	and.w	r3, r3, #12
 8002e9e:	2b08      	cmp	r3, #8
 8002ea0:	d11c      	bne.n	8002edc <HAL_RCC_OscConfig+0x18c>
 8002ea2:	4b46      	ldr	r3, [pc, #280]	@ (8002fbc <HAL_RCC_OscConfig+0x26c>)
 8002ea4:	685b      	ldr	r3, [r3, #4]
 8002ea6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d116      	bne.n	8002edc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002eae:	4b43      	ldr	r3, [pc, #268]	@ (8002fbc <HAL_RCC_OscConfig+0x26c>)
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f003 0302 	and.w	r3, r3, #2
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d005      	beq.n	8002ec6 <HAL_RCC_OscConfig+0x176>
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	691b      	ldr	r3, [r3, #16]
 8002ebe:	2b01      	cmp	r3, #1
 8002ec0:	d001      	beq.n	8002ec6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002ec2:	2301      	movs	r3, #1
 8002ec4:	e1c0      	b.n	8003248 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ec6:	4b3d      	ldr	r3, [pc, #244]	@ (8002fbc <HAL_RCC_OscConfig+0x26c>)
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	695b      	ldr	r3, [r3, #20]
 8002ed2:	00db      	lsls	r3, r3, #3
 8002ed4:	4939      	ldr	r1, [pc, #228]	@ (8002fbc <HAL_RCC_OscConfig+0x26c>)
 8002ed6:	4313      	orrs	r3, r2
 8002ed8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002eda:	e03a      	b.n	8002f52 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	691b      	ldr	r3, [r3, #16]
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d020      	beq.n	8002f26 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002ee4:	4b36      	ldr	r3, [pc, #216]	@ (8002fc0 <HAL_RCC_OscConfig+0x270>)
 8002ee6:	2201      	movs	r2, #1
 8002ee8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002eea:	f7fd fdb1 	bl	8000a50 <HAL_GetTick>
 8002eee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ef0:	e008      	b.n	8002f04 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ef2:	f7fd fdad 	bl	8000a50 <HAL_GetTick>
 8002ef6:	4602      	mov	r2, r0
 8002ef8:	693b      	ldr	r3, [r7, #16]
 8002efa:	1ad3      	subs	r3, r2, r3
 8002efc:	2b02      	cmp	r3, #2
 8002efe:	d901      	bls.n	8002f04 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002f00:	2303      	movs	r3, #3
 8002f02:	e1a1      	b.n	8003248 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f04:	4b2d      	ldr	r3, [pc, #180]	@ (8002fbc <HAL_RCC_OscConfig+0x26c>)
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f003 0302 	and.w	r3, r3, #2
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d0f0      	beq.n	8002ef2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f10:	4b2a      	ldr	r3, [pc, #168]	@ (8002fbc <HAL_RCC_OscConfig+0x26c>)
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	695b      	ldr	r3, [r3, #20]
 8002f1c:	00db      	lsls	r3, r3, #3
 8002f1e:	4927      	ldr	r1, [pc, #156]	@ (8002fbc <HAL_RCC_OscConfig+0x26c>)
 8002f20:	4313      	orrs	r3, r2
 8002f22:	600b      	str	r3, [r1, #0]
 8002f24:	e015      	b.n	8002f52 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002f26:	4b26      	ldr	r3, [pc, #152]	@ (8002fc0 <HAL_RCC_OscConfig+0x270>)
 8002f28:	2200      	movs	r2, #0
 8002f2a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f2c:	f7fd fd90 	bl	8000a50 <HAL_GetTick>
 8002f30:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f32:	e008      	b.n	8002f46 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002f34:	f7fd fd8c 	bl	8000a50 <HAL_GetTick>
 8002f38:	4602      	mov	r2, r0
 8002f3a:	693b      	ldr	r3, [r7, #16]
 8002f3c:	1ad3      	subs	r3, r2, r3
 8002f3e:	2b02      	cmp	r3, #2
 8002f40:	d901      	bls.n	8002f46 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002f42:	2303      	movs	r3, #3
 8002f44:	e180      	b.n	8003248 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f46:	4b1d      	ldr	r3, [pc, #116]	@ (8002fbc <HAL_RCC_OscConfig+0x26c>)
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f003 0302 	and.w	r3, r3, #2
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d1f0      	bne.n	8002f34 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	f003 0308 	and.w	r3, r3, #8
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d03a      	beq.n	8002fd4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	699b      	ldr	r3, [r3, #24]
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d019      	beq.n	8002f9a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002f66:	4b17      	ldr	r3, [pc, #92]	@ (8002fc4 <HAL_RCC_OscConfig+0x274>)
 8002f68:	2201      	movs	r2, #1
 8002f6a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f6c:	f7fd fd70 	bl	8000a50 <HAL_GetTick>
 8002f70:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f72:	e008      	b.n	8002f86 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002f74:	f7fd fd6c 	bl	8000a50 <HAL_GetTick>
 8002f78:	4602      	mov	r2, r0
 8002f7a:	693b      	ldr	r3, [r7, #16]
 8002f7c:	1ad3      	subs	r3, r2, r3
 8002f7e:	2b02      	cmp	r3, #2
 8002f80:	d901      	bls.n	8002f86 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002f82:	2303      	movs	r3, #3
 8002f84:	e160      	b.n	8003248 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f86:	4b0d      	ldr	r3, [pc, #52]	@ (8002fbc <HAL_RCC_OscConfig+0x26c>)
 8002f88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f8a:	f003 0302 	and.w	r3, r3, #2
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d0f0      	beq.n	8002f74 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002f92:	2001      	movs	r0, #1
 8002f94:	f000 faba 	bl	800350c <RCC_Delay>
 8002f98:	e01c      	b.n	8002fd4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002f9a:	4b0a      	ldr	r3, [pc, #40]	@ (8002fc4 <HAL_RCC_OscConfig+0x274>)
 8002f9c:	2200      	movs	r2, #0
 8002f9e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002fa0:	f7fd fd56 	bl	8000a50 <HAL_GetTick>
 8002fa4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002fa6:	e00f      	b.n	8002fc8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002fa8:	f7fd fd52 	bl	8000a50 <HAL_GetTick>
 8002fac:	4602      	mov	r2, r0
 8002fae:	693b      	ldr	r3, [r7, #16]
 8002fb0:	1ad3      	subs	r3, r2, r3
 8002fb2:	2b02      	cmp	r3, #2
 8002fb4:	d908      	bls.n	8002fc8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002fb6:	2303      	movs	r3, #3
 8002fb8:	e146      	b.n	8003248 <HAL_RCC_OscConfig+0x4f8>
 8002fba:	bf00      	nop
 8002fbc:	40021000 	.word	0x40021000
 8002fc0:	42420000 	.word	0x42420000
 8002fc4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002fc8:	4b92      	ldr	r3, [pc, #584]	@ (8003214 <HAL_RCC_OscConfig+0x4c4>)
 8002fca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fcc:	f003 0302 	and.w	r3, r3, #2
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d1e9      	bne.n	8002fa8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	f003 0304 	and.w	r3, r3, #4
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	f000 80a6 	beq.w	800312e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002fe2:	2300      	movs	r3, #0
 8002fe4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002fe6:	4b8b      	ldr	r3, [pc, #556]	@ (8003214 <HAL_RCC_OscConfig+0x4c4>)
 8002fe8:	69db      	ldr	r3, [r3, #28]
 8002fea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d10d      	bne.n	800300e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ff2:	4b88      	ldr	r3, [pc, #544]	@ (8003214 <HAL_RCC_OscConfig+0x4c4>)
 8002ff4:	69db      	ldr	r3, [r3, #28]
 8002ff6:	4a87      	ldr	r2, [pc, #540]	@ (8003214 <HAL_RCC_OscConfig+0x4c4>)
 8002ff8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002ffc:	61d3      	str	r3, [r2, #28]
 8002ffe:	4b85      	ldr	r3, [pc, #532]	@ (8003214 <HAL_RCC_OscConfig+0x4c4>)
 8003000:	69db      	ldr	r3, [r3, #28]
 8003002:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003006:	60bb      	str	r3, [r7, #8]
 8003008:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800300a:	2301      	movs	r3, #1
 800300c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800300e:	4b82      	ldr	r3, [pc, #520]	@ (8003218 <HAL_RCC_OscConfig+0x4c8>)
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003016:	2b00      	cmp	r3, #0
 8003018:	d118      	bne.n	800304c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800301a:	4b7f      	ldr	r3, [pc, #508]	@ (8003218 <HAL_RCC_OscConfig+0x4c8>)
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	4a7e      	ldr	r2, [pc, #504]	@ (8003218 <HAL_RCC_OscConfig+0x4c8>)
 8003020:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003024:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003026:	f7fd fd13 	bl	8000a50 <HAL_GetTick>
 800302a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800302c:	e008      	b.n	8003040 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800302e:	f7fd fd0f 	bl	8000a50 <HAL_GetTick>
 8003032:	4602      	mov	r2, r0
 8003034:	693b      	ldr	r3, [r7, #16]
 8003036:	1ad3      	subs	r3, r2, r3
 8003038:	2b64      	cmp	r3, #100	@ 0x64
 800303a:	d901      	bls.n	8003040 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800303c:	2303      	movs	r3, #3
 800303e:	e103      	b.n	8003248 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003040:	4b75      	ldr	r3, [pc, #468]	@ (8003218 <HAL_RCC_OscConfig+0x4c8>)
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003048:	2b00      	cmp	r3, #0
 800304a:	d0f0      	beq.n	800302e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	68db      	ldr	r3, [r3, #12]
 8003050:	2b01      	cmp	r3, #1
 8003052:	d106      	bne.n	8003062 <HAL_RCC_OscConfig+0x312>
 8003054:	4b6f      	ldr	r3, [pc, #444]	@ (8003214 <HAL_RCC_OscConfig+0x4c4>)
 8003056:	6a1b      	ldr	r3, [r3, #32]
 8003058:	4a6e      	ldr	r2, [pc, #440]	@ (8003214 <HAL_RCC_OscConfig+0x4c4>)
 800305a:	f043 0301 	orr.w	r3, r3, #1
 800305e:	6213      	str	r3, [r2, #32]
 8003060:	e02d      	b.n	80030be <HAL_RCC_OscConfig+0x36e>
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	68db      	ldr	r3, [r3, #12]
 8003066:	2b00      	cmp	r3, #0
 8003068:	d10c      	bne.n	8003084 <HAL_RCC_OscConfig+0x334>
 800306a:	4b6a      	ldr	r3, [pc, #424]	@ (8003214 <HAL_RCC_OscConfig+0x4c4>)
 800306c:	6a1b      	ldr	r3, [r3, #32]
 800306e:	4a69      	ldr	r2, [pc, #420]	@ (8003214 <HAL_RCC_OscConfig+0x4c4>)
 8003070:	f023 0301 	bic.w	r3, r3, #1
 8003074:	6213      	str	r3, [r2, #32]
 8003076:	4b67      	ldr	r3, [pc, #412]	@ (8003214 <HAL_RCC_OscConfig+0x4c4>)
 8003078:	6a1b      	ldr	r3, [r3, #32]
 800307a:	4a66      	ldr	r2, [pc, #408]	@ (8003214 <HAL_RCC_OscConfig+0x4c4>)
 800307c:	f023 0304 	bic.w	r3, r3, #4
 8003080:	6213      	str	r3, [r2, #32]
 8003082:	e01c      	b.n	80030be <HAL_RCC_OscConfig+0x36e>
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	68db      	ldr	r3, [r3, #12]
 8003088:	2b05      	cmp	r3, #5
 800308a:	d10c      	bne.n	80030a6 <HAL_RCC_OscConfig+0x356>
 800308c:	4b61      	ldr	r3, [pc, #388]	@ (8003214 <HAL_RCC_OscConfig+0x4c4>)
 800308e:	6a1b      	ldr	r3, [r3, #32]
 8003090:	4a60      	ldr	r2, [pc, #384]	@ (8003214 <HAL_RCC_OscConfig+0x4c4>)
 8003092:	f043 0304 	orr.w	r3, r3, #4
 8003096:	6213      	str	r3, [r2, #32]
 8003098:	4b5e      	ldr	r3, [pc, #376]	@ (8003214 <HAL_RCC_OscConfig+0x4c4>)
 800309a:	6a1b      	ldr	r3, [r3, #32]
 800309c:	4a5d      	ldr	r2, [pc, #372]	@ (8003214 <HAL_RCC_OscConfig+0x4c4>)
 800309e:	f043 0301 	orr.w	r3, r3, #1
 80030a2:	6213      	str	r3, [r2, #32]
 80030a4:	e00b      	b.n	80030be <HAL_RCC_OscConfig+0x36e>
 80030a6:	4b5b      	ldr	r3, [pc, #364]	@ (8003214 <HAL_RCC_OscConfig+0x4c4>)
 80030a8:	6a1b      	ldr	r3, [r3, #32]
 80030aa:	4a5a      	ldr	r2, [pc, #360]	@ (8003214 <HAL_RCC_OscConfig+0x4c4>)
 80030ac:	f023 0301 	bic.w	r3, r3, #1
 80030b0:	6213      	str	r3, [r2, #32]
 80030b2:	4b58      	ldr	r3, [pc, #352]	@ (8003214 <HAL_RCC_OscConfig+0x4c4>)
 80030b4:	6a1b      	ldr	r3, [r3, #32]
 80030b6:	4a57      	ldr	r2, [pc, #348]	@ (8003214 <HAL_RCC_OscConfig+0x4c4>)
 80030b8:	f023 0304 	bic.w	r3, r3, #4
 80030bc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	68db      	ldr	r3, [r3, #12]
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d015      	beq.n	80030f2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80030c6:	f7fd fcc3 	bl	8000a50 <HAL_GetTick>
 80030ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80030cc:	e00a      	b.n	80030e4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80030ce:	f7fd fcbf 	bl	8000a50 <HAL_GetTick>
 80030d2:	4602      	mov	r2, r0
 80030d4:	693b      	ldr	r3, [r7, #16]
 80030d6:	1ad3      	subs	r3, r2, r3
 80030d8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80030dc:	4293      	cmp	r3, r2
 80030de:	d901      	bls.n	80030e4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80030e0:	2303      	movs	r3, #3
 80030e2:	e0b1      	b.n	8003248 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80030e4:	4b4b      	ldr	r3, [pc, #300]	@ (8003214 <HAL_RCC_OscConfig+0x4c4>)
 80030e6:	6a1b      	ldr	r3, [r3, #32]
 80030e8:	f003 0302 	and.w	r3, r3, #2
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d0ee      	beq.n	80030ce <HAL_RCC_OscConfig+0x37e>
 80030f0:	e014      	b.n	800311c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80030f2:	f7fd fcad 	bl	8000a50 <HAL_GetTick>
 80030f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80030f8:	e00a      	b.n	8003110 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80030fa:	f7fd fca9 	bl	8000a50 <HAL_GetTick>
 80030fe:	4602      	mov	r2, r0
 8003100:	693b      	ldr	r3, [r7, #16]
 8003102:	1ad3      	subs	r3, r2, r3
 8003104:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003108:	4293      	cmp	r3, r2
 800310a:	d901      	bls.n	8003110 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800310c:	2303      	movs	r3, #3
 800310e:	e09b      	b.n	8003248 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003110:	4b40      	ldr	r3, [pc, #256]	@ (8003214 <HAL_RCC_OscConfig+0x4c4>)
 8003112:	6a1b      	ldr	r3, [r3, #32]
 8003114:	f003 0302 	and.w	r3, r3, #2
 8003118:	2b00      	cmp	r3, #0
 800311a:	d1ee      	bne.n	80030fa <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800311c:	7dfb      	ldrb	r3, [r7, #23]
 800311e:	2b01      	cmp	r3, #1
 8003120:	d105      	bne.n	800312e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003122:	4b3c      	ldr	r3, [pc, #240]	@ (8003214 <HAL_RCC_OscConfig+0x4c4>)
 8003124:	69db      	ldr	r3, [r3, #28]
 8003126:	4a3b      	ldr	r2, [pc, #236]	@ (8003214 <HAL_RCC_OscConfig+0x4c4>)
 8003128:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800312c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	69db      	ldr	r3, [r3, #28]
 8003132:	2b00      	cmp	r3, #0
 8003134:	f000 8087 	beq.w	8003246 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003138:	4b36      	ldr	r3, [pc, #216]	@ (8003214 <HAL_RCC_OscConfig+0x4c4>)
 800313a:	685b      	ldr	r3, [r3, #4]
 800313c:	f003 030c 	and.w	r3, r3, #12
 8003140:	2b08      	cmp	r3, #8
 8003142:	d061      	beq.n	8003208 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	69db      	ldr	r3, [r3, #28]
 8003148:	2b02      	cmp	r3, #2
 800314a:	d146      	bne.n	80031da <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800314c:	4b33      	ldr	r3, [pc, #204]	@ (800321c <HAL_RCC_OscConfig+0x4cc>)
 800314e:	2200      	movs	r2, #0
 8003150:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003152:	f7fd fc7d 	bl	8000a50 <HAL_GetTick>
 8003156:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003158:	e008      	b.n	800316c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800315a:	f7fd fc79 	bl	8000a50 <HAL_GetTick>
 800315e:	4602      	mov	r2, r0
 8003160:	693b      	ldr	r3, [r7, #16]
 8003162:	1ad3      	subs	r3, r2, r3
 8003164:	2b02      	cmp	r3, #2
 8003166:	d901      	bls.n	800316c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003168:	2303      	movs	r3, #3
 800316a:	e06d      	b.n	8003248 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800316c:	4b29      	ldr	r3, [pc, #164]	@ (8003214 <HAL_RCC_OscConfig+0x4c4>)
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003174:	2b00      	cmp	r3, #0
 8003176:	d1f0      	bne.n	800315a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	6a1b      	ldr	r3, [r3, #32]
 800317c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003180:	d108      	bne.n	8003194 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003182:	4b24      	ldr	r3, [pc, #144]	@ (8003214 <HAL_RCC_OscConfig+0x4c4>)
 8003184:	685b      	ldr	r3, [r3, #4]
 8003186:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	689b      	ldr	r3, [r3, #8]
 800318e:	4921      	ldr	r1, [pc, #132]	@ (8003214 <HAL_RCC_OscConfig+0x4c4>)
 8003190:	4313      	orrs	r3, r2
 8003192:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003194:	4b1f      	ldr	r3, [pc, #124]	@ (8003214 <HAL_RCC_OscConfig+0x4c4>)
 8003196:	685b      	ldr	r3, [r3, #4]
 8003198:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	6a19      	ldr	r1, [r3, #32]
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031a4:	430b      	orrs	r3, r1
 80031a6:	491b      	ldr	r1, [pc, #108]	@ (8003214 <HAL_RCC_OscConfig+0x4c4>)
 80031a8:	4313      	orrs	r3, r2
 80031aa:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80031ac:	4b1b      	ldr	r3, [pc, #108]	@ (800321c <HAL_RCC_OscConfig+0x4cc>)
 80031ae:	2201      	movs	r2, #1
 80031b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031b2:	f7fd fc4d 	bl	8000a50 <HAL_GetTick>
 80031b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80031b8:	e008      	b.n	80031cc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80031ba:	f7fd fc49 	bl	8000a50 <HAL_GetTick>
 80031be:	4602      	mov	r2, r0
 80031c0:	693b      	ldr	r3, [r7, #16]
 80031c2:	1ad3      	subs	r3, r2, r3
 80031c4:	2b02      	cmp	r3, #2
 80031c6:	d901      	bls.n	80031cc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80031c8:	2303      	movs	r3, #3
 80031ca:	e03d      	b.n	8003248 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80031cc:	4b11      	ldr	r3, [pc, #68]	@ (8003214 <HAL_RCC_OscConfig+0x4c4>)
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d0f0      	beq.n	80031ba <HAL_RCC_OscConfig+0x46a>
 80031d8:	e035      	b.n	8003246 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80031da:	4b10      	ldr	r3, [pc, #64]	@ (800321c <HAL_RCC_OscConfig+0x4cc>)
 80031dc:	2200      	movs	r2, #0
 80031de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031e0:	f7fd fc36 	bl	8000a50 <HAL_GetTick>
 80031e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80031e6:	e008      	b.n	80031fa <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80031e8:	f7fd fc32 	bl	8000a50 <HAL_GetTick>
 80031ec:	4602      	mov	r2, r0
 80031ee:	693b      	ldr	r3, [r7, #16]
 80031f0:	1ad3      	subs	r3, r2, r3
 80031f2:	2b02      	cmp	r3, #2
 80031f4:	d901      	bls.n	80031fa <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80031f6:	2303      	movs	r3, #3
 80031f8:	e026      	b.n	8003248 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80031fa:	4b06      	ldr	r3, [pc, #24]	@ (8003214 <HAL_RCC_OscConfig+0x4c4>)
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003202:	2b00      	cmp	r3, #0
 8003204:	d1f0      	bne.n	80031e8 <HAL_RCC_OscConfig+0x498>
 8003206:	e01e      	b.n	8003246 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	69db      	ldr	r3, [r3, #28]
 800320c:	2b01      	cmp	r3, #1
 800320e:	d107      	bne.n	8003220 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003210:	2301      	movs	r3, #1
 8003212:	e019      	b.n	8003248 <HAL_RCC_OscConfig+0x4f8>
 8003214:	40021000 	.word	0x40021000
 8003218:	40007000 	.word	0x40007000
 800321c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003220:	4b0b      	ldr	r3, [pc, #44]	@ (8003250 <HAL_RCC_OscConfig+0x500>)
 8003222:	685b      	ldr	r3, [r3, #4]
 8003224:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	6a1b      	ldr	r3, [r3, #32]
 8003230:	429a      	cmp	r2, r3
 8003232:	d106      	bne.n	8003242 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800323e:	429a      	cmp	r2, r3
 8003240:	d001      	beq.n	8003246 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003242:	2301      	movs	r3, #1
 8003244:	e000      	b.n	8003248 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003246:	2300      	movs	r3, #0
}
 8003248:	4618      	mov	r0, r3
 800324a:	3718      	adds	r7, #24
 800324c:	46bd      	mov	sp, r7
 800324e:	bd80      	pop	{r7, pc}
 8003250:	40021000 	.word	0x40021000

08003254 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003254:	b580      	push	{r7, lr}
 8003256:	b084      	sub	sp, #16
 8003258:	af00      	add	r7, sp, #0
 800325a:	6078      	str	r0, [r7, #4]
 800325c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	2b00      	cmp	r3, #0
 8003262:	d101      	bne.n	8003268 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003264:	2301      	movs	r3, #1
 8003266:	e0d0      	b.n	800340a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003268:	4b6a      	ldr	r3, [pc, #424]	@ (8003414 <HAL_RCC_ClockConfig+0x1c0>)
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	f003 0307 	and.w	r3, r3, #7
 8003270:	683a      	ldr	r2, [r7, #0]
 8003272:	429a      	cmp	r2, r3
 8003274:	d910      	bls.n	8003298 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003276:	4b67      	ldr	r3, [pc, #412]	@ (8003414 <HAL_RCC_ClockConfig+0x1c0>)
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	f023 0207 	bic.w	r2, r3, #7
 800327e:	4965      	ldr	r1, [pc, #404]	@ (8003414 <HAL_RCC_ClockConfig+0x1c0>)
 8003280:	683b      	ldr	r3, [r7, #0]
 8003282:	4313      	orrs	r3, r2
 8003284:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003286:	4b63      	ldr	r3, [pc, #396]	@ (8003414 <HAL_RCC_ClockConfig+0x1c0>)
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f003 0307 	and.w	r3, r3, #7
 800328e:	683a      	ldr	r2, [r7, #0]
 8003290:	429a      	cmp	r2, r3
 8003292:	d001      	beq.n	8003298 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003294:	2301      	movs	r3, #1
 8003296:	e0b8      	b.n	800340a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f003 0302 	and.w	r3, r3, #2
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d020      	beq.n	80032e6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f003 0304 	and.w	r3, r3, #4
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d005      	beq.n	80032bc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80032b0:	4b59      	ldr	r3, [pc, #356]	@ (8003418 <HAL_RCC_ClockConfig+0x1c4>)
 80032b2:	685b      	ldr	r3, [r3, #4]
 80032b4:	4a58      	ldr	r2, [pc, #352]	@ (8003418 <HAL_RCC_ClockConfig+0x1c4>)
 80032b6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80032ba:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	f003 0308 	and.w	r3, r3, #8
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d005      	beq.n	80032d4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80032c8:	4b53      	ldr	r3, [pc, #332]	@ (8003418 <HAL_RCC_ClockConfig+0x1c4>)
 80032ca:	685b      	ldr	r3, [r3, #4]
 80032cc:	4a52      	ldr	r2, [pc, #328]	@ (8003418 <HAL_RCC_ClockConfig+0x1c4>)
 80032ce:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80032d2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80032d4:	4b50      	ldr	r3, [pc, #320]	@ (8003418 <HAL_RCC_ClockConfig+0x1c4>)
 80032d6:	685b      	ldr	r3, [r3, #4]
 80032d8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	689b      	ldr	r3, [r3, #8]
 80032e0:	494d      	ldr	r1, [pc, #308]	@ (8003418 <HAL_RCC_ClockConfig+0x1c4>)
 80032e2:	4313      	orrs	r3, r2
 80032e4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f003 0301 	and.w	r3, r3, #1
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d040      	beq.n	8003374 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	685b      	ldr	r3, [r3, #4]
 80032f6:	2b01      	cmp	r3, #1
 80032f8:	d107      	bne.n	800330a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032fa:	4b47      	ldr	r3, [pc, #284]	@ (8003418 <HAL_RCC_ClockConfig+0x1c4>)
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003302:	2b00      	cmp	r3, #0
 8003304:	d115      	bne.n	8003332 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003306:	2301      	movs	r3, #1
 8003308:	e07f      	b.n	800340a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	685b      	ldr	r3, [r3, #4]
 800330e:	2b02      	cmp	r3, #2
 8003310:	d107      	bne.n	8003322 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003312:	4b41      	ldr	r3, [pc, #260]	@ (8003418 <HAL_RCC_ClockConfig+0x1c4>)
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800331a:	2b00      	cmp	r3, #0
 800331c:	d109      	bne.n	8003332 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800331e:	2301      	movs	r3, #1
 8003320:	e073      	b.n	800340a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003322:	4b3d      	ldr	r3, [pc, #244]	@ (8003418 <HAL_RCC_ClockConfig+0x1c4>)
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	f003 0302 	and.w	r3, r3, #2
 800332a:	2b00      	cmp	r3, #0
 800332c:	d101      	bne.n	8003332 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800332e:	2301      	movs	r3, #1
 8003330:	e06b      	b.n	800340a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003332:	4b39      	ldr	r3, [pc, #228]	@ (8003418 <HAL_RCC_ClockConfig+0x1c4>)
 8003334:	685b      	ldr	r3, [r3, #4]
 8003336:	f023 0203 	bic.w	r2, r3, #3
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	685b      	ldr	r3, [r3, #4]
 800333e:	4936      	ldr	r1, [pc, #216]	@ (8003418 <HAL_RCC_ClockConfig+0x1c4>)
 8003340:	4313      	orrs	r3, r2
 8003342:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003344:	f7fd fb84 	bl	8000a50 <HAL_GetTick>
 8003348:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800334a:	e00a      	b.n	8003362 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800334c:	f7fd fb80 	bl	8000a50 <HAL_GetTick>
 8003350:	4602      	mov	r2, r0
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	1ad3      	subs	r3, r2, r3
 8003356:	f241 3288 	movw	r2, #5000	@ 0x1388
 800335a:	4293      	cmp	r3, r2
 800335c:	d901      	bls.n	8003362 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800335e:	2303      	movs	r3, #3
 8003360:	e053      	b.n	800340a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003362:	4b2d      	ldr	r3, [pc, #180]	@ (8003418 <HAL_RCC_ClockConfig+0x1c4>)
 8003364:	685b      	ldr	r3, [r3, #4]
 8003366:	f003 020c 	and.w	r2, r3, #12
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	685b      	ldr	r3, [r3, #4]
 800336e:	009b      	lsls	r3, r3, #2
 8003370:	429a      	cmp	r2, r3
 8003372:	d1eb      	bne.n	800334c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003374:	4b27      	ldr	r3, [pc, #156]	@ (8003414 <HAL_RCC_ClockConfig+0x1c0>)
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f003 0307 	and.w	r3, r3, #7
 800337c:	683a      	ldr	r2, [r7, #0]
 800337e:	429a      	cmp	r2, r3
 8003380:	d210      	bcs.n	80033a4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003382:	4b24      	ldr	r3, [pc, #144]	@ (8003414 <HAL_RCC_ClockConfig+0x1c0>)
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f023 0207 	bic.w	r2, r3, #7
 800338a:	4922      	ldr	r1, [pc, #136]	@ (8003414 <HAL_RCC_ClockConfig+0x1c0>)
 800338c:	683b      	ldr	r3, [r7, #0]
 800338e:	4313      	orrs	r3, r2
 8003390:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003392:	4b20      	ldr	r3, [pc, #128]	@ (8003414 <HAL_RCC_ClockConfig+0x1c0>)
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	f003 0307 	and.w	r3, r3, #7
 800339a:	683a      	ldr	r2, [r7, #0]
 800339c:	429a      	cmp	r2, r3
 800339e:	d001      	beq.n	80033a4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80033a0:	2301      	movs	r3, #1
 80033a2:	e032      	b.n	800340a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f003 0304 	and.w	r3, r3, #4
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d008      	beq.n	80033c2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80033b0:	4b19      	ldr	r3, [pc, #100]	@ (8003418 <HAL_RCC_ClockConfig+0x1c4>)
 80033b2:	685b      	ldr	r3, [r3, #4]
 80033b4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	68db      	ldr	r3, [r3, #12]
 80033bc:	4916      	ldr	r1, [pc, #88]	@ (8003418 <HAL_RCC_ClockConfig+0x1c4>)
 80033be:	4313      	orrs	r3, r2
 80033c0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	f003 0308 	and.w	r3, r3, #8
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d009      	beq.n	80033e2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80033ce:	4b12      	ldr	r3, [pc, #72]	@ (8003418 <HAL_RCC_ClockConfig+0x1c4>)
 80033d0:	685b      	ldr	r3, [r3, #4]
 80033d2:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	691b      	ldr	r3, [r3, #16]
 80033da:	00db      	lsls	r3, r3, #3
 80033dc:	490e      	ldr	r1, [pc, #56]	@ (8003418 <HAL_RCC_ClockConfig+0x1c4>)
 80033de:	4313      	orrs	r3, r2
 80033e0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80033e2:	f000 f821 	bl	8003428 <HAL_RCC_GetSysClockFreq>
 80033e6:	4602      	mov	r2, r0
 80033e8:	4b0b      	ldr	r3, [pc, #44]	@ (8003418 <HAL_RCC_ClockConfig+0x1c4>)
 80033ea:	685b      	ldr	r3, [r3, #4]
 80033ec:	091b      	lsrs	r3, r3, #4
 80033ee:	f003 030f 	and.w	r3, r3, #15
 80033f2:	490a      	ldr	r1, [pc, #40]	@ (800341c <HAL_RCC_ClockConfig+0x1c8>)
 80033f4:	5ccb      	ldrb	r3, [r1, r3]
 80033f6:	fa22 f303 	lsr.w	r3, r2, r3
 80033fa:	4a09      	ldr	r2, [pc, #36]	@ (8003420 <HAL_RCC_ClockConfig+0x1cc>)
 80033fc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80033fe:	4b09      	ldr	r3, [pc, #36]	@ (8003424 <HAL_RCC_ClockConfig+0x1d0>)
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	4618      	mov	r0, r3
 8003404:	f7fd fae2 	bl	80009cc <HAL_InitTick>

  return HAL_OK;
 8003408:	2300      	movs	r3, #0
}
 800340a:	4618      	mov	r0, r3
 800340c:	3710      	adds	r7, #16
 800340e:	46bd      	mov	sp, r7
 8003410:	bd80      	pop	{r7, pc}
 8003412:	bf00      	nop
 8003414:	40022000 	.word	0x40022000
 8003418:	40021000 	.word	0x40021000
 800341c:	080035d4 	.word	0x080035d4
 8003420:	20000000 	.word	0x20000000
 8003424:	20000004 	.word	0x20000004

08003428 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003428:	b480      	push	{r7}
 800342a:	b087      	sub	sp, #28
 800342c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800342e:	2300      	movs	r3, #0
 8003430:	60fb      	str	r3, [r7, #12]
 8003432:	2300      	movs	r3, #0
 8003434:	60bb      	str	r3, [r7, #8]
 8003436:	2300      	movs	r3, #0
 8003438:	617b      	str	r3, [r7, #20]
 800343a:	2300      	movs	r3, #0
 800343c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800343e:	2300      	movs	r3, #0
 8003440:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003442:	4b1e      	ldr	r3, [pc, #120]	@ (80034bc <HAL_RCC_GetSysClockFreq+0x94>)
 8003444:	685b      	ldr	r3, [r3, #4]
 8003446:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	f003 030c 	and.w	r3, r3, #12
 800344e:	2b04      	cmp	r3, #4
 8003450:	d002      	beq.n	8003458 <HAL_RCC_GetSysClockFreq+0x30>
 8003452:	2b08      	cmp	r3, #8
 8003454:	d003      	beq.n	800345e <HAL_RCC_GetSysClockFreq+0x36>
 8003456:	e027      	b.n	80034a8 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003458:	4b19      	ldr	r3, [pc, #100]	@ (80034c0 <HAL_RCC_GetSysClockFreq+0x98>)
 800345a:	613b      	str	r3, [r7, #16]
      break;
 800345c:	e027      	b.n	80034ae <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	0c9b      	lsrs	r3, r3, #18
 8003462:	f003 030f 	and.w	r3, r3, #15
 8003466:	4a17      	ldr	r2, [pc, #92]	@ (80034c4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003468:	5cd3      	ldrb	r3, [r2, r3]
 800346a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003472:	2b00      	cmp	r3, #0
 8003474:	d010      	beq.n	8003498 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003476:	4b11      	ldr	r3, [pc, #68]	@ (80034bc <HAL_RCC_GetSysClockFreq+0x94>)
 8003478:	685b      	ldr	r3, [r3, #4]
 800347a:	0c5b      	lsrs	r3, r3, #17
 800347c:	f003 0301 	and.w	r3, r3, #1
 8003480:	4a11      	ldr	r2, [pc, #68]	@ (80034c8 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003482:	5cd3      	ldrb	r3, [r2, r3]
 8003484:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	4a0d      	ldr	r2, [pc, #52]	@ (80034c0 <HAL_RCC_GetSysClockFreq+0x98>)
 800348a:	fb03 f202 	mul.w	r2, r3, r2
 800348e:	68bb      	ldr	r3, [r7, #8]
 8003490:	fbb2 f3f3 	udiv	r3, r2, r3
 8003494:	617b      	str	r3, [r7, #20]
 8003496:	e004      	b.n	80034a2 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	4a0c      	ldr	r2, [pc, #48]	@ (80034cc <HAL_RCC_GetSysClockFreq+0xa4>)
 800349c:	fb02 f303 	mul.w	r3, r2, r3
 80034a0:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80034a2:	697b      	ldr	r3, [r7, #20]
 80034a4:	613b      	str	r3, [r7, #16]
      break;
 80034a6:	e002      	b.n	80034ae <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80034a8:	4b05      	ldr	r3, [pc, #20]	@ (80034c0 <HAL_RCC_GetSysClockFreq+0x98>)
 80034aa:	613b      	str	r3, [r7, #16]
      break;
 80034ac:	bf00      	nop
    }
  }
  return sysclockfreq;
 80034ae:	693b      	ldr	r3, [r7, #16]
}
 80034b0:	4618      	mov	r0, r3
 80034b2:	371c      	adds	r7, #28
 80034b4:	46bd      	mov	sp, r7
 80034b6:	bc80      	pop	{r7}
 80034b8:	4770      	bx	lr
 80034ba:	bf00      	nop
 80034bc:	40021000 	.word	0x40021000
 80034c0:	007a1200 	.word	0x007a1200
 80034c4:	080035ec 	.word	0x080035ec
 80034c8:	080035fc 	.word	0x080035fc
 80034cc:	003d0900 	.word	0x003d0900

080034d0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80034d0:	b480      	push	{r7}
 80034d2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80034d4:	4b02      	ldr	r3, [pc, #8]	@ (80034e0 <HAL_RCC_GetHCLKFreq+0x10>)
 80034d6:	681b      	ldr	r3, [r3, #0]
}
 80034d8:	4618      	mov	r0, r3
 80034da:	46bd      	mov	sp, r7
 80034dc:	bc80      	pop	{r7}
 80034de:	4770      	bx	lr
 80034e0:	20000000 	.word	0x20000000

080034e4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80034e4:	b580      	push	{r7, lr}
 80034e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80034e8:	f7ff fff2 	bl	80034d0 <HAL_RCC_GetHCLKFreq>
 80034ec:	4602      	mov	r2, r0
 80034ee:	4b05      	ldr	r3, [pc, #20]	@ (8003504 <HAL_RCC_GetPCLK1Freq+0x20>)
 80034f0:	685b      	ldr	r3, [r3, #4]
 80034f2:	0a1b      	lsrs	r3, r3, #8
 80034f4:	f003 0307 	and.w	r3, r3, #7
 80034f8:	4903      	ldr	r1, [pc, #12]	@ (8003508 <HAL_RCC_GetPCLK1Freq+0x24>)
 80034fa:	5ccb      	ldrb	r3, [r1, r3]
 80034fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003500:	4618      	mov	r0, r3
 8003502:	bd80      	pop	{r7, pc}
 8003504:	40021000 	.word	0x40021000
 8003508:	080035e4 	.word	0x080035e4

0800350c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800350c:	b480      	push	{r7}
 800350e:	b085      	sub	sp, #20
 8003510:	af00      	add	r7, sp, #0
 8003512:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003514:	4b0a      	ldr	r3, [pc, #40]	@ (8003540 <RCC_Delay+0x34>)
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	4a0a      	ldr	r2, [pc, #40]	@ (8003544 <RCC_Delay+0x38>)
 800351a:	fba2 2303 	umull	r2, r3, r2, r3
 800351e:	0a5b      	lsrs	r3, r3, #9
 8003520:	687a      	ldr	r2, [r7, #4]
 8003522:	fb02 f303 	mul.w	r3, r2, r3
 8003526:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003528:	bf00      	nop
  }
  while (Delay --);
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	1e5a      	subs	r2, r3, #1
 800352e:	60fa      	str	r2, [r7, #12]
 8003530:	2b00      	cmp	r3, #0
 8003532:	d1f9      	bne.n	8003528 <RCC_Delay+0x1c>
}
 8003534:	bf00      	nop
 8003536:	bf00      	nop
 8003538:	3714      	adds	r7, #20
 800353a:	46bd      	mov	sp, r7
 800353c:	bc80      	pop	{r7}
 800353e:	4770      	bx	lr
 8003540:	20000000 	.word	0x20000000
 8003544:	10624dd3 	.word	0x10624dd3

08003548 <memset>:
 8003548:	4603      	mov	r3, r0
 800354a:	4402      	add	r2, r0
 800354c:	4293      	cmp	r3, r2
 800354e:	d100      	bne.n	8003552 <memset+0xa>
 8003550:	4770      	bx	lr
 8003552:	f803 1b01 	strb.w	r1, [r3], #1
 8003556:	e7f9      	b.n	800354c <memset+0x4>

08003558 <__libc_init_array>:
 8003558:	b570      	push	{r4, r5, r6, lr}
 800355a:	2600      	movs	r6, #0
 800355c:	4d0c      	ldr	r5, [pc, #48]	@ (8003590 <__libc_init_array+0x38>)
 800355e:	4c0d      	ldr	r4, [pc, #52]	@ (8003594 <__libc_init_array+0x3c>)
 8003560:	1b64      	subs	r4, r4, r5
 8003562:	10a4      	asrs	r4, r4, #2
 8003564:	42a6      	cmp	r6, r4
 8003566:	d109      	bne.n	800357c <__libc_init_array+0x24>
 8003568:	f000 f828 	bl	80035bc <_init>
 800356c:	2600      	movs	r6, #0
 800356e:	4d0a      	ldr	r5, [pc, #40]	@ (8003598 <__libc_init_array+0x40>)
 8003570:	4c0a      	ldr	r4, [pc, #40]	@ (800359c <__libc_init_array+0x44>)
 8003572:	1b64      	subs	r4, r4, r5
 8003574:	10a4      	asrs	r4, r4, #2
 8003576:	42a6      	cmp	r6, r4
 8003578:	d105      	bne.n	8003586 <__libc_init_array+0x2e>
 800357a:	bd70      	pop	{r4, r5, r6, pc}
 800357c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003580:	4798      	blx	r3
 8003582:	3601      	adds	r6, #1
 8003584:	e7ee      	b.n	8003564 <__libc_init_array+0xc>
 8003586:	f855 3b04 	ldr.w	r3, [r5], #4
 800358a:	4798      	blx	r3
 800358c:	3601      	adds	r6, #1
 800358e:	e7f2      	b.n	8003576 <__libc_init_array+0x1e>
 8003590:	08003600 	.word	0x08003600
 8003594:	08003600 	.word	0x08003600
 8003598:	08003600 	.word	0x08003600
 800359c:	08003604 	.word	0x08003604

080035a0 <memcpy>:
 80035a0:	440a      	add	r2, r1
 80035a2:	4291      	cmp	r1, r2
 80035a4:	f100 33ff 	add.w	r3, r0, #4294967295
 80035a8:	d100      	bne.n	80035ac <memcpy+0xc>
 80035aa:	4770      	bx	lr
 80035ac:	b510      	push	{r4, lr}
 80035ae:	f811 4b01 	ldrb.w	r4, [r1], #1
 80035b2:	4291      	cmp	r1, r2
 80035b4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80035b8:	d1f9      	bne.n	80035ae <memcpy+0xe>
 80035ba:	bd10      	pop	{r4, pc}

080035bc <_init>:
 80035bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80035be:	bf00      	nop
 80035c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80035c2:	bc08      	pop	{r3}
 80035c4:	469e      	mov	lr, r3
 80035c6:	4770      	bx	lr

080035c8 <_fini>:
 80035c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80035ca:	bf00      	nop
 80035cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80035ce:	bc08      	pop	{r3}
 80035d0:	469e      	mov	lr, r3
 80035d2:	4770      	bx	lr
