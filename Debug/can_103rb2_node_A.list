
can_103rb2_node_A.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008690  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000564  080087a0  080087a0  000097a0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008d04  08008d04  0000a1d4  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08008d04  08008d04  00009d04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008d0c  08008d0c  0000a1d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008d0c  08008d0c  00009d0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008d10  08008d10  00009d10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  08008d14  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002cc  200001d4  08008ee8  0000a1d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200004a0  08008ee8  0000a4a0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000a1d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001134a  00000000  00000000  0000a1fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000026a1  00000000  00000000  0001b547  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001108  00000000  00000000  0001dbe8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000d67  00000000  00000000  0001ecf0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00003c07  00000000  00000000  0001fa57  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013716  00000000  00000000  0002365e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00091d18  00000000  00000000  00036d74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c8a8c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005c5c  00000000  00000000  000c8ad0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004a  00000000  00000000  000ce72c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001d4 	.word	0x200001d4
 800012c:	00000000 	.word	0x00000000
 8000130:	08008788 	.word	0x08008788

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001d8 	.word	0x200001d8
 800014c:	08008788 	.word	0x08008788

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	@ 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2f>:
 8000a88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a8c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000a90:	bf24      	itt	cs
 8000a92:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000a96:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000a9a:	d90d      	bls.n	8000ab8 <__aeabi_d2f+0x30>
 8000a9c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000aa0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000aa4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aa8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000aac:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ab0:	bf08      	it	eq
 8000ab2:	f020 0001 	biceq.w	r0, r0, #1
 8000ab6:	4770      	bx	lr
 8000ab8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000abc:	d121      	bne.n	8000b02 <__aeabi_d2f+0x7a>
 8000abe:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000ac2:	bfbc      	itt	lt
 8000ac4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000ac8:	4770      	bxlt	lr
 8000aca:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000ace:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ad2:	f1c2 0218 	rsb	r2, r2, #24
 8000ad6:	f1c2 0c20 	rsb	ip, r2, #32
 8000ada:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ade:	fa20 f002 	lsr.w	r0, r0, r2
 8000ae2:	bf18      	it	ne
 8000ae4:	f040 0001 	orrne.w	r0, r0, #1
 8000ae8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aec:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000af0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000af4:	ea40 000c 	orr.w	r0, r0, ip
 8000af8:	fa23 f302 	lsr.w	r3, r3, r2
 8000afc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b00:	e7cc      	b.n	8000a9c <__aeabi_d2f+0x14>
 8000b02:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b06:	d107      	bne.n	8000b18 <__aeabi_d2f+0x90>
 8000b08:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b0c:	bf1e      	ittt	ne
 8000b0e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b12:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b16:	4770      	bxne	lr
 8000b18:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b1c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b20:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop

08000b28 <__aeabi_frsub>:
 8000b28:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000b2c:	e002      	b.n	8000b34 <__addsf3>
 8000b2e:	bf00      	nop

08000b30 <__aeabi_fsub>:
 8000b30:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000b34 <__addsf3>:
 8000b34:	0042      	lsls	r2, r0, #1
 8000b36:	bf1f      	itttt	ne
 8000b38:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b3c:	ea92 0f03 	teqne	r2, r3
 8000b40:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b44:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b48:	d06a      	beq.n	8000c20 <__addsf3+0xec>
 8000b4a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b4e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b52:	bfc1      	itttt	gt
 8000b54:	18d2      	addgt	r2, r2, r3
 8000b56:	4041      	eorgt	r1, r0
 8000b58:	4048      	eorgt	r0, r1
 8000b5a:	4041      	eorgt	r1, r0
 8000b5c:	bfb8      	it	lt
 8000b5e:	425b      	neglt	r3, r3
 8000b60:	2b19      	cmp	r3, #25
 8000b62:	bf88      	it	hi
 8000b64:	4770      	bxhi	lr
 8000b66:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000b6a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b6e:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000b72:	bf18      	it	ne
 8000b74:	4240      	negne	r0, r0
 8000b76:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7a:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000b7e:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000b82:	bf18      	it	ne
 8000b84:	4249      	negne	r1, r1
 8000b86:	ea92 0f03 	teq	r2, r3
 8000b8a:	d03f      	beq.n	8000c0c <__addsf3+0xd8>
 8000b8c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b90:	fa41 fc03 	asr.w	ip, r1, r3
 8000b94:	eb10 000c 	adds.w	r0, r0, ip
 8000b98:	f1c3 0320 	rsb	r3, r3, #32
 8000b9c:	fa01 f103 	lsl.w	r1, r1, r3
 8000ba0:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000ba4:	d502      	bpl.n	8000bac <__addsf3+0x78>
 8000ba6:	4249      	negs	r1, r1
 8000ba8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bac:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000bb0:	d313      	bcc.n	8000bda <__addsf3+0xa6>
 8000bb2:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000bb6:	d306      	bcc.n	8000bc6 <__addsf3+0x92>
 8000bb8:	0840      	lsrs	r0, r0, #1
 8000bba:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bbe:	f102 0201 	add.w	r2, r2, #1
 8000bc2:	2afe      	cmp	r2, #254	@ 0xfe
 8000bc4:	d251      	bcs.n	8000c6a <__addsf3+0x136>
 8000bc6:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000bca:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bce:	bf08      	it	eq
 8000bd0:	f020 0001 	biceq.w	r0, r0, #1
 8000bd4:	ea40 0003 	orr.w	r0, r0, r3
 8000bd8:	4770      	bx	lr
 8000bda:	0049      	lsls	r1, r1, #1
 8000bdc:	eb40 0000 	adc.w	r0, r0, r0
 8000be0:	3a01      	subs	r2, #1
 8000be2:	bf28      	it	cs
 8000be4:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000be8:	d2ed      	bcs.n	8000bc6 <__addsf3+0x92>
 8000bea:	fab0 fc80 	clz	ip, r0
 8000bee:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bf2:	ebb2 020c 	subs.w	r2, r2, ip
 8000bf6:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bfa:	bfaa      	itet	ge
 8000bfc:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c00:	4252      	neglt	r2, r2
 8000c02:	4318      	orrge	r0, r3
 8000c04:	bfbc      	itt	lt
 8000c06:	40d0      	lsrlt	r0, r2
 8000c08:	4318      	orrlt	r0, r3
 8000c0a:	4770      	bx	lr
 8000c0c:	f092 0f00 	teq	r2, #0
 8000c10:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000c14:	bf06      	itte	eq
 8000c16:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000c1a:	3201      	addeq	r2, #1
 8000c1c:	3b01      	subne	r3, #1
 8000c1e:	e7b5      	b.n	8000b8c <__addsf3+0x58>
 8000c20:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c24:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c28:	bf18      	it	ne
 8000c2a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c2e:	d021      	beq.n	8000c74 <__addsf3+0x140>
 8000c30:	ea92 0f03 	teq	r2, r3
 8000c34:	d004      	beq.n	8000c40 <__addsf3+0x10c>
 8000c36:	f092 0f00 	teq	r2, #0
 8000c3a:	bf08      	it	eq
 8000c3c:	4608      	moveq	r0, r1
 8000c3e:	4770      	bx	lr
 8000c40:	ea90 0f01 	teq	r0, r1
 8000c44:	bf1c      	itt	ne
 8000c46:	2000      	movne	r0, #0
 8000c48:	4770      	bxne	lr
 8000c4a:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000c4e:	d104      	bne.n	8000c5a <__addsf3+0x126>
 8000c50:	0040      	lsls	r0, r0, #1
 8000c52:	bf28      	it	cs
 8000c54:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000c58:	4770      	bx	lr
 8000c5a:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000c5e:	bf3c      	itt	cc
 8000c60:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000c64:	4770      	bxcc	lr
 8000c66:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000c6a:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000c6e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c72:	4770      	bx	lr
 8000c74:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c78:	bf16      	itet	ne
 8000c7a:	4608      	movne	r0, r1
 8000c7c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c80:	4601      	movne	r1, r0
 8000c82:	0242      	lsls	r2, r0, #9
 8000c84:	bf06      	itte	eq
 8000c86:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c8a:	ea90 0f01 	teqeq	r0, r1
 8000c8e:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000c92:	4770      	bx	lr

08000c94 <__aeabi_ui2f>:
 8000c94:	f04f 0300 	mov.w	r3, #0
 8000c98:	e004      	b.n	8000ca4 <__aeabi_i2f+0x8>
 8000c9a:	bf00      	nop

08000c9c <__aeabi_i2f>:
 8000c9c:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000ca0:	bf48      	it	mi
 8000ca2:	4240      	negmi	r0, r0
 8000ca4:	ea5f 0c00 	movs.w	ip, r0
 8000ca8:	bf08      	it	eq
 8000caa:	4770      	bxeq	lr
 8000cac:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000cb0:	4601      	mov	r1, r0
 8000cb2:	f04f 0000 	mov.w	r0, #0
 8000cb6:	e01c      	b.n	8000cf2 <__aeabi_l2f+0x2a>

08000cb8 <__aeabi_ul2f>:
 8000cb8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cbc:	bf08      	it	eq
 8000cbe:	4770      	bxeq	lr
 8000cc0:	f04f 0300 	mov.w	r3, #0
 8000cc4:	e00a      	b.n	8000cdc <__aeabi_l2f+0x14>
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_l2f>:
 8000cc8:	ea50 0201 	orrs.w	r2, r0, r1
 8000ccc:	bf08      	it	eq
 8000cce:	4770      	bxeq	lr
 8000cd0:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000cd4:	d502      	bpl.n	8000cdc <__aeabi_l2f+0x14>
 8000cd6:	4240      	negs	r0, r0
 8000cd8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cdc:	ea5f 0c01 	movs.w	ip, r1
 8000ce0:	bf02      	ittt	eq
 8000ce2:	4684      	moveq	ip, r0
 8000ce4:	4601      	moveq	r1, r0
 8000ce6:	2000      	moveq	r0, #0
 8000ce8:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000cec:	bf08      	it	eq
 8000cee:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000cf2:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000cf6:	fabc f28c 	clz	r2, ip
 8000cfa:	3a08      	subs	r2, #8
 8000cfc:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d00:	db10      	blt.n	8000d24 <__aeabi_l2f+0x5c>
 8000d02:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d06:	4463      	add	r3, ip
 8000d08:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d0c:	f1c2 0220 	rsb	r2, r2, #32
 8000d10:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000d14:	fa20 f202 	lsr.w	r2, r0, r2
 8000d18:	eb43 0002 	adc.w	r0, r3, r2
 8000d1c:	bf08      	it	eq
 8000d1e:	f020 0001 	biceq.w	r0, r0, #1
 8000d22:	4770      	bx	lr
 8000d24:	f102 0220 	add.w	r2, r2, #32
 8000d28:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d2c:	f1c2 0220 	rsb	r2, r2, #32
 8000d30:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d34:	fa21 f202 	lsr.w	r2, r1, r2
 8000d38:	eb43 0002 	adc.w	r0, r3, r2
 8000d3c:	bf08      	it	eq
 8000d3e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d42:	4770      	bx	lr

08000d44 <__aeabi_fmul>:
 8000d44:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000d48:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d4c:	bf1e      	ittt	ne
 8000d4e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d52:	ea92 0f0c 	teqne	r2, ip
 8000d56:	ea93 0f0c 	teqne	r3, ip
 8000d5a:	d06f      	beq.n	8000e3c <__aeabi_fmul+0xf8>
 8000d5c:	441a      	add	r2, r3
 8000d5e:	ea80 0c01 	eor.w	ip, r0, r1
 8000d62:	0240      	lsls	r0, r0, #9
 8000d64:	bf18      	it	ne
 8000d66:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d6a:	d01e      	beq.n	8000daa <__aeabi_fmul+0x66>
 8000d6c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000d70:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d74:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d78:	fba0 3101 	umull	r3, r1, r0, r1
 8000d7c:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000d80:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000d84:	bf3e      	ittt	cc
 8000d86:	0049      	lslcc	r1, r1, #1
 8000d88:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d8c:	005b      	lslcc	r3, r3, #1
 8000d8e:	ea40 0001 	orr.w	r0, r0, r1
 8000d92:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000d96:	2afd      	cmp	r2, #253	@ 0xfd
 8000d98:	d81d      	bhi.n	8000dd6 <__aeabi_fmul+0x92>
 8000d9a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000d9e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000da2:	bf08      	it	eq
 8000da4:	f020 0001 	biceq.w	r0, r0, #1
 8000da8:	4770      	bx	lr
 8000daa:	f090 0f00 	teq	r0, #0
 8000dae:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000db2:	bf08      	it	eq
 8000db4:	0249      	lsleq	r1, r1, #9
 8000db6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dba:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dbe:	3a7f      	subs	r2, #127	@ 0x7f
 8000dc0:	bfc2      	ittt	gt
 8000dc2:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000dc6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dca:	4770      	bxgt	lr
 8000dcc:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000dd0:	f04f 0300 	mov.w	r3, #0
 8000dd4:	3a01      	subs	r2, #1
 8000dd6:	dc5d      	bgt.n	8000e94 <__aeabi_fmul+0x150>
 8000dd8:	f112 0f19 	cmn.w	r2, #25
 8000ddc:	bfdc      	itt	le
 8000dde:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000de2:	4770      	bxle	lr
 8000de4:	f1c2 0200 	rsb	r2, r2, #0
 8000de8:	0041      	lsls	r1, r0, #1
 8000dea:	fa21 f102 	lsr.w	r1, r1, r2
 8000dee:	f1c2 0220 	rsb	r2, r2, #32
 8000df2:	fa00 fc02 	lsl.w	ip, r0, r2
 8000df6:	ea5f 0031 	movs.w	r0, r1, rrx
 8000dfa:	f140 0000 	adc.w	r0, r0, #0
 8000dfe:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e02:	bf08      	it	eq
 8000e04:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e08:	4770      	bx	lr
 8000e0a:	f092 0f00 	teq	r2, #0
 8000e0e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000e12:	bf02      	ittt	eq
 8000e14:	0040      	lsleq	r0, r0, #1
 8000e16:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000e1a:	3a01      	subeq	r2, #1
 8000e1c:	d0f9      	beq.n	8000e12 <__aeabi_fmul+0xce>
 8000e1e:	ea40 000c 	orr.w	r0, r0, ip
 8000e22:	f093 0f00 	teq	r3, #0
 8000e26:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000e2a:	bf02      	ittt	eq
 8000e2c:	0049      	lsleq	r1, r1, #1
 8000e2e:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000e32:	3b01      	subeq	r3, #1
 8000e34:	d0f9      	beq.n	8000e2a <__aeabi_fmul+0xe6>
 8000e36:	ea41 010c 	orr.w	r1, r1, ip
 8000e3a:	e78f      	b.n	8000d5c <__aeabi_fmul+0x18>
 8000e3c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e40:	ea92 0f0c 	teq	r2, ip
 8000e44:	bf18      	it	ne
 8000e46:	ea93 0f0c 	teqne	r3, ip
 8000e4a:	d00a      	beq.n	8000e62 <__aeabi_fmul+0x11e>
 8000e4c:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000e50:	bf18      	it	ne
 8000e52:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000e56:	d1d8      	bne.n	8000e0a <__aeabi_fmul+0xc6>
 8000e58:	ea80 0001 	eor.w	r0, r0, r1
 8000e5c:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000e60:	4770      	bx	lr
 8000e62:	f090 0f00 	teq	r0, #0
 8000e66:	bf17      	itett	ne
 8000e68:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000e6c:	4608      	moveq	r0, r1
 8000e6e:	f091 0f00 	teqne	r1, #0
 8000e72:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000e76:	d014      	beq.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e78:	ea92 0f0c 	teq	r2, ip
 8000e7c:	d101      	bne.n	8000e82 <__aeabi_fmul+0x13e>
 8000e7e:	0242      	lsls	r2, r0, #9
 8000e80:	d10f      	bne.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e82:	ea93 0f0c 	teq	r3, ip
 8000e86:	d103      	bne.n	8000e90 <__aeabi_fmul+0x14c>
 8000e88:	024b      	lsls	r3, r1, #9
 8000e8a:	bf18      	it	ne
 8000e8c:	4608      	movne	r0, r1
 8000e8e:	d108      	bne.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e90:	ea80 0001 	eor.w	r0, r0, r1
 8000e94:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000e98:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000e9c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ea0:	4770      	bx	lr
 8000ea2:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ea6:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000eaa:	4770      	bx	lr

08000eac <__aeabi_fdiv>:
 8000eac:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000eb0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000eb4:	bf1e      	ittt	ne
 8000eb6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000eba:	ea92 0f0c 	teqne	r2, ip
 8000ebe:	ea93 0f0c 	teqne	r3, ip
 8000ec2:	d069      	beq.n	8000f98 <__aeabi_fdiv+0xec>
 8000ec4:	eba2 0203 	sub.w	r2, r2, r3
 8000ec8:	ea80 0c01 	eor.w	ip, r0, r1
 8000ecc:	0249      	lsls	r1, r1, #9
 8000ece:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000ed2:	d037      	beq.n	8000f44 <__aeabi_fdiv+0x98>
 8000ed4:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000ed8:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000edc:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ee0:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000ee4:	428b      	cmp	r3, r1
 8000ee6:	bf38      	it	cc
 8000ee8:	005b      	lslcc	r3, r3, #1
 8000eea:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000eee:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000ef2:	428b      	cmp	r3, r1
 8000ef4:	bf24      	itt	cs
 8000ef6:	1a5b      	subcs	r3, r3, r1
 8000ef8:	ea40 000c 	orrcs.w	r0, r0, ip
 8000efc:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f00:	bf24      	itt	cs
 8000f02:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f06:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f0a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f0e:	bf24      	itt	cs
 8000f10:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f14:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f18:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f1c:	bf24      	itt	cs
 8000f1e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f22:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f26:	011b      	lsls	r3, r3, #4
 8000f28:	bf18      	it	ne
 8000f2a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f2e:	d1e0      	bne.n	8000ef2 <__aeabi_fdiv+0x46>
 8000f30:	2afd      	cmp	r2, #253	@ 0xfd
 8000f32:	f63f af50 	bhi.w	8000dd6 <__aeabi_fmul+0x92>
 8000f36:	428b      	cmp	r3, r1
 8000f38:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f3c:	bf08      	it	eq
 8000f3e:	f020 0001 	biceq.w	r0, r0, #1
 8000f42:	4770      	bx	lr
 8000f44:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000f48:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f4c:	327f      	adds	r2, #127	@ 0x7f
 8000f4e:	bfc2      	ittt	gt
 8000f50:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000f54:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f58:	4770      	bxgt	lr
 8000f5a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000f5e:	f04f 0300 	mov.w	r3, #0
 8000f62:	3a01      	subs	r2, #1
 8000f64:	e737      	b.n	8000dd6 <__aeabi_fmul+0x92>
 8000f66:	f092 0f00 	teq	r2, #0
 8000f6a:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000f6e:	bf02      	ittt	eq
 8000f70:	0040      	lsleq	r0, r0, #1
 8000f72:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000f76:	3a01      	subeq	r2, #1
 8000f78:	d0f9      	beq.n	8000f6e <__aeabi_fdiv+0xc2>
 8000f7a:	ea40 000c 	orr.w	r0, r0, ip
 8000f7e:	f093 0f00 	teq	r3, #0
 8000f82:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000f86:	bf02      	ittt	eq
 8000f88:	0049      	lsleq	r1, r1, #1
 8000f8a:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000f8e:	3b01      	subeq	r3, #1
 8000f90:	d0f9      	beq.n	8000f86 <__aeabi_fdiv+0xda>
 8000f92:	ea41 010c 	orr.w	r1, r1, ip
 8000f96:	e795      	b.n	8000ec4 <__aeabi_fdiv+0x18>
 8000f98:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f9c:	ea92 0f0c 	teq	r2, ip
 8000fa0:	d108      	bne.n	8000fb4 <__aeabi_fdiv+0x108>
 8000fa2:	0242      	lsls	r2, r0, #9
 8000fa4:	f47f af7d 	bne.w	8000ea2 <__aeabi_fmul+0x15e>
 8000fa8:	ea93 0f0c 	teq	r3, ip
 8000fac:	f47f af70 	bne.w	8000e90 <__aeabi_fmul+0x14c>
 8000fb0:	4608      	mov	r0, r1
 8000fb2:	e776      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fb4:	ea93 0f0c 	teq	r3, ip
 8000fb8:	d104      	bne.n	8000fc4 <__aeabi_fdiv+0x118>
 8000fba:	024b      	lsls	r3, r1, #9
 8000fbc:	f43f af4c 	beq.w	8000e58 <__aeabi_fmul+0x114>
 8000fc0:	4608      	mov	r0, r1
 8000fc2:	e76e      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fc4:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000fc8:	bf18      	it	ne
 8000fca:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000fce:	d1ca      	bne.n	8000f66 <__aeabi_fdiv+0xba>
 8000fd0:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8000fd4:	f47f af5c 	bne.w	8000e90 <__aeabi_fmul+0x14c>
 8000fd8:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000fdc:	f47f af3c 	bne.w	8000e58 <__aeabi_fmul+0x114>
 8000fe0:	e75f      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fe2:	bf00      	nop

08000fe4 <__gesf2>:
 8000fe4:	f04f 3cff 	mov.w	ip, #4294967295
 8000fe8:	e006      	b.n	8000ff8 <__cmpsf2+0x4>
 8000fea:	bf00      	nop

08000fec <__lesf2>:
 8000fec:	f04f 0c01 	mov.w	ip, #1
 8000ff0:	e002      	b.n	8000ff8 <__cmpsf2+0x4>
 8000ff2:	bf00      	nop

08000ff4 <__cmpsf2>:
 8000ff4:	f04f 0c01 	mov.w	ip, #1
 8000ff8:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000ffc:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001000:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001004:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001008:	bf18      	it	ne
 800100a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800100e:	d011      	beq.n	8001034 <__cmpsf2+0x40>
 8001010:	b001      	add	sp, #4
 8001012:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001016:	bf18      	it	ne
 8001018:	ea90 0f01 	teqne	r0, r1
 800101c:	bf58      	it	pl
 800101e:	ebb2 0003 	subspl.w	r0, r2, r3
 8001022:	bf88      	it	hi
 8001024:	17c8      	asrhi	r0, r1, #31
 8001026:	bf38      	it	cc
 8001028:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800102c:	bf18      	it	ne
 800102e:	f040 0001 	orrne.w	r0, r0, #1
 8001032:	4770      	bx	lr
 8001034:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001038:	d102      	bne.n	8001040 <__cmpsf2+0x4c>
 800103a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800103e:	d105      	bne.n	800104c <__cmpsf2+0x58>
 8001040:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001044:	d1e4      	bne.n	8001010 <__cmpsf2+0x1c>
 8001046:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800104a:	d0e1      	beq.n	8001010 <__cmpsf2+0x1c>
 800104c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001050:	4770      	bx	lr
 8001052:	bf00      	nop

08001054 <__aeabi_cfrcmple>:
 8001054:	4684      	mov	ip, r0
 8001056:	4608      	mov	r0, r1
 8001058:	4661      	mov	r1, ip
 800105a:	e7ff      	b.n	800105c <__aeabi_cfcmpeq>

0800105c <__aeabi_cfcmpeq>:
 800105c:	b50f      	push	{r0, r1, r2, r3, lr}
 800105e:	f7ff ffc9 	bl	8000ff4 <__cmpsf2>
 8001062:	2800      	cmp	r0, #0
 8001064:	bf48      	it	mi
 8001066:	f110 0f00 	cmnmi.w	r0, #0
 800106a:	bd0f      	pop	{r0, r1, r2, r3, pc}

0800106c <__aeabi_fcmpeq>:
 800106c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001070:	f7ff fff4 	bl	800105c <__aeabi_cfcmpeq>
 8001074:	bf0c      	ite	eq
 8001076:	2001      	moveq	r0, #1
 8001078:	2000      	movne	r0, #0
 800107a:	f85d fb08 	ldr.w	pc, [sp], #8
 800107e:	bf00      	nop

08001080 <__aeabi_fcmplt>:
 8001080:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001084:	f7ff ffea 	bl	800105c <__aeabi_cfcmpeq>
 8001088:	bf34      	ite	cc
 800108a:	2001      	movcc	r0, #1
 800108c:	2000      	movcs	r0, #0
 800108e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001092:	bf00      	nop

08001094 <__aeabi_fcmple>:
 8001094:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001098:	f7ff ffe0 	bl	800105c <__aeabi_cfcmpeq>
 800109c:	bf94      	ite	ls
 800109e:	2001      	movls	r0, #1
 80010a0:	2000      	movhi	r0, #0
 80010a2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010a6:	bf00      	nop

080010a8 <__aeabi_fcmpge>:
 80010a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010ac:	f7ff ffd2 	bl	8001054 <__aeabi_cfrcmple>
 80010b0:	bf94      	ite	ls
 80010b2:	2001      	movls	r0, #1
 80010b4:	2000      	movhi	r0, #0
 80010b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ba:	bf00      	nop

080010bc <__aeabi_fcmpgt>:
 80010bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010c0:	f7ff ffc8 	bl	8001054 <__aeabi_cfrcmple>
 80010c4:	bf34      	ite	cc
 80010c6:	2001      	movcc	r0, #1
 80010c8:	2000      	movcs	r0, #0
 80010ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ce:	bf00      	nop

080010d0 <__aeabi_f2uiz>:
 80010d0:	0042      	lsls	r2, r0, #1
 80010d2:	d20e      	bcs.n	80010f2 <__aeabi_f2uiz+0x22>
 80010d4:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 80010d8:	d30b      	bcc.n	80010f2 <__aeabi_f2uiz+0x22>
 80010da:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 80010de:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80010e2:	d409      	bmi.n	80010f8 <__aeabi_f2uiz+0x28>
 80010e4:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80010e8:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80010ec:	fa23 f002 	lsr.w	r0, r3, r2
 80010f0:	4770      	bx	lr
 80010f2:	f04f 0000 	mov.w	r0, #0
 80010f6:	4770      	bx	lr
 80010f8:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 80010fc:	d101      	bne.n	8001102 <__aeabi_f2uiz+0x32>
 80010fe:	0242      	lsls	r2, r0, #9
 8001100:	d102      	bne.n	8001108 <__aeabi_f2uiz+0x38>
 8001102:	f04f 30ff 	mov.w	r0, #4294967295
 8001106:	4770      	bx	lr
 8001108:	f04f 0000 	mov.w	r0, #0
 800110c:	4770      	bx	lr
 800110e:	bf00      	nop

08001110 <microDelay>:
#include "main.h"
#include "dht.h"
#include <stdio.h>

void microDelay (uint16_t delay)
{
 8001110:	b480      	push	{r7}
 8001112:	b083      	sub	sp, #12
 8001114:	af00      	add	r7, sp, #0
 8001116:	4603      	mov	r3, r0
 8001118:	80fb      	strh	r3, [r7, #6]
  __HAL_TIM_SET_COUNTER(&htim1, 0);
 800111a:	4b08      	ldr	r3, [pc, #32]	@ (800113c <microDelay+0x2c>)
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	2200      	movs	r2, #0
 8001120:	625a      	str	r2, [r3, #36]	@ 0x24
  while (__HAL_TIM_GET_COUNTER(&htim1) < delay);
 8001122:	bf00      	nop
 8001124:	4b05      	ldr	r3, [pc, #20]	@ (800113c <microDelay+0x2c>)
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800112a:	88fb      	ldrh	r3, [r7, #6]
 800112c:	429a      	cmp	r2, r3
 800112e:	d3f9      	bcc.n	8001124 <microDelay+0x14>
}
 8001130:	bf00      	nop
 8001132:	bf00      	nop
 8001134:	370c      	adds	r7, #12
 8001136:	46bd      	mov	sp, r7
 8001138:	bc80      	pop	{r7}
 800113a:	4770      	bx	lr
 800113c:	200001f0 	.word	0x200001f0

08001140 <DHT11_Read>:

uint8_t DHT11_Read (void)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	b082      	sub	sp, #8
 8001144:	af00      	add	r7, sp, #0
  uint8_t a,b;

  for (a=0;a<8;a++)
 8001146:	2300      	movs	r3, #0
 8001148:	71fb      	strb	r3, [r7, #7]
 800114a:	e066      	b.n	800121a <DHT11_Read+0xda>
  {
    pMillis = HAL_GetTick();
 800114c:	f001 f9c4 	bl	80024d8 <HAL_GetTick>
 8001150:	4603      	mov	r3, r0
 8001152:	4a36      	ldr	r2, [pc, #216]	@ (800122c <DHT11_Read+0xec>)
 8001154:	6013      	str	r3, [r2, #0]
    cMillis = HAL_GetTick();
 8001156:	f001 f9bf 	bl	80024d8 <HAL_GetTick>
 800115a:	4603      	mov	r3, r0
 800115c:	4a34      	ldr	r2, [pc, #208]	@ (8001230 <DHT11_Read+0xf0>)
 800115e:	6013      	str	r3, [r2, #0]
    while (!(HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)) && pMillis + 2 > cMillis)
 8001160:	e004      	b.n	800116c <DHT11_Read+0x2c>
    {  // wait for the pin to go high
      cMillis = HAL_GetTick();
 8001162:	f001 f9b9 	bl	80024d8 <HAL_GetTick>
 8001166:	4603      	mov	r3, r0
 8001168:	4a31      	ldr	r2, [pc, #196]	@ (8001230 <DHT11_Read+0xf0>)
 800116a:	6013      	str	r3, [r2, #0]
    while (!(HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)) && pMillis + 2 > cMillis)
 800116c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001170:	4830      	ldr	r0, [pc, #192]	@ (8001234 <DHT11_Read+0xf4>)
 8001172:	f002 fab1 	bl	80036d8 <HAL_GPIO_ReadPin>
 8001176:	4603      	mov	r3, r0
 8001178:	2b00      	cmp	r3, #0
 800117a:	d106      	bne.n	800118a <DHT11_Read+0x4a>
 800117c:	4b2b      	ldr	r3, [pc, #172]	@ (800122c <DHT11_Read+0xec>)
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	1c9a      	adds	r2, r3, #2
 8001182:	4b2b      	ldr	r3, [pc, #172]	@ (8001230 <DHT11_Read+0xf0>)
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	429a      	cmp	r2, r3
 8001188:	d8eb      	bhi.n	8001162 <DHT11_Read+0x22>
    }
    microDelay (40);   // wait for 40 us
 800118a:	2028      	movs	r0, #40	@ 0x28
 800118c:	f7ff ffc0 	bl	8001110 <microDelay>
    if (!(HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)))   // if the pin is low
 8001190:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001194:	4827      	ldr	r0, [pc, #156]	@ (8001234 <DHT11_Read+0xf4>)
 8001196:	f002 fa9f 	bl	80036d8 <HAL_GPIO_ReadPin>
 800119a:	4603      	mov	r3, r0
 800119c:	2b00      	cmp	r3, #0
 800119e:	d10e      	bne.n	80011be <DHT11_Read+0x7e>
      b&= ~(1<<(7-a));
 80011a0:	79fb      	ldrb	r3, [r7, #7]
 80011a2:	f1c3 0307 	rsb	r3, r3, #7
 80011a6:	2201      	movs	r2, #1
 80011a8:	fa02 f303 	lsl.w	r3, r2, r3
 80011ac:	b25b      	sxtb	r3, r3
 80011ae:	43db      	mvns	r3, r3
 80011b0:	b25a      	sxtb	r2, r3
 80011b2:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80011b6:	4013      	ands	r3, r2
 80011b8:	b25b      	sxtb	r3, r3
 80011ba:	71bb      	strb	r3, [r7, #6]
 80011bc:	e00b      	b.n	80011d6 <DHT11_Read+0x96>
    else
      b|= (1<<(7-a));
 80011be:	79fb      	ldrb	r3, [r7, #7]
 80011c0:	f1c3 0307 	rsb	r3, r3, #7
 80011c4:	2201      	movs	r2, #1
 80011c6:	fa02 f303 	lsl.w	r3, r2, r3
 80011ca:	b25a      	sxtb	r2, r3
 80011cc:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80011d0:	4313      	orrs	r3, r2
 80011d2:	b25b      	sxtb	r3, r3
 80011d4:	71bb      	strb	r3, [r7, #6]
    pMillis = HAL_GetTick();
 80011d6:	f001 f97f 	bl	80024d8 <HAL_GetTick>
 80011da:	4603      	mov	r3, r0
 80011dc:	4a13      	ldr	r2, [pc, #76]	@ (800122c <DHT11_Read+0xec>)
 80011de:	6013      	str	r3, [r2, #0]
    cMillis = HAL_GetTick();
 80011e0:	f001 f97a 	bl	80024d8 <HAL_GetTick>
 80011e4:	4603      	mov	r3, r0
 80011e6:	4a12      	ldr	r2, [pc, #72]	@ (8001230 <DHT11_Read+0xf0>)
 80011e8:	6013      	str	r3, [r2, #0]
    while ((HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)) && pMillis + 2 > cMillis)
 80011ea:	e004      	b.n	80011f6 <DHT11_Read+0xb6>
    {  // wait for the pin to go low
      cMillis = HAL_GetTick();
 80011ec:	f001 f974 	bl	80024d8 <HAL_GetTick>
 80011f0:	4603      	mov	r3, r0
 80011f2:	4a0f      	ldr	r2, [pc, #60]	@ (8001230 <DHT11_Read+0xf0>)
 80011f4:	6013      	str	r3, [r2, #0]
    while ((HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)) && pMillis + 2 > cMillis)
 80011f6:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80011fa:	480e      	ldr	r0, [pc, #56]	@ (8001234 <DHT11_Read+0xf4>)
 80011fc:	f002 fa6c 	bl	80036d8 <HAL_GPIO_ReadPin>
 8001200:	4603      	mov	r3, r0
 8001202:	2b00      	cmp	r3, #0
 8001204:	d006      	beq.n	8001214 <DHT11_Read+0xd4>
 8001206:	4b09      	ldr	r3, [pc, #36]	@ (800122c <DHT11_Read+0xec>)
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	1c9a      	adds	r2, r3, #2
 800120c:	4b08      	ldr	r3, [pc, #32]	@ (8001230 <DHT11_Read+0xf0>)
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	429a      	cmp	r2, r3
 8001212:	d8eb      	bhi.n	80011ec <DHT11_Read+0xac>
  for (a=0;a<8;a++)
 8001214:	79fb      	ldrb	r3, [r7, #7]
 8001216:	3301      	adds	r3, #1
 8001218:	71fb      	strb	r3, [r7, #7]
 800121a:	79fb      	ldrb	r3, [r7, #7]
 800121c:	2b07      	cmp	r3, #7
 800121e:	d995      	bls.n	800114c <DHT11_Read+0xc>
    }
  }
  return b;
 8001220:	79bb      	ldrb	r3, [r7, #6]
}
 8001222:	4618      	mov	r0, r3
 8001224:	3708      	adds	r7, #8
 8001226:	46bd      	mov	sp, r7
 8001228:	bd80      	pop	{r7, pc}
 800122a:	bf00      	nop
 800122c:	20000328 	.word	0x20000328
 8001230:	2000032c 	.word	0x2000032c
 8001234:	40010c00 	.word	0x40010c00

08001238 <DHT11_Start>:
uint8_t DHT11_Start (void)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b086      	sub	sp, #24
 800123c:	af00      	add	r7, sp, #0
  uint8_t Response = 0;
 800123e:	2300      	movs	r3, #0
 8001240:	75fb      	strb	r3, [r7, #23]
  GPIO_InitTypeDef GPIO_InitStructPrivate = {0};
 8001242:	1d3b      	adds	r3, r7, #4
 8001244:	2200      	movs	r2, #0
 8001246:	601a      	str	r2, [r3, #0]
 8001248:	605a      	str	r2, [r3, #4]
 800124a:	609a      	str	r2, [r3, #8]
 800124c:	60da      	str	r2, [r3, #12]
  GPIO_InitStructPrivate.Pin = DHT11_PIN;
 800124e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001252:	607b      	str	r3, [r7, #4]
  GPIO_InitStructPrivate.Mode = GPIO_MODE_OUTPUT_PP;
 8001254:	2301      	movs	r3, #1
 8001256:	60bb      	str	r3, [r7, #8]
  GPIO_InitStructPrivate.Speed = GPIO_SPEED_FREQ_LOW;
 8001258:	2302      	movs	r3, #2
 800125a:	613b      	str	r3, [r7, #16]
  GPIO_InitStructPrivate.Pull = GPIO_NOPULL;
 800125c:	2300      	movs	r3, #0
 800125e:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(DHT11_PORT, &GPIO_InitStructPrivate); // set the pin as output
 8001260:	1d3b      	adds	r3, r7, #4
 8001262:	4619      	mov	r1, r3
 8001264:	482c      	ldr	r0, [pc, #176]	@ (8001318 <DHT11_Start+0xe0>)
 8001266:	f002 f8b3 	bl	80033d0 <HAL_GPIO_Init>
  HAL_GPIO_WritePin (DHT11_PORT, DHT11_PIN, 0);   // pull the pin low
 800126a:	2200      	movs	r2, #0
 800126c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001270:	4829      	ldr	r0, [pc, #164]	@ (8001318 <DHT11_Start+0xe0>)
 8001272:	f002 fa48 	bl	8003706 <HAL_GPIO_WritePin>
  HAL_Delay(20);   // wait for 20ms
 8001276:	2014      	movs	r0, #20
 8001278:	f001 f938 	bl	80024ec <HAL_Delay>
  HAL_GPIO_WritePin (DHT11_PORT, DHT11_PIN, 1);   // pull the pin high
 800127c:	2201      	movs	r2, #1
 800127e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001282:	4825      	ldr	r0, [pc, #148]	@ (8001318 <DHT11_Start+0xe0>)
 8001284:	f002 fa3f 	bl	8003706 <HAL_GPIO_WritePin>
  microDelay (30);   // wait for 30us
 8001288:	201e      	movs	r0, #30
 800128a:	f7ff ff41 	bl	8001110 <microDelay>
  GPIO_InitStructPrivate.Mode = GPIO_MODE_INPUT;
 800128e:	2300      	movs	r3, #0
 8001290:	60bb      	str	r3, [r7, #8]
  GPIO_InitStructPrivate.Pull = GPIO_PULLUP;
 8001292:	2301      	movs	r3, #1
 8001294:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(DHT11_PORT, &GPIO_InitStructPrivate); // set the pin as input
 8001296:	1d3b      	adds	r3, r7, #4
 8001298:	4619      	mov	r1, r3
 800129a:	481f      	ldr	r0, [pc, #124]	@ (8001318 <DHT11_Start+0xe0>)
 800129c:	f002 f898 	bl	80033d0 <HAL_GPIO_Init>
  microDelay (40);
 80012a0:	2028      	movs	r0, #40	@ 0x28
 80012a2:	f7ff ff35 	bl	8001110 <microDelay>
  if (!(HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)))
 80012a6:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80012aa:	481b      	ldr	r0, [pc, #108]	@ (8001318 <DHT11_Start+0xe0>)
 80012ac:	f002 fa14 	bl	80036d8 <HAL_GPIO_ReadPin>
 80012b0:	4603      	mov	r3, r0
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d10c      	bne.n	80012d0 <DHT11_Start+0x98>
  {
    microDelay (80);
 80012b6:	2050      	movs	r0, #80	@ 0x50
 80012b8:	f7ff ff2a 	bl	8001110 <microDelay>
    if ((HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN))) Response = 1;
 80012bc:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80012c0:	4815      	ldr	r0, [pc, #84]	@ (8001318 <DHT11_Start+0xe0>)
 80012c2:	f002 fa09 	bl	80036d8 <HAL_GPIO_ReadPin>
 80012c6:	4603      	mov	r3, r0
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d001      	beq.n	80012d0 <DHT11_Start+0x98>
 80012cc:	2301      	movs	r3, #1
 80012ce:	75fb      	strb	r3, [r7, #23]
  }
  pMillis = HAL_GetTick();
 80012d0:	f001 f902 	bl	80024d8 <HAL_GetTick>
 80012d4:	4603      	mov	r3, r0
 80012d6:	4a11      	ldr	r2, [pc, #68]	@ (800131c <DHT11_Start+0xe4>)
 80012d8:	6013      	str	r3, [r2, #0]
  cMillis = HAL_GetTick();
 80012da:	f001 f8fd 	bl	80024d8 <HAL_GetTick>
 80012de:	4603      	mov	r3, r0
 80012e0:	4a0f      	ldr	r2, [pc, #60]	@ (8001320 <DHT11_Start+0xe8>)
 80012e2:	6013      	str	r3, [r2, #0]
  while ((HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)) && pMillis + 2 > cMillis)
 80012e4:	e004      	b.n	80012f0 <DHT11_Start+0xb8>
  {
    cMillis = HAL_GetTick();
 80012e6:	f001 f8f7 	bl	80024d8 <HAL_GetTick>
 80012ea:	4603      	mov	r3, r0
 80012ec:	4a0c      	ldr	r2, [pc, #48]	@ (8001320 <DHT11_Start+0xe8>)
 80012ee:	6013      	str	r3, [r2, #0]
  while ((HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)) && pMillis + 2 > cMillis)
 80012f0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80012f4:	4808      	ldr	r0, [pc, #32]	@ (8001318 <DHT11_Start+0xe0>)
 80012f6:	f002 f9ef 	bl	80036d8 <HAL_GPIO_ReadPin>
 80012fa:	4603      	mov	r3, r0
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d006      	beq.n	800130e <DHT11_Start+0xd6>
 8001300:	4b06      	ldr	r3, [pc, #24]	@ (800131c <DHT11_Start+0xe4>)
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	1c9a      	adds	r2, r3, #2
 8001306:	4b06      	ldr	r3, [pc, #24]	@ (8001320 <DHT11_Start+0xe8>)
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	429a      	cmp	r2, r3
 800130c:	d8eb      	bhi.n	80012e6 <DHT11_Start+0xae>
  }
  return Response;
 800130e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001310:	4618      	mov	r0, r3
 8001312:	3718      	adds	r7, #24
 8001314:	46bd      	mov	sp, r7
 8001316:	bd80      	pop	{r7, pc}
 8001318:	40010c00 	.word	0x40010c00
 800131c:	20000328 	.word	0x20000328
 8001320:	2000032c 	.word	0x2000032c

08001324 <ISM330_I2C_Read>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
// ---------- I2C Read/Write ----------
uint8_t ISM330_I2C_Read(uint8_t reg)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	b088      	sub	sp, #32
 8001328:	af04      	add	r7, sp, #16
 800132a:	4603      	mov	r3, r0
 800132c:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    HAL_I2C_Mem_Read(&hi2c1, ISM330_ADDR, reg, I2C_MEMADD_SIZE_8BIT, &value, 1, HAL_MAX_DELAY);
 800132e:	79fb      	ldrb	r3, [r7, #7]
 8001330:	b29a      	uxth	r2, r3
 8001332:	f04f 33ff 	mov.w	r3, #4294967295
 8001336:	9302      	str	r3, [sp, #8]
 8001338:	2301      	movs	r3, #1
 800133a:	9301      	str	r3, [sp, #4]
 800133c:	f107 030f 	add.w	r3, r7, #15
 8001340:	9300      	str	r3, [sp, #0]
 8001342:	2301      	movs	r3, #1
 8001344:	21d4      	movs	r1, #212	@ 0xd4
 8001346:	4804      	ldr	r0, [pc, #16]	@ (8001358 <ISM330_I2C_Read+0x34>)
 8001348:	f002 fc4c 	bl	8003be4 <HAL_I2C_Mem_Read>
    return value;
 800134c:	7bfb      	ldrb	r3, [r7, #15]
}
 800134e:	4618      	mov	r0, r3
 8001350:	3710      	adds	r7, #16
 8001352:	46bd      	mov	sp, r7
 8001354:	bd80      	pop	{r7, pc}
 8001356:	bf00      	nop
 8001358:	20000280 	.word	0x20000280

0800135c <ISM330_I2C_Write>:

void ISM330_I2C_Write(uint8_t reg, uint8_t value)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	b086      	sub	sp, #24
 8001360:	af04      	add	r7, sp, #16
 8001362:	4603      	mov	r3, r0
 8001364:	460a      	mov	r2, r1
 8001366:	71fb      	strb	r3, [r7, #7]
 8001368:	4613      	mov	r3, r2
 800136a:	71bb      	strb	r3, [r7, #6]
    HAL_I2C_Mem_Write(&hi2c1, ISM330_ADDR, reg, I2C_MEMADD_SIZE_8BIT, &value, 1, HAL_MAX_DELAY);
 800136c:	79fb      	ldrb	r3, [r7, #7]
 800136e:	b29a      	uxth	r2, r3
 8001370:	f04f 33ff 	mov.w	r3, #4294967295
 8001374:	9302      	str	r3, [sp, #8]
 8001376:	2301      	movs	r3, #1
 8001378:	9301      	str	r3, [sp, #4]
 800137a:	1dbb      	adds	r3, r7, #6
 800137c:	9300      	str	r3, [sp, #0]
 800137e:	2301      	movs	r3, #1
 8001380:	21d4      	movs	r1, #212	@ 0xd4
 8001382:	4803      	ldr	r0, [pc, #12]	@ (8001390 <ISM330_I2C_Write+0x34>)
 8001384:	f002 fb34 	bl	80039f0 <HAL_I2C_Mem_Write>
}
 8001388:	bf00      	nop
 800138a:	3708      	adds	r7, #8
 800138c:	46bd      	mov	sp, r7
 800138e:	bd80      	pop	{r7, pc}
 8001390:	20000280 	.word	0x20000280

08001394 <ISM330_Init>:

// ---------- Init Sensor ----------
void ISM330_Init(void)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	b082      	sub	sp, #8
 8001398:	af00      	add	r7, sp, #0
    uint8_t whoami = ISM330_I2C_Read(ISM330_WHO_AM_I);
 800139a:	200f      	movs	r0, #15
 800139c:	f7ff ffc2 	bl	8001324 <ISM330_I2C_Read>
 80013a0:	4603      	mov	r3, r0
 80013a2:	71fb      	strb	r3, [r7, #7]
    if (whoami != ISM330_WHO_AM_I_VAL) while(1); // error
 80013a4:	79fb      	ldrb	r3, [r7, #7]
 80013a6:	2b6b      	cmp	r3, #107	@ 0x6b
 80013a8:	d001      	beq.n	80013ae <ISM330_Init+0x1a>
 80013aa:	bf00      	nop
 80013ac:	e7fd      	b.n	80013aa <ISM330_Init+0x16>

    // Accelerometer: 104 Hz, ±2g
    ISM330_I2C_Write(ISM330_CTRL1_XL, 0x40);
 80013ae:	2140      	movs	r1, #64	@ 0x40
 80013b0:	2010      	movs	r0, #16
 80013b2:	f7ff ffd3 	bl	800135c <ISM330_I2C_Write>

    // Gyroscope: 104 Hz, 250 dps
    ISM330_I2C_Write(ISM330_CTRL2_G, 0x40);
 80013b6:	2140      	movs	r1, #64	@ 0x40
 80013b8:	2011      	movs	r0, #17
 80013ba:	f7ff ffcf 	bl	800135c <ISM330_I2C_Write>
}
 80013be:	bf00      	nop
 80013c0:	3708      	adds	r7, #8
 80013c2:	46bd      	mov	sp, r7
 80013c4:	bd80      	pop	{r7, pc}
	...

080013c8 <uart_send_string>:

void uart_send_char(char c) {
    while (!(USART2->SR & USART_SR_TXE)); // Wait until TX buffer is empty
    USART2->DR = c;
}
void uart_send_string(const char *str) {
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b082      	sub	sp, #8
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart2, (uint8_t *)str, strlen(str), HAL_MAX_DELAY);
 80013d0:	6878      	ldr	r0, [r7, #4]
 80013d2:	f7fe febd 	bl	8000150 <strlen>
 80013d6:	4603      	mov	r3, r0
 80013d8:	b29a      	uxth	r2, r3
 80013da:	f04f 33ff 	mov.w	r3, #4294967295
 80013de:	6879      	ldr	r1, [r7, #4]
 80013e0:	4803      	ldr	r0, [pc, #12]	@ (80013f0 <uart_send_string+0x28>)
 80013e2:	f004 f94b 	bl	800567c <HAL_UART_Transmit>
}
 80013e6:	bf00      	nop
 80013e8:	3708      	adds	r7, #8
 80013ea:	46bd      	mov	sp, r7
 80013ec:	bd80      	pop	{r7, pc}
 80013ee:	bf00      	nop
 80013f0:	20000238 	.word	0x20000238

080013f4 <ISM330DHCX_ReadRaw>:
}
// ---------- Read Accel + Gyro ----------
extern I2C_HandleTypeDef hi2c1; // or whichever I2C instance you're using

void ISM330DHCX_ReadRaw(MotionRaw_T* motion)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b08a      	sub	sp, #40	@ 0x28
 80013f8:	af04      	add	r7, sp, #16
 80013fa:	6078      	str	r0, [r7, #4]
    uint8_t rawData[12]; // 6 bytes accel + 6 bytes gyro

    // Read accelerometer data
    HAL_I2C_Mem_Read(&hi2c1, ISM330_ADDR, ISM330_OUTX_L_A, I2C_MEMADD_SIZE_8BIT, &rawData[0], 6, HAL_MAX_DELAY);
 80013fc:	f04f 33ff 	mov.w	r3, #4294967295
 8001400:	9302      	str	r3, [sp, #8]
 8001402:	2306      	movs	r3, #6
 8001404:	9301      	str	r3, [sp, #4]
 8001406:	f107 030c 	add.w	r3, r7, #12
 800140a:	9300      	str	r3, [sp, #0]
 800140c:	2301      	movs	r3, #1
 800140e:	2228      	movs	r2, #40	@ 0x28
 8001410:	21d4      	movs	r1, #212	@ 0xd4
 8001412:	4829      	ldr	r0, [pc, #164]	@ (80014b8 <ISM330DHCX_ReadRaw+0xc4>)
 8001414:	f002 fbe6 	bl	8003be4 <HAL_I2C_Mem_Read>

    // Read gyroscope data
    HAL_I2C_Mem_Read(&hi2c1, ISM330_ADDR, ISM330_OUTX_L_G, I2C_MEMADD_SIZE_8BIT, &rawData[6], 6, HAL_MAX_DELAY);
 8001418:	f04f 33ff 	mov.w	r3, #4294967295
 800141c:	9302      	str	r3, [sp, #8]
 800141e:	2306      	movs	r3, #6
 8001420:	9301      	str	r3, [sp, #4]
 8001422:	f107 030c 	add.w	r3, r7, #12
 8001426:	3306      	adds	r3, #6
 8001428:	9300      	str	r3, [sp, #0]
 800142a:	2301      	movs	r3, #1
 800142c:	2222      	movs	r2, #34	@ 0x22
 800142e:	21d4      	movs	r1, #212	@ 0xd4
 8001430:	4821      	ldr	r0, [pc, #132]	@ (80014b8 <ISM330DHCX_ReadRaw+0xc4>)
 8001432:	f002 fbd7 	bl	8003be4 <HAL_I2C_Mem_Read>

    // Convert LSB to int16_t
    motion->ax = (int16_t)(rawData[1] << 8 | rawData[0]);
 8001436:	7b7b      	ldrb	r3, [r7, #13]
 8001438:	b21b      	sxth	r3, r3
 800143a:	021b      	lsls	r3, r3, #8
 800143c:	b21a      	sxth	r2, r3
 800143e:	7b3b      	ldrb	r3, [r7, #12]
 8001440:	b21b      	sxth	r3, r3
 8001442:	4313      	orrs	r3, r2
 8001444:	b21a      	sxth	r2, r3
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	801a      	strh	r2, [r3, #0]
    motion->ay = (int16_t)(rawData[3] << 8 | rawData[2]);
 800144a:	7bfb      	ldrb	r3, [r7, #15]
 800144c:	b21b      	sxth	r3, r3
 800144e:	021b      	lsls	r3, r3, #8
 8001450:	b21a      	sxth	r2, r3
 8001452:	7bbb      	ldrb	r3, [r7, #14]
 8001454:	b21b      	sxth	r3, r3
 8001456:	4313      	orrs	r3, r2
 8001458:	b21a      	sxth	r2, r3
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	805a      	strh	r2, [r3, #2]
    motion->az = (int16_t)(rawData[5] << 8 | rawData[4]);
 800145e:	7c7b      	ldrb	r3, [r7, #17]
 8001460:	b21b      	sxth	r3, r3
 8001462:	021b      	lsls	r3, r3, #8
 8001464:	b21a      	sxth	r2, r3
 8001466:	7c3b      	ldrb	r3, [r7, #16]
 8001468:	b21b      	sxth	r3, r3
 800146a:	4313      	orrs	r3, r2
 800146c:	b21a      	sxth	r2, r3
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	809a      	strh	r2, [r3, #4]

    motion->gx = (int16_t)(rawData[7] << 8 | rawData[6]);
 8001472:	7cfb      	ldrb	r3, [r7, #19]
 8001474:	b21b      	sxth	r3, r3
 8001476:	021b      	lsls	r3, r3, #8
 8001478:	b21a      	sxth	r2, r3
 800147a:	7cbb      	ldrb	r3, [r7, #18]
 800147c:	b21b      	sxth	r3, r3
 800147e:	4313      	orrs	r3, r2
 8001480:	b21a      	sxth	r2, r3
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	80da      	strh	r2, [r3, #6]
    motion->gy = (int16_t)(rawData[9] << 8 | rawData[8]);
 8001486:	7d7b      	ldrb	r3, [r7, #21]
 8001488:	b21b      	sxth	r3, r3
 800148a:	021b      	lsls	r3, r3, #8
 800148c:	b21a      	sxth	r2, r3
 800148e:	7d3b      	ldrb	r3, [r7, #20]
 8001490:	b21b      	sxth	r3, r3
 8001492:	4313      	orrs	r3, r2
 8001494:	b21a      	sxth	r2, r3
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	811a      	strh	r2, [r3, #8]
    motion->gz = (int16_t)(rawData[11] << 8 | rawData[10]);
 800149a:	7dfb      	ldrb	r3, [r7, #23]
 800149c:	b21b      	sxth	r3, r3
 800149e:	021b      	lsls	r3, r3, #8
 80014a0:	b21a      	sxth	r2, r3
 80014a2:	7dbb      	ldrb	r3, [r7, #22]
 80014a4:	b21b      	sxth	r3, r3
 80014a6:	4313      	orrs	r3, r2
 80014a8:	b21a      	sxth	r2, r3
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	815a      	strh	r2, [r3, #10]
}
 80014ae:	bf00      	nop
 80014b0:	3718      	adds	r7, #24
 80014b2:	46bd      	mov	sp, r7
 80014b4:	bd80      	pop	{r7, pc}
 80014b6:	bf00      	nop
 80014b8:	20000280 	.word	0x20000280

080014bc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80014bc:	b5b0      	push	{r4, r5, r7, lr}
 80014be:	b098      	sub	sp, #96	@ 0x60
 80014c0:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80014c2:	f000 ffb1 	bl	8002428 <HAL_Init>
  /* USER CODE BEGIN Init */
  MotionRaw_T motion;
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80014c6:	f000 f953 	bl	8001770 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80014ca:	f000 fa8f 	bl	80019ec <MX_GPIO_Init>
  MX_CAN_Init();
 80014ce:	f000 f9c3 	bl	8001858 <MX_CAN_Init>
  MX_I2C1_Init();
 80014d2:	f000 f993 	bl	80017fc <MX_I2C1_Init>
  MX_USART2_UART_Init();
 80014d6:	f000 fa0f 	bl	80018f8 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 80014da:	f000 fa37 	bl	800194c <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  //Start UART peripheral
  uart_send_string("Start Debug: reached point X\r\n");
 80014de:	4881      	ldr	r0, [pc, #516]	@ (80016e4 <main+0x228>)
 80014e0:	f7ff ff72 	bl	80013c8 <uart_send_string>
  // Start CAN peripheral
  if (HAL_CAN_Start(&hcan) != HAL_OK)
 80014e4:	4880      	ldr	r0, [pc, #512]	@ (80016e8 <main+0x22c>)
 80014e6:	f001 f9e9 	bl	80028bc <HAL_CAN_Start>
 80014ea:	4603      	mov	r3, r0
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d001      	beq.n	80014f4 <main+0x38>
  {
    Error_Handler();
 80014f0:	f000 fb3a 	bl	8001b68 <Error_Handler>
  }

  // Enable CAN RX interrupt
  if (HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK)
 80014f4:	2102      	movs	r1, #2
 80014f6:	487c      	ldr	r0, [pc, #496]	@ (80016e8 <main+0x22c>)
 80014f8:	f001 fc14 	bl	8002d24 <HAL_CAN_ActivateNotification>
 80014fc:	4603      	mov	r3, r0
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d001      	beq.n	8001506 <main+0x4a>
  {
    Error_Handler();
 8001502:	f000 fb31 	bl	8001b68 <Error_Handler>
  }

  // Configure CAN TX Header
  TxHeader.DLC = 8;
 8001506:	4b79      	ldr	r3, [pc, #484]	@ (80016ec <main+0x230>)
 8001508:	2208      	movs	r2, #8
 800150a:	611a      	str	r2, [r3, #16]
  TxHeader.IDE = CAN_ID_STD;
 800150c:	4b77      	ldr	r3, [pc, #476]	@ (80016ec <main+0x230>)
 800150e:	2200      	movs	r2, #0
 8001510:	609a      	str	r2, [r3, #8]
  TxHeader.RTR = CAN_RTR_DATA;
 8001512:	4b76      	ldr	r3, [pc, #472]	@ (80016ec <main+0x230>)
 8001514:	2200      	movs	r2, #0
 8001516:	60da      	str	r2, [r3, #12]
  TxHeader.StdId = 0x321;
 8001518:	4b74      	ldr	r3, [pc, #464]	@ (80016ec <main+0x230>)
 800151a:	f240 3221 	movw	r2, #801	@ 0x321
 800151e:	601a      	str	r2, [r3, #0]

  // Load sample data
  TxData[0] = 0x11;
 8001520:	4b73      	ldr	r3, [pc, #460]	@ (80016f0 <main+0x234>)
 8001522:	2211      	movs	r2, #17
 8001524:	701a      	strb	r2, [r3, #0]
  TxData[1] = 0x22;
 8001526:	4b72      	ldr	r3, [pc, #456]	@ (80016f0 <main+0x234>)
 8001528:	2222      	movs	r2, #34	@ 0x22
 800152a:	705a      	strb	r2, [r3, #1]
  TxData[2] = 0x33;
 800152c:	4b70      	ldr	r3, [pc, #448]	@ (80016f0 <main+0x234>)
 800152e:	2233      	movs	r2, #51	@ 0x33
 8001530:	709a      	strb	r2, [r3, #2]
  TxData[3] = 0x44;
 8001532:	4b6f      	ldr	r3, [pc, #444]	@ (80016f0 <main+0x234>)
 8001534:	2244      	movs	r2, #68	@ 0x44
 8001536:	70da      	strb	r2, [r3, #3]
  TxData[4] = 0x55;
 8001538:	4b6d      	ldr	r3, [pc, #436]	@ (80016f0 <main+0x234>)
 800153a:	2255      	movs	r2, #85	@ 0x55
 800153c:	711a      	strb	r2, [r3, #4]
  TxData[5] = 0x66;
 800153e:	4b6c      	ldr	r3, [pc, #432]	@ (80016f0 <main+0x234>)
 8001540:	2266      	movs	r2, #102	@ 0x66
 8001542:	715a      	strb	r2, [r3, #5]
  TxData[6] = 0x77;
 8001544:	4b6a      	ldr	r3, [pc, #424]	@ (80016f0 <main+0x234>)
 8001546:	2277      	movs	r2, #119	@ 0x77
 8001548:	719a      	strb	r2, [r3, #6]
  TxData[7] = 0x88;
 800154a:	4b69      	ldr	r3, [pc, #420]	@ (80016f0 <main+0x234>)
 800154c:	2288      	movs	r2, #136	@ 0x88
 800154e:	71da      	strb	r2, [r3, #7]
  // Init I2C1 via CubeMX or manually
  ISM330_Init();
 8001550:	f7ff ff20 	bl	8001394 <ISM330_Init>
  HAL_TIM_Base_Start(&htim1);
 8001554:	4867      	ldr	r0, [pc, #412]	@ (80016f4 <main+0x238>)
 8001556:	f003 fdcd 	bl	80050f4 <HAL_TIM_Base_Start>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    if(DHT11_Start())
 800155a:	f7ff fe6d 	bl	8001238 <DHT11_Start>
 800155e:	4603      	mov	r3, r0
 8001560:	2b00      	cmp	r3, #0
 8001562:	f000 80a2 	beq.w	80016aa <main+0x1ee>
	     {
	       RHI = DHT11_Read(); // Relative humidity integral
 8001566:	f7ff fdeb 	bl	8001140 <DHT11_Read>
 800156a:	4603      	mov	r3, r0
 800156c:	461a      	mov	r2, r3
 800156e:	4b62      	ldr	r3, [pc, #392]	@ (80016f8 <main+0x23c>)
 8001570:	701a      	strb	r2, [r3, #0]
	       RHD = DHT11_Read(); // Relative humidity decimal
 8001572:	f7ff fde5 	bl	8001140 <DHT11_Read>
 8001576:	4603      	mov	r3, r0
 8001578:	461a      	mov	r2, r3
 800157a:	4b60      	ldr	r3, [pc, #384]	@ (80016fc <main+0x240>)
 800157c:	701a      	strb	r2, [r3, #0]
	       TCI = DHT11_Read(); // Celsius integral
 800157e:	f7ff fddf 	bl	8001140 <DHT11_Read>
 8001582:	4603      	mov	r3, r0
 8001584:	461a      	mov	r2, r3
 8001586:	4b5e      	ldr	r3, [pc, #376]	@ (8001700 <main+0x244>)
 8001588:	701a      	strb	r2, [r3, #0]
	       TCD = DHT11_Read(); // Celsius decimal
 800158a:	f7ff fdd9 	bl	8001140 <DHT11_Read>
 800158e:	4603      	mov	r3, r0
 8001590:	461a      	mov	r2, r3
 8001592:	4b5c      	ldr	r3, [pc, #368]	@ (8001704 <main+0x248>)
 8001594:	701a      	strb	r2, [r3, #0]
	       SUM = DHT11_Read(); // Check sum
 8001596:	f7ff fdd3 	bl	8001140 <DHT11_Read>
 800159a:	4603      	mov	r3, r0
 800159c:	461a      	mov	r2, r3
 800159e:	4b5a      	ldr	r3, [pc, #360]	@ (8001708 <main+0x24c>)
 80015a0:	701a      	strb	r2, [r3, #0]
	       if (RHI + RHD + TCI + TCD == SUM)
 80015a2:	4b55      	ldr	r3, [pc, #340]	@ (80016f8 <main+0x23c>)
 80015a4:	781b      	ldrb	r3, [r3, #0]
 80015a6:	461a      	mov	r2, r3
 80015a8:	4b54      	ldr	r3, [pc, #336]	@ (80016fc <main+0x240>)
 80015aa:	781b      	ldrb	r3, [r3, #0]
 80015ac:	4413      	add	r3, r2
 80015ae:	4a54      	ldr	r2, [pc, #336]	@ (8001700 <main+0x244>)
 80015b0:	7812      	ldrb	r2, [r2, #0]
 80015b2:	4413      	add	r3, r2
 80015b4:	4a53      	ldr	r2, [pc, #332]	@ (8001704 <main+0x248>)
 80015b6:	7812      	ldrb	r2, [r2, #0]
 80015b8:	4413      	add	r3, r2
 80015ba:	4a53      	ldr	r2, [pc, #332]	@ (8001708 <main+0x24c>)
 80015bc:	7812      	ldrb	r2, [r2, #0]
 80015be:	4293      	cmp	r3, r2
 80015c0:	d16e      	bne.n	80016a0 <main+0x1e4>
	       {
	         // Can use RHI and TCI for any purposes if whole number only needed
	         tCelsius = (float)TCI + (float)(TCD/10.0);
 80015c2:	4b4f      	ldr	r3, [pc, #316]	@ (8001700 <main+0x244>)
 80015c4:	781b      	ldrb	r3, [r3, #0]
 80015c6:	4618      	mov	r0, r3
 80015c8:	f7ff fb64 	bl	8000c94 <__aeabi_ui2f>
 80015cc:	4604      	mov	r4, r0
 80015ce:	4b4d      	ldr	r3, [pc, #308]	@ (8001704 <main+0x248>)
 80015d0:	781b      	ldrb	r3, [r3, #0]
 80015d2:	4618      	mov	r0, r3
 80015d4:	f7fe ff16 	bl	8000404 <__aeabi_i2d>
 80015d8:	f04f 0200 	mov.w	r2, #0
 80015dc:	4b4b      	ldr	r3, [pc, #300]	@ (800170c <main+0x250>)
 80015de:	f7ff f8a5 	bl	800072c <__aeabi_ddiv>
 80015e2:	4602      	mov	r2, r0
 80015e4:	460b      	mov	r3, r1
 80015e6:	4610      	mov	r0, r2
 80015e8:	4619      	mov	r1, r3
 80015ea:	f7ff fa4d 	bl	8000a88 <__aeabi_d2f>
 80015ee:	4603      	mov	r3, r0
 80015f0:	4619      	mov	r1, r3
 80015f2:	4620      	mov	r0, r4
 80015f4:	f7ff fa9e 	bl	8000b34 <__addsf3>
 80015f8:	4603      	mov	r3, r0
 80015fa:	461a      	mov	r2, r3
 80015fc:	4b44      	ldr	r3, [pc, #272]	@ (8001710 <main+0x254>)
 80015fe:	601a      	str	r2, [r3, #0]
	         tFahrenheit = tCelsius * 9/5 + 32;
 8001600:	4b43      	ldr	r3, [pc, #268]	@ (8001710 <main+0x254>)
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	4943      	ldr	r1, [pc, #268]	@ (8001714 <main+0x258>)
 8001606:	4618      	mov	r0, r3
 8001608:	f7ff fb9c 	bl	8000d44 <__aeabi_fmul>
 800160c:	4603      	mov	r3, r0
 800160e:	4942      	ldr	r1, [pc, #264]	@ (8001718 <main+0x25c>)
 8001610:	4618      	mov	r0, r3
 8001612:	f7ff fc4b 	bl	8000eac <__aeabi_fdiv>
 8001616:	4603      	mov	r3, r0
 8001618:	f04f 4184 	mov.w	r1, #1107296256	@ 0x42000000
 800161c:	4618      	mov	r0, r3
 800161e:	f7ff fa89 	bl	8000b34 <__addsf3>
 8001622:	4603      	mov	r3, r0
 8001624:	461a      	mov	r2, r3
 8001626:	4b3d      	ldr	r3, [pc, #244]	@ (800171c <main+0x260>)
 8001628:	601a      	str	r2, [r3, #0]
	         RH = (float)RHI + (float)(RHD/10.0);
 800162a:	4b33      	ldr	r3, [pc, #204]	@ (80016f8 <main+0x23c>)
 800162c:	781b      	ldrb	r3, [r3, #0]
 800162e:	4618      	mov	r0, r3
 8001630:	f7ff fb30 	bl	8000c94 <__aeabi_ui2f>
 8001634:	4604      	mov	r4, r0
 8001636:	4b31      	ldr	r3, [pc, #196]	@ (80016fc <main+0x240>)
 8001638:	781b      	ldrb	r3, [r3, #0]
 800163a:	4618      	mov	r0, r3
 800163c:	f7fe fee2 	bl	8000404 <__aeabi_i2d>
 8001640:	f04f 0200 	mov.w	r2, #0
 8001644:	4b31      	ldr	r3, [pc, #196]	@ (800170c <main+0x250>)
 8001646:	f7ff f871 	bl	800072c <__aeabi_ddiv>
 800164a:	4602      	mov	r2, r0
 800164c:	460b      	mov	r3, r1
 800164e:	4610      	mov	r0, r2
 8001650:	4619      	mov	r1, r3
 8001652:	f7ff fa19 	bl	8000a88 <__aeabi_d2f>
 8001656:	4603      	mov	r3, r0
 8001658:	4619      	mov	r1, r3
 800165a:	4620      	mov	r0, r4
 800165c:	f7ff fa6a 	bl	8000b34 <__addsf3>
 8001660:	4603      	mov	r3, r0
 8001662:	461a      	mov	r2, r3
 8001664:	4b2e      	ldr	r3, [pc, #184]	@ (8001720 <main+0x264>)
 8001666:	601a      	str	r2, [r3, #0]
	         // Can use tCelsius, tFahrenheit and RH for any purposes
	         char msg[64];
	         snprintf(msg,sizeof(msg),"Temp:%.1f°C, Humidity: %.1f%%\r\n",tCelsius,RH);
 8001668:	4b29      	ldr	r3, [pc, #164]	@ (8001710 <main+0x254>)
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	4618      	mov	r0, r3
 800166e:	f7fe fedb 	bl	8000428 <__aeabi_f2d>
 8001672:	4604      	mov	r4, r0
 8001674:	460d      	mov	r5, r1
 8001676:	4b2a      	ldr	r3, [pc, #168]	@ (8001720 <main+0x264>)
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	4618      	mov	r0, r3
 800167c:	f7fe fed4 	bl	8000428 <__aeabi_f2d>
 8001680:	4602      	mov	r2, r0
 8001682:	460b      	mov	r3, r1
 8001684:	1d38      	adds	r0, r7, #4
 8001686:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800168a:	e9cd 4500 	strd	r4, r5, [sp]
 800168e:	4a25      	ldr	r2, [pc, #148]	@ (8001724 <main+0x268>)
 8001690:	2140      	movs	r1, #64	@ 0x40
 8001692:	f004 fef5 	bl	8006480 <sniprintf>
	         uart_send_string(msg);
 8001696:	1d3b      	adds	r3, r7, #4
 8001698:	4618      	mov	r0, r3
 800169a:	f7ff fe95 	bl	80013c8 <uart_send_string>
 800169e:	e002      	b.n	80016a6 <main+0x1ea>
	       }
	       else
	       {
	    	   uart_send_string("DHT11 checksum error \r\n");
 80016a0:	4821      	ldr	r0, [pc, #132]	@ (8001728 <main+0x26c>)
 80016a2:	f7ff fe91 	bl	80013c8 <uart_send_string>
	       }
	       sendTemperatureHumidityMessage();
 80016a6:	f000 fc8f 	bl	8001fc8 <sendTemperatureHumidityMessage>
	     }
	    // Send CAN message
	    if (HAL_CAN_AddTxMessage(&hcan, &TxHeader, TxData, &TxMailbox) != HAL_OK)
 80016aa:	4b20      	ldr	r3, [pc, #128]	@ (800172c <main+0x270>)
 80016ac:	4a10      	ldr	r2, [pc, #64]	@ (80016f0 <main+0x234>)
 80016ae:	490f      	ldr	r1, [pc, #60]	@ (80016ec <main+0x230>)
 80016b0:	480d      	ldr	r0, [pc, #52]	@ (80016e8 <main+0x22c>)
 80016b2:	f001 f947 	bl	8002944 <HAL_CAN_AddTxMessage>
 80016b6:	4603      	mov	r3, r0
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d001      	beq.n	80016c0 <main+0x204>
	    {
	      Error_Handler();
 80016bc:	f000 fa54 	bl	8001b68 <Error_Handler>
	    }
	    uart_send_string("Debug: reached point X\r\n");
 80016c0:	481b      	ldr	r0, [pc, #108]	@ (8001730 <main+0x274>)
 80016c2:	f7ff fe81 	bl	80013c8 <uart_send_string>
	    ISM330DHCX_ReadRaw(&motion);
 80016c6:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 80016ca:	4618      	mov	r0, r3
 80016cc:	f7ff fe92 	bl	80013f4 <ISM330DHCX_ReadRaw>
	    sendMotionStatusToNodeA(&motion);
 80016d0:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 80016d4:	4618      	mov	r0, r3
 80016d6:	f000 f9f5 	bl	8001ac4 <sendMotionStatusToNodeA>
	    HAL_Delay(1000); // just idle loop
 80016da:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80016de:	f000 ff05 	bl	80024ec <HAL_Delay>
    if(DHT11_Start())
 80016e2:	e73a      	b.n	800155a <main+0x9e>
 80016e4:	080087a0 	.word	0x080087a0
 80016e8:	200002d4 	.word	0x200002d4
 80016ec:	200002fc 	.word	0x200002fc
 80016f0:	20000314 	.word	0x20000314
 80016f4:	200001f0 	.word	0x200001f0
 80016f8:	20000320 	.word	0x20000320
 80016fc:	20000321 	.word	0x20000321
 8001700:	20000322 	.word	0x20000322
 8001704:	20000323 	.word	0x20000323
 8001708:	20000324 	.word	0x20000324
 800170c:	40240000 	.word	0x40240000
 8001710:	20000330 	.word	0x20000330
 8001714:	41100000 	.word	0x41100000
 8001718:	40a00000 	.word	0x40a00000
 800171c:	20000334 	.word	0x20000334
 8001720:	20000338 	.word	0x20000338
 8001724:	080087c0 	.word	0x080087c0
 8001728:	080087e4 	.word	0x080087e4
 800172c:	2000031c 	.word	0x2000031c
 8001730:	080087fc 	.word	0x080087fc

08001734 <HAL_CAN_RxFifo0MsgPendingCallback>:
  }
  /* USER CODE END 3 */
}

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	b08c      	sub	sp, #48	@ 0x30
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]
    CAN_RxHeaderTypeDef RxHeader;
    uint8_t RxData[8];

    HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, RxData);
 800173c:	f107 030c 	add.w	r3, r7, #12
 8001740:	f107 0214 	add.w	r2, r7, #20
 8001744:	2100      	movs	r1, #0
 8001746:	6878      	ldr	r0, [r7, #4]
 8001748:	f001 f9cb 	bl	8002ae2 <HAL_CAN_GetRxMessage>

    handleCANRxMessage(RxHeader.StdId, RxData, RxHeader.DLC);
 800174c:	697b      	ldr	r3, [r7, #20]
 800174e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001750:	b2d2      	uxtb	r2, r2
 8001752:	f107 010c 	add.w	r1, r7, #12
 8001756:	4618      	mov	r0, r3
 8001758:	f000 fcf6 	bl	8002148 <handleCANRxMessage>

    HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);  // Blink LED when message received
 800175c:	2120      	movs	r1, #32
 800175e:	4803      	ldr	r0, [pc, #12]	@ (800176c <HAL_CAN_RxFifo0MsgPendingCallback+0x38>)
 8001760:	f001 ffe9 	bl	8003736 <HAL_GPIO_TogglePin>
}
 8001764:	bf00      	nop
 8001766:	3730      	adds	r7, #48	@ 0x30
 8001768:	46bd      	mov	sp, r7
 800176a:	bd80      	pop	{r7, pc}
 800176c:	40010800 	.word	0x40010800

08001770 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	b090      	sub	sp, #64	@ 0x40
 8001774:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001776:	f107 0318 	add.w	r3, r7, #24
 800177a:	2228      	movs	r2, #40	@ 0x28
 800177c:	2100      	movs	r1, #0
 800177e:	4618      	mov	r0, r3
 8001780:	f004 fef7 	bl	8006572 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001784:	1d3b      	adds	r3, r7, #4
 8001786:	2200      	movs	r2, #0
 8001788:	601a      	str	r2, [r3, #0]
 800178a:	605a      	str	r2, [r3, #4]
 800178c:	609a      	str	r2, [r3, #8]
 800178e:	60da      	str	r2, [r3, #12]
 8001790:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001792:	2301      	movs	r3, #1
 8001794:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001796:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800179a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800179c:	2300      	movs	r3, #0
 800179e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80017a0:	2301      	movs	r3, #1
 80017a2:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80017a4:	2302      	movs	r3, #2
 80017a6:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80017a8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80017ac:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80017ae:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 80017b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80017b4:	f107 0318 	add.w	r3, r7, #24
 80017b8:	4618      	mov	r0, r3
 80017ba:	f003 f83b 	bl	8004834 <HAL_RCC_OscConfig>
 80017be:	4603      	mov	r3, r0
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d001      	beq.n	80017c8 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80017c4:	f000 f9d0 	bl	8001b68 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80017c8:	230f      	movs	r3, #15
 80017ca:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80017cc:	2302      	movs	r3, #2
 80017ce:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80017d0:	2300      	movs	r3, #0
 80017d2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80017d4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80017d8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80017da:	2300      	movs	r3, #0
 80017dc:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80017de:	1d3b      	adds	r3, r7, #4
 80017e0:	2102      	movs	r1, #2
 80017e2:	4618      	mov	r0, r3
 80017e4:	f003 faa8 	bl	8004d38 <HAL_RCC_ClockConfig>
 80017e8:	4603      	mov	r3, r0
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d001      	beq.n	80017f2 <SystemClock_Config+0x82>
  {
    Error_Handler();
 80017ee:	f000 f9bb 	bl	8001b68 <Error_Handler>
  }
}
 80017f2:	bf00      	nop
 80017f4:	3740      	adds	r7, #64	@ 0x40
 80017f6:	46bd      	mov	sp, r7
 80017f8:	bd80      	pop	{r7, pc}
	...

080017fc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001800:	4b12      	ldr	r3, [pc, #72]	@ (800184c <MX_I2C1_Init+0x50>)
 8001802:	4a13      	ldr	r2, [pc, #76]	@ (8001850 <MX_I2C1_Init+0x54>)
 8001804:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001806:	4b11      	ldr	r3, [pc, #68]	@ (800184c <MX_I2C1_Init+0x50>)
 8001808:	4a12      	ldr	r2, [pc, #72]	@ (8001854 <MX_I2C1_Init+0x58>)
 800180a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800180c:	4b0f      	ldr	r3, [pc, #60]	@ (800184c <MX_I2C1_Init+0x50>)
 800180e:	2200      	movs	r2, #0
 8001810:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001812:	4b0e      	ldr	r3, [pc, #56]	@ (800184c <MX_I2C1_Init+0x50>)
 8001814:	2200      	movs	r2, #0
 8001816:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001818:	4b0c      	ldr	r3, [pc, #48]	@ (800184c <MX_I2C1_Init+0x50>)
 800181a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800181e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001820:	4b0a      	ldr	r3, [pc, #40]	@ (800184c <MX_I2C1_Init+0x50>)
 8001822:	2200      	movs	r2, #0
 8001824:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001826:	4b09      	ldr	r3, [pc, #36]	@ (800184c <MX_I2C1_Init+0x50>)
 8001828:	2200      	movs	r2, #0
 800182a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800182c:	4b07      	ldr	r3, [pc, #28]	@ (800184c <MX_I2C1_Init+0x50>)
 800182e:	2200      	movs	r2, #0
 8001830:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001832:	4b06      	ldr	r3, [pc, #24]	@ (800184c <MX_I2C1_Init+0x50>)
 8001834:	2200      	movs	r2, #0
 8001836:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001838:	4804      	ldr	r0, [pc, #16]	@ (800184c <MX_I2C1_Init+0x50>)
 800183a:	f001 ff95 	bl	8003768 <HAL_I2C_Init>
 800183e:	4603      	mov	r3, r0
 8001840:	2b00      	cmp	r3, #0
 8001842:	d001      	beq.n	8001848 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001844:	f000 f990 	bl	8001b68 <Error_Handler>
  }
}
 8001848:	bf00      	nop
 800184a:	bd80      	pop	{r7, pc}
 800184c:	20000280 	.word	0x20000280
 8001850:	40005400 	.word	0x40005400
 8001854:	000186a0 	.word	0x000186a0

08001858 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	b08a      	sub	sp, #40	@ 0x28
 800185c:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 800185e:	4b24      	ldr	r3, [pc, #144]	@ (80018f0 <MX_CAN_Init+0x98>)
 8001860:	4a24      	ldr	r2, [pc, #144]	@ (80018f4 <MX_CAN_Init+0x9c>)
 8001862:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 9;
 8001864:	4b22      	ldr	r3, [pc, #136]	@ (80018f0 <MX_CAN_Init+0x98>)
 8001866:	2209      	movs	r2, #9
 8001868:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 800186a:	4b21      	ldr	r3, [pc, #132]	@ (80018f0 <MX_CAN_Init+0x98>)
 800186c:	2200      	movs	r2, #0
 800186e:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001870:	4b1f      	ldr	r3, [pc, #124]	@ (80018f0 <MX_CAN_Init+0x98>)
 8001872:	2200      	movs	r2, #0
 8001874:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_5TQ;
 8001876:	4b1e      	ldr	r3, [pc, #120]	@ (80018f0 <MX_CAN_Init+0x98>)
 8001878:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 800187c:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_2TQ;
 800187e:	4b1c      	ldr	r3, [pc, #112]	@ (80018f0 <MX_CAN_Init+0x98>)
 8001880:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8001884:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8001886:	4b1a      	ldr	r3, [pc, #104]	@ (80018f0 <MX_CAN_Init+0x98>)
 8001888:	2200      	movs	r2, #0
 800188a:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 800188c:	4b18      	ldr	r3, [pc, #96]	@ (80018f0 <MX_CAN_Init+0x98>)
 800188e:	2200      	movs	r2, #0
 8001890:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8001892:	4b17      	ldr	r3, [pc, #92]	@ (80018f0 <MX_CAN_Init+0x98>)
 8001894:	2200      	movs	r2, #0
 8001896:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8001898:	4b15      	ldr	r3, [pc, #84]	@ (80018f0 <MX_CAN_Init+0x98>)
 800189a:	2200      	movs	r2, #0
 800189c:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 800189e:	4b14      	ldr	r3, [pc, #80]	@ (80018f0 <MX_CAN_Init+0x98>)
 80018a0:	2200      	movs	r2, #0
 80018a2:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 80018a4:	4b12      	ldr	r3, [pc, #72]	@ (80018f0 <MX_CAN_Init+0x98>)
 80018a6:	2200      	movs	r2, #0
 80018a8:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 80018aa:	4811      	ldr	r0, [pc, #68]	@ (80018f0 <MX_CAN_Init+0x98>)
 80018ac:	f000 fe42 	bl	8002534 <HAL_CAN_Init>
 80018b0:	4603      	mov	r3, r0
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d001      	beq.n	80018ba <MX_CAN_Init+0x62>
  {
    Error_Handler();
 80018b6:	f000 f957 	bl	8001b68 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */
  CAN_FilterTypeDef filterConfig;
  filterConfig.FilterActivation = ENABLE;
 80018ba:	2301      	movs	r3, #1
 80018bc:	623b      	str	r3, [r7, #32]
  filterConfig.FilterBank = 0;
 80018be:	2300      	movs	r3, #0
 80018c0:	617b      	str	r3, [r7, #20]
  filterConfig.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 80018c2:	2300      	movs	r3, #0
 80018c4:	613b      	str	r3, [r7, #16]
  filterConfig.FilterIdHigh = 0x0000;
 80018c6:	2300      	movs	r3, #0
 80018c8:	603b      	str	r3, [r7, #0]
  filterConfig.FilterIdLow = 0x0000;
 80018ca:	2300      	movs	r3, #0
 80018cc:	607b      	str	r3, [r7, #4]
  filterConfig.FilterMaskIdHigh = 0x0000;
 80018ce:	2300      	movs	r3, #0
 80018d0:	60bb      	str	r3, [r7, #8]
  filterConfig.FilterMaskIdLow = 0x0000;
 80018d2:	2300      	movs	r3, #0
 80018d4:	60fb      	str	r3, [r7, #12]
  filterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 80018d6:	2300      	movs	r3, #0
 80018d8:	61bb      	str	r3, [r7, #24]
  filterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 80018da:	2301      	movs	r3, #1
 80018dc:	61fb      	str	r3, [r7, #28]

  HAL_CAN_ConfigFilter(&hcan, &filterConfig);
 80018de:	463b      	mov	r3, r7
 80018e0:	4619      	mov	r1, r3
 80018e2:	4803      	ldr	r0, [pc, #12]	@ (80018f0 <MX_CAN_Init+0x98>)
 80018e4:	f000 ff21 	bl	800272a <HAL_CAN_ConfigFilter>

  /* USER CODE END CAN_Init 2 */

}
 80018e8:	bf00      	nop
 80018ea:	3728      	adds	r7, #40	@ 0x28
 80018ec:	46bd      	mov	sp, r7
 80018ee:	bd80      	pop	{r7, pc}
 80018f0:	200002d4 	.word	0x200002d4
 80018f4:	40006400 	.word	0x40006400

080018f8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80018fc:	4b11      	ldr	r3, [pc, #68]	@ (8001944 <MX_USART2_UART_Init+0x4c>)
 80018fe:	4a12      	ldr	r2, [pc, #72]	@ (8001948 <MX_USART2_UART_Init+0x50>)
 8001900:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001902:	4b10      	ldr	r3, [pc, #64]	@ (8001944 <MX_USART2_UART_Init+0x4c>)
 8001904:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001908:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800190a:	4b0e      	ldr	r3, [pc, #56]	@ (8001944 <MX_USART2_UART_Init+0x4c>)
 800190c:	2200      	movs	r2, #0
 800190e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001910:	4b0c      	ldr	r3, [pc, #48]	@ (8001944 <MX_USART2_UART_Init+0x4c>)
 8001912:	2200      	movs	r2, #0
 8001914:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001916:	4b0b      	ldr	r3, [pc, #44]	@ (8001944 <MX_USART2_UART_Init+0x4c>)
 8001918:	2200      	movs	r2, #0
 800191a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800191c:	4b09      	ldr	r3, [pc, #36]	@ (8001944 <MX_USART2_UART_Init+0x4c>)
 800191e:	220c      	movs	r2, #12
 8001920:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001922:	4b08      	ldr	r3, [pc, #32]	@ (8001944 <MX_USART2_UART_Init+0x4c>)
 8001924:	2200      	movs	r2, #0
 8001926:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001928:	4b06      	ldr	r3, [pc, #24]	@ (8001944 <MX_USART2_UART_Init+0x4c>)
 800192a:	2200      	movs	r2, #0
 800192c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800192e:	4805      	ldr	r0, [pc, #20]	@ (8001944 <MX_USART2_UART_Init+0x4c>)
 8001930:	f003 fe54 	bl	80055dc <HAL_UART_Init>
 8001934:	4603      	mov	r3, r0
 8001936:	2b00      	cmp	r3, #0
 8001938:	d001      	beq.n	800193e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800193a:	f000 f915 	bl	8001b68 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800193e:	bf00      	nop
 8001940:	bd80      	pop	{r7, pc}
 8001942:	bf00      	nop
 8001944:	20000238 	.word	0x20000238
 8001948:	40004400 	.word	0x40004400

0800194c <MX_TIM1_Init>:
static void MX_TIM1_Init(void)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	b086      	sub	sp, #24
 8001950:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001952:	f107 0308 	add.w	r3, r7, #8
 8001956:	2200      	movs	r2, #0
 8001958:	601a      	str	r2, [r3, #0]
 800195a:	605a      	str	r2, [r3, #4]
 800195c:	609a      	str	r2, [r3, #8]
 800195e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001960:	463b      	mov	r3, r7
 8001962:	2200      	movs	r2, #0
 8001964:	601a      	str	r2, [r3, #0]
 8001966:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001968:	4b1e      	ldr	r3, [pc, #120]	@ (80019e4 <MX_TIM1_Init+0x98>)
 800196a:	4a1f      	ldr	r2, [pc, #124]	@ (80019e8 <MX_TIM1_Init+0x9c>)
 800196c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 71;
 800196e:	4b1d      	ldr	r3, [pc, #116]	@ (80019e4 <MX_TIM1_Init+0x98>)
 8001970:	2247      	movs	r2, #71	@ 0x47
 8001972:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001974:	4b1b      	ldr	r3, [pc, #108]	@ (80019e4 <MX_TIM1_Init+0x98>)
 8001976:	2200      	movs	r2, #0
 8001978:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800197a:	4b1a      	ldr	r3, [pc, #104]	@ (80019e4 <MX_TIM1_Init+0x98>)
 800197c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001980:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001982:	4b18      	ldr	r3, [pc, #96]	@ (80019e4 <MX_TIM1_Init+0x98>)
 8001984:	2200      	movs	r2, #0
 8001986:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001988:	4b16      	ldr	r3, [pc, #88]	@ (80019e4 <MX_TIM1_Init+0x98>)
 800198a:	2200      	movs	r2, #0
 800198c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800198e:	4b15      	ldr	r3, [pc, #84]	@ (80019e4 <MX_TIM1_Init+0x98>)
 8001990:	2200      	movs	r2, #0
 8001992:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001994:	4813      	ldr	r0, [pc, #76]	@ (80019e4 <MX_TIM1_Init+0x98>)
 8001996:	f003 fb5d 	bl	8005054 <HAL_TIM_Base_Init>
 800199a:	4603      	mov	r3, r0
 800199c:	2b00      	cmp	r3, #0
 800199e:	d001      	beq.n	80019a4 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 80019a0:	f000 f8e2 	bl	8001b68 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80019a4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80019a8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80019aa:	f107 0308 	add.w	r3, r7, #8
 80019ae:	4619      	mov	r1, r3
 80019b0:	480c      	ldr	r0, [pc, #48]	@ (80019e4 <MX_TIM1_Init+0x98>)
 80019b2:	f003 fbe9 	bl	8005188 <HAL_TIM_ConfigClockSource>
 80019b6:	4603      	mov	r3, r0
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d001      	beq.n	80019c0 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 80019bc:	f000 f8d4 	bl	8001b68 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80019c0:	2300      	movs	r3, #0
 80019c2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80019c4:	2300      	movs	r3, #0
 80019c6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80019c8:	463b      	mov	r3, r7
 80019ca:	4619      	mov	r1, r3
 80019cc:	4805      	ldr	r0, [pc, #20]	@ (80019e4 <MX_TIM1_Init+0x98>)
 80019ce:	f003 fda7 	bl	8005520 <HAL_TIMEx_MasterConfigSynchronization>
 80019d2:	4603      	mov	r3, r0
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d001      	beq.n	80019dc <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 80019d8:	f000 f8c6 	bl	8001b68 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80019dc:	bf00      	nop
 80019de:	3718      	adds	r7, #24
 80019e0:	46bd      	mov	sp, r7
 80019e2:	bd80      	pop	{r7, pc}
 80019e4:	200001f0 	.word	0x200001f0
 80019e8:	40012c00 	.word	0x40012c00

080019ec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	b088      	sub	sp, #32
 80019f0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019f2:	f107 0310 	add.w	r3, r7, #16
 80019f6:	2200      	movs	r2, #0
 80019f8:	601a      	str	r2, [r3, #0]
 80019fa:	605a      	str	r2, [r3, #4]
 80019fc:	609a      	str	r2, [r3, #8]
 80019fe:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001a00:	4b2d      	ldr	r3, [pc, #180]	@ (8001ab8 <MX_GPIO_Init+0xcc>)
 8001a02:	699b      	ldr	r3, [r3, #24]
 8001a04:	4a2c      	ldr	r2, [pc, #176]	@ (8001ab8 <MX_GPIO_Init+0xcc>)
 8001a06:	f043 0320 	orr.w	r3, r3, #32
 8001a0a:	6193      	str	r3, [r2, #24]
 8001a0c:	4b2a      	ldr	r3, [pc, #168]	@ (8001ab8 <MX_GPIO_Init+0xcc>)
 8001a0e:	699b      	ldr	r3, [r3, #24]
 8001a10:	f003 0320 	and.w	r3, r3, #32
 8001a14:	60fb      	str	r3, [r7, #12]
 8001a16:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a18:	4b27      	ldr	r3, [pc, #156]	@ (8001ab8 <MX_GPIO_Init+0xcc>)
 8001a1a:	699b      	ldr	r3, [r3, #24]
 8001a1c:	4a26      	ldr	r2, [pc, #152]	@ (8001ab8 <MX_GPIO_Init+0xcc>)
 8001a1e:	f043 0304 	orr.w	r3, r3, #4
 8001a22:	6193      	str	r3, [r2, #24]
 8001a24:	4b24      	ldr	r3, [pc, #144]	@ (8001ab8 <MX_GPIO_Init+0xcc>)
 8001a26:	699b      	ldr	r3, [r3, #24]
 8001a28:	f003 0304 	and.w	r3, r3, #4
 8001a2c:	60bb      	str	r3, [r7, #8]
 8001a2e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a30:	4b21      	ldr	r3, [pc, #132]	@ (8001ab8 <MX_GPIO_Init+0xcc>)
 8001a32:	699b      	ldr	r3, [r3, #24]
 8001a34:	4a20      	ldr	r2, [pc, #128]	@ (8001ab8 <MX_GPIO_Init+0xcc>)
 8001a36:	f043 0308 	orr.w	r3, r3, #8
 8001a3a:	6193      	str	r3, [r2, #24]
 8001a3c:	4b1e      	ldr	r3, [pc, #120]	@ (8001ab8 <MX_GPIO_Init+0xcc>)
 8001a3e:	699b      	ldr	r3, [r3, #24]
 8001a40:	f003 0308 	and.w	r3, r3, #8
 8001a44:	607b      	str	r3, [r7, #4]
 8001a46:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 8001a48:	2200      	movs	r2, #0
 8001a4a:	2102      	movs	r1, #2
 8001a4c:	481b      	ldr	r0, [pc, #108]	@ (8001abc <MX_GPIO_Init+0xd0>)
 8001a4e:	f001 fe5a 	bl	8003706 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
 8001a52:	2200      	movs	r2, #0
 8001a54:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001a58:	4819      	ldr	r0, [pc, #100]	@ (8001ac0 <MX_GPIO_Init+0xd4>)
 8001a5a:	f001 fe54 	bl	8003706 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001a5e:	2302      	movs	r3, #2
 8001a60:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a62:	2301      	movs	r3, #1
 8001a64:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a66:	2300      	movs	r3, #0
 8001a68:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a6a:	2302      	movs	r3, #2
 8001a6c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a6e:	f107 0310 	add.w	r3, r7, #16
 8001a72:	4619      	mov	r1, r3
 8001a74:	4811      	ldr	r0, [pc, #68]	@ (8001abc <MX_GPIO_Init+0xd0>)
 8001a76:	f001 fcab 	bl	80033d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_7;
 8001a7a:	2390      	movs	r3, #144	@ 0x90
 8001a7c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a7e:	2300      	movs	r3, #0
 8001a80:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a82:	2300      	movs	r3, #0
 8001a84:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a86:	f107 0310 	add.w	r3, r7, #16
 8001a8a:	4619      	mov	r1, r3
 8001a8c:	480b      	ldr	r0, [pc, #44]	@ (8001abc <MX_GPIO_Init+0xd0>)
 8001a8e:	f001 fc9f 	bl	80033d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001a92:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001a96:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a98:	2301      	movs	r3, #1
 8001a9a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001aa0:	2302      	movs	r3, #2
 8001aa2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001aa4:	f107 0310 	add.w	r3, r7, #16
 8001aa8:	4619      	mov	r1, r3
 8001aaa:	4805      	ldr	r0, [pc, #20]	@ (8001ac0 <MX_GPIO_Init+0xd4>)
 8001aac:	f001 fc90 	bl	80033d0 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8001ab0:	bf00      	nop
 8001ab2:	3720      	adds	r7, #32
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	bd80      	pop	{r7, pc}
 8001ab8:	40021000 	.word	0x40021000
 8001abc:	40010800 	.word	0x40010800
 8001ac0:	40010c00 	.word	0x40010c00

08001ac4 <sendMotionStatusToNodeA>:

/* USER CODE BEGIN 4 */
void sendMotionStatusToNodeA(const MotionRaw_T* motion)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	b08c      	sub	sp, #48	@ 0x30
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	6078      	str	r0, [r7, #4]
    CAN_TxHeaderTypeDef txHeader;
    uint8_t txData[8];
    uint32_t txMailbox;

    txHeader.IDE = CAN_ID_STD;
 8001acc:	2300      	movs	r3, #0
 8001ace:	623b      	str	r3, [r7, #32]
    txHeader.RTR = CAN_RTR_DATA;
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	627b      	str	r3, [r7, #36]	@ 0x24
    txHeader.DLC = 8;
 8001ad4:	2308      	movs	r3, #8
 8001ad6:	62bb      	str	r3, [r7, #40]	@ 0x28

    // Frame 1: ax, ay, az
    txHeader.StdId = 0x400;
 8001ad8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001adc:	61bb      	str	r3, [r7, #24]
    memcpy(txData, &motion->ax, 6); // ax, ay, az
 8001ade:	6879      	ldr	r1, [r7, #4]
 8001ae0:	f107 0310 	add.w	r3, r7, #16
 8001ae4:	2206      	movs	r2, #6
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	f004 fdd1 	bl	800668e <memcpy>
    txData[6] = 0xAA; // marker or padding
 8001aec:	23aa      	movs	r3, #170	@ 0xaa
 8001aee:	75bb      	strb	r3, [r7, #22]
    txData[7] = 0x55;
 8001af0:	2355      	movs	r3, #85	@ 0x55
 8001af2:	75fb      	strb	r3, [r7, #23]
    HAL_CAN_AddTxMessage(&hcan, &txHeader, txData, &txMailbox);
 8001af4:	f107 030c 	add.w	r3, r7, #12
 8001af8:	f107 0210 	add.w	r2, r7, #16
 8001afc:	f107 0118 	add.w	r1, r7, #24
 8001b00:	480f      	ldr	r0, [pc, #60]	@ (8001b40 <sendMotionStatusToNodeA+0x7c>)
 8001b02:	f000 ff1f 	bl	8002944 <HAL_CAN_AddTxMessage>

    // Frame 2: gx, gy, gz
    txHeader.StdId = 0x401;
 8001b06:	f240 4301 	movw	r3, #1025	@ 0x401
 8001b0a:	61bb      	str	r3, [r7, #24]
    memcpy(txData, &motion->gx, 6); // gx, gy, gz
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	1d99      	adds	r1, r3, #6
 8001b10:	f107 0310 	add.w	r3, r7, #16
 8001b14:	2206      	movs	r2, #6
 8001b16:	4618      	mov	r0, r3
 8001b18:	f004 fdb9 	bl	800668e <memcpy>
    txData[6] = 0xCC;
 8001b1c:	23cc      	movs	r3, #204	@ 0xcc
 8001b1e:	75bb      	strb	r3, [r7, #22]
    txData[7] = 0x33;
 8001b20:	2333      	movs	r3, #51	@ 0x33
 8001b22:	75fb      	strb	r3, [r7, #23]
    HAL_CAN_AddTxMessage(&hcan, &txHeader, txData, &txMailbox);
 8001b24:	f107 030c 	add.w	r3, r7, #12
 8001b28:	f107 0210 	add.w	r2, r7, #16
 8001b2c:	f107 0118 	add.w	r1, r7, #24
 8001b30:	4803      	ldr	r0, [pc, #12]	@ (8001b40 <sendMotionStatusToNodeA+0x7c>)
 8001b32:	f000 ff07 	bl	8002944 <HAL_CAN_AddTxMessage>
}
 8001b36:	bf00      	nop
 8001b38:	3730      	adds	r7, #48	@ 0x30
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	bd80      	pop	{r7, pc}
 8001b3e:	bf00      	nop
 8001b40:	200002d4 	.word	0x200002d4

08001b44 <__io_putchar>:
int __io_putchar(int ch)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	b082      	sub	sp, #8
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8001b4c:	1d39      	adds	r1, r7, #4
 8001b4e:	f04f 33ff 	mov.w	r3, #4294967295
 8001b52:	2201      	movs	r2, #1
 8001b54:	4803      	ldr	r0, [pc, #12]	@ (8001b64 <__io_putchar+0x20>)
 8001b56:	f003 fd91 	bl	800567c <HAL_UART_Transmit>
    return ch;
 8001b5a:	687b      	ldr	r3, [r7, #4]
}
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	3708      	adds	r7, #8
 8001b60:	46bd      	mov	sp, r7
 8001b62:	bd80      	pop	{r7, pc}
 8001b64:	20000238 	.word	0x20000238

08001b68 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b68:	b480      	push	{r7}
 8001b6a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001b6c:	b672      	cpsid	i
}
 8001b6e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001b70:	bf00      	nop
 8001b72:	e7fd      	b.n	8001b70 <Error_Handler+0x8>

08001b74 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b74:	b480      	push	{r7}
 8001b76:	b085      	sub	sp, #20
 8001b78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001b7a:	4b15      	ldr	r3, [pc, #84]	@ (8001bd0 <HAL_MspInit+0x5c>)
 8001b7c:	699b      	ldr	r3, [r3, #24]
 8001b7e:	4a14      	ldr	r2, [pc, #80]	@ (8001bd0 <HAL_MspInit+0x5c>)
 8001b80:	f043 0301 	orr.w	r3, r3, #1
 8001b84:	6193      	str	r3, [r2, #24]
 8001b86:	4b12      	ldr	r3, [pc, #72]	@ (8001bd0 <HAL_MspInit+0x5c>)
 8001b88:	699b      	ldr	r3, [r3, #24]
 8001b8a:	f003 0301 	and.w	r3, r3, #1
 8001b8e:	60bb      	str	r3, [r7, #8]
 8001b90:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b92:	4b0f      	ldr	r3, [pc, #60]	@ (8001bd0 <HAL_MspInit+0x5c>)
 8001b94:	69db      	ldr	r3, [r3, #28]
 8001b96:	4a0e      	ldr	r2, [pc, #56]	@ (8001bd0 <HAL_MspInit+0x5c>)
 8001b98:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001b9c:	61d3      	str	r3, [r2, #28]
 8001b9e:	4b0c      	ldr	r3, [pc, #48]	@ (8001bd0 <HAL_MspInit+0x5c>)
 8001ba0:	69db      	ldr	r3, [r3, #28]
 8001ba2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ba6:	607b      	str	r3, [r7, #4]
 8001ba8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001baa:	4b0a      	ldr	r3, [pc, #40]	@ (8001bd4 <HAL_MspInit+0x60>)
 8001bac:	685b      	ldr	r3, [r3, #4]
 8001bae:	60fb      	str	r3, [r7, #12]
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8001bb6:	60fb      	str	r3, [r7, #12]
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001bbe:	60fb      	str	r3, [r7, #12]
 8001bc0:	4a04      	ldr	r2, [pc, #16]	@ (8001bd4 <HAL_MspInit+0x60>)
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001bc6:	bf00      	nop
 8001bc8:	3714      	adds	r7, #20
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	bc80      	pop	{r7}
 8001bce:	4770      	bx	lr
 8001bd0:	40021000 	.word	0x40021000
 8001bd4:	40010000 	.word	0x40010000

08001bd8 <HAL_CAN_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hcan: CAN handle pointer
  * @retval None
  */
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b088      	sub	sp, #32
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001be0:	f107 0310 	add.w	r3, r7, #16
 8001be4:	2200      	movs	r2, #0
 8001be6:	601a      	str	r2, [r3, #0]
 8001be8:	605a      	str	r2, [r3, #4]
 8001bea:	609a      	str	r2, [r3, #8]
 8001bec:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	4a20      	ldr	r2, [pc, #128]	@ (8001c74 <HAL_CAN_MspInit+0x9c>)
 8001bf4:	4293      	cmp	r3, r2
 8001bf6:	d139      	bne.n	8001c6c <HAL_CAN_MspInit+0x94>
  {
    /* USER CODE BEGIN CAN1_MspInit 0 */

    /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001bf8:	4b1f      	ldr	r3, [pc, #124]	@ (8001c78 <HAL_CAN_MspInit+0xa0>)
 8001bfa:	69db      	ldr	r3, [r3, #28]
 8001bfc:	4a1e      	ldr	r2, [pc, #120]	@ (8001c78 <HAL_CAN_MspInit+0xa0>)
 8001bfe:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001c02:	61d3      	str	r3, [r2, #28]
 8001c04:	4b1c      	ldr	r3, [pc, #112]	@ (8001c78 <HAL_CAN_MspInit+0xa0>)
 8001c06:	69db      	ldr	r3, [r3, #28]
 8001c08:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c0c:	60fb      	str	r3, [r7, #12]
 8001c0e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c10:	4b19      	ldr	r3, [pc, #100]	@ (8001c78 <HAL_CAN_MspInit+0xa0>)
 8001c12:	699b      	ldr	r3, [r3, #24]
 8001c14:	4a18      	ldr	r2, [pc, #96]	@ (8001c78 <HAL_CAN_MspInit+0xa0>)
 8001c16:	f043 0304 	orr.w	r3, r3, #4
 8001c1a:	6193      	str	r3, [r2, #24]
 8001c1c:	4b16      	ldr	r3, [pc, #88]	@ (8001c78 <HAL_CAN_MspInit+0xa0>)
 8001c1e:	699b      	ldr	r3, [r3, #24]
 8001c20:	f003 0304 	and.w	r3, r3, #4
 8001c24:	60bb      	str	r3, [r7, #8]
 8001c26:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001c28:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001c2c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c2e:	2300      	movs	r3, #0
 8001c30:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c32:	2300      	movs	r3, #0
 8001c34:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c36:	f107 0310 	add.w	r3, r7, #16
 8001c3a:	4619      	mov	r1, r3
 8001c3c:	480f      	ldr	r0, [pc, #60]	@ (8001c7c <HAL_CAN_MspInit+0xa4>)
 8001c3e:	f001 fbc7 	bl	80033d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001c42:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001c46:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c48:	2302      	movs	r3, #2
 8001c4a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001c4c:	2303      	movs	r3, #3
 8001c4e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c50:	f107 0310 	add.w	r3, r7, #16
 8001c54:	4619      	mov	r1, r3
 8001c56:	4809      	ldr	r0, [pc, #36]	@ (8001c7c <HAL_CAN_MspInit+0xa4>)
 8001c58:	f001 fbba 	bl	80033d0 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	2100      	movs	r1, #0
 8001c60:	2014      	movs	r0, #20
 8001c62:	f001 fb7e 	bl	8003362 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8001c66:	2014      	movs	r0, #20
 8001c68:	f001 fb97 	bl	800339a <HAL_NVIC_EnableIRQ>

    /* USER CODE END CAN1_MspInit 1 */

  }

}
 8001c6c:	bf00      	nop
 8001c6e:	3720      	adds	r7, #32
 8001c70:	46bd      	mov	sp, r7
 8001c72:	bd80      	pop	{r7, pc}
 8001c74:	40006400 	.word	0x40006400
 8001c78:	40021000 	.word	0x40021000
 8001c7c:	40010800 	.word	0x40010800

08001c80 <HAL_I2C_MspInit>:
    /* USER CODE END CAN1_MspDeInit 1 */
  }

}
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	b088      	sub	sp, #32
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c88:	f107 0310 	add.w	r3, r7, #16
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	601a      	str	r2, [r3, #0]
 8001c90:	605a      	str	r2, [r3, #4]
 8001c92:	609a      	str	r2, [r3, #8]
 8001c94:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	4a15      	ldr	r2, [pc, #84]	@ (8001cf0 <HAL_I2C_MspInit+0x70>)
 8001c9c:	4293      	cmp	r3, r2
 8001c9e:	d123      	bne.n	8001ce8 <HAL_I2C_MspInit+0x68>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ca0:	4b14      	ldr	r3, [pc, #80]	@ (8001cf4 <HAL_I2C_MspInit+0x74>)
 8001ca2:	699b      	ldr	r3, [r3, #24]
 8001ca4:	4a13      	ldr	r2, [pc, #76]	@ (8001cf4 <HAL_I2C_MspInit+0x74>)
 8001ca6:	f043 0308 	orr.w	r3, r3, #8
 8001caa:	6193      	str	r3, [r2, #24]
 8001cac:	4b11      	ldr	r3, [pc, #68]	@ (8001cf4 <HAL_I2C_MspInit+0x74>)
 8001cae:	699b      	ldr	r3, [r3, #24]
 8001cb0:	f003 0308 	and.w	r3, r3, #8
 8001cb4:	60fb      	str	r3, [r7, #12]
 8001cb6:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001cb8:	23c0      	movs	r3, #192	@ 0xc0
 8001cba:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001cbc:	2312      	movs	r3, #18
 8001cbe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001cc0:	2303      	movs	r3, #3
 8001cc2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cc4:	f107 0310 	add.w	r3, r7, #16
 8001cc8:	4619      	mov	r1, r3
 8001cca:	480b      	ldr	r0, [pc, #44]	@ (8001cf8 <HAL_I2C_MspInit+0x78>)
 8001ccc:	f001 fb80 	bl	80033d0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001cd0:	4b08      	ldr	r3, [pc, #32]	@ (8001cf4 <HAL_I2C_MspInit+0x74>)
 8001cd2:	69db      	ldr	r3, [r3, #28]
 8001cd4:	4a07      	ldr	r2, [pc, #28]	@ (8001cf4 <HAL_I2C_MspInit+0x74>)
 8001cd6:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001cda:	61d3      	str	r3, [r2, #28]
 8001cdc:	4b05      	ldr	r3, [pc, #20]	@ (8001cf4 <HAL_I2C_MspInit+0x74>)
 8001cde:	69db      	ldr	r3, [r3, #28]
 8001ce0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001ce4:	60bb      	str	r3, [r7, #8]
 8001ce6:	68bb      	ldr	r3, [r7, #8]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001ce8:	bf00      	nop
 8001cea:	3720      	adds	r7, #32
 8001cec:	46bd      	mov	sp, r7
 8001cee:	bd80      	pop	{r7, pc}
 8001cf0:	40005400 	.word	0x40005400
 8001cf4:	40021000 	.word	0x40021000
 8001cf8:	40010c00 	.word	0x40010c00

08001cfc <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	b088      	sub	sp, #32
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d04:	f107 0310 	add.w	r3, r7, #16
 8001d08:	2200      	movs	r2, #0
 8001d0a:	601a      	str	r2, [r3, #0]
 8001d0c:	605a      	str	r2, [r3, #4]
 8001d0e:	609a      	str	r2, [r3, #8]
 8001d10:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	4a1b      	ldr	r2, [pc, #108]	@ (8001d84 <HAL_UART_MspInit+0x88>)
 8001d18:	4293      	cmp	r3, r2
 8001d1a:	d12f      	bne.n	8001d7c <HAL_UART_MspInit+0x80>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001d1c:	4b1a      	ldr	r3, [pc, #104]	@ (8001d88 <HAL_UART_MspInit+0x8c>)
 8001d1e:	69db      	ldr	r3, [r3, #28]
 8001d20:	4a19      	ldr	r2, [pc, #100]	@ (8001d88 <HAL_UART_MspInit+0x8c>)
 8001d22:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001d26:	61d3      	str	r3, [r2, #28]
 8001d28:	4b17      	ldr	r3, [pc, #92]	@ (8001d88 <HAL_UART_MspInit+0x8c>)
 8001d2a:	69db      	ldr	r3, [r3, #28]
 8001d2c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d30:	60fb      	str	r3, [r7, #12]
 8001d32:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d34:	4b14      	ldr	r3, [pc, #80]	@ (8001d88 <HAL_UART_MspInit+0x8c>)
 8001d36:	699b      	ldr	r3, [r3, #24]
 8001d38:	4a13      	ldr	r2, [pc, #76]	@ (8001d88 <HAL_UART_MspInit+0x8c>)
 8001d3a:	f043 0304 	orr.w	r3, r3, #4
 8001d3e:	6193      	str	r3, [r2, #24]
 8001d40:	4b11      	ldr	r3, [pc, #68]	@ (8001d88 <HAL_UART_MspInit+0x8c>)
 8001d42:	699b      	ldr	r3, [r3, #24]
 8001d44:	f003 0304 	and.w	r3, r3, #4
 8001d48:	60bb      	str	r3, [r7, #8]
 8001d4a:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001d4c:	2304      	movs	r3, #4
 8001d4e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d50:	2302      	movs	r3, #2
 8001d52:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001d54:	2303      	movs	r3, #3
 8001d56:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d58:	f107 0310 	add.w	r3, r7, #16
 8001d5c:	4619      	mov	r1, r3
 8001d5e:	480b      	ldr	r0, [pc, #44]	@ (8001d8c <HAL_UART_MspInit+0x90>)
 8001d60:	f001 fb36 	bl	80033d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001d64:	2308      	movs	r3, #8
 8001d66:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d68:	2300      	movs	r3, #0
 8001d6a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d6c:	2300      	movs	r3, #0
 8001d6e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d70:	f107 0310 	add.w	r3, r7, #16
 8001d74:	4619      	mov	r1, r3
 8001d76:	4805      	ldr	r0, [pc, #20]	@ (8001d8c <HAL_UART_MspInit+0x90>)
 8001d78:	f001 fb2a 	bl	80033d0 <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8001d7c:	bf00      	nop
 8001d7e:	3720      	adds	r7, #32
 8001d80:	46bd      	mov	sp, r7
 8001d82:	bd80      	pop	{r7, pc}
 8001d84:	40004400 	.word	0x40004400
 8001d88:	40021000 	.word	0x40021000
 8001d8c:	40010800 	.word	0x40010800

08001d90 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001d90:	b480      	push	{r7}
 8001d92:	b085      	sub	sp, #20
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	4a09      	ldr	r2, [pc, #36]	@ (8001dc4 <HAL_TIM_Base_MspInit+0x34>)
 8001d9e:	4293      	cmp	r3, r2
 8001da0:	d10b      	bne.n	8001dba <HAL_TIM_Base_MspInit+0x2a>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001da2:	4b09      	ldr	r3, [pc, #36]	@ (8001dc8 <HAL_TIM_Base_MspInit+0x38>)
 8001da4:	699b      	ldr	r3, [r3, #24]
 8001da6:	4a08      	ldr	r2, [pc, #32]	@ (8001dc8 <HAL_TIM_Base_MspInit+0x38>)
 8001da8:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001dac:	6193      	str	r3, [r2, #24]
 8001dae:	4b06      	ldr	r3, [pc, #24]	@ (8001dc8 <HAL_TIM_Base_MspInit+0x38>)
 8001db0:	699b      	ldr	r3, [r3, #24]
 8001db2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001db6:	60fb      	str	r3, [r7, #12]
 8001db8:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM1_MspInit 1 */

  }

}
 8001dba:	bf00      	nop
 8001dbc:	3714      	adds	r7, #20
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	bc80      	pop	{r7}
 8001dc2:	4770      	bx	lr
 8001dc4:	40012c00 	.word	0x40012c00
 8001dc8:	40021000 	.word	0x40021000

08001dcc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001dcc:	b480      	push	{r7}
 8001dce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001dd0:	bf00      	nop
 8001dd2:	e7fd      	b.n	8001dd0 <NMI_Handler+0x4>

08001dd4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001dd4:	b480      	push	{r7}
 8001dd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001dd8:	bf00      	nop
 8001dda:	e7fd      	b.n	8001dd8 <HardFault_Handler+0x4>

08001ddc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ddc:	b480      	push	{r7}
 8001dde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001de0:	bf00      	nop
 8001de2:	e7fd      	b.n	8001de0 <MemManage_Handler+0x4>

08001de4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001de4:	b480      	push	{r7}
 8001de6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001de8:	bf00      	nop
 8001dea:	e7fd      	b.n	8001de8 <BusFault_Handler+0x4>

08001dec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001dec:	b480      	push	{r7}
 8001dee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001df0:	bf00      	nop
 8001df2:	e7fd      	b.n	8001df0 <UsageFault_Handler+0x4>

08001df4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001df4:	b480      	push	{r7}
 8001df6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001df8:	bf00      	nop
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	bc80      	pop	{r7}
 8001dfe:	4770      	bx	lr

08001e00 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001e00:	b480      	push	{r7}
 8001e02:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001e04:	bf00      	nop
 8001e06:	46bd      	mov	sp, r7
 8001e08:	bc80      	pop	{r7}
 8001e0a:	4770      	bx	lr

08001e0c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001e0c:	b480      	push	{r7}
 8001e0e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001e10:	bf00      	nop
 8001e12:	46bd      	mov	sp, r7
 8001e14:	bc80      	pop	{r7}
 8001e16:	4770      	bx	lr

08001e18 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001e1c:	f000 fb4a 	bl	80024b4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001e20:	bf00      	nop
 8001e22:	bd80      	pop	{r7, pc}

08001e24 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8001e28:	4802      	ldr	r0, [pc, #8]	@ (8001e34 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8001e2a:	f000 ffa0 	bl	8002d6e <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8001e2e:	bf00      	nop
 8001e30:	bd80      	pop	{r7, pc}
 8001e32:	bf00      	nop
 8001e34:	200002d4 	.word	0x200002d4

08001e38 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001e38:	b480      	push	{r7}
 8001e3a:	af00      	add	r7, sp, #0
  return 1;
 8001e3c:	2301      	movs	r3, #1
}
 8001e3e:	4618      	mov	r0, r3
 8001e40:	46bd      	mov	sp, r7
 8001e42:	bc80      	pop	{r7}
 8001e44:	4770      	bx	lr

08001e46 <_kill>:

int _kill(int pid, int sig)
{
 8001e46:	b580      	push	{r7, lr}
 8001e48:	b082      	sub	sp, #8
 8001e4a:	af00      	add	r7, sp, #0
 8001e4c:	6078      	str	r0, [r7, #4]
 8001e4e:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001e50:	f004 fbe2 	bl	8006618 <__errno>
 8001e54:	4603      	mov	r3, r0
 8001e56:	2216      	movs	r2, #22
 8001e58:	601a      	str	r2, [r3, #0]
  return -1;
 8001e5a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001e5e:	4618      	mov	r0, r3
 8001e60:	3708      	adds	r7, #8
 8001e62:	46bd      	mov	sp, r7
 8001e64:	bd80      	pop	{r7, pc}

08001e66 <_exit>:

void _exit (int status)
{
 8001e66:	b580      	push	{r7, lr}
 8001e68:	b082      	sub	sp, #8
 8001e6a:	af00      	add	r7, sp, #0
 8001e6c:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001e6e:	f04f 31ff 	mov.w	r1, #4294967295
 8001e72:	6878      	ldr	r0, [r7, #4]
 8001e74:	f7ff ffe7 	bl	8001e46 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001e78:	bf00      	nop
 8001e7a:	e7fd      	b.n	8001e78 <_exit+0x12>

08001e7c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	b086      	sub	sp, #24
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	60f8      	str	r0, [r7, #12]
 8001e84:	60b9      	str	r1, [r7, #8]
 8001e86:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e88:	2300      	movs	r3, #0
 8001e8a:	617b      	str	r3, [r7, #20]
 8001e8c:	e00a      	b.n	8001ea4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001e8e:	f3af 8000 	nop.w
 8001e92:	4601      	mov	r1, r0
 8001e94:	68bb      	ldr	r3, [r7, #8]
 8001e96:	1c5a      	adds	r2, r3, #1
 8001e98:	60ba      	str	r2, [r7, #8]
 8001e9a:	b2ca      	uxtb	r2, r1
 8001e9c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e9e:	697b      	ldr	r3, [r7, #20]
 8001ea0:	3301      	adds	r3, #1
 8001ea2:	617b      	str	r3, [r7, #20]
 8001ea4:	697a      	ldr	r2, [r7, #20]
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	429a      	cmp	r2, r3
 8001eaa:	dbf0      	blt.n	8001e8e <_read+0x12>
  }

  return len;
 8001eac:	687b      	ldr	r3, [r7, #4]
}
 8001eae:	4618      	mov	r0, r3
 8001eb0:	3718      	adds	r7, #24
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	bd80      	pop	{r7, pc}

08001eb6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001eb6:	b580      	push	{r7, lr}
 8001eb8:	b086      	sub	sp, #24
 8001eba:	af00      	add	r7, sp, #0
 8001ebc:	60f8      	str	r0, [r7, #12]
 8001ebe:	60b9      	str	r1, [r7, #8]
 8001ec0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	617b      	str	r3, [r7, #20]
 8001ec6:	e009      	b.n	8001edc <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001ec8:	68bb      	ldr	r3, [r7, #8]
 8001eca:	1c5a      	adds	r2, r3, #1
 8001ecc:	60ba      	str	r2, [r7, #8]
 8001ece:	781b      	ldrb	r3, [r3, #0]
 8001ed0:	4618      	mov	r0, r3
 8001ed2:	f7ff fe37 	bl	8001b44 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ed6:	697b      	ldr	r3, [r7, #20]
 8001ed8:	3301      	adds	r3, #1
 8001eda:	617b      	str	r3, [r7, #20]
 8001edc:	697a      	ldr	r2, [r7, #20]
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	429a      	cmp	r2, r3
 8001ee2:	dbf1      	blt.n	8001ec8 <_write+0x12>
  }
  return len;
 8001ee4:	687b      	ldr	r3, [r7, #4]
}
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	3718      	adds	r7, #24
 8001eea:	46bd      	mov	sp, r7
 8001eec:	bd80      	pop	{r7, pc}

08001eee <_close>:

int _close(int file)
{
 8001eee:	b480      	push	{r7}
 8001ef0:	b083      	sub	sp, #12
 8001ef2:	af00      	add	r7, sp, #0
 8001ef4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001ef6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001efa:	4618      	mov	r0, r3
 8001efc:	370c      	adds	r7, #12
 8001efe:	46bd      	mov	sp, r7
 8001f00:	bc80      	pop	{r7}
 8001f02:	4770      	bx	lr

08001f04 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001f04:	b480      	push	{r7}
 8001f06:	b083      	sub	sp, #12
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]
 8001f0c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001f0e:	683b      	ldr	r3, [r7, #0]
 8001f10:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001f14:	605a      	str	r2, [r3, #4]
  return 0;
 8001f16:	2300      	movs	r3, #0
}
 8001f18:	4618      	mov	r0, r3
 8001f1a:	370c      	adds	r7, #12
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	bc80      	pop	{r7}
 8001f20:	4770      	bx	lr

08001f22 <_isatty>:

int _isatty(int file)
{
 8001f22:	b480      	push	{r7}
 8001f24:	b083      	sub	sp, #12
 8001f26:	af00      	add	r7, sp, #0
 8001f28:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001f2a:	2301      	movs	r3, #1
}
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	370c      	adds	r7, #12
 8001f30:	46bd      	mov	sp, r7
 8001f32:	bc80      	pop	{r7}
 8001f34:	4770      	bx	lr

08001f36 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001f36:	b480      	push	{r7}
 8001f38:	b085      	sub	sp, #20
 8001f3a:	af00      	add	r7, sp, #0
 8001f3c:	60f8      	str	r0, [r7, #12]
 8001f3e:	60b9      	str	r1, [r7, #8]
 8001f40:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001f42:	2300      	movs	r3, #0
}
 8001f44:	4618      	mov	r0, r3
 8001f46:	3714      	adds	r7, #20
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	bc80      	pop	{r7}
 8001f4c:	4770      	bx	lr
	...

08001f50 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001f50:	b580      	push	{r7, lr}
 8001f52:	b086      	sub	sp, #24
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001f58:	4a14      	ldr	r2, [pc, #80]	@ (8001fac <_sbrk+0x5c>)
 8001f5a:	4b15      	ldr	r3, [pc, #84]	@ (8001fb0 <_sbrk+0x60>)
 8001f5c:	1ad3      	subs	r3, r2, r3
 8001f5e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001f60:	697b      	ldr	r3, [r7, #20]
 8001f62:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001f64:	4b13      	ldr	r3, [pc, #76]	@ (8001fb4 <_sbrk+0x64>)
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d102      	bne.n	8001f72 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001f6c:	4b11      	ldr	r3, [pc, #68]	@ (8001fb4 <_sbrk+0x64>)
 8001f6e:	4a12      	ldr	r2, [pc, #72]	@ (8001fb8 <_sbrk+0x68>)
 8001f70:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001f72:	4b10      	ldr	r3, [pc, #64]	@ (8001fb4 <_sbrk+0x64>)
 8001f74:	681a      	ldr	r2, [r3, #0]
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	4413      	add	r3, r2
 8001f7a:	693a      	ldr	r2, [r7, #16]
 8001f7c:	429a      	cmp	r2, r3
 8001f7e:	d207      	bcs.n	8001f90 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001f80:	f004 fb4a 	bl	8006618 <__errno>
 8001f84:	4603      	mov	r3, r0
 8001f86:	220c      	movs	r2, #12
 8001f88:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001f8a:	f04f 33ff 	mov.w	r3, #4294967295
 8001f8e:	e009      	b.n	8001fa4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001f90:	4b08      	ldr	r3, [pc, #32]	@ (8001fb4 <_sbrk+0x64>)
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001f96:	4b07      	ldr	r3, [pc, #28]	@ (8001fb4 <_sbrk+0x64>)
 8001f98:	681a      	ldr	r2, [r3, #0]
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	4413      	add	r3, r2
 8001f9e:	4a05      	ldr	r2, [pc, #20]	@ (8001fb4 <_sbrk+0x64>)
 8001fa0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001fa2:	68fb      	ldr	r3, [r7, #12]
}
 8001fa4:	4618      	mov	r0, r3
 8001fa6:	3718      	adds	r7, #24
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	bd80      	pop	{r7, pc}
 8001fac:	20005000 	.word	0x20005000
 8001fb0:	00000400 	.word	0x00000400
 8001fb4:	2000033c 	.word	0x2000033c
 8001fb8:	200004a0 	.word	0x200004a0

08001fbc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001fbc:	b480      	push	{r7}
 8001fbe:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001fc0:	bf00      	nop
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	bc80      	pop	{r7}
 8001fc6:	4770      	bx	lr

08001fc8 <sendTemperatureHumidityMessage>:
MotionStatus_T systemMotionState = MOTION_NORMAL;
extern CAN_HandleTypeDef hcan;

//Send Temperature and Humidity via DHT11
void sendTemperatureHumidityMessage(void)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	b08a      	sub	sp, #40	@ 0x28
 8001fcc:	af00      	add	r7, sp, #0
   CAN_TxHeaderTypeDef txHeader;
   uint8_t txData[2];
   uint32_t txMailbox;

   txHeader.StdId=0x6FD;//Example ID for DHT11 status
 8001fce:	f240 63fd 	movw	r3, #1789	@ 0x6fd
 8001fd2:	60fb      	str	r3, [r7, #12]
   txHeader.IDE=CAN_ID_STD;
 8001fd4:	2300      	movs	r3, #0
 8001fd6:	617b      	str	r3, [r7, #20]
   txHeader.RTR=CAN_RTR_DATA;
 8001fd8:	2300      	movs	r3, #0
 8001fda:	61bb      	str	r3, [r7, #24]
   txHeader.DLC=2;
 8001fdc:	2302      	movs	r3, #2
 8001fde:	61fb      	str	r3, [r7, #28]

//   txData[0]=(uint8_t)(tCelsius*10); // scaled to 0.1°C
//   txData[1]=(uint8_t)(RH*10);       // scaled to 0.1%

   uint8_t temp = (uint8_t)(fminf(tCelsius * 10, 255));
 8001fe0:	4b1a      	ldr	r3, [pc, #104]	@ (800204c <sendTemperatureHumidityMessage+0x84>)
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	491a      	ldr	r1, [pc, #104]	@ (8002050 <sendTemperatureHumidityMessage+0x88>)
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	f7fe feac 	bl	8000d44 <__aeabi_fmul>
 8001fec:	4603      	mov	r3, r0
 8001fee:	4919      	ldr	r1, [pc, #100]	@ (8002054 <sendTemperatureHumidityMessage+0x8c>)
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	f006 fb99 	bl	8008728 <fminf>
 8001ff6:	4603      	mov	r3, r0
 8001ff8:	4618      	mov	r0, r3
 8001ffa:	f7ff f869 	bl	80010d0 <__aeabi_f2uiz>
 8001ffe:	4603      	mov	r3, r0
 8002000:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
   uint8_t hum  = (uint8_t)(fminf(RH * 10, 255));
 8002004:	4b14      	ldr	r3, [pc, #80]	@ (8002058 <sendTemperatureHumidityMessage+0x90>)
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	4911      	ldr	r1, [pc, #68]	@ (8002050 <sendTemperatureHumidityMessage+0x88>)
 800200a:	4618      	mov	r0, r3
 800200c:	f7fe fe9a 	bl	8000d44 <__aeabi_fmul>
 8002010:	4603      	mov	r3, r0
 8002012:	4910      	ldr	r1, [pc, #64]	@ (8002054 <sendTemperatureHumidityMessage+0x8c>)
 8002014:	4618      	mov	r0, r3
 8002016:	f006 fb87 	bl	8008728 <fminf>
 800201a:	4603      	mov	r3, r0
 800201c:	4618      	mov	r0, r3
 800201e:	f7ff f857 	bl	80010d0 <__aeabi_f2uiz>
 8002022:	4603      	mov	r3, r0
 8002024:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
   txData[0] = temp;
 8002028:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800202c:	723b      	strb	r3, [r7, #8]
   txData[1] = hum;
 800202e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8002032:	727b      	strb	r3, [r7, #9]


   HAL_CAN_AddTxMessage(&hcan, &txHeader, txData, &txMailbox);
 8002034:	1d3b      	adds	r3, r7, #4
 8002036:	f107 0208 	add.w	r2, r7, #8
 800203a:	f107 010c 	add.w	r1, r7, #12
 800203e:	4807      	ldr	r0, [pc, #28]	@ (800205c <sendTemperatureHumidityMessage+0x94>)
 8002040:	f000 fc80 	bl	8002944 <HAL_CAN_AddTxMessage>
}
 8002044:	bf00      	nop
 8002046:	3728      	adds	r7, #40	@ 0x28
 8002048:	46bd      	mov	sp, r7
 800204a:	bd80      	pop	{r7, pc}
 800204c:	20000330 	.word	0x20000330
 8002050:	41200000 	.word	0x41200000
 8002054:	437f0000 	.word	0x437f0000
 8002058:	20000338 	.word	0x20000338
 800205c:	200002d4 	.word	0x200002d4

08002060 <sendFuelEconomyMessage>:


// Send fuel economy status
void sendFuelEconomyMessage(uint8_t status) {
 8002060:	b580      	push	{r7, lr}
 8002062:	b08c      	sub	sp, #48	@ 0x30
 8002064:	af00      	add	r7, sp, #0
 8002066:	4603      	mov	r3, r0
 8002068:	71fb      	strb	r3, [r7, #7]
    CAN_TxHeaderTypeDef TxHeader;
    uint8_t txData[8] = {0};
 800206a:	f107 0310 	add.w	r3, r7, #16
 800206e:	2200      	movs	r2, #0
 8002070:	601a      	str	r2, [r3, #0]
 8002072:	605a      	str	r2, [r3, #4]
    uint32_t txMailbox;

    TxHeader.StdId = 0x500;
 8002074:	f44f 63a0 	mov.w	r3, #1280	@ 0x500
 8002078:	61bb      	str	r3, [r7, #24]
    TxHeader.IDE = CAN_ID_STD;
 800207a:	2300      	movs	r3, #0
 800207c:	623b      	str	r3, [r7, #32]
    TxHeader.RTR = CAN_RTR_DATA;
 800207e:	2300      	movs	r3, #0
 8002080:	627b      	str	r3, [r7, #36]	@ 0x24
    TxHeader.DLC = 1;
 8002082:	2301      	movs	r3, #1
 8002084:	62bb      	str	r3, [r7, #40]	@ 0x28

    txData[0] = status;
 8002086:	79fb      	ldrb	r3, [r7, #7]
 8002088:	743b      	strb	r3, [r7, #16]

    HAL_CAN_AddTxMessage(&hcan, &TxHeader, txData, &txMailbox);
 800208a:	f107 030c 	add.w	r3, r7, #12
 800208e:	f107 0210 	add.w	r2, r7, #16
 8002092:	f107 0118 	add.w	r1, r7, #24
 8002096:	4803      	ldr	r0, [pc, #12]	@ (80020a4 <sendFuelEconomyMessage+0x44>)
 8002098:	f000 fc54 	bl	8002944 <HAL_CAN_AddTxMessage>
}
 800209c:	bf00      	nop
 800209e:	3730      	adds	r7, #48	@ 0x30
 80020a0:	46bd      	mov	sp, r7
 80020a2:	bd80      	pop	{r7, pc}
 80020a4:	200002d4 	.word	0x200002d4

080020a8 <FuelEconomy_Ctrl>:

// Decision logic
void FuelEconomy_Ctrl(void) {
 80020a8:	b580      	push	{r7, lr}
 80020aa:	b082      	sub	sp, #8
 80020ac:	af00      	add	r7, sp, #0
    uint8_t fuelEconomyStatus = 0;
 80020ae:	2300      	movs	r3, #0
 80020b0:	71fb      	strb	r3, [r7, #7]

    uint8_t EngineSpeed = engineData.EngineeRPM;
 80020b2:	4b23      	ldr	r3, [pc, #140]	@ (8002140 <FuelEconomy_Ctrl+0x98>)
 80020b4:	781b      	ldrb	r3, [r3, #0]
 80020b6:	71bb      	strb	r3, [r7, #6]
    uint8_t VehicleSpeed = vehicleData.vehicleSpeed;
 80020b8:	4b22      	ldr	r3, [pc, #136]	@ (8002144 <FuelEconomy_Ctrl+0x9c>)
 80020ba:	781b      	ldrb	r3, [r3, #0]
 80020bc:	717b      	strb	r3, [r7, #5]

    if (EngineSpeed > 100) {
 80020be:	79bb      	ldrb	r3, [r7, #6]
 80020c0:	2b64      	cmp	r3, #100	@ 0x64
 80020c2:	d938      	bls.n	8002136 <FuelEconomy_Ctrl+0x8e>
        if (VehicleSpeed > 0 && VehicleSpeed < 30)
 80020c4:	797b      	ldrb	r3, [r7, #5]
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d005      	beq.n	80020d6 <FuelEconomy_Ctrl+0x2e>
 80020ca:	797b      	ldrb	r3, [r7, #5]
 80020cc:	2b1d      	cmp	r3, #29
 80020ce:	d802      	bhi.n	80020d6 <FuelEconomy_Ctrl+0x2e>
            fuelEconomyStatus = 0; //0x14
 80020d0:	2300      	movs	r3, #0
 80020d2:	71fb      	strb	r3, [r7, #7]
 80020d4:	e02b      	b.n	800212e <FuelEconomy_Ctrl+0x86>
        else if (VehicleSpeed >= 30 && VehicleSpeed < 60)
 80020d6:	797b      	ldrb	r3, [r7, #5]
 80020d8:	2b1d      	cmp	r3, #29
 80020da:	d905      	bls.n	80020e8 <FuelEconomy_Ctrl+0x40>
 80020dc:	797b      	ldrb	r3, [r7, #5]
 80020de:	2b3b      	cmp	r3, #59	@ 0x3b
 80020e0:	d802      	bhi.n	80020e8 <FuelEconomy_Ctrl+0x40>
            fuelEconomyStatus = 1; //0x32
 80020e2:	2301      	movs	r3, #1
 80020e4:	71fb      	strb	r3, [r7, #7]
 80020e6:	e022      	b.n	800212e <FuelEconomy_Ctrl+0x86>
        else if (VehicleSpeed >= 60 && VehicleSpeed < 90)
 80020e8:	797b      	ldrb	r3, [r7, #5]
 80020ea:	2b3b      	cmp	r3, #59	@ 0x3b
 80020ec:	d905      	bls.n	80020fa <FuelEconomy_Ctrl+0x52>
 80020ee:	797b      	ldrb	r3, [r7, #5]
 80020f0:	2b59      	cmp	r3, #89	@ 0x59
 80020f2:	d802      	bhi.n	80020fa <FuelEconomy_Ctrl+0x52>
            fuelEconomyStatus = 2; //0x50
 80020f4:	2302      	movs	r3, #2
 80020f6:	71fb      	strb	r3, [r7, #7]
 80020f8:	e019      	b.n	800212e <FuelEconomy_Ctrl+0x86>
        else if (VehicleSpeed >= 90 && VehicleSpeed < 120)
 80020fa:	797b      	ldrb	r3, [r7, #5]
 80020fc:	2b59      	cmp	r3, #89	@ 0x59
 80020fe:	d905      	bls.n	800210c <FuelEconomy_Ctrl+0x64>
 8002100:	797b      	ldrb	r3, [r7, #5]
 8002102:	2b77      	cmp	r3, #119	@ 0x77
 8002104:	d802      	bhi.n	800210c <FuelEconomy_Ctrl+0x64>
           fuelEconomyStatus = 3; //0x64
 8002106:	2303      	movs	r3, #3
 8002108:	71fb      	strb	r3, [r7, #7]
 800210a:	e010      	b.n	800212e <FuelEconomy_Ctrl+0x86>
        else if (VehicleSpeed >= 120 && VehicleSpeed < 160)
 800210c:	797b      	ldrb	r3, [r7, #5]
 800210e:	2b77      	cmp	r3, #119	@ 0x77
 8002110:	d905      	bls.n	800211e <FuelEconomy_Ctrl+0x76>
 8002112:	797b      	ldrb	r3, [r7, #5]
 8002114:	2b9f      	cmp	r3, #159	@ 0x9f
 8002116:	d802      	bhi.n	800211e <FuelEconomy_Ctrl+0x76>
            fuelEconomyStatus = 4;//0x82
 8002118:	2304      	movs	r3, #4
 800211a:	71fb      	strb	r3, [r7, #7]
 800211c:	e007      	b.n	800212e <FuelEconomy_Ctrl+0x86>
        else if (VehicleSpeed >= 160 && VehicleSpeed < 200)
 800211e:	797b      	ldrb	r3, [r7, #5]
 8002120:	2b9f      	cmp	r3, #159	@ 0x9f
 8002122:	d904      	bls.n	800212e <FuelEconomy_Ctrl+0x86>
 8002124:	797b      	ldrb	r3, [r7, #5]
 8002126:	2bc7      	cmp	r3, #199	@ 0xc7
 8002128:	d801      	bhi.n	800212e <FuelEconomy_Ctrl+0x86>
            fuelEconomyStatus = 5;//0xB4
 800212a:	2305      	movs	r3, #5
 800212c:	71fb      	strb	r3, [r7, #7]

        sendFuelEconomyMessage(fuelEconomyStatus);
 800212e:	79fb      	ldrb	r3, [r7, #7]
 8002130:	4618      	mov	r0, r3
 8002132:	f7ff ff95 	bl	8002060 <sendFuelEconomyMessage>
    }
}
 8002136:	bf00      	nop
 8002138:	3708      	adds	r7, #8
 800213a:	46bd      	mov	sp, r7
 800213c:	bd80      	pop	{r7, pc}
 800213e:	bf00      	nop
 8002140:	20000344 	.word	0x20000344
 8002144:	20000340 	.word	0x20000340

08002148 <handleCANRxMessage>:
void handleCANRxMessage(uint32_t id, uint8_t* data, uint8_t dlc)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	b098      	sub	sp, #96	@ 0x60
 800214c:	af02      	add	r7, sp, #8
 800214e:	60f8      	str	r0, [r7, #12]
 8002150:	60b9      	str	r1, [r7, #8]
 8002152:	4613      	mov	r3, r2
 8002154:	71fb      	strb	r3, [r7, #7]
   	char msg[64];
    if (id == 0x402 && dlc == 1)
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	f240 4202 	movw	r2, #1026	@ 0x402
 800215c:	4293      	cmp	r3, r2
 800215e:	d125      	bne.n	80021ac <handleCANRxMessage+0x64>
 8002160:	79fb      	ldrb	r3, [r7, #7]
 8002162:	2b01      	cmp	r3, #1
 8002164:	d122      	bne.n	80021ac <handleCANRxMessage+0x64>
    {
        uint8_t status = data[0];
 8002166:	68bb      	ldr	r3, [r7, #8]
 8002168:	781b      	ldrb	r3, [r3, #0]
 800216a:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

        switch (status)
 800216e:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8002172:	2b02      	cmp	r3, #2
 8002174:	d00c      	beq.n	8002190 <handleCANRxMessage+0x48>
 8002176:	2b02      	cmp	r3, #2
 8002178:	dc0d      	bgt.n	8002196 <handleCANRxMessage+0x4e>
 800217a:	2b00      	cmp	r3, #0
 800217c:	d002      	beq.n	8002184 <handleCANRxMessage+0x3c>
 800217e:	2b01      	cmp	r3, #1
 8002180:	d003      	beq.n	800218a <handleCANRxMessage+0x42>
 8002182:	e008      	b.n	8002196 <handleCANRxMessage+0x4e>
        {
            case 0: // Normal
                processMotionStatusNormal();
 8002184:	f000 f884 	bl	8002290 <processMotionStatusNormal>
                break;
 8002188:	e00b      	b.n	80021a2 <handleCANRxMessage+0x5a>
            case 1: // Warning
                handleMotionWarning();
 800218a:	f000 f8a1 	bl	80022d0 <handleMotionWarning>
                break;
 800218e:	e008      	b.n	80021a2 <handleCANRxMessage+0x5a>
            case 2: // Critical
                handleMotionCritical();
 8002190:	f000 f8ba 	bl	8002308 <handleMotionCritical>
                break;
 8002194:	e005      	b.n	80021a2 <handleCANRxMessage+0x5a>
            default: // Unknown
                handleUnknownMotionStatus(status);
 8002196:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800219a:	4618      	mov	r0, r3
 800219c:	f000 f8d2 	bl	8002344 <handleUnknownMotionStatus>
                break;
 80021a0:	bf00      	nop
        }

        HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5); // Blink on feedback
 80021a2:	2120      	movs	r1, #32
 80021a4:	4832      	ldr	r0, [pc, #200]	@ (8002270 <handleCANRxMessage+0x128>)
 80021a6:	f001 fac6 	bl	8003736 <HAL_GPIO_TogglePin>
    {
 80021aa:	e01c      	b.n	80021e6 <handleCANRxMessage+0x9e>
    }
    else if (id == 0x200 && dlc >= sizeof(vehicleInfo_T))
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80021b2:	d10a      	bne.n	80021ca <handleCANRxMessage+0x82>
 80021b4:	79fb      	ldrb	r3, [r7, #7]
 80021b6:	2b03      	cmp	r3, #3
 80021b8:	d907      	bls.n	80021ca <handleCANRxMessage+0x82>
    {
        memcpy(&vehicleData, data, sizeof(vehicleInfo_T));
 80021ba:	68bb      	ldr	r3, [r7, #8]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	461a      	mov	r2, r3
 80021c0:	4b2c      	ldr	r3, [pc, #176]	@ (8002274 <handleCANRxMessage+0x12c>)
 80021c2:	601a      	str	r2, [r3, #0]
        FuelEconomy_Ctrl(); // Trigger update after new vehicle data
 80021c4:	f7ff ff70 	bl	80020a8 <FuelEconomy_Ctrl>
 80021c8:	e00d      	b.n	80021e6 <handleCANRxMessage+0x9e>
    }
    else if (id == 0x300 && dlc >= sizeof(EngineeInfo_T))
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80021d0:	d109      	bne.n	80021e6 <handleCANRxMessage+0x9e>
 80021d2:	79fb      	ldrb	r3, [r7, #7]
 80021d4:	2b03      	cmp	r3, #3
 80021d6:	d906      	bls.n	80021e6 <handleCANRxMessage+0x9e>
    {
        memcpy(&engineData, data, sizeof(EngineeInfo_T));
 80021d8:	68bb      	ldr	r3, [r7, #8]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	461a      	mov	r2, r3
 80021de:	4b26      	ldr	r3, [pc, #152]	@ (8002278 <handleCANRxMessage+0x130>)
 80021e0:	601a      	str	r2, [r3, #0]
        FuelEconomy_Ctrl(); // Trigger update after new engine data
 80021e2:	f7ff ff61 	bl	80020a8 <FuelEconomy_Ctrl>
    }
    if (id == 0x6FE && dlc == 1)
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	f240 62fe 	movw	r2, #1790	@ 0x6fe
 80021ec:	4293      	cmp	r3, r2
 80021ee:	d13b      	bne.n	8002268 <handleCANRxMessage+0x120>
 80021f0:	79fb      	ldrb	r3, [r7, #7]
 80021f2:	2b01      	cmp	r3, #1
 80021f4:	d138      	bne.n	8002268 <handleCANRxMessage+0x120>
    {

    	//snprintf(msg, sizeof(msg), "Received CAN ID: 0x%03X, DLC: %d\r\n", id, dlc);
    	snprintf(msg, sizeof(msg), "Received CAN ID: 0x%03lX, DLC: %d\r\n", id, dlc);
 80021f6:	79fb      	ldrb	r3, [r7, #7]
 80021f8:	f107 0014 	add.w	r0, r7, #20
 80021fc:	9300      	str	r3, [sp, #0]
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	4a1e      	ldr	r2, [pc, #120]	@ (800227c <handleCANRxMessage+0x134>)
 8002202:	2140      	movs	r1, #64	@ 0x40
 8002204:	f004 f93c 	bl	8006480 <sniprintf>

    	uart_send_string(msg);
 8002208:	f107 0314 	add.w	r3, r7, #20
 800220c:	4618      	mov	r0, r3
 800220e:	f7ff f8db 	bl	80013c8 <uart_send_string>

    	uint8_t status = data[0];
 8002212:	68bb      	ldr	r3, [r7, #8]
 8002214:	781b      	ldrb	r3, [r3, #0]
 8002216:	f887 3056 	strb.w	r3, [r7, #86]	@ 0x56

    	switch (status)
 800221a:	f897 3056 	ldrb.w	r3, [r7, #86]	@ 0x56
 800221e:	2b02      	cmp	r3, #2
 8002220:	d00e      	beq.n	8002240 <handleCANRxMessage+0xf8>
 8002222:	2b02      	cmp	r3, #2
 8002224:	dc10      	bgt.n	8002248 <handleCANRxMessage+0x100>
 8002226:	2b00      	cmp	r3, #0
 8002228:	d002      	beq.n	8002230 <handleCANRxMessage+0xe8>
 800222a:	2b01      	cmp	r3, #1
 800222c:	d004      	beq.n	8002238 <handleCANRxMessage+0xf0>
 800222e:	e00b      	b.n	8002248 <handleCANRxMessage+0x100>
    	    {
    	        case 0: uart_send_string("System Status: NORMAL\r\n"); break;
 8002230:	4813      	ldr	r0, [pc, #76]	@ (8002280 <handleCANRxMessage+0x138>)
 8002232:	f7ff f8c9 	bl	80013c8 <uart_send_string>
 8002236:	e00b      	b.n	8002250 <handleCANRxMessage+0x108>
    	        case 1: uart_send_string("System Status: WARNING\r\n"); break;
 8002238:	4812      	ldr	r0, [pc, #72]	@ (8002284 <handleCANRxMessage+0x13c>)
 800223a:	f7ff f8c5 	bl	80013c8 <uart_send_string>
 800223e:	e007      	b.n	8002250 <handleCANRxMessage+0x108>
    	        case 2: uart_send_string("System Status: CRITICAL\r\n"); break;
 8002240:	4811      	ldr	r0, [pc, #68]	@ (8002288 <handleCANRxMessage+0x140>)
 8002242:	f7ff f8c1 	bl	80013c8 <uart_send_string>
 8002246:	e003      	b.n	8002250 <handleCANRxMessage+0x108>
    	        default: uart_send_string("System Status: UNKNOWN\r\n"); break;
 8002248:	4810      	ldr	r0, [pc, #64]	@ (800228c <handleCANRxMessage+0x144>)
 800224a:	f7ff f8bd 	bl	80013c8 <uart_send_string>
 800224e:	bf00      	nop
    	    }

    	    // Optional: LED feedback
    	    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, status == 2 ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8002250:	f897 3056 	ldrb.w	r3, [r7, #86]	@ 0x56
 8002254:	2b02      	cmp	r3, #2
 8002256:	bf0c      	ite	eq
 8002258:	2301      	moveq	r3, #1
 800225a:	2300      	movne	r3, #0
 800225c:	b2db      	uxtb	r3, r3
 800225e:	461a      	mov	r2, r3
 8002260:	2120      	movs	r1, #32
 8002262:	4803      	ldr	r0, [pc, #12]	@ (8002270 <handleCANRxMessage+0x128>)
 8002264:	f001 fa4f 	bl	8003706 <HAL_GPIO_WritePin>
        // 0 = Normal, 1 = Warning, 2 = Critical
       // TBD handleSystemStatus(status);
    }

}
 8002268:	bf00      	nop
 800226a:	3758      	adds	r7, #88	@ 0x58
 800226c:	46bd      	mov	sp, r7
 800226e:	bd80      	pop	{r7, pc}
 8002270:	40010800 	.word	0x40010800
 8002274:	20000340 	.word	0x20000340
 8002278:	20000344 	.word	0x20000344
 800227c:	08008818 	.word	0x08008818
 8002280:	0800883c 	.word	0x0800883c
 8002284:	08008854 	.word	0x08008854
 8002288:	08008870 	.word	0x08008870
 800228c:	0800888c 	.word	0x0800888c

08002290 <processMotionStatusNormal>:

void processMotionStatusNormal(void)
{
 8002290:	b580      	push	{r7, lr}
 8002292:	af00      	add	r7, sp, #0
    // Example: reset flags or continue normal operation
	motionWarningFlag = 0;
 8002294:	4b09      	ldr	r3, [pc, #36]	@ (80022bc <processMotionStatusNormal+0x2c>)
 8002296:	2200      	movs	r2, #0
 8002298:	701a      	strb	r2, [r3, #0]
	motionCriticalFlag = 0;
 800229a:	4b09      	ldr	r3, [pc, #36]	@ (80022c0 <processMotionStatusNormal+0x30>)
 800229c:	2200      	movs	r2, #0
 800229e:	701a      	strb	r2, [r3, #0]
	motionFaultCounter = 0;
 80022a0:	4b08      	ldr	r3, [pc, #32]	@ (80022c4 <processMotionStatusNormal+0x34>)
 80022a2:	2200      	movs	r2, #0
 80022a4:	701a      	strb	r2, [r3, #0]
	systemMotionState = MOTION_NORMAL;
 80022a6:	4b08      	ldr	r3, [pc, #32]	@ (80022c8 <processMotionStatusNormal+0x38>)
 80022a8:	2200      	movs	r2, #0
 80022aa:	701a      	strb	r2, [r3, #0]
    uart_send_string("Normal: elevated motion detected\r\n");
 80022ac:	4807      	ldr	r0, [pc, #28]	@ (80022cc <processMotionStatusNormal+0x3c>)
 80022ae:	f7ff f88b 	bl	80013c8 <uart_send_string>
	logMotionEvent("Normal: elevated motion detected\r\n");
 80022b2:	4806      	ldr	r0, [pc, #24]	@ (80022cc <processMotionStatusNormal+0x3c>)
 80022b4:	f000 f878 	bl	80023a8 <logMotionEvent>
}
 80022b8:	bf00      	nop
 80022ba:	bd80      	pop	{r7, pc}
 80022bc:	20000348 	.word	0x20000348
 80022c0:	20000349 	.word	0x20000349
 80022c4:	2000034a 	.word	0x2000034a
 80022c8:	2000034e 	.word	0x2000034e
 80022cc:	080088a8 	.word	0x080088a8

080022d0 <handleMotionWarning>:
void handleMotionWarning(void)
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	af00      	add	r7, sp, #0
    // Example: reduce throttle, log warning, or trigger soft alert
    // You can set a flag or call a control function
	motionWarningFlag = 1;
 80022d4:	4b08      	ldr	r3, [pc, #32]	@ (80022f8 <handleMotionWarning+0x28>)
 80022d6:	2201      	movs	r2, #1
 80022d8:	701a      	strb	r2, [r3, #0]
	motionCriticalFlag = 0;
 80022da:	4b08      	ldr	r3, [pc, #32]	@ (80022fc <handleMotionWarning+0x2c>)
 80022dc:	2200      	movs	r2, #0
 80022de:	701a      	strb	r2, [r3, #0]
	systemMotionState = MOTION_WARNING;
 80022e0:	4b07      	ldr	r3, [pc, #28]	@ (8002300 <handleMotionWarning+0x30>)
 80022e2:	2201      	movs	r2, #1
 80022e4:	701a      	strb	r2, [r3, #0]
    uart_send_string("Warning: elevated motion detected\r\n");
 80022e6:	4807      	ldr	r0, [pc, #28]	@ (8002304 <handleMotionWarning+0x34>)
 80022e8:	f7ff f86e 	bl	80013c8 <uart_send_string>
    logMotionEvent("Warning: elevated motion detected\r\n");
 80022ec:	4805      	ldr	r0, [pc, #20]	@ (8002304 <handleMotionWarning+0x34>)
 80022ee:	f000 f85b 	bl	80023a8 <logMotionEvent>
}
 80022f2:	bf00      	nop
 80022f4:	bd80      	pop	{r7, pc}
 80022f6:	bf00      	nop
 80022f8:	20000348 	.word	0x20000348
 80022fc:	20000349 	.word	0x20000349
 8002300:	2000034e 	.word	0x2000034e
 8002304:	080088cc 	.word	0x080088cc

08002308 <handleMotionCritical>:

void handleMotionCritical(void)
{
 8002308:	b580      	push	{r7, lr}
 800230a:	af00      	add	r7, sp, #0
    // Example: trigger emergency stop, log fault, or send diagnostic frame
	motionCriticalFlag = 1;
 800230c:	4b09      	ldr	r3, [pc, #36]	@ (8002334 <handleMotionCritical+0x2c>)
 800230e:	2201      	movs	r2, #1
 8002310:	701a      	strb	r2, [r3, #0]
	motionWarningFlag = 0;
 8002312:	4b09      	ldr	r3, [pc, #36]	@ (8002338 <handleMotionCritical+0x30>)
 8002314:	2200      	movs	r2, #0
 8002316:	701a      	strb	r2, [r3, #0]
	systemMotionState = MOTION_CRITICAL;
 8002318:	4b08      	ldr	r3, [pc, #32]	@ (800233c <handleMotionCritical+0x34>)
 800231a:	2202      	movs	r2, #2
 800231c:	701a      	strb	r2, [r3, #0]
    uart_send_string("Critical: unsafe motion detected\r\n");
 800231e:	4808      	ldr	r0, [pc, #32]	@ (8002340 <handleMotionCritical+0x38>)
 8002320:	f7ff f852 	bl	80013c8 <uart_send_string>
	logMotionEvent("Critical: unsafe motion detected\r\n");
 8002324:	4806      	ldr	r0, [pc, #24]	@ (8002340 <handleMotionCritical+0x38>)
 8002326:	f000 f83f 	bl	80023a8 <logMotionEvent>
	triggerSafetyProtocol();
 800232a:	f000 f82d 	bl	8002388 <triggerSafetyProtocol>
}
 800232e:	bf00      	nop
 8002330:	bd80      	pop	{r7, pc}
 8002332:	bf00      	nop
 8002334:	20000349 	.word	0x20000349
 8002338:	20000348 	.word	0x20000348
 800233c:	2000034e 	.word	0x2000034e
 8002340:	080088f0 	.word	0x080088f0

08002344 <handleUnknownMotionStatus>:

void handleUnknownMotionStatus(uint8_t status)
{
 8002344:	b580      	push	{r7, lr}
 8002346:	b092      	sub	sp, #72	@ 0x48
 8002348:	af00      	add	r7, sp, #0
 800234a:	4603      	mov	r3, r0
 800234c:	71fb      	strb	r3, [r7, #7]
    char buffer[64];
    // Log or ignore unknown status codes
    systemMotionState = MOTION_UNKNOWN;
 800234e:	4b0b      	ldr	r3, [pc, #44]	@ (800237c <handleUnknownMotionStatus+0x38>)
 8002350:	22ff      	movs	r2, #255	@ 0xff
 8002352:	701a      	strb	r2, [r3, #0]
    lastUnknownStatus = status;
 8002354:	4a0a      	ldr	r2, [pc, #40]	@ (8002380 <handleUnknownMotionStatus+0x3c>)
 8002356:	79fb      	ldrb	r3, [r7, #7]
 8002358:	7013      	strb	r3, [r2, #0]
    snprintf(buffer, sizeof(buffer), "Unknown motion status received: 0x%02X\r\n", status);
 800235a:	79fb      	ldrb	r3, [r7, #7]
 800235c:	f107 0008 	add.w	r0, r7, #8
 8002360:	4a08      	ldr	r2, [pc, #32]	@ (8002384 <handleUnknownMotionStatus+0x40>)
 8002362:	2140      	movs	r1, #64	@ 0x40
 8002364:	f004 f88c 	bl	8006480 <sniprintf>
    logMotionEvent(buffer);
 8002368:	f107 0308 	add.w	r3, r7, #8
 800236c:	4618      	mov	r0, r3
 800236e:	f000 f81b 	bl	80023a8 <logMotionEvent>
}
 8002372:	bf00      	nop
 8002374:	3748      	adds	r7, #72	@ 0x48
 8002376:	46bd      	mov	sp, r7
 8002378:	bd80      	pop	{r7, pc}
 800237a:	bf00      	nop
 800237c:	2000034e 	.word	0x2000034e
 8002380:	2000034b 	.word	0x2000034b
 8002384:	08008914 	.word	0x08008914

08002388 <triggerSafetyProtocol>:
void triggerSafetyProtocol(void)
{
 8002388:	b480      	push	{r7}
 800238a:	af00      	add	r7, sp, #0
    // Example: set a flag or disable actuators
    safetyTriggered = 1;
 800238c:	4b04      	ldr	r3, [pc, #16]	@ (80023a0 <triggerSafetyProtocol+0x18>)
 800238e:	2201      	movs	r2, #1
 8002390:	701a      	strb	r2, [r3, #0]

    // Optional: stop motors or enter safe mode
     motorControlEnabled = 0;
 8002392:	4b04      	ldr	r3, [pc, #16]	@ (80023a4 <triggerSafetyProtocol+0x1c>)
 8002394:	2200      	movs	r2, #0
 8002396:	701a      	strb	r2, [r3, #0]
}
 8002398:	bf00      	nop
 800239a:	46bd      	mov	sp, r7
 800239c:	bc80      	pop	{r7}
 800239e:	4770      	bx	lr
 80023a0:	2000034c 	.word	0x2000034c
 80023a4:	2000034d 	.word	0x2000034d

080023a8 <logMotionEvent>:
void logMotionEvent(const char* message)
{
 80023a8:	b580      	push	{r7, lr}
 80023aa:	b082      	sub	sp, #8
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	6078      	str	r0, [r7, #4]
	if(motorControlEnabled)
 80023b0:	4b07      	ldr	r3, [pc, #28]	@ (80023d0 <logMotionEvent+0x28>)
 80023b2:	781b      	ldrb	r3, [r3, #0]
 80023b4:	b2db      	uxtb	r3, r3
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d002      	beq.n	80023c0 <logMotionEvent+0x18>
	   uart_send_string("log Motion Event\r\n");
 80023ba:	4806      	ldr	r0, [pc, #24]	@ (80023d4 <logMotionEvent+0x2c>)
 80023bc:	f7ff f804 	bl	80013c8 <uart_send_string>

       printf("Motion Event: %s\r\n", message);
 80023c0:	6879      	ldr	r1, [r7, #4]
 80023c2:	4805      	ldr	r0, [pc, #20]	@ (80023d8 <logMotionEvent+0x30>)
 80023c4:	f004 f84a 	bl	800645c <iprintf>
}
 80023c8:	bf00      	nop
 80023ca:	3708      	adds	r7, #8
 80023cc:	46bd      	mov	sp, r7
 80023ce:	bd80      	pop	{r7, pc}
 80023d0:	2000034d 	.word	0x2000034d
 80023d4:	08008940 	.word	0x08008940
 80023d8:	08008954 	.word	0x08008954

080023dc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80023dc:	f7ff fdee 	bl	8001fbc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80023e0:	480b      	ldr	r0, [pc, #44]	@ (8002410 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80023e2:	490c      	ldr	r1, [pc, #48]	@ (8002414 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80023e4:	4a0c      	ldr	r2, [pc, #48]	@ (8002418 <LoopFillZerobss+0x16>)
  movs r3, #0
 80023e6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80023e8:	e002      	b.n	80023f0 <LoopCopyDataInit>

080023ea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80023ea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80023ec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80023ee:	3304      	adds	r3, #4

080023f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80023f0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80023f2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80023f4:	d3f9      	bcc.n	80023ea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80023f6:	4a09      	ldr	r2, [pc, #36]	@ (800241c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80023f8:	4c09      	ldr	r4, [pc, #36]	@ (8002420 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80023fa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80023fc:	e001      	b.n	8002402 <LoopFillZerobss>

080023fe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80023fe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002400:	3204      	adds	r2, #4

08002402 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002402:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002404:	d3fb      	bcc.n	80023fe <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002406:	f004 f90d 	bl	8006624 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800240a:	f7ff f857 	bl	80014bc <main>
  bx lr
 800240e:	4770      	bx	lr
  ldr r0, =_sdata
 8002410:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002414:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8002418:	08008d14 	.word	0x08008d14
  ldr r2, =_sbss
 800241c:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8002420:	200004a0 	.word	0x200004a0

08002424 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002424:	e7fe      	b.n	8002424 <ADC1_2_IRQHandler>
	...

08002428 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002428:	b580      	push	{r7, lr}
 800242a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800242c:	4b08      	ldr	r3, [pc, #32]	@ (8002450 <HAL_Init+0x28>)
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	4a07      	ldr	r2, [pc, #28]	@ (8002450 <HAL_Init+0x28>)
 8002432:	f043 0310 	orr.w	r3, r3, #16
 8002436:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002438:	2003      	movs	r0, #3
 800243a:	f000 ff87 	bl	800334c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800243e:	2000      	movs	r0, #0
 8002440:	f000 f808 	bl	8002454 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002444:	f7ff fb96 	bl	8001b74 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002448:	2300      	movs	r3, #0
}
 800244a:	4618      	mov	r0, r3
 800244c:	bd80      	pop	{r7, pc}
 800244e:	bf00      	nop
 8002450:	40022000 	.word	0x40022000

08002454 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002454:	b580      	push	{r7, lr}
 8002456:	b082      	sub	sp, #8
 8002458:	af00      	add	r7, sp, #0
 800245a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800245c:	4b12      	ldr	r3, [pc, #72]	@ (80024a8 <HAL_InitTick+0x54>)
 800245e:	681a      	ldr	r2, [r3, #0]
 8002460:	4b12      	ldr	r3, [pc, #72]	@ (80024ac <HAL_InitTick+0x58>)
 8002462:	781b      	ldrb	r3, [r3, #0]
 8002464:	4619      	mov	r1, r3
 8002466:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800246a:	fbb3 f3f1 	udiv	r3, r3, r1
 800246e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002472:	4618      	mov	r0, r3
 8002474:	f000 ff9f 	bl	80033b6 <HAL_SYSTICK_Config>
 8002478:	4603      	mov	r3, r0
 800247a:	2b00      	cmp	r3, #0
 800247c:	d001      	beq.n	8002482 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800247e:	2301      	movs	r3, #1
 8002480:	e00e      	b.n	80024a0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	2b0f      	cmp	r3, #15
 8002486:	d80a      	bhi.n	800249e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002488:	2200      	movs	r2, #0
 800248a:	6879      	ldr	r1, [r7, #4]
 800248c:	f04f 30ff 	mov.w	r0, #4294967295
 8002490:	f000 ff67 	bl	8003362 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002494:	4a06      	ldr	r2, [pc, #24]	@ (80024b0 <HAL_InitTick+0x5c>)
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800249a:	2300      	movs	r3, #0
 800249c:	e000      	b.n	80024a0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800249e:	2301      	movs	r3, #1
}
 80024a0:	4618      	mov	r0, r3
 80024a2:	3708      	adds	r7, #8
 80024a4:	46bd      	mov	sp, r7
 80024a6:	bd80      	pop	{r7, pc}
 80024a8:	20000000 	.word	0x20000000
 80024ac:	20000008 	.word	0x20000008
 80024b0:	20000004 	.word	0x20000004

080024b4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80024b4:	b480      	push	{r7}
 80024b6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80024b8:	4b05      	ldr	r3, [pc, #20]	@ (80024d0 <HAL_IncTick+0x1c>)
 80024ba:	781b      	ldrb	r3, [r3, #0]
 80024bc:	461a      	mov	r2, r3
 80024be:	4b05      	ldr	r3, [pc, #20]	@ (80024d4 <HAL_IncTick+0x20>)
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	4413      	add	r3, r2
 80024c4:	4a03      	ldr	r2, [pc, #12]	@ (80024d4 <HAL_IncTick+0x20>)
 80024c6:	6013      	str	r3, [r2, #0]
}
 80024c8:	bf00      	nop
 80024ca:	46bd      	mov	sp, r7
 80024cc:	bc80      	pop	{r7}
 80024ce:	4770      	bx	lr
 80024d0:	20000008 	.word	0x20000008
 80024d4:	20000350 	.word	0x20000350

080024d8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80024d8:	b480      	push	{r7}
 80024da:	af00      	add	r7, sp, #0
  return uwTick;
 80024dc:	4b02      	ldr	r3, [pc, #8]	@ (80024e8 <HAL_GetTick+0x10>)
 80024de:	681b      	ldr	r3, [r3, #0]
}
 80024e0:	4618      	mov	r0, r3
 80024e2:	46bd      	mov	sp, r7
 80024e4:	bc80      	pop	{r7}
 80024e6:	4770      	bx	lr
 80024e8:	20000350 	.word	0x20000350

080024ec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80024ec:	b580      	push	{r7, lr}
 80024ee:	b084      	sub	sp, #16
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80024f4:	f7ff fff0 	bl	80024d8 <HAL_GetTick>
 80024f8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002504:	d005      	beq.n	8002512 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002506:	4b0a      	ldr	r3, [pc, #40]	@ (8002530 <HAL_Delay+0x44>)
 8002508:	781b      	ldrb	r3, [r3, #0]
 800250a:	461a      	mov	r2, r3
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	4413      	add	r3, r2
 8002510:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002512:	bf00      	nop
 8002514:	f7ff ffe0 	bl	80024d8 <HAL_GetTick>
 8002518:	4602      	mov	r2, r0
 800251a:	68bb      	ldr	r3, [r7, #8]
 800251c:	1ad3      	subs	r3, r2, r3
 800251e:	68fa      	ldr	r2, [r7, #12]
 8002520:	429a      	cmp	r2, r3
 8002522:	d8f7      	bhi.n	8002514 <HAL_Delay+0x28>
  {
  }
}
 8002524:	bf00      	nop
 8002526:	bf00      	nop
 8002528:	3710      	adds	r7, #16
 800252a:	46bd      	mov	sp, r7
 800252c:	bd80      	pop	{r7, pc}
 800252e:	bf00      	nop
 8002530:	20000008 	.word	0x20000008

08002534 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8002534:	b580      	push	{r7, lr}
 8002536:	b084      	sub	sp, #16
 8002538:	af00      	add	r7, sp, #0
 800253a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	2b00      	cmp	r3, #0
 8002540:	d101      	bne.n	8002546 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8002542:	2301      	movs	r3, #1
 8002544:	e0ed      	b.n	8002722 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	f893 3020 	ldrb.w	r3, [r3, #32]
 800254c:	b2db      	uxtb	r3, r3
 800254e:	2b00      	cmp	r3, #0
 8002550:	d102      	bne.n	8002558 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8002552:	6878      	ldr	r0, [r7, #4]
 8002554:	f7ff fb40 	bl	8001bd8 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	681a      	ldr	r2, [r3, #0]
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f042 0201 	orr.w	r2, r2, #1
 8002566:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002568:	f7ff ffb6 	bl	80024d8 <HAL_GetTick>
 800256c:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800256e:	e012      	b.n	8002596 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002570:	f7ff ffb2 	bl	80024d8 <HAL_GetTick>
 8002574:	4602      	mov	r2, r0
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	1ad3      	subs	r3, r2, r3
 800257a:	2b0a      	cmp	r3, #10
 800257c:	d90b      	bls.n	8002596 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002582:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	2205      	movs	r2, #5
 800258e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002592:	2301      	movs	r3, #1
 8002594:	e0c5      	b.n	8002722 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	685b      	ldr	r3, [r3, #4]
 800259c:	f003 0301 	and.w	r3, r3, #1
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d0e5      	beq.n	8002570 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	681a      	ldr	r2, [r3, #0]
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f022 0202 	bic.w	r2, r2, #2
 80025b2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80025b4:	f7ff ff90 	bl	80024d8 <HAL_GetTick>
 80025b8:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80025ba:	e012      	b.n	80025e2 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80025bc:	f7ff ff8c 	bl	80024d8 <HAL_GetTick>
 80025c0:	4602      	mov	r2, r0
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	1ad3      	subs	r3, r2, r3
 80025c6:	2b0a      	cmp	r3, #10
 80025c8:	d90b      	bls.n	80025e2 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025ce:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	2205      	movs	r2, #5
 80025da:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80025de:	2301      	movs	r3, #1
 80025e0:	e09f      	b.n	8002722 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	685b      	ldr	r3, [r3, #4]
 80025e8:	f003 0302 	and.w	r3, r3, #2
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d1e5      	bne.n	80025bc <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	7e1b      	ldrb	r3, [r3, #24]
 80025f4:	2b01      	cmp	r3, #1
 80025f6:	d108      	bne.n	800260a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	681a      	ldr	r2, [r3, #0]
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8002606:	601a      	str	r2, [r3, #0]
 8002608:	e007      	b.n	800261a <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	681a      	ldr	r2, [r3, #0]
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002618:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	7e5b      	ldrb	r3, [r3, #25]
 800261e:	2b01      	cmp	r3, #1
 8002620:	d108      	bne.n	8002634 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	681a      	ldr	r2, [r3, #0]
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002630:	601a      	str	r2, [r3, #0]
 8002632:	e007      	b.n	8002644 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	681a      	ldr	r2, [r3, #0]
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002642:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	7e9b      	ldrb	r3, [r3, #26]
 8002648:	2b01      	cmp	r3, #1
 800264a:	d108      	bne.n	800265e <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	681a      	ldr	r2, [r3, #0]
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f042 0220 	orr.w	r2, r2, #32
 800265a:	601a      	str	r2, [r3, #0]
 800265c:	e007      	b.n	800266e <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	681a      	ldr	r2, [r3, #0]
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f022 0220 	bic.w	r2, r2, #32
 800266c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	7edb      	ldrb	r3, [r3, #27]
 8002672:	2b01      	cmp	r3, #1
 8002674:	d108      	bne.n	8002688 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	681a      	ldr	r2, [r3, #0]
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f022 0210 	bic.w	r2, r2, #16
 8002684:	601a      	str	r2, [r3, #0]
 8002686:	e007      	b.n	8002698 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	681a      	ldr	r2, [r3, #0]
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f042 0210 	orr.w	r2, r2, #16
 8002696:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	7f1b      	ldrb	r3, [r3, #28]
 800269c:	2b01      	cmp	r3, #1
 800269e:	d108      	bne.n	80026b2 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	681a      	ldr	r2, [r3, #0]
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f042 0208 	orr.w	r2, r2, #8
 80026ae:	601a      	str	r2, [r3, #0]
 80026b0:	e007      	b.n	80026c2 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	681a      	ldr	r2, [r3, #0]
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f022 0208 	bic.w	r2, r2, #8
 80026c0:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	7f5b      	ldrb	r3, [r3, #29]
 80026c6:	2b01      	cmp	r3, #1
 80026c8:	d108      	bne.n	80026dc <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	681a      	ldr	r2, [r3, #0]
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f042 0204 	orr.w	r2, r2, #4
 80026d8:	601a      	str	r2, [r3, #0]
 80026da:	e007      	b.n	80026ec <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	681a      	ldr	r2, [r3, #0]
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f022 0204 	bic.w	r2, r2, #4
 80026ea:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	689a      	ldr	r2, [r3, #8]
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	68db      	ldr	r3, [r3, #12]
 80026f4:	431a      	orrs	r2, r3
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	691b      	ldr	r3, [r3, #16]
 80026fa:	431a      	orrs	r2, r3
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	695b      	ldr	r3, [r3, #20]
 8002700:	ea42 0103 	orr.w	r1, r2, r3
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	685b      	ldr	r3, [r3, #4]
 8002708:	1e5a      	subs	r2, r3, #1
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	430a      	orrs	r2, r1
 8002710:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	2200      	movs	r2, #0
 8002716:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	2201      	movs	r2, #1
 800271c:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8002720:	2300      	movs	r3, #0
}
 8002722:	4618      	mov	r0, r3
 8002724:	3710      	adds	r7, #16
 8002726:	46bd      	mov	sp, r7
 8002728:	bd80      	pop	{r7, pc}

0800272a <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 800272a:	b480      	push	{r7}
 800272c:	b087      	sub	sp, #28
 800272e:	af00      	add	r7, sp, #0
 8002730:	6078      	str	r0, [r7, #4]
 8002732:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002740:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8002742:	7cfb      	ldrb	r3, [r7, #19]
 8002744:	2b01      	cmp	r3, #1
 8002746:	d003      	beq.n	8002750 <HAL_CAN_ConfigFilter+0x26>
 8002748:	7cfb      	ldrb	r3, [r7, #19]
 800274a:	2b02      	cmp	r3, #2
 800274c:	f040 80aa 	bne.w	80028a4 <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002750:	697b      	ldr	r3, [r7, #20]
 8002752:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8002756:	f043 0201 	orr.w	r2, r3, #1
 800275a:	697b      	ldr	r3, [r7, #20]
 800275c:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8002760:	683b      	ldr	r3, [r7, #0]
 8002762:	695b      	ldr	r3, [r3, #20]
 8002764:	f003 031f 	and.w	r3, r3, #31
 8002768:	2201      	movs	r2, #1
 800276a:	fa02 f303 	lsl.w	r3, r2, r3
 800276e:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8002770:	697b      	ldr	r3, [r7, #20]
 8002772:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	43db      	mvns	r3, r3
 800277a:	401a      	ands	r2, r3
 800277c:	697b      	ldr	r3, [r7, #20]
 800277e:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8002782:	683b      	ldr	r3, [r7, #0]
 8002784:	69db      	ldr	r3, [r3, #28]
 8002786:	2b00      	cmp	r3, #0
 8002788:	d123      	bne.n	80027d2 <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 800278a:	697b      	ldr	r3, [r7, #20]
 800278c:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	43db      	mvns	r3, r3
 8002794:	401a      	ands	r2, r3
 8002796:	697b      	ldr	r3, [r7, #20]
 8002798:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800279c:	683b      	ldr	r3, [r7, #0]
 800279e:	68db      	ldr	r3, [r3, #12]
 80027a0:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80027a2:	683b      	ldr	r3, [r7, #0]
 80027a4:	685b      	ldr	r3, [r3, #4]
 80027a6:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80027a8:	683a      	ldr	r2, [r7, #0]
 80027aa:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80027ac:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80027ae:	697b      	ldr	r3, [r7, #20]
 80027b0:	3248      	adds	r2, #72	@ 0x48
 80027b2:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80027b6:	683b      	ldr	r3, [r7, #0]
 80027b8:	689b      	ldr	r3, [r3, #8]
 80027ba:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80027bc:	683b      	ldr	r3, [r7, #0]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80027c2:	683b      	ldr	r3, [r7, #0]
 80027c4:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80027c6:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80027c8:	6979      	ldr	r1, [r7, #20]
 80027ca:	3348      	adds	r3, #72	@ 0x48
 80027cc:	00db      	lsls	r3, r3, #3
 80027ce:	440b      	add	r3, r1
 80027d0:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80027d2:	683b      	ldr	r3, [r7, #0]
 80027d4:	69db      	ldr	r3, [r3, #28]
 80027d6:	2b01      	cmp	r3, #1
 80027d8:	d122      	bne.n	8002820 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80027da:	697b      	ldr	r3, [r7, #20]
 80027dc:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	431a      	orrs	r2, r3
 80027e4:	697b      	ldr	r3, [r7, #20]
 80027e6:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80027ea:	683b      	ldr	r3, [r7, #0]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80027f0:	683b      	ldr	r3, [r7, #0]
 80027f2:	685b      	ldr	r3, [r3, #4]
 80027f4:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80027f6:	683a      	ldr	r2, [r7, #0]
 80027f8:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80027fa:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80027fc:	697b      	ldr	r3, [r7, #20]
 80027fe:	3248      	adds	r2, #72	@ 0x48
 8002800:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002804:	683b      	ldr	r3, [r7, #0]
 8002806:	689b      	ldr	r3, [r3, #8]
 8002808:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 800280a:	683b      	ldr	r3, [r7, #0]
 800280c:	68db      	ldr	r3, [r3, #12]
 800280e:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002810:	683b      	ldr	r3, [r7, #0]
 8002812:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002814:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002816:	6979      	ldr	r1, [r7, #20]
 8002818:	3348      	adds	r3, #72	@ 0x48
 800281a:	00db      	lsls	r3, r3, #3
 800281c:	440b      	add	r3, r1
 800281e:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8002820:	683b      	ldr	r3, [r7, #0]
 8002822:	699b      	ldr	r3, [r3, #24]
 8002824:	2b00      	cmp	r3, #0
 8002826:	d109      	bne.n	800283c <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8002828:	697b      	ldr	r3, [r7, #20]
 800282a:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	43db      	mvns	r3, r3
 8002832:	401a      	ands	r2, r3
 8002834:	697b      	ldr	r3, [r7, #20]
 8002836:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 800283a:	e007      	b.n	800284c <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 800283c:	697b      	ldr	r3, [r7, #20]
 800283e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	431a      	orrs	r2, r3
 8002846:	697b      	ldr	r3, [r7, #20]
 8002848:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 800284c:	683b      	ldr	r3, [r7, #0]
 800284e:	691b      	ldr	r3, [r3, #16]
 8002850:	2b00      	cmp	r3, #0
 8002852:	d109      	bne.n	8002868 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8002854:	697b      	ldr	r3, [r7, #20]
 8002856:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	43db      	mvns	r3, r3
 800285e:	401a      	ands	r2, r3
 8002860:	697b      	ldr	r3, [r7, #20]
 8002862:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 8002866:	e007      	b.n	8002878 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8002868:	697b      	ldr	r3, [r7, #20]
 800286a:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	431a      	orrs	r2, r3
 8002872:	697b      	ldr	r3, [r7, #20]
 8002874:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8002878:	683b      	ldr	r3, [r7, #0]
 800287a:	6a1b      	ldr	r3, [r3, #32]
 800287c:	2b01      	cmp	r3, #1
 800287e:	d107      	bne.n	8002890 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8002880:	697b      	ldr	r3, [r7, #20]
 8002882:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	431a      	orrs	r2, r3
 800288a:	697b      	ldr	r3, [r7, #20]
 800288c:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002890:	697b      	ldr	r3, [r7, #20]
 8002892:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8002896:	f023 0201 	bic.w	r2, r3, #1
 800289a:	697b      	ldr	r3, [r7, #20]
 800289c:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 80028a0:	2300      	movs	r3, #0
 80028a2:	e006      	b.n	80028b2 <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028a8:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80028b0:	2301      	movs	r3, #1
  }
}
 80028b2:	4618      	mov	r0, r3
 80028b4:	371c      	adds	r7, #28
 80028b6:	46bd      	mov	sp, r7
 80028b8:	bc80      	pop	{r7}
 80028ba:	4770      	bx	lr

080028bc <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80028bc:	b580      	push	{r7, lr}
 80028be:	b084      	sub	sp, #16
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80028ca:	b2db      	uxtb	r3, r3
 80028cc:	2b01      	cmp	r3, #1
 80028ce:	d12e      	bne.n	800292e <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	2202      	movs	r2, #2
 80028d4:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	681a      	ldr	r2, [r3, #0]
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f022 0201 	bic.w	r2, r2, #1
 80028e6:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80028e8:	f7ff fdf6 	bl	80024d8 <HAL_GetTick>
 80028ec:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80028ee:	e012      	b.n	8002916 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80028f0:	f7ff fdf2 	bl	80024d8 <HAL_GetTick>
 80028f4:	4602      	mov	r2, r0
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	1ad3      	subs	r3, r2, r3
 80028fa:	2b0a      	cmp	r3, #10
 80028fc:	d90b      	bls.n	8002916 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002902:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	2205      	movs	r2, #5
 800290e:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8002912:	2301      	movs	r3, #1
 8002914:	e012      	b.n	800293c <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	685b      	ldr	r3, [r3, #4]
 800291c:	f003 0301 	and.w	r3, r3, #1
 8002920:	2b00      	cmp	r3, #0
 8002922:	d1e5      	bne.n	80028f0 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	2200      	movs	r2, #0
 8002928:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 800292a:	2300      	movs	r3, #0
 800292c:	e006      	b.n	800293c <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002932:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800293a:	2301      	movs	r3, #1
  }
}
 800293c:	4618      	mov	r0, r3
 800293e:	3710      	adds	r7, #16
 8002940:	46bd      	mov	sp, r7
 8002942:	bd80      	pop	{r7, pc}

08002944 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8002944:	b480      	push	{r7}
 8002946:	b089      	sub	sp, #36	@ 0x24
 8002948:	af00      	add	r7, sp, #0
 800294a:	60f8      	str	r0, [r7, #12]
 800294c:	60b9      	str	r1, [r7, #8]
 800294e:	607a      	str	r2, [r7, #4]
 8002950:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002958:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	689b      	ldr	r3, [r3, #8]
 8002960:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8002962:	7ffb      	ldrb	r3, [r7, #31]
 8002964:	2b01      	cmp	r3, #1
 8002966:	d003      	beq.n	8002970 <HAL_CAN_AddTxMessage+0x2c>
 8002968:	7ffb      	ldrb	r3, [r7, #31]
 800296a:	2b02      	cmp	r3, #2
 800296c:	f040 80ad 	bne.w	8002aca <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002970:	69bb      	ldr	r3, [r7, #24]
 8002972:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002976:	2b00      	cmp	r3, #0
 8002978:	d10a      	bne.n	8002990 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800297a:	69bb      	ldr	r3, [r7, #24]
 800297c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002980:	2b00      	cmp	r3, #0
 8002982:	d105      	bne.n	8002990 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8002984:	69bb      	ldr	r3, [r7, #24]
 8002986:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800298a:	2b00      	cmp	r3, #0
 800298c:	f000 8095 	beq.w	8002aba <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8002990:	69bb      	ldr	r3, [r7, #24]
 8002992:	0e1b      	lsrs	r3, r3, #24
 8002994:	f003 0303 	and.w	r3, r3, #3
 8002998:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 800299a:	2201      	movs	r2, #1
 800299c:	697b      	ldr	r3, [r7, #20]
 800299e:	409a      	lsls	r2, r3
 80029a0:	683b      	ldr	r3, [r7, #0]
 80029a2:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 80029a4:	68bb      	ldr	r3, [r7, #8]
 80029a6:	689b      	ldr	r3, [r3, #8]
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d10d      	bne.n	80029c8 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80029ac:	68bb      	ldr	r3, [r7, #8]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 80029b2:	68bb      	ldr	r3, [r7, #8]
 80029b4:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80029b6:	68f9      	ldr	r1, [r7, #12]
 80029b8:	6809      	ldr	r1, [r1, #0]
 80029ba:	431a      	orrs	r2, r3
 80029bc:	697b      	ldr	r3, [r7, #20]
 80029be:	3318      	adds	r3, #24
 80029c0:	011b      	lsls	r3, r3, #4
 80029c2:	440b      	add	r3, r1
 80029c4:	601a      	str	r2, [r3, #0]
 80029c6:	e00f      	b.n	80029e8 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80029c8:	68bb      	ldr	r3, [r7, #8]
 80029ca:	685b      	ldr	r3, [r3, #4]
 80029cc:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 80029ce:	68bb      	ldr	r3, [r7, #8]
 80029d0:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80029d2:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 80029d4:	68bb      	ldr	r3, [r7, #8]
 80029d6:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80029d8:	68f9      	ldr	r1, [r7, #12]
 80029da:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 80029dc:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80029de:	697b      	ldr	r3, [r7, #20]
 80029e0:	3318      	adds	r3, #24
 80029e2:	011b      	lsls	r3, r3, #4
 80029e4:	440b      	add	r3, r1
 80029e6:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	6819      	ldr	r1, [r3, #0]
 80029ec:	68bb      	ldr	r3, [r7, #8]
 80029ee:	691a      	ldr	r2, [r3, #16]
 80029f0:	697b      	ldr	r3, [r7, #20]
 80029f2:	3318      	adds	r3, #24
 80029f4:	011b      	lsls	r3, r3, #4
 80029f6:	440b      	add	r3, r1
 80029f8:	3304      	adds	r3, #4
 80029fa:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 80029fc:	68bb      	ldr	r3, [r7, #8]
 80029fe:	7d1b      	ldrb	r3, [r3, #20]
 8002a00:	2b01      	cmp	r3, #1
 8002a02:	d111      	bne.n	8002a28 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	681a      	ldr	r2, [r3, #0]
 8002a08:	697b      	ldr	r3, [r7, #20]
 8002a0a:	3318      	adds	r3, #24
 8002a0c:	011b      	lsls	r3, r3, #4
 8002a0e:	4413      	add	r3, r2
 8002a10:	3304      	adds	r3, #4
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	68fa      	ldr	r2, [r7, #12]
 8002a16:	6811      	ldr	r1, [r2, #0]
 8002a18:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002a1c:	697b      	ldr	r3, [r7, #20]
 8002a1e:	3318      	adds	r3, #24
 8002a20:	011b      	lsls	r3, r3, #4
 8002a22:	440b      	add	r3, r1
 8002a24:	3304      	adds	r3, #4
 8002a26:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	3307      	adds	r3, #7
 8002a2c:	781b      	ldrb	r3, [r3, #0]
 8002a2e:	061a      	lsls	r2, r3, #24
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	3306      	adds	r3, #6
 8002a34:	781b      	ldrb	r3, [r3, #0]
 8002a36:	041b      	lsls	r3, r3, #16
 8002a38:	431a      	orrs	r2, r3
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	3305      	adds	r3, #5
 8002a3e:	781b      	ldrb	r3, [r3, #0]
 8002a40:	021b      	lsls	r3, r3, #8
 8002a42:	4313      	orrs	r3, r2
 8002a44:	687a      	ldr	r2, [r7, #4]
 8002a46:	3204      	adds	r2, #4
 8002a48:	7812      	ldrb	r2, [r2, #0]
 8002a4a:	4610      	mov	r0, r2
 8002a4c:	68fa      	ldr	r2, [r7, #12]
 8002a4e:	6811      	ldr	r1, [r2, #0]
 8002a50:	ea43 0200 	orr.w	r2, r3, r0
 8002a54:	697b      	ldr	r3, [r7, #20]
 8002a56:	011b      	lsls	r3, r3, #4
 8002a58:	440b      	add	r3, r1
 8002a5a:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 8002a5e:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	3303      	adds	r3, #3
 8002a64:	781b      	ldrb	r3, [r3, #0]
 8002a66:	061a      	lsls	r2, r3, #24
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	3302      	adds	r3, #2
 8002a6c:	781b      	ldrb	r3, [r3, #0]
 8002a6e:	041b      	lsls	r3, r3, #16
 8002a70:	431a      	orrs	r2, r3
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	3301      	adds	r3, #1
 8002a76:	781b      	ldrb	r3, [r3, #0]
 8002a78:	021b      	lsls	r3, r3, #8
 8002a7a:	4313      	orrs	r3, r2
 8002a7c:	687a      	ldr	r2, [r7, #4]
 8002a7e:	7812      	ldrb	r2, [r2, #0]
 8002a80:	4610      	mov	r0, r2
 8002a82:	68fa      	ldr	r2, [r7, #12]
 8002a84:	6811      	ldr	r1, [r2, #0]
 8002a86:	ea43 0200 	orr.w	r2, r3, r0
 8002a8a:	697b      	ldr	r3, [r7, #20]
 8002a8c:	011b      	lsls	r3, r3, #4
 8002a8e:	440b      	add	r3, r1
 8002a90:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 8002a94:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	681a      	ldr	r2, [r3, #0]
 8002a9a:	697b      	ldr	r3, [r7, #20]
 8002a9c:	3318      	adds	r3, #24
 8002a9e:	011b      	lsls	r3, r3, #4
 8002aa0:	4413      	add	r3, r2
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	68fa      	ldr	r2, [r7, #12]
 8002aa6:	6811      	ldr	r1, [r2, #0]
 8002aa8:	f043 0201 	orr.w	r2, r3, #1
 8002aac:	697b      	ldr	r3, [r7, #20]
 8002aae:	3318      	adds	r3, #24
 8002ab0:	011b      	lsls	r3, r3, #4
 8002ab2:	440b      	add	r3, r1
 8002ab4:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8002ab6:	2300      	movs	r3, #0
 8002ab8:	e00e      	b.n	8002ad8 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002abe:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 8002ac6:	2301      	movs	r3, #1
 8002ac8:	e006      	b.n	8002ad8 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ace:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002ad6:	2301      	movs	r3, #1
  }
}
 8002ad8:	4618      	mov	r0, r3
 8002ada:	3724      	adds	r7, #36	@ 0x24
 8002adc:	46bd      	mov	sp, r7
 8002ade:	bc80      	pop	{r7}
 8002ae0:	4770      	bx	lr

08002ae2 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8002ae2:	b480      	push	{r7}
 8002ae4:	b087      	sub	sp, #28
 8002ae6:	af00      	add	r7, sp, #0
 8002ae8:	60f8      	str	r0, [r7, #12]
 8002aea:	60b9      	str	r1, [r7, #8]
 8002aec:	607a      	str	r2, [r7, #4]
 8002aee:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002af6:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8002af8:	7dfb      	ldrb	r3, [r7, #23]
 8002afa:	2b01      	cmp	r3, #1
 8002afc:	d003      	beq.n	8002b06 <HAL_CAN_GetRxMessage+0x24>
 8002afe:	7dfb      	ldrb	r3, [r7, #23]
 8002b00:	2b02      	cmp	r3, #2
 8002b02:	f040 8103 	bne.w	8002d0c <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002b06:	68bb      	ldr	r3, [r7, #8]
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d10e      	bne.n	8002b2a <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	68db      	ldr	r3, [r3, #12]
 8002b12:	f003 0303 	and.w	r3, r3, #3
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d116      	bne.n	8002b48 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b1e:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8002b26:	2301      	movs	r3, #1
 8002b28:	e0f7      	b.n	8002d1a <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	691b      	ldr	r3, [r3, #16]
 8002b30:	f003 0303 	and.w	r3, r3, #3
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d107      	bne.n	8002b48 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b3c:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8002b44:	2301      	movs	r3, #1
 8002b46:	e0e8      	b.n	8002d1a <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	681a      	ldr	r2, [r3, #0]
 8002b4c:	68bb      	ldr	r3, [r7, #8]
 8002b4e:	331b      	adds	r3, #27
 8002b50:	011b      	lsls	r3, r3, #4
 8002b52:	4413      	add	r3, r2
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f003 0204 	and.w	r2, r3, #4
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	689b      	ldr	r3, [r3, #8]
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d10c      	bne.n	8002b80 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	681a      	ldr	r2, [r3, #0]
 8002b6a:	68bb      	ldr	r3, [r7, #8]
 8002b6c:	331b      	adds	r3, #27
 8002b6e:	011b      	lsls	r3, r3, #4
 8002b70:	4413      	add	r3, r2
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	0d5b      	lsrs	r3, r3, #21
 8002b76:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	601a      	str	r2, [r3, #0]
 8002b7e:	e00b      	b.n	8002b98 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	681a      	ldr	r2, [r3, #0]
 8002b84:	68bb      	ldr	r3, [r7, #8]
 8002b86:	331b      	adds	r3, #27
 8002b88:	011b      	lsls	r3, r3, #4
 8002b8a:	4413      	add	r3, r2
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	08db      	lsrs	r3, r3, #3
 8002b90:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	681a      	ldr	r2, [r3, #0]
 8002b9c:	68bb      	ldr	r3, [r7, #8]
 8002b9e:	331b      	adds	r3, #27
 8002ba0:	011b      	lsls	r3, r3, #4
 8002ba2:	4413      	add	r3, r2
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f003 0202 	and.w	r2, r3, #2
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	681a      	ldr	r2, [r3, #0]
 8002bb2:	68bb      	ldr	r3, [r7, #8]
 8002bb4:	331b      	adds	r3, #27
 8002bb6:	011b      	lsls	r3, r3, #4
 8002bb8:	4413      	add	r3, r2
 8002bba:	3304      	adds	r3, #4
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f003 0308 	and.w	r3, r3, #8
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d003      	beq.n	8002bce <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	2208      	movs	r2, #8
 8002bca:	611a      	str	r2, [r3, #16]
 8002bcc:	e00b      	b.n	8002be6 <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	681a      	ldr	r2, [r3, #0]
 8002bd2:	68bb      	ldr	r3, [r7, #8]
 8002bd4:	331b      	adds	r3, #27
 8002bd6:	011b      	lsls	r3, r3, #4
 8002bd8:	4413      	add	r3, r2
 8002bda:	3304      	adds	r3, #4
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f003 020f 	and.w	r2, r3, #15
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	681a      	ldr	r2, [r3, #0]
 8002bea:	68bb      	ldr	r3, [r7, #8]
 8002bec:	331b      	adds	r3, #27
 8002bee:	011b      	lsls	r3, r3, #4
 8002bf0:	4413      	add	r3, r2
 8002bf2:	3304      	adds	r3, #4
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	0a1b      	lsrs	r3, r3, #8
 8002bf8:	b2da      	uxtb	r2, r3
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	681a      	ldr	r2, [r3, #0]
 8002c02:	68bb      	ldr	r3, [r7, #8]
 8002c04:	331b      	adds	r3, #27
 8002c06:	011b      	lsls	r3, r3, #4
 8002c08:	4413      	add	r3, r2
 8002c0a:	3304      	adds	r3, #4
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	0c1b      	lsrs	r3, r3, #16
 8002c10:	b29a      	uxth	r2, r3
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	681a      	ldr	r2, [r3, #0]
 8002c1a:	68bb      	ldr	r3, [r7, #8]
 8002c1c:	011b      	lsls	r3, r3, #4
 8002c1e:	4413      	add	r3, r2
 8002c20:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	b2da      	uxtb	r2, r3
 8002c28:	683b      	ldr	r3, [r7, #0]
 8002c2a:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	681a      	ldr	r2, [r3, #0]
 8002c30:	68bb      	ldr	r3, [r7, #8]
 8002c32:	011b      	lsls	r3, r3, #4
 8002c34:	4413      	add	r3, r2
 8002c36:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	0a1a      	lsrs	r2, r3, #8
 8002c3e:	683b      	ldr	r3, [r7, #0]
 8002c40:	3301      	adds	r3, #1
 8002c42:	b2d2      	uxtb	r2, r2
 8002c44:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	681a      	ldr	r2, [r3, #0]
 8002c4a:	68bb      	ldr	r3, [r7, #8]
 8002c4c:	011b      	lsls	r3, r3, #4
 8002c4e:	4413      	add	r3, r2
 8002c50:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	0c1a      	lsrs	r2, r3, #16
 8002c58:	683b      	ldr	r3, [r7, #0]
 8002c5a:	3302      	adds	r3, #2
 8002c5c:	b2d2      	uxtb	r2, r2
 8002c5e:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	681a      	ldr	r2, [r3, #0]
 8002c64:	68bb      	ldr	r3, [r7, #8]
 8002c66:	011b      	lsls	r3, r3, #4
 8002c68:	4413      	add	r3, r2
 8002c6a:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	0e1a      	lsrs	r2, r3, #24
 8002c72:	683b      	ldr	r3, [r7, #0]
 8002c74:	3303      	adds	r3, #3
 8002c76:	b2d2      	uxtb	r2, r2
 8002c78:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	681a      	ldr	r2, [r3, #0]
 8002c7e:	68bb      	ldr	r3, [r7, #8]
 8002c80:	011b      	lsls	r3, r3, #4
 8002c82:	4413      	add	r3, r2
 8002c84:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8002c88:	681a      	ldr	r2, [r3, #0]
 8002c8a:	683b      	ldr	r3, [r7, #0]
 8002c8c:	3304      	adds	r3, #4
 8002c8e:	b2d2      	uxtb	r2, r2
 8002c90:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	681a      	ldr	r2, [r3, #0]
 8002c96:	68bb      	ldr	r3, [r7, #8]
 8002c98:	011b      	lsls	r3, r3, #4
 8002c9a:	4413      	add	r3, r2
 8002c9c:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	0a1a      	lsrs	r2, r3, #8
 8002ca4:	683b      	ldr	r3, [r7, #0]
 8002ca6:	3305      	adds	r3, #5
 8002ca8:	b2d2      	uxtb	r2, r2
 8002caa:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	681a      	ldr	r2, [r3, #0]
 8002cb0:	68bb      	ldr	r3, [r7, #8]
 8002cb2:	011b      	lsls	r3, r3, #4
 8002cb4:	4413      	add	r3, r2
 8002cb6:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	0c1a      	lsrs	r2, r3, #16
 8002cbe:	683b      	ldr	r3, [r7, #0]
 8002cc0:	3306      	adds	r3, #6
 8002cc2:	b2d2      	uxtb	r2, r2
 8002cc4:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	681a      	ldr	r2, [r3, #0]
 8002cca:	68bb      	ldr	r3, [r7, #8]
 8002ccc:	011b      	lsls	r3, r3, #4
 8002cce:	4413      	add	r3, r2
 8002cd0:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	0e1a      	lsrs	r2, r3, #24
 8002cd8:	683b      	ldr	r3, [r7, #0]
 8002cda:	3307      	adds	r3, #7
 8002cdc:	b2d2      	uxtb	r2, r2
 8002cde:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002ce0:	68bb      	ldr	r3, [r7, #8]
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d108      	bne.n	8002cf8 <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	68da      	ldr	r2, [r3, #12]
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f042 0220 	orr.w	r2, r2, #32
 8002cf4:	60da      	str	r2, [r3, #12]
 8002cf6:	e007      	b.n	8002d08 <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	691a      	ldr	r2, [r3, #16]
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f042 0220 	orr.w	r2, r2, #32
 8002d06:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8002d08:	2300      	movs	r3, #0
 8002d0a:	e006      	b.n	8002d1a <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d10:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002d18:	2301      	movs	r3, #1
  }
}
 8002d1a:	4618      	mov	r0, r3
 8002d1c:	371c      	adds	r7, #28
 8002d1e:	46bd      	mov	sp, r7
 8002d20:	bc80      	pop	{r7}
 8002d22:	4770      	bx	lr

08002d24 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8002d24:	b480      	push	{r7}
 8002d26:	b085      	sub	sp, #20
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	6078      	str	r0, [r7, #4]
 8002d2c:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002d34:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8002d36:	7bfb      	ldrb	r3, [r7, #15]
 8002d38:	2b01      	cmp	r3, #1
 8002d3a:	d002      	beq.n	8002d42 <HAL_CAN_ActivateNotification+0x1e>
 8002d3c:	7bfb      	ldrb	r3, [r7, #15]
 8002d3e:	2b02      	cmp	r3, #2
 8002d40:	d109      	bne.n	8002d56 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	6959      	ldr	r1, [r3, #20]
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	683a      	ldr	r2, [r7, #0]
 8002d4e:	430a      	orrs	r2, r1
 8002d50:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8002d52:	2300      	movs	r3, #0
 8002d54:	e006      	b.n	8002d64 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d5a:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002d62:	2301      	movs	r3, #1
  }
}
 8002d64:	4618      	mov	r0, r3
 8002d66:	3714      	adds	r7, #20
 8002d68:	46bd      	mov	sp, r7
 8002d6a:	bc80      	pop	{r7}
 8002d6c:	4770      	bx	lr

08002d6e <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8002d6e:	b580      	push	{r7, lr}
 8002d70:	b08a      	sub	sp, #40	@ 0x28
 8002d72:	af00      	add	r7, sp, #0
 8002d74:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8002d76:	2300      	movs	r3, #0
 8002d78:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	695b      	ldr	r3, [r3, #20]
 8002d80:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	685b      	ldr	r3, [r3, #4]
 8002d88:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	689b      	ldr	r3, [r3, #8]
 8002d90:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	68db      	ldr	r3, [r3, #12]
 8002d98:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	691b      	ldr	r3, [r3, #16]
 8002da0:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	699b      	ldr	r3, [r3, #24]
 8002da8:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8002daa:	6a3b      	ldr	r3, [r7, #32]
 8002dac:	f003 0301 	and.w	r3, r3, #1
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d07c      	beq.n	8002eae <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8002db4:	69bb      	ldr	r3, [r7, #24]
 8002db6:	f003 0301 	and.w	r3, r3, #1
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d023      	beq.n	8002e06 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	2201      	movs	r2, #1
 8002dc4:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8002dc6:	69bb      	ldr	r3, [r7, #24]
 8002dc8:	f003 0302 	and.w	r3, r3, #2
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d003      	beq.n	8002dd8 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8002dd0:	6878      	ldr	r0, [r7, #4]
 8002dd2:	f000 f983 	bl	80030dc <HAL_CAN_TxMailbox0CompleteCallback>
 8002dd6:	e016      	b.n	8002e06 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8002dd8:	69bb      	ldr	r3, [r7, #24]
 8002dda:	f003 0304 	and.w	r3, r3, #4
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d004      	beq.n	8002dec <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8002de2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002de4:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002de8:	627b      	str	r3, [r7, #36]	@ 0x24
 8002dea:	e00c      	b.n	8002e06 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8002dec:	69bb      	ldr	r3, [r7, #24]
 8002dee:	f003 0308 	and.w	r3, r3, #8
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d004      	beq.n	8002e00 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8002df6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002df8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002dfc:	627b      	str	r3, [r7, #36]	@ 0x24
 8002dfe:	e002      	b.n	8002e06 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8002e00:	6878      	ldr	r0, [r7, #4]
 8002e02:	f000 f986 	bl	8003112 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8002e06:	69bb      	ldr	r3, [r7, #24]
 8002e08:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d024      	beq.n	8002e5a <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002e18:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8002e1a:	69bb      	ldr	r3, [r7, #24]
 8002e1c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d003      	beq.n	8002e2c <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8002e24:	6878      	ldr	r0, [r7, #4]
 8002e26:	f000 f962 	bl	80030ee <HAL_CAN_TxMailbox1CompleteCallback>
 8002e2a:	e016      	b.n	8002e5a <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8002e2c:	69bb      	ldr	r3, [r7, #24]
 8002e2e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d004      	beq.n	8002e40 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8002e36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e38:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002e3c:	627b      	str	r3, [r7, #36]	@ 0x24
 8002e3e:	e00c      	b.n	8002e5a <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8002e40:	69bb      	ldr	r3, [r7, #24]
 8002e42:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d004      	beq.n	8002e54 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8002e4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e4c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002e50:	627b      	str	r3, [r7, #36]	@ 0x24
 8002e52:	e002      	b.n	8002e5a <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8002e54:	6878      	ldr	r0, [r7, #4]
 8002e56:	f000 f965 	bl	8003124 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8002e5a:	69bb      	ldr	r3, [r7, #24]
 8002e5c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d024      	beq.n	8002eae <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8002e6c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8002e6e:	69bb      	ldr	r3, [r7, #24]
 8002e70:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d003      	beq.n	8002e80 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8002e78:	6878      	ldr	r0, [r7, #4]
 8002e7a:	f000 f941 	bl	8003100 <HAL_CAN_TxMailbox2CompleteCallback>
 8002e7e:	e016      	b.n	8002eae <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8002e80:	69bb      	ldr	r3, [r7, #24]
 8002e82:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d004      	beq.n	8002e94 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8002e8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e8c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002e90:	627b      	str	r3, [r7, #36]	@ 0x24
 8002e92:	e00c      	b.n	8002eae <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8002e94:	69bb      	ldr	r3, [r7, #24]
 8002e96:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d004      	beq.n	8002ea8 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8002e9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ea0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002ea4:	627b      	str	r3, [r7, #36]	@ 0x24
 8002ea6:	e002      	b.n	8002eae <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8002ea8:	6878      	ldr	r0, [r7, #4]
 8002eaa:	f000 f944 	bl	8003136 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8002eae:	6a3b      	ldr	r3, [r7, #32]
 8002eb0:	f003 0308 	and.w	r3, r3, #8
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d00c      	beq.n	8002ed2 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8002eb8:	697b      	ldr	r3, [r7, #20]
 8002eba:	f003 0310 	and.w	r3, r3, #16
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d007      	beq.n	8002ed2 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8002ec2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ec4:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002ec8:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	2210      	movs	r2, #16
 8002ed0:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8002ed2:	6a3b      	ldr	r3, [r7, #32]
 8002ed4:	f003 0304 	and.w	r3, r3, #4
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d00b      	beq.n	8002ef4 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8002edc:	697b      	ldr	r3, [r7, #20]
 8002ede:	f003 0308 	and.w	r3, r3, #8
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d006      	beq.n	8002ef4 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	2208      	movs	r2, #8
 8002eec:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8002eee:	6878      	ldr	r0, [r7, #4]
 8002ef0:	f000 f92a 	bl	8003148 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8002ef4:	6a3b      	ldr	r3, [r7, #32]
 8002ef6:	f003 0302 	and.w	r3, r3, #2
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d009      	beq.n	8002f12 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	68db      	ldr	r3, [r3, #12]
 8002f04:	f003 0303 	and.w	r3, r3, #3
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d002      	beq.n	8002f12 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8002f0c:	6878      	ldr	r0, [r7, #4]
 8002f0e:	f7fe fc11 	bl	8001734 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8002f12:	6a3b      	ldr	r3, [r7, #32]
 8002f14:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d00c      	beq.n	8002f36 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8002f1c:	693b      	ldr	r3, [r7, #16]
 8002f1e:	f003 0310 	and.w	r3, r3, #16
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d007      	beq.n	8002f36 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8002f26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f28:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002f2c:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	2210      	movs	r2, #16
 8002f34:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8002f36:	6a3b      	ldr	r3, [r7, #32]
 8002f38:	f003 0320 	and.w	r3, r3, #32
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d00b      	beq.n	8002f58 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8002f40:	693b      	ldr	r3, [r7, #16]
 8002f42:	f003 0308 	and.w	r3, r3, #8
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d006      	beq.n	8002f58 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	2208      	movs	r2, #8
 8002f50:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8002f52:	6878      	ldr	r0, [r7, #4]
 8002f54:	f000 f90a 	bl	800316c <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8002f58:	6a3b      	ldr	r3, [r7, #32]
 8002f5a:	f003 0310 	and.w	r3, r3, #16
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d009      	beq.n	8002f76 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	691b      	ldr	r3, [r3, #16]
 8002f68:	f003 0303 	and.w	r3, r3, #3
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d002      	beq.n	8002f76 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8002f70:	6878      	ldr	r0, [r7, #4]
 8002f72:	f000 f8f2 	bl	800315a <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8002f76:	6a3b      	ldr	r3, [r7, #32]
 8002f78:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d00b      	beq.n	8002f98 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8002f80:	69fb      	ldr	r3, [r7, #28]
 8002f82:	f003 0310 	and.w	r3, r3, #16
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d006      	beq.n	8002f98 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	2210      	movs	r2, #16
 8002f90:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8002f92:	6878      	ldr	r0, [r7, #4]
 8002f94:	f000 f8f3 	bl	800317e <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8002f98:	6a3b      	ldr	r3, [r7, #32]
 8002f9a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d00b      	beq.n	8002fba <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8002fa2:	69fb      	ldr	r3, [r7, #28]
 8002fa4:	f003 0308 	and.w	r3, r3, #8
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d006      	beq.n	8002fba <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	2208      	movs	r2, #8
 8002fb2:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8002fb4:	6878      	ldr	r0, [r7, #4]
 8002fb6:	f000 f8eb 	bl	8003190 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8002fba:	6a3b      	ldr	r3, [r7, #32]
 8002fbc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d07b      	beq.n	80030bc <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8002fc4:	69fb      	ldr	r3, [r7, #28]
 8002fc6:	f003 0304 	and.w	r3, r3, #4
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d072      	beq.n	80030b4 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002fce:	6a3b      	ldr	r3, [r7, #32]
 8002fd0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d008      	beq.n	8002fea <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d003      	beq.n	8002fea <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8002fe2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fe4:	f043 0301 	orr.w	r3, r3, #1
 8002fe8:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002fea:	6a3b      	ldr	r3, [r7, #32]
 8002fec:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d008      	beq.n	8003006 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d003      	beq.n	8003006 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8002ffe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003000:	f043 0302 	orr.w	r3, r3, #2
 8003004:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8003006:	6a3b      	ldr	r3, [r7, #32]
 8003008:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800300c:	2b00      	cmp	r3, #0
 800300e:	d008      	beq.n	8003022 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8003016:	2b00      	cmp	r3, #0
 8003018:	d003      	beq.n	8003022 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 800301a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800301c:	f043 0304 	orr.w	r3, r3, #4
 8003020:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8003022:	6a3b      	ldr	r3, [r7, #32]
 8003024:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003028:	2b00      	cmp	r3, #0
 800302a:	d043      	beq.n	80030b4 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8003032:	2b00      	cmp	r3, #0
 8003034:	d03e      	beq.n	80030b4 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800303c:	2b60      	cmp	r3, #96	@ 0x60
 800303e:	d02b      	beq.n	8003098 <HAL_CAN_IRQHandler+0x32a>
 8003040:	2b60      	cmp	r3, #96	@ 0x60
 8003042:	d82e      	bhi.n	80030a2 <HAL_CAN_IRQHandler+0x334>
 8003044:	2b50      	cmp	r3, #80	@ 0x50
 8003046:	d022      	beq.n	800308e <HAL_CAN_IRQHandler+0x320>
 8003048:	2b50      	cmp	r3, #80	@ 0x50
 800304a:	d82a      	bhi.n	80030a2 <HAL_CAN_IRQHandler+0x334>
 800304c:	2b40      	cmp	r3, #64	@ 0x40
 800304e:	d019      	beq.n	8003084 <HAL_CAN_IRQHandler+0x316>
 8003050:	2b40      	cmp	r3, #64	@ 0x40
 8003052:	d826      	bhi.n	80030a2 <HAL_CAN_IRQHandler+0x334>
 8003054:	2b30      	cmp	r3, #48	@ 0x30
 8003056:	d010      	beq.n	800307a <HAL_CAN_IRQHandler+0x30c>
 8003058:	2b30      	cmp	r3, #48	@ 0x30
 800305a:	d822      	bhi.n	80030a2 <HAL_CAN_IRQHandler+0x334>
 800305c:	2b10      	cmp	r3, #16
 800305e:	d002      	beq.n	8003066 <HAL_CAN_IRQHandler+0x2f8>
 8003060:	2b20      	cmp	r3, #32
 8003062:	d005      	beq.n	8003070 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8003064:	e01d      	b.n	80030a2 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8003066:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003068:	f043 0308 	orr.w	r3, r3, #8
 800306c:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800306e:	e019      	b.n	80030a4 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8003070:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003072:	f043 0310 	orr.w	r3, r3, #16
 8003076:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8003078:	e014      	b.n	80030a4 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 800307a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800307c:	f043 0320 	orr.w	r3, r3, #32
 8003080:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8003082:	e00f      	b.n	80030a4 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8003084:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003086:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800308a:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800308c:	e00a      	b.n	80030a4 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 800308e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003090:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003094:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8003096:	e005      	b.n	80030a4 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8003098:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800309a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800309e:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80030a0:	e000      	b.n	80030a4 <HAL_CAN_IRQHandler+0x336>
            break;
 80030a2:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	699a      	ldr	r2, [r3, #24]
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 80030b2:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	2204      	movs	r2, #4
 80030ba:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80030bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d008      	beq.n	80030d4 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80030c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030c8:	431a      	orrs	r2, r3
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80030ce:	6878      	ldr	r0, [r7, #4]
 80030d0:	f000 f867 	bl	80031a2 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80030d4:	bf00      	nop
 80030d6:	3728      	adds	r7, #40	@ 0x28
 80030d8:	46bd      	mov	sp, r7
 80030da:	bd80      	pop	{r7, pc}

080030dc <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80030dc:	b480      	push	{r7}
 80030de:	b083      	sub	sp, #12
 80030e0:	af00      	add	r7, sp, #0
 80030e2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 80030e4:	bf00      	nop
 80030e6:	370c      	adds	r7, #12
 80030e8:	46bd      	mov	sp, r7
 80030ea:	bc80      	pop	{r7}
 80030ec:	4770      	bx	lr

080030ee <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80030ee:	b480      	push	{r7}
 80030f0:	b083      	sub	sp, #12
 80030f2:	af00      	add	r7, sp, #0
 80030f4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80030f6:	bf00      	nop
 80030f8:	370c      	adds	r7, #12
 80030fa:	46bd      	mov	sp, r7
 80030fc:	bc80      	pop	{r7}
 80030fe:	4770      	bx	lr

08003100 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003100:	b480      	push	{r7}
 8003102:	b083      	sub	sp, #12
 8003104:	af00      	add	r7, sp, #0
 8003106:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8003108:	bf00      	nop
 800310a:	370c      	adds	r7, #12
 800310c:	46bd      	mov	sp, r7
 800310e:	bc80      	pop	{r7}
 8003110:	4770      	bx	lr

08003112 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003112:	b480      	push	{r7}
 8003114:	b083      	sub	sp, #12
 8003116:	af00      	add	r7, sp, #0
 8003118:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 800311a:	bf00      	nop
 800311c:	370c      	adds	r7, #12
 800311e:	46bd      	mov	sp, r7
 8003120:	bc80      	pop	{r7}
 8003122:	4770      	bx	lr

08003124 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003124:	b480      	push	{r7}
 8003126:	b083      	sub	sp, #12
 8003128:	af00      	add	r7, sp, #0
 800312a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 800312c:	bf00      	nop
 800312e:	370c      	adds	r7, #12
 8003130:	46bd      	mov	sp, r7
 8003132:	bc80      	pop	{r7}
 8003134:	4770      	bx	lr

08003136 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003136:	b480      	push	{r7}
 8003138:	b083      	sub	sp, #12
 800313a:	af00      	add	r7, sp, #0
 800313c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 800313e:	bf00      	nop
 8003140:	370c      	adds	r7, #12
 8003142:	46bd      	mov	sp, r7
 8003144:	bc80      	pop	{r7}
 8003146:	4770      	bx	lr

08003148 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8003148:	b480      	push	{r7}
 800314a:	b083      	sub	sp, #12
 800314c:	af00      	add	r7, sp, #0
 800314e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8003150:	bf00      	nop
 8003152:	370c      	adds	r7, #12
 8003154:	46bd      	mov	sp, r7
 8003156:	bc80      	pop	{r7}
 8003158:	4770      	bx	lr

0800315a <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800315a:	b480      	push	{r7}
 800315c:	b083      	sub	sp, #12
 800315e:	af00      	add	r7, sp, #0
 8003160:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8003162:	bf00      	nop
 8003164:	370c      	adds	r7, #12
 8003166:	46bd      	mov	sp, r7
 8003168:	bc80      	pop	{r7}
 800316a:	4770      	bx	lr

0800316c <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 800316c:	b480      	push	{r7}
 800316e:	b083      	sub	sp, #12
 8003170:	af00      	add	r7, sp, #0
 8003172:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8003174:	bf00      	nop
 8003176:	370c      	adds	r7, #12
 8003178:	46bd      	mov	sp, r7
 800317a:	bc80      	pop	{r7}
 800317c:	4770      	bx	lr

0800317e <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 800317e:	b480      	push	{r7}
 8003180:	b083      	sub	sp, #12
 8003182:	af00      	add	r7, sp, #0
 8003184:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8003186:	bf00      	nop
 8003188:	370c      	adds	r7, #12
 800318a:	46bd      	mov	sp, r7
 800318c:	bc80      	pop	{r7}
 800318e:	4770      	bx	lr

08003190 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8003190:	b480      	push	{r7}
 8003192:	b083      	sub	sp, #12
 8003194:	af00      	add	r7, sp, #0
 8003196:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8003198:	bf00      	nop
 800319a:	370c      	adds	r7, #12
 800319c:	46bd      	mov	sp, r7
 800319e:	bc80      	pop	{r7}
 80031a0:	4770      	bx	lr

080031a2 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80031a2:	b480      	push	{r7}
 80031a4:	b083      	sub	sp, #12
 80031a6:	af00      	add	r7, sp, #0
 80031a8:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80031aa:	bf00      	nop
 80031ac:	370c      	adds	r7, #12
 80031ae:	46bd      	mov	sp, r7
 80031b0:	bc80      	pop	{r7}
 80031b2:	4770      	bx	lr

080031b4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80031b4:	b480      	push	{r7}
 80031b6:	b085      	sub	sp, #20
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	f003 0307 	and.w	r3, r3, #7
 80031c2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80031c4:	4b0c      	ldr	r3, [pc, #48]	@ (80031f8 <__NVIC_SetPriorityGrouping+0x44>)
 80031c6:	68db      	ldr	r3, [r3, #12]
 80031c8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80031ca:	68ba      	ldr	r2, [r7, #8]
 80031cc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80031d0:	4013      	ands	r3, r2
 80031d2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80031d8:	68bb      	ldr	r3, [r7, #8]
 80031da:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80031dc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80031e0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80031e4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80031e6:	4a04      	ldr	r2, [pc, #16]	@ (80031f8 <__NVIC_SetPriorityGrouping+0x44>)
 80031e8:	68bb      	ldr	r3, [r7, #8]
 80031ea:	60d3      	str	r3, [r2, #12]
}
 80031ec:	bf00      	nop
 80031ee:	3714      	adds	r7, #20
 80031f0:	46bd      	mov	sp, r7
 80031f2:	bc80      	pop	{r7}
 80031f4:	4770      	bx	lr
 80031f6:	bf00      	nop
 80031f8:	e000ed00 	.word	0xe000ed00

080031fc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80031fc:	b480      	push	{r7}
 80031fe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003200:	4b04      	ldr	r3, [pc, #16]	@ (8003214 <__NVIC_GetPriorityGrouping+0x18>)
 8003202:	68db      	ldr	r3, [r3, #12]
 8003204:	0a1b      	lsrs	r3, r3, #8
 8003206:	f003 0307 	and.w	r3, r3, #7
}
 800320a:	4618      	mov	r0, r3
 800320c:	46bd      	mov	sp, r7
 800320e:	bc80      	pop	{r7}
 8003210:	4770      	bx	lr
 8003212:	bf00      	nop
 8003214:	e000ed00 	.word	0xe000ed00

08003218 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003218:	b480      	push	{r7}
 800321a:	b083      	sub	sp, #12
 800321c:	af00      	add	r7, sp, #0
 800321e:	4603      	mov	r3, r0
 8003220:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003222:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003226:	2b00      	cmp	r3, #0
 8003228:	db0b      	blt.n	8003242 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800322a:	79fb      	ldrb	r3, [r7, #7]
 800322c:	f003 021f 	and.w	r2, r3, #31
 8003230:	4906      	ldr	r1, [pc, #24]	@ (800324c <__NVIC_EnableIRQ+0x34>)
 8003232:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003236:	095b      	lsrs	r3, r3, #5
 8003238:	2001      	movs	r0, #1
 800323a:	fa00 f202 	lsl.w	r2, r0, r2
 800323e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003242:	bf00      	nop
 8003244:	370c      	adds	r7, #12
 8003246:	46bd      	mov	sp, r7
 8003248:	bc80      	pop	{r7}
 800324a:	4770      	bx	lr
 800324c:	e000e100 	.word	0xe000e100

08003250 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003250:	b480      	push	{r7}
 8003252:	b083      	sub	sp, #12
 8003254:	af00      	add	r7, sp, #0
 8003256:	4603      	mov	r3, r0
 8003258:	6039      	str	r1, [r7, #0]
 800325a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800325c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003260:	2b00      	cmp	r3, #0
 8003262:	db0a      	blt.n	800327a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003264:	683b      	ldr	r3, [r7, #0]
 8003266:	b2da      	uxtb	r2, r3
 8003268:	490c      	ldr	r1, [pc, #48]	@ (800329c <__NVIC_SetPriority+0x4c>)
 800326a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800326e:	0112      	lsls	r2, r2, #4
 8003270:	b2d2      	uxtb	r2, r2
 8003272:	440b      	add	r3, r1
 8003274:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003278:	e00a      	b.n	8003290 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800327a:	683b      	ldr	r3, [r7, #0]
 800327c:	b2da      	uxtb	r2, r3
 800327e:	4908      	ldr	r1, [pc, #32]	@ (80032a0 <__NVIC_SetPriority+0x50>)
 8003280:	79fb      	ldrb	r3, [r7, #7]
 8003282:	f003 030f 	and.w	r3, r3, #15
 8003286:	3b04      	subs	r3, #4
 8003288:	0112      	lsls	r2, r2, #4
 800328a:	b2d2      	uxtb	r2, r2
 800328c:	440b      	add	r3, r1
 800328e:	761a      	strb	r2, [r3, #24]
}
 8003290:	bf00      	nop
 8003292:	370c      	adds	r7, #12
 8003294:	46bd      	mov	sp, r7
 8003296:	bc80      	pop	{r7}
 8003298:	4770      	bx	lr
 800329a:	bf00      	nop
 800329c:	e000e100 	.word	0xe000e100
 80032a0:	e000ed00 	.word	0xe000ed00

080032a4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80032a4:	b480      	push	{r7}
 80032a6:	b089      	sub	sp, #36	@ 0x24
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	60f8      	str	r0, [r7, #12]
 80032ac:	60b9      	str	r1, [r7, #8]
 80032ae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	f003 0307 	and.w	r3, r3, #7
 80032b6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80032b8:	69fb      	ldr	r3, [r7, #28]
 80032ba:	f1c3 0307 	rsb	r3, r3, #7
 80032be:	2b04      	cmp	r3, #4
 80032c0:	bf28      	it	cs
 80032c2:	2304      	movcs	r3, #4
 80032c4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80032c6:	69fb      	ldr	r3, [r7, #28]
 80032c8:	3304      	adds	r3, #4
 80032ca:	2b06      	cmp	r3, #6
 80032cc:	d902      	bls.n	80032d4 <NVIC_EncodePriority+0x30>
 80032ce:	69fb      	ldr	r3, [r7, #28]
 80032d0:	3b03      	subs	r3, #3
 80032d2:	e000      	b.n	80032d6 <NVIC_EncodePriority+0x32>
 80032d4:	2300      	movs	r3, #0
 80032d6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80032d8:	f04f 32ff 	mov.w	r2, #4294967295
 80032dc:	69bb      	ldr	r3, [r7, #24]
 80032de:	fa02 f303 	lsl.w	r3, r2, r3
 80032e2:	43da      	mvns	r2, r3
 80032e4:	68bb      	ldr	r3, [r7, #8]
 80032e6:	401a      	ands	r2, r3
 80032e8:	697b      	ldr	r3, [r7, #20]
 80032ea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80032ec:	f04f 31ff 	mov.w	r1, #4294967295
 80032f0:	697b      	ldr	r3, [r7, #20]
 80032f2:	fa01 f303 	lsl.w	r3, r1, r3
 80032f6:	43d9      	mvns	r1, r3
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80032fc:	4313      	orrs	r3, r2
         );
}
 80032fe:	4618      	mov	r0, r3
 8003300:	3724      	adds	r7, #36	@ 0x24
 8003302:	46bd      	mov	sp, r7
 8003304:	bc80      	pop	{r7}
 8003306:	4770      	bx	lr

08003308 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003308:	b580      	push	{r7, lr}
 800330a:	b082      	sub	sp, #8
 800330c:	af00      	add	r7, sp, #0
 800330e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	3b01      	subs	r3, #1
 8003314:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003318:	d301      	bcc.n	800331e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800331a:	2301      	movs	r3, #1
 800331c:	e00f      	b.n	800333e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800331e:	4a0a      	ldr	r2, [pc, #40]	@ (8003348 <SysTick_Config+0x40>)
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	3b01      	subs	r3, #1
 8003324:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003326:	210f      	movs	r1, #15
 8003328:	f04f 30ff 	mov.w	r0, #4294967295
 800332c:	f7ff ff90 	bl	8003250 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003330:	4b05      	ldr	r3, [pc, #20]	@ (8003348 <SysTick_Config+0x40>)
 8003332:	2200      	movs	r2, #0
 8003334:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003336:	4b04      	ldr	r3, [pc, #16]	@ (8003348 <SysTick_Config+0x40>)
 8003338:	2207      	movs	r2, #7
 800333a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800333c:	2300      	movs	r3, #0
}
 800333e:	4618      	mov	r0, r3
 8003340:	3708      	adds	r7, #8
 8003342:	46bd      	mov	sp, r7
 8003344:	bd80      	pop	{r7, pc}
 8003346:	bf00      	nop
 8003348:	e000e010 	.word	0xe000e010

0800334c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800334c:	b580      	push	{r7, lr}
 800334e:	b082      	sub	sp, #8
 8003350:	af00      	add	r7, sp, #0
 8003352:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003354:	6878      	ldr	r0, [r7, #4]
 8003356:	f7ff ff2d 	bl	80031b4 <__NVIC_SetPriorityGrouping>
}
 800335a:	bf00      	nop
 800335c:	3708      	adds	r7, #8
 800335e:	46bd      	mov	sp, r7
 8003360:	bd80      	pop	{r7, pc}

08003362 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003362:	b580      	push	{r7, lr}
 8003364:	b086      	sub	sp, #24
 8003366:	af00      	add	r7, sp, #0
 8003368:	4603      	mov	r3, r0
 800336a:	60b9      	str	r1, [r7, #8]
 800336c:	607a      	str	r2, [r7, #4]
 800336e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003370:	2300      	movs	r3, #0
 8003372:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003374:	f7ff ff42 	bl	80031fc <__NVIC_GetPriorityGrouping>
 8003378:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800337a:	687a      	ldr	r2, [r7, #4]
 800337c:	68b9      	ldr	r1, [r7, #8]
 800337e:	6978      	ldr	r0, [r7, #20]
 8003380:	f7ff ff90 	bl	80032a4 <NVIC_EncodePriority>
 8003384:	4602      	mov	r2, r0
 8003386:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800338a:	4611      	mov	r1, r2
 800338c:	4618      	mov	r0, r3
 800338e:	f7ff ff5f 	bl	8003250 <__NVIC_SetPriority>
}
 8003392:	bf00      	nop
 8003394:	3718      	adds	r7, #24
 8003396:	46bd      	mov	sp, r7
 8003398:	bd80      	pop	{r7, pc}

0800339a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800339a:	b580      	push	{r7, lr}
 800339c:	b082      	sub	sp, #8
 800339e:	af00      	add	r7, sp, #0
 80033a0:	4603      	mov	r3, r0
 80033a2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80033a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033a8:	4618      	mov	r0, r3
 80033aa:	f7ff ff35 	bl	8003218 <__NVIC_EnableIRQ>
}
 80033ae:	bf00      	nop
 80033b0:	3708      	adds	r7, #8
 80033b2:	46bd      	mov	sp, r7
 80033b4:	bd80      	pop	{r7, pc}

080033b6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80033b6:	b580      	push	{r7, lr}
 80033b8:	b082      	sub	sp, #8
 80033ba:	af00      	add	r7, sp, #0
 80033bc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80033be:	6878      	ldr	r0, [r7, #4]
 80033c0:	f7ff ffa2 	bl	8003308 <SysTick_Config>
 80033c4:	4603      	mov	r3, r0
}
 80033c6:	4618      	mov	r0, r3
 80033c8:	3708      	adds	r7, #8
 80033ca:	46bd      	mov	sp, r7
 80033cc:	bd80      	pop	{r7, pc}
	...

080033d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80033d0:	b480      	push	{r7}
 80033d2:	b08b      	sub	sp, #44	@ 0x2c
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	6078      	str	r0, [r7, #4]
 80033d8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80033da:	2300      	movs	r3, #0
 80033dc:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80033de:	2300      	movs	r3, #0
 80033e0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80033e2:	e169      	b.n	80036b8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80033e4:	2201      	movs	r2, #1
 80033e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033e8:	fa02 f303 	lsl.w	r3, r2, r3
 80033ec:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80033ee:	683b      	ldr	r3, [r7, #0]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	69fa      	ldr	r2, [r7, #28]
 80033f4:	4013      	ands	r3, r2
 80033f6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80033f8:	69ba      	ldr	r2, [r7, #24]
 80033fa:	69fb      	ldr	r3, [r7, #28]
 80033fc:	429a      	cmp	r2, r3
 80033fe:	f040 8158 	bne.w	80036b2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8003402:	683b      	ldr	r3, [r7, #0]
 8003404:	685b      	ldr	r3, [r3, #4]
 8003406:	4a9a      	ldr	r2, [pc, #616]	@ (8003670 <HAL_GPIO_Init+0x2a0>)
 8003408:	4293      	cmp	r3, r2
 800340a:	d05e      	beq.n	80034ca <HAL_GPIO_Init+0xfa>
 800340c:	4a98      	ldr	r2, [pc, #608]	@ (8003670 <HAL_GPIO_Init+0x2a0>)
 800340e:	4293      	cmp	r3, r2
 8003410:	d875      	bhi.n	80034fe <HAL_GPIO_Init+0x12e>
 8003412:	4a98      	ldr	r2, [pc, #608]	@ (8003674 <HAL_GPIO_Init+0x2a4>)
 8003414:	4293      	cmp	r3, r2
 8003416:	d058      	beq.n	80034ca <HAL_GPIO_Init+0xfa>
 8003418:	4a96      	ldr	r2, [pc, #600]	@ (8003674 <HAL_GPIO_Init+0x2a4>)
 800341a:	4293      	cmp	r3, r2
 800341c:	d86f      	bhi.n	80034fe <HAL_GPIO_Init+0x12e>
 800341e:	4a96      	ldr	r2, [pc, #600]	@ (8003678 <HAL_GPIO_Init+0x2a8>)
 8003420:	4293      	cmp	r3, r2
 8003422:	d052      	beq.n	80034ca <HAL_GPIO_Init+0xfa>
 8003424:	4a94      	ldr	r2, [pc, #592]	@ (8003678 <HAL_GPIO_Init+0x2a8>)
 8003426:	4293      	cmp	r3, r2
 8003428:	d869      	bhi.n	80034fe <HAL_GPIO_Init+0x12e>
 800342a:	4a94      	ldr	r2, [pc, #592]	@ (800367c <HAL_GPIO_Init+0x2ac>)
 800342c:	4293      	cmp	r3, r2
 800342e:	d04c      	beq.n	80034ca <HAL_GPIO_Init+0xfa>
 8003430:	4a92      	ldr	r2, [pc, #584]	@ (800367c <HAL_GPIO_Init+0x2ac>)
 8003432:	4293      	cmp	r3, r2
 8003434:	d863      	bhi.n	80034fe <HAL_GPIO_Init+0x12e>
 8003436:	4a92      	ldr	r2, [pc, #584]	@ (8003680 <HAL_GPIO_Init+0x2b0>)
 8003438:	4293      	cmp	r3, r2
 800343a:	d046      	beq.n	80034ca <HAL_GPIO_Init+0xfa>
 800343c:	4a90      	ldr	r2, [pc, #576]	@ (8003680 <HAL_GPIO_Init+0x2b0>)
 800343e:	4293      	cmp	r3, r2
 8003440:	d85d      	bhi.n	80034fe <HAL_GPIO_Init+0x12e>
 8003442:	2b12      	cmp	r3, #18
 8003444:	d82a      	bhi.n	800349c <HAL_GPIO_Init+0xcc>
 8003446:	2b12      	cmp	r3, #18
 8003448:	d859      	bhi.n	80034fe <HAL_GPIO_Init+0x12e>
 800344a:	a201      	add	r2, pc, #4	@ (adr r2, 8003450 <HAL_GPIO_Init+0x80>)
 800344c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003450:	080034cb 	.word	0x080034cb
 8003454:	080034a5 	.word	0x080034a5
 8003458:	080034b7 	.word	0x080034b7
 800345c:	080034f9 	.word	0x080034f9
 8003460:	080034ff 	.word	0x080034ff
 8003464:	080034ff 	.word	0x080034ff
 8003468:	080034ff 	.word	0x080034ff
 800346c:	080034ff 	.word	0x080034ff
 8003470:	080034ff 	.word	0x080034ff
 8003474:	080034ff 	.word	0x080034ff
 8003478:	080034ff 	.word	0x080034ff
 800347c:	080034ff 	.word	0x080034ff
 8003480:	080034ff 	.word	0x080034ff
 8003484:	080034ff 	.word	0x080034ff
 8003488:	080034ff 	.word	0x080034ff
 800348c:	080034ff 	.word	0x080034ff
 8003490:	080034ff 	.word	0x080034ff
 8003494:	080034ad 	.word	0x080034ad
 8003498:	080034c1 	.word	0x080034c1
 800349c:	4a79      	ldr	r2, [pc, #484]	@ (8003684 <HAL_GPIO_Init+0x2b4>)
 800349e:	4293      	cmp	r3, r2
 80034a0:	d013      	beq.n	80034ca <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80034a2:	e02c      	b.n	80034fe <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80034a4:	683b      	ldr	r3, [r7, #0]
 80034a6:	68db      	ldr	r3, [r3, #12]
 80034a8:	623b      	str	r3, [r7, #32]
          break;
 80034aa:	e029      	b.n	8003500 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80034ac:	683b      	ldr	r3, [r7, #0]
 80034ae:	68db      	ldr	r3, [r3, #12]
 80034b0:	3304      	adds	r3, #4
 80034b2:	623b      	str	r3, [r7, #32]
          break;
 80034b4:	e024      	b.n	8003500 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80034b6:	683b      	ldr	r3, [r7, #0]
 80034b8:	68db      	ldr	r3, [r3, #12]
 80034ba:	3308      	adds	r3, #8
 80034bc:	623b      	str	r3, [r7, #32]
          break;
 80034be:	e01f      	b.n	8003500 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80034c0:	683b      	ldr	r3, [r7, #0]
 80034c2:	68db      	ldr	r3, [r3, #12]
 80034c4:	330c      	adds	r3, #12
 80034c6:	623b      	str	r3, [r7, #32]
          break;
 80034c8:	e01a      	b.n	8003500 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80034ca:	683b      	ldr	r3, [r7, #0]
 80034cc:	689b      	ldr	r3, [r3, #8]
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d102      	bne.n	80034d8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80034d2:	2304      	movs	r3, #4
 80034d4:	623b      	str	r3, [r7, #32]
          break;
 80034d6:	e013      	b.n	8003500 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80034d8:	683b      	ldr	r3, [r7, #0]
 80034da:	689b      	ldr	r3, [r3, #8]
 80034dc:	2b01      	cmp	r3, #1
 80034de:	d105      	bne.n	80034ec <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80034e0:	2308      	movs	r3, #8
 80034e2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	69fa      	ldr	r2, [r7, #28]
 80034e8:	611a      	str	r2, [r3, #16]
          break;
 80034ea:	e009      	b.n	8003500 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80034ec:	2308      	movs	r3, #8
 80034ee:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	69fa      	ldr	r2, [r7, #28]
 80034f4:	615a      	str	r2, [r3, #20]
          break;
 80034f6:	e003      	b.n	8003500 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80034f8:	2300      	movs	r3, #0
 80034fa:	623b      	str	r3, [r7, #32]
          break;
 80034fc:	e000      	b.n	8003500 <HAL_GPIO_Init+0x130>
          break;
 80034fe:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003500:	69bb      	ldr	r3, [r7, #24]
 8003502:	2bff      	cmp	r3, #255	@ 0xff
 8003504:	d801      	bhi.n	800350a <HAL_GPIO_Init+0x13a>
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	e001      	b.n	800350e <HAL_GPIO_Init+0x13e>
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	3304      	adds	r3, #4
 800350e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003510:	69bb      	ldr	r3, [r7, #24]
 8003512:	2bff      	cmp	r3, #255	@ 0xff
 8003514:	d802      	bhi.n	800351c <HAL_GPIO_Init+0x14c>
 8003516:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003518:	009b      	lsls	r3, r3, #2
 800351a:	e002      	b.n	8003522 <HAL_GPIO_Init+0x152>
 800351c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800351e:	3b08      	subs	r3, #8
 8003520:	009b      	lsls	r3, r3, #2
 8003522:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003524:	697b      	ldr	r3, [r7, #20]
 8003526:	681a      	ldr	r2, [r3, #0]
 8003528:	210f      	movs	r1, #15
 800352a:	693b      	ldr	r3, [r7, #16]
 800352c:	fa01 f303 	lsl.w	r3, r1, r3
 8003530:	43db      	mvns	r3, r3
 8003532:	401a      	ands	r2, r3
 8003534:	6a39      	ldr	r1, [r7, #32]
 8003536:	693b      	ldr	r3, [r7, #16]
 8003538:	fa01 f303 	lsl.w	r3, r1, r3
 800353c:	431a      	orrs	r2, r3
 800353e:	697b      	ldr	r3, [r7, #20]
 8003540:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003542:	683b      	ldr	r3, [r7, #0]
 8003544:	685b      	ldr	r3, [r3, #4]
 8003546:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800354a:	2b00      	cmp	r3, #0
 800354c:	f000 80b1 	beq.w	80036b2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003550:	4b4d      	ldr	r3, [pc, #308]	@ (8003688 <HAL_GPIO_Init+0x2b8>)
 8003552:	699b      	ldr	r3, [r3, #24]
 8003554:	4a4c      	ldr	r2, [pc, #304]	@ (8003688 <HAL_GPIO_Init+0x2b8>)
 8003556:	f043 0301 	orr.w	r3, r3, #1
 800355a:	6193      	str	r3, [r2, #24]
 800355c:	4b4a      	ldr	r3, [pc, #296]	@ (8003688 <HAL_GPIO_Init+0x2b8>)
 800355e:	699b      	ldr	r3, [r3, #24]
 8003560:	f003 0301 	and.w	r3, r3, #1
 8003564:	60bb      	str	r3, [r7, #8]
 8003566:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003568:	4a48      	ldr	r2, [pc, #288]	@ (800368c <HAL_GPIO_Init+0x2bc>)
 800356a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800356c:	089b      	lsrs	r3, r3, #2
 800356e:	3302      	adds	r3, #2
 8003570:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003574:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003576:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003578:	f003 0303 	and.w	r3, r3, #3
 800357c:	009b      	lsls	r3, r3, #2
 800357e:	220f      	movs	r2, #15
 8003580:	fa02 f303 	lsl.w	r3, r2, r3
 8003584:	43db      	mvns	r3, r3
 8003586:	68fa      	ldr	r2, [r7, #12]
 8003588:	4013      	ands	r3, r2
 800358a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	4a40      	ldr	r2, [pc, #256]	@ (8003690 <HAL_GPIO_Init+0x2c0>)
 8003590:	4293      	cmp	r3, r2
 8003592:	d013      	beq.n	80035bc <HAL_GPIO_Init+0x1ec>
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	4a3f      	ldr	r2, [pc, #252]	@ (8003694 <HAL_GPIO_Init+0x2c4>)
 8003598:	4293      	cmp	r3, r2
 800359a:	d00d      	beq.n	80035b8 <HAL_GPIO_Init+0x1e8>
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	4a3e      	ldr	r2, [pc, #248]	@ (8003698 <HAL_GPIO_Init+0x2c8>)
 80035a0:	4293      	cmp	r3, r2
 80035a2:	d007      	beq.n	80035b4 <HAL_GPIO_Init+0x1e4>
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	4a3d      	ldr	r2, [pc, #244]	@ (800369c <HAL_GPIO_Init+0x2cc>)
 80035a8:	4293      	cmp	r3, r2
 80035aa:	d101      	bne.n	80035b0 <HAL_GPIO_Init+0x1e0>
 80035ac:	2303      	movs	r3, #3
 80035ae:	e006      	b.n	80035be <HAL_GPIO_Init+0x1ee>
 80035b0:	2304      	movs	r3, #4
 80035b2:	e004      	b.n	80035be <HAL_GPIO_Init+0x1ee>
 80035b4:	2302      	movs	r3, #2
 80035b6:	e002      	b.n	80035be <HAL_GPIO_Init+0x1ee>
 80035b8:	2301      	movs	r3, #1
 80035ba:	e000      	b.n	80035be <HAL_GPIO_Init+0x1ee>
 80035bc:	2300      	movs	r3, #0
 80035be:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80035c0:	f002 0203 	and.w	r2, r2, #3
 80035c4:	0092      	lsls	r2, r2, #2
 80035c6:	4093      	lsls	r3, r2
 80035c8:	68fa      	ldr	r2, [r7, #12]
 80035ca:	4313      	orrs	r3, r2
 80035cc:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80035ce:	492f      	ldr	r1, [pc, #188]	@ (800368c <HAL_GPIO_Init+0x2bc>)
 80035d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035d2:	089b      	lsrs	r3, r3, #2
 80035d4:	3302      	adds	r3, #2
 80035d6:	68fa      	ldr	r2, [r7, #12]
 80035d8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80035dc:	683b      	ldr	r3, [r7, #0]
 80035de:	685b      	ldr	r3, [r3, #4]
 80035e0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d006      	beq.n	80035f6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80035e8:	4b2d      	ldr	r3, [pc, #180]	@ (80036a0 <HAL_GPIO_Init+0x2d0>)
 80035ea:	689a      	ldr	r2, [r3, #8]
 80035ec:	492c      	ldr	r1, [pc, #176]	@ (80036a0 <HAL_GPIO_Init+0x2d0>)
 80035ee:	69bb      	ldr	r3, [r7, #24]
 80035f0:	4313      	orrs	r3, r2
 80035f2:	608b      	str	r3, [r1, #8]
 80035f4:	e006      	b.n	8003604 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80035f6:	4b2a      	ldr	r3, [pc, #168]	@ (80036a0 <HAL_GPIO_Init+0x2d0>)
 80035f8:	689a      	ldr	r2, [r3, #8]
 80035fa:	69bb      	ldr	r3, [r7, #24]
 80035fc:	43db      	mvns	r3, r3
 80035fe:	4928      	ldr	r1, [pc, #160]	@ (80036a0 <HAL_GPIO_Init+0x2d0>)
 8003600:	4013      	ands	r3, r2
 8003602:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003604:	683b      	ldr	r3, [r7, #0]
 8003606:	685b      	ldr	r3, [r3, #4]
 8003608:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800360c:	2b00      	cmp	r3, #0
 800360e:	d006      	beq.n	800361e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003610:	4b23      	ldr	r3, [pc, #140]	@ (80036a0 <HAL_GPIO_Init+0x2d0>)
 8003612:	68da      	ldr	r2, [r3, #12]
 8003614:	4922      	ldr	r1, [pc, #136]	@ (80036a0 <HAL_GPIO_Init+0x2d0>)
 8003616:	69bb      	ldr	r3, [r7, #24]
 8003618:	4313      	orrs	r3, r2
 800361a:	60cb      	str	r3, [r1, #12]
 800361c:	e006      	b.n	800362c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800361e:	4b20      	ldr	r3, [pc, #128]	@ (80036a0 <HAL_GPIO_Init+0x2d0>)
 8003620:	68da      	ldr	r2, [r3, #12]
 8003622:	69bb      	ldr	r3, [r7, #24]
 8003624:	43db      	mvns	r3, r3
 8003626:	491e      	ldr	r1, [pc, #120]	@ (80036a0 <HAL_GPIO_Init+0x2d0>)
 8003628:	4013      	ands	r3, r2
 800362a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800362c:	683b      	ldr	r3, [r7, #0]
 800362e:	685b      	ldr	r3, [r3, #4]
 8003630:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003634:	2b00      	cmp	r3, #0
 8003636:	d006      	beq.n	8003646 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003638:	4b19      	ldr	r3, [pc, #100]	@ (80036a0 <HAL_GPIO_Init+0x2d0>)
 800363a:	685a      	ldr	r2, [r3, #4]
 800363c:	4918      	ldr	r1, [pc, #96]	@ (80036a0 <HAL_GPIO_Init+0x2d0>)
 800363e:	69bb      	ldr	r3, [r7, #24]
 8003640:	4313      	orrs	r3, r2
 8003642:	604b      	str	r3, [r1, #4]
 8003644:	e006      	b.n	8003654 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003646:	4b16      	ldr	r3, [pc, #88]	@ (80036a0 <HAL_GPIO_Init+0x2d0>)
 8003648:	685a      	ldr	r2, [r3, #4]
 800364a:	69bb      	ldr	r3, [r7, #24]
 800364c:	43db      	mvns	r3, r3
 800364e:	4914      	ldr	r1, [pc, #80]	@ (80036a0 <HAL_GPIO_Init+0x2d0>)
 8003650:	4013      	ands	r3, r2
 8003652:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003654:	683b      	ldr	r3, [r7, #0]
 8003656:	685b      	ldr	r3, [r3, #4]
 8003658:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800365c:	2b00      	cmp	r3, #0
 800365e:	d021      	beq.n	80036a4 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003660:	4b0f      	ldr	r3, [pc, #60]	@ (80036a0 <HAL_GPIO_Init+0x2d0>)
 8003662:	681a      	ldr	r2, [r3, #0]
 8003664:	490e      	ldr	r1, [pc, #56]	@ (80036a0 <HAL_GPIO_Init+0x2d0>)
 8003666:	69bb      	ldr	r3, [r7, #24]
 8003668:	4313      	orrs	r3, r2
 800366a:	600b      	str	r3, [r1, #0]
 800366c:	e021      	b.n	80036b2 <HAL_GPIO_Init+0x2e2>
 800366e:	bf00      	nop
 8003670:	10320000 	.word	0x10320000
 8003674:	10310000 	.word	0x10310000
 8003678:	10220000 	.word	0x10220000
 800367c:	10210000 	.word	0x10210000
 8003680:	10120000 	.word	0x10120000
 8003684:	10110000 	.word	0x10110000
 8003688:	40021000 	.word	0x40021000
 800368c:	40010000 	.word	0x40010000
 8003690:	40010800 	.word	0x40010800
 8003694:	40010c00 	.word	0x40010c00
 8003698:	40011000 	.word	0x40011000
 800369c:	40011400 	.word	0x40011400
 80036a0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80036a4:	4b0b      	ldr	r3, [pc, #44]	@ (80036d4 <HAL_GPIO_Init+0x304>)
 80036a6:	681a      	ldr	r2, [r3, #0]
 80036a8:	69bb      	ldr	r3, [r7, #24]
 80036aa:	43db      	mvns	r3, r3
 80036ac:	4909      	ldr	r1, [pc, #36]	@ (80036d4 <HAL_GPIO_Init+0x304>)
 80036ae:	4013      	ands	r3, r2
 80036b0:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80036b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036b4:	3301      	adds	r3, #1
 80036b6:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80036b8:	683b      	ldr	r3, [r7, #0]
 80036ba:	681a      	ldr	r2, [r3, #0]
 80036bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036be:	fa22 f303 	lsr.w	r3, r2, r3
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	f47f ae8e 	bne.w	80033e4 <HAL_GPIO_Init+0x14>
  }
}
 80036c8:	bf00      	nop
 80036ca:	bf00      	nop
 80036cc:	372c      	adds	r7, #44	@ 0x2c
 80036ce:	46bd      	mov	sp, r7
 80036d0:	bc80      	pop	{r7}
 80036d2:	4770      	bx	lr
 80036d4:	40010400 	.word	0x40010400

080036d8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80036d8:	b480      	push	{r7}
 80036da:	b085      	sub	sp, #20
 80036dc:	af00      	add	r7, sp, #0
 80036de:	6078      	str	r0, [r7, #4]
 80036e0:	460b      	mov	r3, r1
 80036e2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	689a      	ldr	r2, [r3, #8]
 80036e8:	887b      	ldrh	r3, [r7, #2]
 80036ea:	4013      	ands	r3, r2
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d002      	beq.n	80036f6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80036f0:	2301      	movs	r3, #1
 80036f2:	73fb      	strb	r3, [r7, #15]
 80036f4:	e001      	b.n	80036fa <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80036f6:	2300      	movs	r3, #0
 80036f8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80036fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80036fc:	4618      	mov	r0, r3
 80036fe:	3714      	adds	r7, #20
 8003700:	46bd      	mov	sp, r7
 8003702:	bc80      	pop	{r7}
 8003704:	4770      	bx	lr

08003706 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003706:	b480      	push	{r7}
 8003708:	b083      	sub	sp, #12
 800370a:	af00      	add	r7, sp, #0
 800370c:	6078      	str	r0, [r7, #4]
 800370e:	460b      	mov	r3, r1
 8003710:	807b      	strh	r3, [r7, #2]
 8003712:	4613      	mov	r3, r2
 8003714:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003716:	787b      	ldrb	r3, [r7, #1]
 8003718:	2b00      	cmp	r3, #0
 800371a:	d003      	beq.n	8003724 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800371c:	887a      	ldrh	r2, [r7, #2]
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003722:	e003      	b.n	800372c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003724:	887b      	ldrh	r3, [r7, #2]
 8003726:	041a      	lsls	r2, r3, #16
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	611a      	str	r2, [r3, #16]
}
 800372c:	bf00      	nop
 800372e:	370c      	adds	r7, #12
 8003730:	46bd      	mov	sp, r7
 8003732:	bc80      	pop	{r7}
 8003734:	4770      	bx	lr

08003736 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003736:	b480      	push	{r7}
 8003738:	b085      	sub	sp, #20
 800373a:	af00      	add	r7, sp, #0
 800373c:	6078      	str	r0, [r7, #4]
 800373e:	460b      	mov	r3, r1
 8003740:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	68db      	ldr	r3, [r3, #12]
 8003746:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003748:	887a      	ldrh	r2, [r7, #2]
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	4013      	ands	r3, r2
 800374e:	041a      	lsls	r2, r3, #16
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	43d9      	mvns	r1, r3
 8003754:	887b      	ldrh	r3, [r7, #2]
 8003756:	400b      	ands	r3, r1
 8003758:	431a      	orrs	r2, r3
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	611a      	str	r2, [r3, #16]
}
 800375e:	bf00      	nop
 8003760:	3714      	adds	r7, #20
 8003762:	46bd      	mov	sp, r7
 8003764:	bc80      	pop	{r7}
 8003766:	4770      	bx	lr

08003768 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003768:	b580      	push	{r7, lr}
 800376a:	b084      	sub	sp, #16
 800376c:	af00      	add	r7, sp, #0
 800376e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	2b00      	cmp	r3, #0
 8003774:	d101      	bne.n	800377a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003776:	2301      	movs	r3, #1
 8003778:	e12b      	b.n	80039d2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003780:	b2db      	uxtb	r3, r3
 8003782:	2b00      	cmp	r3, #0
 8003784:	d106      	bne.n	8003794 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	2200      	movs	r2, #0
 800378a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800378e:	6878      	ldr	r0, [r7, #4]
 8003790:	f7fe fa76 	bl	8001c80 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	2224      	movs	r2, #36	@ 0x24
 8003798:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	681a      	ldr	r2, [r3, #0]
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	f022 0201 	bic.w	r2, r2, #1
 80037aa:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	681a      	ldr	r2, [r3, #0]
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80037ba:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	681a      	ldr	r2, [r3, #0]
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80037ca:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80037cc:	f001 fbfc 	bl	8004fc8 <HAL_RCC_GetPCLK1Freq>
 80037d0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	685b      	ldr	r3, [r3, #4]
 80037d6:	4a81      	ldr	r2, [pc, #516]	@ (80039dc <HAL_I2C_Init+0x274>)
 80037d8:	4293      	cmp	r3, r2
 80037da:	d807      	bhi.n	80037ec <HAL_I2C_Init+0x84>
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	4a80      	ldr	r2, [pc, #512]	@ (80039e0 <HAL_I2C_Init+0x278>)
 80037e0:	4293      	cmp	r3, r2
 80037e2:	bf94      	ite	ls
 80037e4:	2301      	movls	r3, #1
 80037e6:	2300      	movhi	r3, #0
 80037e8:	b2db      	uxtb	r3, r3
 80037ea:	e006      	b.n	80037fa <HAL_I2C_Init+0x92>
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	4a7d      	ldr	r2, [pc, #500]	@ (80039e4 <HAL_I2C_Init+0x27c>)
 80037f0:	4293      	cmp	r3, r2
 80037f2:	bf94      	ite	ls
 80037f4:	2301      	movls	r3, #1
 80037f6:	2300      	movhi	r3, #0
 80037f8:	b2db      	uxtb	r3, r3
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d001      	beq.n	8003802 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80037fe:	2301      	movs	r3, #1
 8003800:	e0e7      	b.n	80039d2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	4a78      	ldr	r2, [pc, #480]	@ (80039e8 <HAL_I2C_Init+0x280>)
 8003806:	fba2 2303 	umull	r2, r3, r2, r3
 800380a:	0c9b      	lsrs	r3, r3, #18
 800380c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	685b      	ldr	r3, [r3, #4]
 8003814:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	68ba      	ldr	r2, [r7, #8]
 800381e:	430a      	orrs	r2, r1
 8003820:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	6a1b      	ldr	r3, [r3, #32]
 8003828:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	685b      	ldr	r3, [r3, #4]
 8003830:	4a6a      	ldr	r2, [pc, #424]	@ (80039dc <HAL_I2C_Init+0x274>)
 8003832:	4293      	cmp	r3, r2
 8003834:	d802      	bhi.n	800383c <HAL_I2C_Init+0xd4>
 8003836:	68bb      	ldr	r3, [r7, #8]
 8003838:	3301      	adds	r3, #1
 800383a:	e009      	b.n	8003850 <HAL_I2C_Init+0xe8>
 800383c:	68bb      	ldr	r3, [r7, #8]
 800383e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8003842:	fb02 f303 	mul.w	r3, r2, r3
 8003846:	4a69      	ldr	r2, [pc, #420]	@ (80039ec <HAL_I2C_Init+0x284>)
 8003848:	fba2 2303 	umull	r2, r3, r2, r3
 800384c:	099b      	lsrs	r3, r3, #6
 800384e:	3301      	adds	r3, #1
 8003850:	687a      	ldr	r2, [r7, #4]
 8003852:	6812      	ldr	r2, [r2, #0]
 8003854:	430b      	orrs	r3, r1
 8003856:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	69db      	ldr	r3, [r3, #28]
 800385e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8003862:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	685b      	ldr	r3, [r3, #4]
 800386a:	495c      	ldr	r1, [pc, #368]	@ (80039dc <HAL_I2C_Init+0x274>)
 800386c:	428b      	cmp	r3, r1
 800386e:	d819      	bhi.n	80038a4 <HAL_I2C_Init+0x13c>
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	1e59      	subs	r1, r3, #1
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	685b      	ldr	r3, [r3, #4]
 8003878:	005b      	lsls	r3, r3, #1
 800387a:	fbb1 f3f3 	udiv	r3, r1, r3
 800387e:	1c59      	adds	r1, r3, #1
 8003880:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003884:	400b      	ands	r3, r1
 8003886:	2b00      	cmp	r3, #0
 8003888:	d00a      	beq.n	80038a0 <HAL_I2C_Init+0x138>
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	1e59      	subs	r1, r3, #1
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	685b      	ldr	r3, [r3, #4]
 8003892:	005b      	lsls	r3, r3, #1
 8003894:	fbb1 f3f3 	udiv	r3, r1, r3
 8003898:	3301      	adds	r3, #1
 800389a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800389e:	e051      	b.n	8003944 <HAL_I2C_Init+0x1dc>
 80038a0:	2304      	movs	r3, #4
 80038a2:	e04f      	b.n	8003944 <HAL_I2C_Init+0x1dc>
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	689b      	ldr	r3, [r3, #8]
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d111      	bne.n	80038d0 <HAL_I2C_Init+0x168>
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	1e58      	subs	r0, r3, #1
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	6859      	ldr	r1, [r3, #4]
 80038b4:	460b      	mov	r3, r1
 80038b6:	005b      	lsls	r3, r3, #1
 80038b8:	440b      	add	r3, r1
 80038ba:	fbb0 f3f3 	udiv	r3, r0, r3
 80038be:	3301      	adds	r3, #1
 80038c0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	bf0c      	ite	eq
 80038c8:	2301      	moveq	r3, #1
 80038ca:	2300      	movne	r3, #0
 80038cc:	b2db      	uxtb	r3, r3
 80038ce:	e012      	b.n	80038f6 <HAL_I2C_Init+0x18e>
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	1e58      	subs	r0, r3, #1
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	6859      	ldr	r1, [r3, #4]
 80038d8:	460b      	mov	r3, r1
 80038da:	009b      	lsls	r3, r3, #2
 80038dc:	440b      	add	r3, r1
 80038de:	0099      	lsls	r1, r3, #2
 80038e0:	440b      	add	r3, r1
 80038e2:	fbb0 f3f3 	udiv	r3, r0, r3
 80038e6:	3301      	adds	r3, #1
 80038e8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	bf0c      	ite	eq
 80038f0:	2301      	moveq	r3, #1
 80038f2:	2300      	movne	r3, #0
 80038f4:	b2db      	uxtb	r3, r3
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d001      	beq.n	80038fe <HAL_I2C_Init+0x196>
 80038fa:	2301      	movs	r3, #1
 80038fc:	e022      	b.n	8003944 <HAL_I2C_Init+0x1dc>
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	689b      	ldr	r3, [r3, #8]
 8003902:	2b00      	cmp	r3, #0
 8003904:	d10e      	bne.n	8003924 <HAL_I2C_Init+0x1bc>
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	1e58      	subs	r0, r3, #1
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	6859      	ldr	r1, [r3, #4]
 800390e:	460b      	mov	r3, r1
 8003910:	005b      	lsls	r3, r3, #1
 8003912:	440b      	add	r3, r1
 8003914:	fbb0 f3f3 	udiv	r3, r0, r3
 8003918:	3301      	adds	r3, #1
 800391a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800391e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003922:	e00f      	b.n	8003944 <HAL_I2C_Init+0x1dc>
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	1e58      	subs	r0, r3, #1
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	6859      	ldr	r1, [r3, #4]
 800392c:	460b      	mov	r3, r1
 800392e:	009b      	lsls	r3, r3, #2
 8003930:	440b      	add	r3, r1
 8003932:	0099      	lsls	r1, r3, #2
 8003934:	440b      	add	r3, r1
 8003936:	fbb0 f3f3 	udiv	r3, r0, r3
 800393a:	3301      	adds	r3, #1
 800393c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003940:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003944:	6879      	ldr	r1, [r7, #4]
 8003946:	6809      	ldr	r1, [r1, #0]
 8003948:	4313      	orrs	r3, r2
 800394a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	69da      	ldr	r2, [r3, #28]
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	6a1b      	ldr	r3, [r3, #32]
 800395e:	431a      	orrs	r2, r3
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	430a      	orrs	r2, r1
 8003966:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	689b      	ldr	r3, [r3, #8]
 800396e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8003972:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003976:	687a      	ldr	r2, [r7, #4]
 8003978:	6911      	ldr	r1, [r2, #16]
 800397a:	687a      	ldr	r2, [r7, #4]
 800397c:	68d2      	ldr	r2, [r2, #12]
 800397e:	4311      	orrs	r1, r2
 8003980:	687a      	ldr	r2, [r7, #4]
 8003982:	6812      	ldr	r2, [r2, #0]
 8003984:	430b      	orrs	r3, r1
 8003986:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	68db      	ldr	r3, [r3, #12]
 800398e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	695a      	ldr	r2, [r3, #20]
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	699b      	ldr	r3, [r3, #24]
 800399a:	431a      	orrs	r2, r3
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	430a      	orrs	r2, r1
 80039a2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	681a      	ldr	r2, [r3, #0]
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	f042 0201 	orr.w	r2, r2, #1
 80039b2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	2200      	movs	r2, #0
 80039b8:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	2220      	movs	r2, #32
 80039be:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	2200      	movs	r2, #0
 80039c6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	2200      	movs	r2, #0
 80039cc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80039d0:	2300      	movs	r3, #0
}
 80039d2:	4618      	mov	r0, r3
 80039d4:	3710      	adds	r7, #16
 80039d6:	46bd      	mov	sp, r7
 80039d8:	bd80      	pop	{r7, pc}
 80039da:	bf00      	nop
 80039dc:	000186a0 	.word	0x000186a0
 80039e0:	001e847f 	.word	0x001e847f
 80039e4:	003d08ff 	.word	0x003d08ff
 80039e8:	431bde83 	.word	0x431bde83
 80039ec:	10624dd3 	.word	0x10624dd3

080039f0 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80039f0:	b580      	push	{r7, lr}
 80039f2:	b088      	sub	sp, #32
 80039f4:	af02      	add	r7, sp, #8
 80039f6:	60f8      	str	r0, [r7, #12]
 80039f8:	4608      	mov	r0, r1
 80039fa:	4611      	mov	r1, r2
 80039fc:	461a      	mov	r2, r3
 80039fe:	4603      	mov	r3, r0
 8003a00:	817b      	strh	r3, [r7, #10]
 8003a02:	460b      	mov	r3, r1
 8003a04:	813b      	strh	r3, [r7, #8]
 8003a06:	4613      	mov	r3, r2
 8003a08:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003a0a:	f7fe fd65 	bl	80024d8 <HAL_GetTick>
 8003a0e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003a16:	b2db      	uxtb	r3, r3
 8003a18:	2b20      	cmp	r3, #32
 8003a1a:	f040 80d9 	bne.w	8003bd0 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003a1e:	697b      	ldr	r3, [r7, #20]
 8003a20:	9300      	str	r3, [sp, #0]
 8003a22:	2319      	movs	r3, #25
 8003a24:	2201      	movs	r2, #1
 8003a26:	496d      	ldr	r1, [pc, #436]	@ (8003bdc <HAL_I2C_Mem_Write+0x1ec>)
 8003a28:	68f8      	ldr	r0, [r7, #12]
 8003a2a:	f000 fccd 	bl	80043c8 <I2C_WaitOnFlagUntilTimeout>
 8003a2e:	4603      	mov	r3, r0
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d001      	beq.n	8003a38 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003a34:	2302      	movs	r3, #2
 8003a36:	e0cc      	b.n	8003bd2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003a3e:	2b01      	cmp	r3, #1
 8003a40:	d101      	bne.n	8003a46 <HAL_I2C_Mem_Write+0x56>
 8003a42:	2302      	movs	r3, #2
 8003a44:	e0c5      	b.n	8003bd2 <HAL_I2C_Mem_Write+0x1e2>
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	2201      	movs	r2, #1
 8003a4a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	f003 0301 	and.w	r3, r3, #1
 8003a58:	2b01      	cmp	r3, #1
 8003a5a:	d007      	beq.n	8003a6c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	681a      	ldr	r2, [r3, #0]
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	f042 0201 	orr.w	r2, r2, #1
 8003a6a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	681a      	ldr	r2, [r3, #0]
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003a7a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	2221      	movs	r2, #33	@ 0x21
 8003a80:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	2240      	movs	r2, #64	@ 0x40
 8003a88:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	2200      	movs	r2, #0
 8003a90:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	6a3a      	ldr	r2, [r7, #32]
 8003a96:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8003a9c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003aa2:	b29a      	uxth	r2, r3
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	4a4d      	ldr	r2, [pc, #308]	@ (8003be0 <HAL_I2C_Mem_Write+0x1f0>)
 8003aac:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003aae:	88f8      	ldrh	r0, [r7, #6]
 8003ab0:	893a      	ldrh	r2, [r7, #8]
 8003ab2:	8979      	ldrh	r1, [r7, #10]
 8003ab4:	697b      	ldr	r3, [r7, #20]
 8003ab6:	9301      	str	r3, [sp, #4]
 8003ab8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003aba:	9300      	str	r3, [sp, #0]
 8003abc:	4603      	mov	r3, r0
 8003abe:	68f8      	ldr	r0, [r7, #12]
 8003ac0:	f000 fb04 	bl	80040cc <I2C_RequestMemoryWrite>
 8003ac4:	4603      	mov	r3, r0
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d052      	beq.n	8003b70 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003aca:	2301      	movs	r3, #1
 8003acc:	e081      	b.n	8003bd2 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003ace:	697a      	ldr	r2, [r7, #20]
 8003ad0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003ad2:	68f8      	ldr	r0, [r7, #12]
 8003ad4:	f000 fd92 	bl	80045fc <I2C_WaitOnTXEFlagUntilTimeout>
 8003ad8:	4603      	mov	r3, r0
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d00d      	beq.n	8003afa <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ae2:	2b04      	cmp	r3, #4
 8003ae4:	d107      	bne.n	8003af6 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	681a      	ldr	r2, [r3, #0]
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003af4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003af6:	2301      	movs	r3, #1
 8003af8:	e06b      	b.n	8003bd2 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003afe:	781a      	ldrb	r2, [r3, #0]
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b0a:	1c5a      	adds	r2, r3, #1
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b14:	3b01      	subs	r3, #1
 8003b16:	b29a      	uxth	r2, r3
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b20:	b29b      	uxth	r3, r3
 8003b22:	3b01      	subs	r3, #1
 8003b24:	b29a      	uxth	r2, r3
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	695b      	ldr	r3, [r3, #20]
 8003b30:	f003 0304 	and.w	r3, r3, #4
 8003b34:	2b04      	cmp	r3, #4
 8003b36:	d11b      	bne.n	8003b70 <HAL_I2C_Mem_Write+0x180>
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d017      	beq.n	8003b70 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b44:	781a      	ldrb	r2, [r3, #0]
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b50:	1c5a      	adds	r2, r3, #1
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b5a:	3b01      	subs	r3, #1
 8003b5c:	b29a      	uxth	r2, r3
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b66:	b29b      	uxth	r3, r3
 8003b68:	3b01      	subs	r3, #1
 8003b6a:	b29a      	uxth	r2, r3
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d1aa      	bne.n	8003ace <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003b78:	697a      	ldr	r2, [r7, #20]
 8003b7a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003b7c:	68f8      	ldr	r0, [r7, #12]
 8003b7e:	f000 fd85 	bl	800468c <I2C_WaitOnBTFFlagUntilTimeout>
 8003b82:	4603      	mov	r3, r0
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d00d      	beq.n	8003ba4 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b8c:	2b04      	cmp	r3, #4
 8003b8e:	d107      	bne.n	8003ba0 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	681a      	ldr	r2, [r3, #0]
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003b9e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003ba0:	2301      	movs	r3, #1
 8003ba2:	e016      	b.n	8003bd2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	681a      	ldr	r2, [r3, #0]
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003bb2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	2220      	movs	r2, #32
 8003bb8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	2200      	movs	r2, #0
 8003bc0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	2200      	movs	r2, #0
 8003bc8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003bcc:	2300      	movs	r3, #0
 8003bce:	e000      	b.n	8003bd2 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003bd0:	2302      	movs	r3, #2
  }
}
 8003bd2:	4618      	mov	r0, r3
 8003bd4:	3718      	adds	r7, #24
 8003bd6:	46bd      	mov	sp, r7
 8003bd8:	bd80      	pop	{r7, pc}
 8003bda:	bf00      	nop
 8003bdc:	00100002 	.word	0x00100002
 8003be0:	ffff0000 	.word	0xffff0000

08003be4 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003be4:	b580      	push	{r7, lr}
 8003be6:	b08c      	sub	sp, #48	@ 0x30
 8003be8:	af02      	add	r7, sp, #8
 8003bea:	60f8      	str	r0, [r7, #12]
 8003bec:	4608      	mov	r0, r1
 8003bee:	4611      	mov	r1, r2
 8003bf0:	461a      	mov	r2, r3
 8003bf2:	4603      	mov	r3, r0
 8003bf4:	817b      	strh	r3, [r7, #10]
 8003bf6:	460b      	mov	r3, r1
 8003bf8:	813b      	strh	r3, [r7, #8]
 8003bfa:	4613      	mov	r3, r2
 8003bfc:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8003bfe:	2300      	movs	r3, #0
 8003c00:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003c02:	f7fe fc69 	bl	80024d8 <HAL_GetTick>
 8003c06:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003c0e:	b2db      	uxtb	r3, r3
 8003c10:	2b20      	cmp	r3, #32
 8003c12:	f040 8250 	bne.w	80040b6 <HAL_I2C_Mem_Read+0x4d2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003c16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c18:	9300      	str	r3, [sp, #0]
 8003c1a:	2319      	movs	r3, #25
 8003c1c:	2201      	movs	r2, #1
 8003c1e:	4982      	ldr	r1, [pc, #520]	@ (8003e28 <HAL_I2C_Mem_Read+0x244>)
 8003c20:	68f8      	ldr	r0, [r7, #12]
 8003c22:	f000 fbd1 	bl	80043c8 <I2C_WaitOnFlagUntilTimeout>
 8003c26:	4603      	mov	r3, r0
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d001      	beq.n	8003c30 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8003c2c:	2302      	movs	r3, #2
 8003c2e:	e243      	b.n	80040b8 <HAL_I2C_Mem_Read+0x4d4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003c36:	2b01      	cmp	r3, #1
 8003c38:	d101      	bne.n	8003c3e <HAL_I2C_Mem_Read+0x5a>
 8003c3a:	2302      	movs	r3, #2
 8003c3c:	e23c      	b.n	80040b8 <HAL_I2C_Mem_Read+0x4d4>
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	2201      	movs	r2, #1
 8003c42:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	f003 0301 	and.w	r3, r3, #1
 8003c50:	2b01      	cmp	r3, #1
 8003c52:	d007      	beq.n	8003c64 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	681a      	ldr	r2, [r3, #0]
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f042 0201 	orr.w	r2, r2, #1
 8003c62:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	681a      	ldr	r2, [r3, #0]
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003c72:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	2222      	movs	r2, #34	@ 0x22
 8003c78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	2240      	movs	r2, #64	@ 0x40
 8003c80:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	2200      	movs	r2, #0
 8003c88:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003c8e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8003c94:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c9a:	b29a      	uxth	r2, r3
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	4a62      	ldr	r2, [pc, #392]	@ (8003e2c <HAL_I2C_Mem_Read+0x248>)
 8003ca4:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003ca6:	88f8      	ldrh	r0, [r7, #6]
 8003ca8:	893a      	ldrh	r2, [r7, #8]
 8003caa:	8979      	ldrh	r1, [r7, #10]
 8003cac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cae:	9301      	str	r3, [sp, #4]
 8003cb0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003cb2:	9300      	str	r3, [sp, #0]
 8003cb4:	4603      	mov	r3, r0
 8003cb6:	68f8      	ldr	r0, [r7, #12]
 8003cb8:	f000 fa9e 	bl	80041f8 <I2C_RequestMemoryRead>
 8003cbc:	4603      	mov	r3, r0
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d001      	beq.n	8003cc6 <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8003cc2:	2301      	movs	r3, #1
 8003cc4:	e1f8      	b.n	80040b8 <HAL_I2C_Mem_Read+0x4d4>
    }

    if (hi2c->XferSize == 0U)
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d113      	bne.n	8003cf6 <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003cce:	2300      	movs	r3, #0
 8003cd0:	61fb      	str	r3, [r7, #28]
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	695b      	ldr	r3, [r3, #20]
 8003cd8:	61fb      	str	r3, [r7, #28]
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	699b      	ldr	r3, [r3, #24]
 8003ce0:	61fb      	str	r3, [r7, #28]
 8003ce2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	681a      	ldr	r2, [r3, #0]
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003cf2:	601a      	str	r2, [r3, #0]
 8003cf4:	e1cc      	b.n	8004090 <HAL_I2C_Mem_Read+0x4ac>
    }
    else if (hi2c->XferSize == 1U)
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003cfa:	2b01      	cmp	r3, #1
 8003cfc:	d11e      	bne.n	8003d3c <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	681a      	ldr	r2, [r3, #0]
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003d0c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003d0e:	b672      	cpsid	i
}
 8003d10:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d12:	2300      	movs	r3, #0
 8003d14:	61bb      	str	r3, [r7, #24]
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	695b      	ldr	r3, [r3, #20]
 8003d1c:	61bb      	str	r3, [r7, #24]
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	699b      	ldr	r3, [r3, #24]
 8003d24:	61bb      	str	r3, [r7, #24]
 8003d26:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	681a      	ldr	r2, [r3, #0]
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003d36:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003d38:	b662      	cpsie	i
}
 8003d3a:	e035      	b.n	8003da8 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d40:	2b02      	cmp	r3, #2
 8003d42:	d11e      	bne.n	8003d82 <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	681a      	ldr	r2, [r3, #0]
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003d52:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003d54:	b672      	cpsid	i
}
 8003d56:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d58:	2300      	movs	r3, #0
 8003d5a:	617b      	str	r3, [r7, #20]
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	695b      	ldr	r3, [r3, #20]
 8003d62:	617b      	str	r3, [r7, #20]
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	699b      	ldr	r3, [r3, #24]
 8003d6a:	617b      	str	r3, [r7, #20]
 8003d6c:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	681a      	ldr	r2, [r3, #0]
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003d7c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003d7e:	b662      	cpsie	i
}
 8003d80:	e012      	b.n	8003da8 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	681a      	ldr	r2, [r3, #0]
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003d90:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d92:	2300      	movs	r3, #0
 8003d94:	613b      	str	r3, [r7, #16]
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	695b      	ldr	r3, [r3, #20]
 8003d9c:	613b      	str	r3, [r7, #16]
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	699b      	ldr	r3, [r3, #24]
 8003da4:	613b      	str	r3, [r7, #16]
 8003da6:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8003da8:	e172      	b.n	8004090 <HAL_I2C_Mem_Read+0x4ac>
    {
      if (hi2c->XferSize <= 3U)
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003dae:	2b03      	cmp	r3, #3
 8003db0:	f200 811f 	bhi.w	8003ff2 <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003db8:	2b01      	cmp	r3, #1
 8003dba:	d123      	bne.n	8003e04 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003dbc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003dbe:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8003dc0:	68f8      	ldr	r0, [r7, #12]
 8003dc2:	f000 fcab 	bl	800471c <I2C_WaitOnRXNEFlagUntilTimeout>
 8003dc6:	4603      	mov	r3, r0
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d001      	beq.n	8003dd0 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8003dcc:	2301      	movs	r3, #1
 8003dce:	e173      	b.n	80040b8 <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	691a      	ldr	r2, [r3, #16]
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003dda:	b2d2      	uxtb	r2, r2
 8003ddc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003de2:	1c5a      	adds	r2, r3, #1
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003dec:	3b01      	subs	r3, #1
 8003dee:	b29a      	uxth	r2, r3
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003df8:	b29b      	uxth	r3, r3
 8003dfa:	3b01      	subs	r3, #1
 8003dfc:	b29a      	uxth	r2, r3
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003e02:	e145      	b.n	8004090 <HAL_I2C_Mem_Read+0x4ac>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e08:	2b02      	cmp	r3, #2
 8003e0a:	d152      	bne.n	8003eb2 <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003e0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e0e:	9300      	str	r3, [sp, #0]
 8003e10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003e12:	2200      	movs	r2, #0
 8003e14:	4906      	ldr	r1, [pc, #24]	@ (8003e30 <HAL_I2C_Mem_Read+0x24c>)
 8003e16:	68f8      	ldr	r0, [r7, #12]
 8003e18:	f000 fad6 	bl	80043c8 <I2C_WaitOnFlagUntilTimeout>
 8003e1c:	4603      	mov	r3, r0
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d008      	beq.n	8003e34 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 8003e22:	2301      	movs	r3, #1
 8003e24:	e148      	b.n	80040b8 <HAL_I2C_Mem_Read+0x4d4>
 8003e26:	bf00      	nop
 8003e28:	00100002 	.word	0x00100002
 8003e2c:	ffff0000 	.word	0xffff0000
 8003e30:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8003e34:	b672      	cpsid	i
}
 8003e36:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	681a      	ldr	r2, [r3, #0]
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003e46:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	691a      	ldr	r2, [r3, #16]
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e52:	b2d2      	uxtb	r2, r2
 8003e54:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e5a:	1c5a      	adds	r2, r3, #1
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e64:	3b01      	subs	r3, #1
 8003e66:	b29a      	uxth	r2, r3
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e70:	b29b      	uxth	r3, r3
 8003e72:	3b01      	subs	r3, #1
 8003e74:	b29a      	uxth	r2, r3
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8003e7a:	b662      	cpsie	i
}
 8003e7c:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	691a      	ldr	r2, [r3, #16]
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e88:	b2d2      	uxtb	r2, r2
 8003e8a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e90:	1c5a      	adds	r2, r3, #1
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e9a:	3b01      	subs	r3, #1
 8003e9c:	b29a      	uxth	r2, r3
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ea6:	b29b      	uxth	r3, r3
 8003ea8:	3b01      	subs	r3, #1
 8003eaa:	b29a      	uxth	r2, r3
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003eb0:	e0ee      	b.n	8004090 <HAL_I2C_Mem_Read+0x4ac>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003eb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003eb4:	9300      	str	r3, [sp, #0]
 8003eb6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003eb8:	2200      	movs	r2, #0
 8003eba:	4981      	ldr	r1, [pc, #516]	@ (80040c0 <HAL_I2C_Mem_Read+0x4dc>)
 8003ebc:	68f8      	ldr	r0, [r7, #12]
 8003ebe:	f000 fa83 	bl	80043c8 <I2C_WaitOnFlagUntilTimeout>
 8003ec2:	4603      	mov	r3, r0
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d001      	beq.n	8003ecc <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8003ec8:	2301      	movs	r3, #1
 8003eca:	e0f5      	b.n	80040b8 <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	681a      	ldr	r2, [r3, #0]
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003eda:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003edc:	b672      	cpsid	i
}
 8003ede:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	691a      	ldr	r2, [r3, #16]
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003eea:	b2d2      	uxtb	r2, r2
 8003eec:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ef2:	1c5a      	adds	r2, r3, #1
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003efc:	3b01      	subs	r3, #1
 8003efe:	b29a      	uxth	r2, r3
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f08:	b29b      	uxth	r3, r3
 8003f0a:	3b01      	subs	r3, #1
 8003f0c:	b29a      	uxth	r2, r3
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8003f12:	4b6c      	ldr	r3, [pc, #432]	@ (80040c4 <HAL_I2C_Mem_Read+0x4e0>)
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	08db      	lsrs	r3, r3, #3
 8003f18:	4a6b      	ldr	r2, [pc, #428]	@ (80040c8 <HAL_I2C_Mem_Read+0x4e4>)
 8003f1a:	fba2 2303 	umull	r2, r3, r2, r3
 8003f1e:	0a1a      	lsrs	r2, r3, #8
 8003f20:	4613      	mov	r3, r2
 8003f22:	009b      	lsls	r3, r3, #2
 8003f24:	4413      	add	r3, r2
 8003f26:	00da      	lsls	r2, r3, #3
 8003f28:	1ad3      	subs	r3, r2, r3
 8003f2a:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8003f2c:	6a3b      	ldr	r3, [r7, #32]
 8003f2e:	3b01      	subs	r3, #1
 8003f30:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8003f32:	6a3b      	ldr	r3, [r7, #32]
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d118      	bne.n	8003f6a <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	2200      	movs	r2, #0
 8003f3c:	631a      	str	r2, [r3, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	2220      	movs	r2, #32
 8003f42:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	2200      	movs	r2, #0
 8003f4a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f52:	f043 0220 	orr.w	r2, r3, #32
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	641a      	str	r2, [r3, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8003f5a:	b662      	cpsie	i
}
 8003f5c:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	2200      	movs	r2, #0
 8003f62:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

              return HAL_ERROR;
 8003f66:	2301      	movs	r3, #1
 8003f68:	e0a6      	b.n	80040b8 <HAL_I2C_Mem_Read+0x4d4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	695b      	ldr	r3, [r3, #20]
 8003f70:	f003 0304 	and.w	r3, r3, #4
 8003f74:	2b04      	cmp	r3, #4
 8003f76:	d1d9      	bne.n	8003f2c <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	681a      	ldr	r2, [r3, #0]
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003f86:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	691a      	ldr	r2, [r3, #16]
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f92:	b2d2      	uxtb	r2, r2
 8003f94:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f9a:	1c5a      	adds	r2, r3, #1
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003fa4:	3b01      	subs	r3, #1
 8003fa6:	b29a      	uxth	r2, r3
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003fb0:	b29b      	uxth	r3, r3
 8003fb2:	3b01      	subs	r3, #1
 8003fb4:	b29a      	uxth	r2, r3
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8003fba:	b662      	cpsie	i
}
 8003fbc:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	691a      	ldr	r2, [r3, #16]
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fc8:	b2d2      	uxtb	r2, r2
 8003fca:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fd0:	1c5a      	adds	r2, r3, #1
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003fda:	3b01      	subs	r3, #1
 8003fdc:	b29a      	uxth	r2, r3
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003fe6:	b29b      	uxth	r3, r3
 8003fe8:	3b01      	subs	r3, #1
 8003fea:	b29a      	uxth	r2, r3
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003ff0:	e04e      	b.n	8004090 <HAL_I2C_Mem_Read+0x4ac>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003ff2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003ff4:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8003ff6:	68f8      	ldr	r0, [r7, #12]
 8003ff8:	f000 fb90 	bl	800471c <I2C_WaitOnRXNEFlagUntilTimeout>
 8003ffc:	4603      	mov	r3, r0
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d001      	beq.n	8004006 <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 8004002:	2301      	movs	r3, #1
 8004004:	e058      	b.n	80040b8 <HAL_I2C_Mem_Read+0x4d4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	691a      	ldr	r2, [r3, #16]
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004010:	b2d2      	uxtb	r2, r2
 8004012:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004018:	1c5a      	adds	r2, r3, #1
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004022:	3b01      	subs	r3, #1
 8004024:	b29a      	uxth	r2, r3
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800402e:	b29b      	uxth	r3, r3
 8004030:	3b01      	subs	r3, #1
 8004032:	b29a      	uxth	r2, r3
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	695b      	ldr	r3, [r3, #20]
 800403e:	f003 0304 	and.w	r3, r3, #4
 8004042:	2b04      	cmp	r3, #4
 8004044:	d124      	bne.n	8004090 <HAL_I2C_Mem_Read+0x4ac>
        {
          if (hi2c->XferSize == 3U)
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800404a:	2b03      	cmp	r3, #3
 800404c:	d107      	bne.n	800405e <HAL_I2C_Mem_Read+0x47a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	681a      	ldr	r2, [r3, #0]
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800405c:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	691a      	ldr	r2, [r3, #16]
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004068:	b2d2      	uxtb	r2, r2
 800406a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004070:	1c5a      	adds	r2, r3, #1
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800407a:	3b01      	subs	r3, #1
 800407c:	b29a      	uxth	r2, r3
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004086:	b29b      	uxth	r3, r3
 8004088:	3b01      	subs	r3, #1
 800408a:	b29a      	uxth	r2, r3
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004094:	2b00      	cmp	r3, #0
 8004096:	f47f ae88 	bne.w	8003daa <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	2220      	movs	r2, #32
 800409e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	2200      	movs	r2, #0
 80040a6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	2200      	movs	r2, #0
 80040ae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80040b2:	2300      	movs	r3, #0
 80040b4:	e000      	b.n	80040b8 <HAL_I2C_Mem_Read+0x4d4>
  }
  else
  {
    return HAL_BUSY;
 80040b6:	2302      	movs	r3, #2
  }
}
 80040b8:	4618      	mov	r0, r3
 80040ba:	3728      	adds	r7, #40	@ 0x28
 80040bc:	46bd      	mov	sp, r7
 80040be:	bd80      	pop	{r7, pc}
 80040c0:	00010004 	.word	0x00010004
 80040c4:	20000000 	.word	0x20000000
 80040c8:	14f8b589 	.word	0x14f8b589

080040cc <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80040cc:	b580      	push	{r7, lr}
 80040ce:	b088      	sub	sp, #32
 80040d0:	af02      	add	r7, sp, #8
 80040d2:	60f8      	str	r0, [r7, #12]
 80040d4:	4608      	mov	r0, r1
 80040d6:	4611      	mov	r1, r2
 80040d8:	461a      	mov	r2, r3
 80040da:	4603      	mov	r3, r0
 80040dc:	817b      	strh	r3, [r7, #10]
 80040de:	460b      	mov	r3, r1
 80040e0:	813b      	strh	r3, [r7, #8]
 80040e2:	4613      	mov	r3, r2
 80040e4:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	681a      	ldr	r2, [r3, #0]
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80040f4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80040f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040f8:	9300      	str	r3, [sp, #0]
 80040fa:	6a3b      	ldr	r3, [r7, #32]
 80040fc:	2200      	movs	r2, #0
 80040fe:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004102:	68f8      	ldr	r0, [r7, #12]
 8004104:	f000 f960 	bl	80043c8 <I2C_WaitOnFlagUntilTimeout>
 8004108:	4603      	mov	r3, r0
 800410a:	2b00      	cmp	r3, #0
 800410c:	d00d      	beq.n	800412a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004118:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800411c:	d103      	bne.n	8004126 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004124:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004126:	2303      	movs	r3, #3
 8004128:	e05f      	b.n	80041ea <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800412a:	897b      	ldrh	r3, [r7, #10]
 800412c:	b2db      	uxtb	r3, r3
 800412e:	461a      	mov	r2, r3
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004138:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800413a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800413c:	6a3a      	ldr	r2, [r7, #32]
 800413e:	492d      	ldr	r1, [pc, #180]	@ (80041f4 <I2C_RequestMemoryWrite+0x128>)
 8004140:	68f8      	ldr	r0, [r7, #12]
 8004142:	f000 f9bb 	bl	80044bc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004146:	4603      	mov	r3, r0
 8004148:	2b00      	cmp	r3, #0
 800414a:	d001      	beq.n	8004150 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800414c:	2301      	movs	r3, #1
 800414e:	e04c      	b.n	80041ea <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004150:	2300      	movs	r3, #0
 8004152:	617b      	str	r3, [r7, #20]
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	695b      	ldr	r3, [r3, #20]
 800415a:	617b      	str	r3, [r7, #20]
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	699b      	ldr	r3, [r3, #24]
 8004162:	617b      	str	r3, [r7, #20]
 8004164:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004166:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004168:	6a39      	ldr	r1, [r7, #32]
 800416a:	68f8      	ldr	r0, [r7, #12]
 800416c:	f000 fa46 	bl	80045fc <I2C_WaitOnTXEFlagUntilTimeout>
 8004170:	4603      	mov	r3, r0
 8004172:	2b00      	cmp	r3, #0
 8004174:	d00d      	beq.n	8004192 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800417a:	2b04      	cmp	r3, #4
 800417c:	d107      	bne.n	800418e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	681a      	ldr	r2, [r3, #0]
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800418c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800418e:	2301      	movs	r3, #1
 8004190:	e02b      	b.n	80041ea <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004192:	88fb      	ldrh	r3, [r7, #6]
 8004194:	2b01      	cmp	r3, #1
 8004196:	d105      	bne.n	80041a4 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004198:	893b      	ldrh	r3, [r7, #8]
 800419a:	b2da      	uxtb	r2, r3
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	611a      	str	r2, [r3, #16]
 80041a2:	e021      	b.n	80041e8 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80041a4:	893b      	ldrh	r3, [r7, #8]
 80041a6:	0a1b      	lsrs	r3, r3, #8
 80041a8:	b29b      	uxth	r3, r3
 80041aa:	b2da      	uxtb	r2, r3
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80041b2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80041b4:	6a39      	ldr	r1, [r7, #32]
 80041b6:	68f8      	ldr	r0, [r7, #12]
 80041b8:	f000 fa20 	bl	80045fc <I2C_WaitOnTXEFlagUntilTimeout>
 80041bc:	4603      	mov	r3, r0
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d00d      	beq.n	80041de <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041c6:	2b04      	cmp	r3, #4
 80041c8:	d107      	bne.n	80041da <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	681a      	ldr	r2, [r3, #0]
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80041d8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80041da:	2301      	movs	r3, #1
 80041dc:	e005      	b.n	80041ea <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80041de:	893b      	ldrh	r3, [r7, #8]
 80041e0:	b2da      	uxtb	r2, r3
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80041e8:	2300      	movs	r3, #0
}
 80041ea:	4618      	mov	r0, r3
 80041ec:	3718      	adds	r7, #24
 80041ee:	46bd      	mov	sp, r7
 80041f0:	bd80      	pop	{r7, pc}
 80041f2:	bf00      	nop
 80041f4:	00010002 	.word	0x00010002

080041f8 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80041f8:	b580      	push	{r7, lr}
 80041fa:	b088      	sub	sp, #32
 80041fc:	af02      	add	r7, sp, #8
 80041fe:	60f8      	str	r0, [r7, #12]
 8004200:	4608      	mov	r0, r1
 8004202:	4611      	mov	r1, r2
 8004204:	461a      	mov	r2, r3
 8004206:	4603      	mov	r3, r0
 8004208:	817b      	strh	r3, [r7, #10]
 800420a:	460b      	mov	r3, r1
 800420c:	813b      	strh	r3, [r7, #8]
 800420e:	4613      	mov	r3, r2
 8004210:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	681a      	ldr	r2, [r3, #0]
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004220:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	681a      	ldr	r2, [r3, #0]
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004230:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004232:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004234:	9300      	str	r3, [sp, #0]
 8004236:	6a3b      	ldr	r3, [r7, #32]
 8004238:	2200      	movs	r2, #0
 800423a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800423e:	68f8      	ldr	r0, [r7, #12]
 8004240:	f000 f8c2 	bl	80043c8 <I2C_WaitOnFlagUntilTimeout>
 8004244:	4603      	mov	r3, r0
 8004246:	2b00      	cmp	r3, #0
 8004248:	d00d      	beq.n	8004266 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004254:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004258:	d103      	bne.n	8004262 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004260:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004262:	2303      	movs	r3, #3
 8004264:	e0aa      	b.n	80043bc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004266:	897b      	ldrh	r3, [r7, #10]
 8004268:	b2db      	uxtb	r3, r3
 800426a:	461a      	mov	r2, r3
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004274:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004276:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004278:	6a3a      	ldr	r2, [r7, #32]
 800427a:	4952      	ldr	r1, [pc, #328]	@ (80043c4 <I2C_RequestMemoryRead+0x1cc>)
 800427c:	68f8      	ldr	r0, [r7, #12]
 800427e:	f000 f91d 	bl	80044bc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004282:	4603      	mov	r3, r0
 8004284:	2b00      	cmp	r3, #0
 8004286:	d001      	beq.n	800428c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8004288:	2301      	movs	r3, #1
 800428a:	e097      	b.n	80043bc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800428c:	2300      	movs	r3, #0
 800428e:	617b      	str	r3, [r7, #20]
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	695b      	ldr	r3, [r3, #20]
 8004296:	617b      	str	r3, [r7, #20]
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	699b      	ldr	r3, [r3, #24]
 800429e:	617b      	str	r3, [r7, #20]
 80042a0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80042a2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80042a4:	6a39      	ldr	r1, [r7, #32]
 80042a6:	68f8      	ldr	r0, [r7, #12]
 80042a8:	f000 f9a8 	bl	80045fc <I2C_WaitOnTXEFlagUntilTimeout>
 80042ac:	4603      	mov	r3, r0
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d00d      	beq.n	80042ce <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042b6:	2b04      	cmp	r3, #4
 80042b8:	d107      	bne.n	80042ca <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	681a      	ldr	r2, [r3, #0]
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80042c8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80042ca:	2301      	movs	r3, #1
 80042cc:	e076      	b.n	80043bc <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80042ce:	88fb      	ldrh	r3, [r7, #6]
 80042d0:	2b01      	cmp	r3, #1
 80042d2:	d105      	bne.n	80042e0 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80042d4:	893b      	ldrh	r3, [r7, #8]
 80042d6:	b2da      	uxtb	r2, r3
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	611a      	str	r2, [r3, #16]
 80042de:	e021      	b.n	8004324 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80042e0:	893b      	ldrh	r3, [r7, #8]
 80042e2:	0a1b      	lsrs	r3, r3, #8
 80042e4:	b29b      	uxth	r3, r3
 80042e6:	b2da      	uxtb	r2, r3
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80042ee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80042f0:	6a39      	ldr	r1, [r7, #32]
 80042f2:	68f8      	ldr	r0, [r7, #12]
 80042f4:	f000 f982 	bl	80045fc <I2C_WaitOnTXEFlagUntilTimeout>
 80042f8:	4603      	mov	r3, r0
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d00d      	beq.n	800431a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004302:	2b04      	cmp	r3, #4
 8004304:	d107      	bne.n	8004316 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	681a      	ldr	r2, [r3, #0]
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004314:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004316:	2301      	movs	r3, #1
 8004318:	e050      	b.n	80043bc <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800431a:	893b      	ldrh	r3, [r7, #8]
 800431c:	b2da      	uxtb	r2, r3
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004324:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004326:	6a39      	ldr	r1, [r7, #32]
 8004328:	68f8      	ldr	r0, [r7, #12]
 800432a:	f000 f967 	bl	80045fc <I2C_WaitOnTXEFlagUntilTimeout>
 800432e:	4603      	mov	r3, r0
 8004330:	2b00      	cmp	r3, #0
 8004332:	d00d      	beq.n	8004350 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004338:	2b04      	cmp	r3, #4
 800433a:	d107      	bne.n	800434c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	681a      	ldr	r2, [r3, #0]
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800434a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800434c:	2301      	movs	r3, #1
 800434e:	e035      	b.n	80043bc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	681a      	ldr	r2, [r3, #0]
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800435e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004360:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004362:	9300      	str	r3, [sp, #0]
 8004364:	6a3b      	ldr	r3, [r7, #32]
 8004366:	2200      	movs	r2, #0
 8004368:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800436c:	68f8      	ldr	r0, [r7, #12]
 800436e:	f000 f82b 	bl	80043c8 <I2C_WaitOnFlagUntilTimeout>
 8004372:	4603      	mov	r3, r0
 8004374:	2b00      	cmp	r3, #0
 8004376:	d00d      	beq.n	8004394 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004382:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004386:	d103      	bne.n	8004390 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800438e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004390:	2303      	movs	r3, #3
 8004392:	e013      	b.n	80043bc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004394:	897b      	ldrh	r3, [r7, #10]
 8004396:	b2db      	uxtb	r3, r3
 8004398:	f043 0301 	orr.w	r3, r3, #1
 800439c:	b2da      	uxtb	r2, r3
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80043a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043a6:	6a3a      	ldr	r2, [r7, #32]
 80043a8:	4906      	ldr	r1, [pc, #24]	@ (80043c4 <I2C_RequestMemoryRead+0x1cc>)
 80043aa:	68f8      	ldr	r0, [r7, #12]
 80043ac:	f000 f886 	bl	80044bc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80043b0:	4603      	mov	r3, r0
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d001      	beq.n	80043ba <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80043b6:	2301      	movs	r3, #1
 80043b8:	e000      	b.n	80043bc <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80043ba:	2300      	movs	r3, #0
}
 80043bc:	4618      	mov	r0, r3
 80043be:	3718      	adds	r7, #24
 80043c0:	46bd      	mov	sp, r7
 80043c2:	bd80      	pop	{r7, pc}
 80043c4:	00010002 	.word	0x00010002

080043c8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80043c8:	b580      	push	{r7, lr}
 80043ca:	b084      	sub	sp, #16
 80043cc:	af00      	add	r7, sp, #0
 80043ce:	60f8      	str	r0, [r7, #12]
 80043d0:	60b9      	str	r1, [r7, #8]
 80043d2:	603b      	str	r3, [r7, #0]
 80043d4:	4613      	mov	r3, r2
 80043d6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80043d8:	e048      	b.n	800446c <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80043da:	683b      	ldr	r3, [r7, #0]
 80043dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043e0:	d044      	beq.n	800446c <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80043e2:	f7fe f879 	bl	80024d8 <HAL_GetTick>
 80043e6:	4602      	mov	r2, r0
 80043e8:	69bb      	ldr	r3, [r7, #24]
 80043ea:	1ad3      	subs	r3, r2, r3
 80043ec:	683a      	ldr	r2, [r7, #0]
 80043ee:	429a      	cmp	r2, r3
 80043f0:	d302      	bcc.n	80043f8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80043f2:	683b      	ldr	r3, [r7, #0]
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d139      	bne.n	800446c <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80043f8:	68bb      	ldr	r3, [r7, #8]
 80043fa:	0c1b      	lsrs	r3, r3, #16
 80043fc:	b2db      	uxtb	r3, r3
 80043fe:	2b01      	cmp	r3, #1
 8004400:	d10d      	bne.n	800441e <I2C_WaitOnFlagUntilTimeout+0x56>
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	695b      	ldr	r3, [r3, #20]
 8004408:	43da      	mvns	r2, r3
 800440a:	68bb      	ldr	r3, [r7, #8]
 800440c:	4013      	ands	r3, r2
 800440e:	b29b      	uxth	r3, r3
 8004410:	2b00      	cmp	r3, #0
 8004412:	bf0c      	ite	eq
 8004414:	2301      	moveq	r3, #1
 8004416:	2300      	movne	r3, #0
 8004418:	b2db      	uxtb	r3, r3
 800441a:	461a      	mov	r2, r3
 800441c:	e00c      	b.n	8004438 <I2C_WaitOnFlagUntilTimeout+0x70>
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	699b      	ldr	r3, [r3, #24]
 8004424:	43da      	mvns	r2, r3
 8004426:	68bb      	ldr	r3, [r7, #8]
 8004428:	4013      	ands	r3, r2
 800442a:	b29b      	uxth	r3, r3
 800442c:	2b00      	cmp	r3, #0
 800442e:	bf0c      	ite	eq
 8004430:	2301      	moveq	r3, #1
 8004432:	2300      	movne	r3, #0
 8004434:	b2db      	uxtb	r3, r3
 8004436:	461a      	mov	r2, r3
 8004438:	79fb      	ldrb	r3, [r7, #7]
 800443a:	429a      	cmp	r2, r3
 800443c:	d116      	bne.n	800446c <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	2200      	movs	r2, #0
 8004442:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	2220      	movs	r2, #32
 8004448:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	2200      	movs	r2, #0
 8004450:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004458:	f043 0220 	orr.w	r2, r3, #32
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	2200      	movs	r2, #0
 8004464:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004468:	2301      	movs	r3, #1
 800446a:	e023      	b.n	80044b4 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800446c:	68bb      	ldr	r3, [r7, #8]
 800446e:	0c1b      	lsrs	r3, r3, #16
 8004470:	b2db      	uxtb	r3, r3
 8004472:	2b01      	cmp	r3, #1
 8004474:	d10d      	bne.n	8004492 <I2C_WaitOnFlagUntilTimeout+0xca>
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	695b      	ldr	r3, [r3, #20]
 800447c:	43da      	mvns	r2, r3
 800447e:	68bb      	ldr	r3, [r7, #8]
 8004480:	4013      	ands	r3, r2
 8004482:	b29b      	uxth	r3, r3
 8004484:	2b00      	cmp	r3, #0
 8004486:	bf0c      	ite	eq
 8004488:	2301      	moveq	r3, #1
 800448a:	2300      	movne	r3, #0
 800448c:	b2db      	uxtb	r3, r3
 800448e:	461a      	mov	r2, r3
 8004490:	e00c      	b.n	80044ac <I2C_WaitOnFlagUntilTimeout+0xe4>
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	699b      	ldr	r3, [r3, #24]
 8004498:	43da      	mvns	r2, r3
 800449a:	68bb      	ldr	r3, [r7, #8]
 800449c:	4013      	ands	r3, r2
 800449e:	b29b      	uxth	r3, r3
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	bf0c      	ite	eq
 80044a4:	2301      	moveq	r3, #1
 80044a6:	2300      	movne	r3, #0
 80044a8:	b2db      	uxtb	r3, r3
 80044aa:	461a      	mov	r2, r3
 80044ac:	79fb      	ldrb	r3, [r7, #7]
 80044ae:	429a      	cmp	r2, r3
 80044b0:	d093      	beq.n	80043da <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80044b2:	2300      	movs	r3, #0
}
 80044b4:	4618      	mov	r0, r3
 80044b6:	3710      	adds	r7, #16
 80044b8:	46bd      	mov	sp, r7
 80044ba:	bd80      	pop	{r7, pc}

080044bc <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80044bc:	b580      	push	{r7, lr}
 80044be:	b084      	sub	sp, #16
 80044c0:	af00      	add	r7, sp, #0
 80044c2:	60f8      	str	r0, [r7, #12]
 80044c4:	60b9      	str	r1, [r7, #8]
 80044c6:	607a      	str	r2, [r7, #4]
 80044c8:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80044ca:	e071      	b.n	80045b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	695b      	ldr	r3, [r3, #20]
 80044d2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80044d6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80044da:	d123      	bne.n	8004524 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	681a      	ldr	r2, [r3, #0]
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80044ea:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80044f4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	2200      	movs	r2, #0
 80044fa:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	2220      	movs	r2, #32
 8004500:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	2200      	movs	r2, #0
 8004508:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004510:	f043 0204 	orr.w	r2, r3, #4
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	2200      	movs	r2, #0
 800451c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004520:	2301      	movs	r3, #1
 8004522:	e067      	b.n	80045f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	f1b3 3fff 	cmp.w	r3, #4294967295
 800452a:	d041      	beq.n	80045b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800452c:	f7fd ffd4 	bl	80024d8 <HAL_GetTick>
 8004530:	4602      	mov	r2, r0
 8004532:	683b      	ldr	r3, [r7, #0]
 8004534:	1ad3      	subs	r3, r2, r3
 8004536:	687a      	ldr	r2, [r7, #4]
 8004538:	429a      	cmp	r2, r3
 800453a:	d302      	bcc.n	8004542 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	2b00      	cmp	r3, #0
 8004540:	d136      	bne.n	80045b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8004542:	68bb      	ldr	r3, [r7, #8]
 8004544:	0c1b      	lsrs	r3, r3, #16
 8004546:	b2db      	uxtb	r3, r3
 8004548:	2b01      	cmp	r3, #1
 800454a:	d10c      	bne.n	8004566 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	695b      	ldr	r3, [r3, #20]
 8004552:	43da      	mvns	r2, r3
 8004554:	68bb      	ldr	r3, [r7, #8]
 8004556:	4013      	ands	r3, r2
 8004558:	b29b      	uxth	r3, r3
 800455a:	2b00      	cmp	r3, #0
 800455c:	bf14      	ite	ne
 800455e:	2301      	movne	r3, #1
 8004560:	2300      	moveq	r3, #0
 8004562:	b2db      	uxtb	r3, r3
 8004564:	e00b      	b.n	800457e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	699b      	ldr	r3, [r3, #24]
 800456c:	43da      	mvns	r2, r3
 800456e:	68bb      	ldr	r3, [r7, #8]
 8004570:	4013      	ands	r3, r2
 8004572:	b29b      	uxth	r3, r3
 8004574:	2b00      	cmp	r3, #0
 8004576:	bf14      	ite	ne
 8004578:	2301      	movne	r3, #1
 800457a:	2300      	moveq	r3, #0
 800457c:	b2db      	uxtb	r3, r3
 800457e:	2b00      	cmp	r3, #0
 8004580:	d016      	beq.n	80045b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	2200      	movs	r2, #0
 8004586:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	2220      	movs	r2, #32
 800458c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	2200      	movs	r2, #0
 8004594:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800459c:	f043 0220 	orr.w	r2, r3, #32
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	2200      	movs	r2, #0
 80045a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80045ac:	2301      	movs	r3, #1
 80045ae:	e021      	b.n	80045f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80045b0:	68bb      	ldr	r3, [r7, #8]
 80045b2:	0c1b      	lsrs	r3, r3, #16
 80045b4:	b2db      	uxtb	r3, r3
 80045b6:	2b01      	cmp	r3, #1
 80045b8:	d10c      	bne.n	80045d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	695b      	ldr	r3, [r3, #20]
 80045c0:	43da      	mvns	r2, r3
 80045c2:	68bb      	ldr	r3, [r7, #8]
 80045c4:	4013      	ands	r3, r2
 80045c6:	b29b      	uxth	r3, r3
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	bf14      	ite	ne
 80045cc:	2301      	movne	r3, #1
 80045ce:	2300      	moveq	r3, #0
 80045d0:	b2db      	uxtb	r3, r3
 80045d2:	e00b      	b.n	80045ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	699b      	ldr	r3, [r3, #24]
 80045da:	43da      	mvns	r2, r3
 80045dc:	68bb      	ldr	r3, [r7, #8]
 80045de:	4013      	ands	r3, r2
 80045e0:	b29b      	uxth	r3, r3
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	bf14      	ite	ne
 80045e6:	2301      	movne	r3, #1
 80045e8:	2300      	moveq	r3, #0
 80045ea:	b2db      	uxtb	r3, r3
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	f47f af6d 	bne.w	80044cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80045f2:	2300      	movs	r3, #0
}
 80045f4:	4618      	mov	r0, r3
 80045f6:	3710      	adds	r7, #16
 80045f8:	46bd      	mov	sp, r7
 80045fa:	bd80      	pop	{r7, pc}

080045fc <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80045fc:	b580      	push	{r7, lr}
 80045fe:	b084      	sub	sp, #16
 8004600:	af00      	add	r7, sp, #0
 8004602:	60f8      	str	r0, [r7, #12]
 8004604:	60b9      	str	r1, [r7, #8]
 8004606:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004608:	e034      	b.n	8004674 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800460a:	68f8      	ldr	r0, [r7, #12]
 800460c:	f000 f8e3 	bl	80047d6 <I2C_IsAcknowledgeFailed>
 8004610:	4603      	mov	r3, r0
 8004612:	2b00      	cmp	r3, #0
 8004614:	d001      	beq.n	800461a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004616:	2301      	movs	r3, #1
 8004618:	e034      	b.n	8004684 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800461a:	68bb      	ldr	r3, [r7, #8]
 800461c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004620:	d028      	beq.n	8004674 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004622:	f7fd ff59 	bl	80024d8 <HAL_GetTick>
 8004626:	4602      	mov	r2, r0
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	1ad3      	subs	r3, r2, r3
 800462c:	68ba      	ldr	r2, [r7, #8]
 800462e:	429a      	cmp	r2, r3
 8004630:	d302      	bcc.n	8004638 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004632:	68bb      	ldr	r3, [r7, #8]
 8004634:	2b00      	cmp	r3, #0
 8004636:	d11d      	bne.n	8004674 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	695b      	ldr	r3, [r3, #20]
 800463e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004642:	2b80      	cmp	r3, #128	@ 0x80
 8004644:	d016      	beq.n	8004674 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	2200      	movs	r2, #0
 800464a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	2220      	movs	r2, #32
 8004650:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	2200      	movs	r2, #0
 8004658:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004660:	f043 0220 	orr.w	r2, r3, #32
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	2200      	movs	r2, #0
 800466c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004670:	2301      	movs	r3, #1
 8004672:	e007      	b.n	8004684 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	695b      	ldr	r3, [r3, #20]
 800467a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800467e:	2b80      	cmp	r3, #128	@ 0x80
 8004680:	d1c3      	bne.n	800460a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004682:	2300      	movs	r3, #0
}
 8004684:	4618      	mov	r0, r3
 8004686:	3710      	adds	r7, #16
 8004688:	46bd      	mov	sp, r7
 800468a:	bd80      	pop	{r7, pc}

0800468c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800468c:	b580      	push	{r7, lr}
 800468e:	b084      	sub	sp, #16
 8004690:	af00      	add	r7, sp, #0
 8004692:	60f8      	str	r0, [r7, #12]
 8004694:	60b9      	str	r1, [r7, #8]
 8004696:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004698:	e034      	b.n	8004704 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800469a:	68f8      	ldr	r0, [r7, #12]
 800469c:	f000 f89b 	bl	80047d6 <I2C_IsAcknowledgeFailed>
 80046a0:	4603      	mov	r3, r0
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d001      	beq.n	80046aa <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80046a6:	2301      	movs	r3, #1
 80046a8:	e034      	b.n	8004714 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80046aa:	68bb      	ldr	r3, [r7, #8]
 80046ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046b0:	d028      	beq.n	8004704 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80046b2:	f7fd ff11 	bl	80024d8 <HAL_GetTick>
 80046b6:	4602      	mov	r2, r0
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	1ad3      	subs	r3, r2, r3
 80046bc:	68ba      	ldr	r2, [r7, #8]
 80046be:	429a      	cmp	r2, r3
 80046c0:	d302      	bcc.n	80046c8 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80046c2:	68bb      	ldr	r3, [r7, #8]
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d11d      	bne.n	8004704 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	695b      	ldr	r3, [r3, #20]
 80046ce:	f003 0304 	and.w	r3, r3, #4
 80046d2:	2b04      	cmp	r3, #4
 80046d4:	d016      	beq.n	8004704 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	2200      	movs	r2, #0
 80046da:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	2220      	movs	r2, #32
 80046e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	2200      	movs	r2, #0
 80046e8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046f0:	f043 0220 	orr.w	r2, r3, #32
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	2200      	movs	r2, #0
 80046fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004700:	2301      	movs	r3, #1
 8004702:	e007      	b.n	8004714 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	695b      	ldr	r3, [r3, #20]
 800470a:	f003 0304 	and.w	r3, r3, #4
 800470e:	2b04      	cmp	r3, #4
 8004710:	d1c3      	bne.n	800469a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004712:	2300      	movs	r3, #0
}
 8004714:	4618      	mov	r0, r3
 8004716:	3710      	adds	r7, #16
 8004718:	46bd      	mov	sp, r7
 800471a:	bd80      	pop	{r7, pc}

0800471c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800471c:	b580      	push	{r7, lr}
 800471e:	b084      	sub	sp, #16
 8004720:	af00      	add	r7, sp, #0
 8004722:	60f8      	str	r0, [r7, #12]
 8004724:	60b9      	str	r1, [r7, #8]
 8004726:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004728:	e049      	b.n	80047be <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	695b      	ldr	r3, [r3, #20]
 8004730:	f003 0310 	and.w	r3, r3, #16
 8004734:	2b10      	cmp	r3, #16
 8004736:	d119      	bne.n	800476c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	f06f 0210 	mvn.w	r2, #16
 8004740:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	2200      	movs	r2, #0
 8004746:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	2220      	movs	r2, #32
 800474c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	2200      	movs	r2, #0
 8004754:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	2200      	movs	r2, #0
 8004764:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004768:	2301      	movs	r3, #1
 800476a:	e030      	b.n	80047ce <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800476c:	f7fd feb4 	bl	80024d8 <HAL_GetTick>
 8004770:	4602      	mov	r2, r0
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	1ad3      	subs	r3, r2, r3
 8004776:	68ba      	ldr	r2, [r7, #8]
 8004778:	429a      	cmp	r2, r3
 800477a:	d302      	bcc.n	8004782 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800477c:	68bb      	ldr	r3, [r7, #8]
 800477e:	2b00      	cmp	r3, #0
 8004780:	d11d      	bne.n	80047be <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	695b      	ldr	r3, [r3, #20]
 8004788:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800478c:	2b40      	cmp	r3, #64	@ 0x40
 800478e:	d016      	beq.n	80047be <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	2200      	movs	r2, #0
 8004794:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	2220      	movs	r2, #32
 800479a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	2200      	movs	r2, #0
 80047a2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047aa:	f043 0220 	orr.w	r2, r3, #32
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	2200      	movs	r2, #0
 80047b6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80047ba:	2301      	movs	r3, #1
 80047bc:	e007      	b.n	80047ce <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	695b      	ldr	r3, [r3, #20]
 80047c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80047c8:	2b40      	cmp	r3, #64	@ 0x40
 80047ca:	d1ae      	bne.n	800472a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80047cc:	2300      	movs	r3, #0
}
 80047ce:	4618      	mov	r0, r3
 80047d0:	3710      	adds	r7, #16
 80047d2:	46bd      	mov	sp, r7
 80047d4:	bd80      	pop	{r7, pc}

080047d6 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80047d6:	b480      	push	{r7}
 80047d8:	b083      	sub	sp, #12
 80047da:	af00      	add	r7, sp, #0
 80047dc:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	695b      	ldr	r3, [r3, #20]
 80047e4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80047e8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80047ec:	d11b      	bne.n	8004826 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80047f6:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	2200      	movs	r2, #0
 80047fc:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	2220      	movs	r2, #32
 8004802:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	2200      	movs	r2, #0
 800480a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004812:	f043 0204 	orr.w	r2, r3, #4
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	2200      	movs	r2, #0
 800481e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8004822:	2301      	movs	r3, #1
 8004824:	e000      	b.n	8004828 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004826:	2300      	movs	r3, #0
}
 8004828:	4618      	mov	r0, r3
 800482a:	370c      	adds	r7, #12
 800482c:	46bd      	mov	sp, r7
 800482e:	bc80      	pop	{r7}
 8004830:	4770      	bx	lr
	...

08004834 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004834:	b580      	push	{r7, lr}
 8004836:	b086      	sub	sp, #24
 8004838:	af00      	add	r7, sp, #0
 800483a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	2b00      	cmp	r3, #0
 8004840:	d101      	bne.n	8004846 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004842:	2301      	movs	r3, #1
 8004844:	e272      	b.n	8004d2c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	f003 0301 	and.w	r3, r3, #1
 800484e:	2b00      	cmp	r3, #0
 8004850:	f000 8087 	beq.w	8004962 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004854:	4b92      	ldr	r3, [pc, #584]	@ (8004aa0 <HAL_RCC_OscConfig+0x26c>)
 8004856:	685b      	ldr	r3, [r3, #4]
 8004858:	f003 030c 	and.w	r3, r3, #12
 800485c:	2b04      	cmp	r3, #4
 800485e:	d00c      	beq.n	800487a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004860:	4b8f      	ldr	r3, [pc, #572]	@ (8004aa0 <HAL_RCC_OscConfig+0x26c>)
 8004862:	685b      	ldr	r3, [r3, #4]
 8004864:	f003 030c 	and.w	r3, r3, #12
 8004868:	2b08      	cmp	r3, #8
 800486a:	d112      	bne.n	8004892 <HAL_RCC_OscConfig+0x5e>
 800486c:	4b8c      	ldr	r3, [pc, #560]	@ (8004aa0 <HAL_RCC_OscConfig+0x26c>)
 800486e:	685b      	ldr	r3, [r3, #4]
 8004870:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004874:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004878:	d10b      	bne.n	8004892 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800487a:	4b89      	ldr	r3, [pc, #548]	@ (8004aa0 <HAL_RCC_OscConfig+0x26c>)
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004882:	2b00      	cmp	r3, #0
 8004884:	d06c      	beq.n	8004960 <HAL_RCC_OscConfig+0x12c>
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	685b      	ldr	r3, [r3, #4]
 800488a:	2b00      	cmp	r3, #0
 800488c:	d168      	bne.n	8004960 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800488e:	2301      	movs	r3, #1
 8004890:	e24c      	b.n	8004d2c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	685b      	ldr	r3, [r3, #4]
 8004896:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800489a:	d106      	bne.n	80048aa <HAL_RCC_OscConfig+0x76>
 800489c:	4b80      	ldr	r3, [pc, #512]	@ (8004aa0 <HAL_RCC_OscConfig+0x26c>)
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	4a7f      	ldr	r2, [pc, #508]	@ (8004aa0 <HAL_RCC_OscConfig+0x26c>)
 80048a2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80048a6:	6013      	str	r3, [r2, #0]
 80048a8:	e02e      	b.n	8004908 <HAL_RCC_OscConfig+0xd4>
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	685b      	ldr	r3, [r3, #4]
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d10c      	bne.n	80048cc <HAL_RCC_OscConfig+0x98>
 80048b2:	4b7b      	ldr	r3, [pc, #492]	@ (8004aa0 <HAL_RCC_OscConfig+0x26c>)
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	4a7a      	ldr	r2, [pc, #488]	@ (8004aa0 <HAL_RCC_OscConfig+0x26c>)
 80048b8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80048bc:	6013      	str	r3, [r2, #0]
 80048be:	4b78      	ldr	r3, [pc, #480]	@ (8004aa0 <HAL_RCC_OscConfig+0x26c>)
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	4a77      	ldr	r2, [pc, #476]	@ (8004aa0 <HAL_RCC_OscConfig+0x26c>)
 80048c4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80048c8:	6013      	str	r3, [r2, #0]
 80048ca:	e01d      	b.n	8004908 <HAL_RCC_OscConfig+0xd4>
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	685b      	ldr	r3, [r3, #4]
 80048d0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80048d4:	d10c      	bne.n	80048f0 <HAL_RCC_OscConfig+0xbc>
 80048d6:	4b72      	ldr	r3, [pc, #456]	@ (8004aa0 <HAL_RCC_OscConfig+0x26c>)
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	4a71      	ldr	r2, [pc, #452]	@ (8004aa0 <HAL_RCC_OscConfig+0x26c>)
 80048dc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80048e0:	6013      	str	r3, [r2, #0]
 80048e2:	4b6f      	ldr	r3, [pc, #444]	@ (8004aa0 <HAL_RCC_OscConfig+0x26c>)
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	4a6e      	ldr	r2, [pc, #440]	@ (8004aa0 <HAL_RCC_OscConfig+0x26c>)
 80048e8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80048ec:	6013      	str	r3, [r2, #0]
 80048ee:	e00b      	b.n	8004908 <HAL_RCC_OscConfig+0xd4>
 80048f0:	4b6b      	ldr	r3, [pc, #428]	@ (8004aa0 <HAL_RCC_OscConfig+0x26c>)
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	4a6a      	ldr	r2, [pc, #424]	@ (8004aa0 <HAL_RCC_OscConfig+0x26c>)
 80048f6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80048fa:	6013      	str	r3, [r2, #0]
 80048fc:	4b68      	ldr	r3, [pc, #416]	@ (8004aa0 <HAL_RCC_OscConfig+0x26c>)
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	4a67      	ldr	r2, [pc, #412]	@ (8004aa0 <HAL_RCC_OscConfig+0x26c>)
 8004902:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004906:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	685b      	ldr	r3, [r3, #4]
 800490c:	2b00      	cmp	r3, #0
 800490e:	d013      	beq.n	8004938 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004910:	f7fd fde2 	bl	80024d8 <HAL_GetTick>
 8004914:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004916:	e008      	b.n	800492a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004918:	f7fd fdde 	bl	80024d8 <HAL_GetTick>
 800491c:	4602      	mov	r2, r0
 800491e:	693b      	ldr	r3, [r7, #16]
 8004920:	1ad3      	subs	r3, r2, r3
 8004922:	2b64      	cmp	r3, #100	@ 0x64
 8004924:	d901      	bls.n	800492a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004926:	2303      	movs	r3, #3
 8004928:	e200      	b.n	8004d2c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800492a:	4b5d      	ldr	r3, [pc, #372]	@ (8004aa0 <HAL_RCC_OscConfig+0x26c>)
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004932:	2b00      	cmp	r3, #0
 8004934:	d0f0      	beq.n	8004918 <HAL_RCC_OscConfig+0xe4>
 8004936:	e014      	b.n	8004962 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004938:	f7fd fdce 	bl	80024d8 <HAL_GetTick>
 800493c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800493e:	e008      	b.n	8004952 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004940:	f7fd fdca 	bl	80024d8 <HAL_GetTick>
 8004944:	4602      	mov	r2, r0
 8004946:	693b      	ldr	r3, [r7, #16]
 8004948:	1ad3      	subs	r3, r2, r3
 800494a:	2b64      	cmp	r3, #100	@ 0x64
 800494c:	d901      	bls.n	8004952 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800494e:	2303      	movs	r3, #3
 8004950:	e1ec      	b.n	8004d2c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004952:	4b53      	ldr	r3, [pc, #332]	@ (8004aa0 <HAL_RCC_OscConfig+0x26c>)
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800495a:	2b00      	cmp	r3, #0
 800495c:	d1f0      	bne.n	8004940 <HAL_RCC_OscConfig+0x10c>
 800495e:	e000      	b.n	8004962 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004960:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	f003 0302 	and.w	r3, r3, #2
 800496a:	2b00      	cmp	r3, #0
 800496c:	d063      	beq.n	8004a36 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800496e:	4b4c      	ldr	r3, [pc, #304]	@ (8004aa0 <HAL_RCC_OscConfig+0x26c>)
 8004970:	685b      	ldr	r3, [r3, #4]
 8004972:	f003 030c 	and.w	r3, r3, #12
 8004976:	2b00      	cmp	r3, #0
 8004978:	d00b      	beq.n	8004992 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800497a:	4b49      	ldr	r3, [pc, #292]	@ (8004aa0 <HAL_RCC_OscConfig+0x26c>)
 800497c:	685b      	ldr	r3, [r3, #4]
 800497e:	f003 030c 	and.w	r3, r3, #12
 8004982:	2b08      	cmp	r3, #8
 8004984:	d11c      	bne.n	80049c0 <HAL_RCC_OscConfig+0x18c>
 8004986:	4b46      	ldr	r3, [pc, #280]	@ (8004aa0 <HAL_RCC_OscConfig+0x26c>)
 8004988:	685b      	ldr	r3, [r3, #4]
 800498a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800498e:	2b00      	cmp	r3, #0
 8004990:	d116      	bne.n	80049c0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004992:	4b43      	ldr	r3, [pc, #268]	@ (8004aa0 <HAL_RCC_OscConfig+0x26c>)
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	f003 0302 	and.w	r3, r3, #2
 800499a:	2b00      	cmp	r3, #0
 800499c:	d005      	beq.n	80049aa <HAL_RCC_OscConfig+0x176>
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	691b      	ldr	r3, [r3, #16]
 80049a2:	2b01      	cmp	r3, #1
 80049a4:	d001      	beq.n	80049aa <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80049a6:	2301      	movs	r3, #1
 80049a8:	e1c0      	b.n	8004d2c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80049aa:	4b3d      	ldr	r3, [pc, #244]	@ (8004aa0 <HAL_RCC_OscConfig+0x26c>)
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	695b      	ldr	r3, [r3, #20]
 80049b6:	00db      	lsls	r3, r3, #3
 80049b8:	4939      	ldr	r1, [pc, #228]	@ (8004aa0 <HAL_RCC_OscConfig+0x26c>)
 80049ba:	4313      	orrs	r3, r2
 80049bc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80049be:	e03a      	b.n	8004a36 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	691b      	ldr	r3, [r3, #16]
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d020      	beq.n	8004a0a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80049c8:	4b36      	ldr	r3, [pc, #216]	@ (8004aa4 <HAL_RCC_OscConfig+0x270>)
 80049ca:	2201      	movs	r2, #1
 80049cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80049ce:	f7fd fd83 	bl	80024d8 <HAL_GetTick>
 80049d2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80049d4:	e008      	b.n	80049e8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80049d6:	f7fd fd7f 	bl	80024d8 <HAL_GetTick>
 80049da:	4602      	mov	r2, r0
 80049dc:	693b      	ldr	r3, [r7, #16]
 80049de:	1ad3      	subs	r3, r2, r3
 80049e0:	2b02      	cmp	r3, #2
 80049e2:	d901      	bls.n	80049e8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80049e4:	2303      	movs	r3, #3
 80049e6:	e1a1      	b.n	8004d2c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80049e8:	4b2d      	ldr	r3, [pc, #180]	@ (8004aa0 <HAL_RCC_OscConfig+0x26c>)
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	f003 0302 	and.w	r3, r3, #2
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d0f0      	beq.n	80049d6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80049f4:	4b2a      	ldr	r3, [pc, #168]	@ (8004aa0 <HAL_RCC_OscConfig+0x26c>)
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	695b      	ldr	r3, [r3, #20]
 8004a00:	00db      	lsls	r3, r3, #3
 8004a02:	4927      	ldr	r1, [pc, #156]	@ (8004aa0 <HAL_RCC_OscConfig+0x26c>)
 8004a04:	4313      	orrs	r3, r2
 8004a06:	600b      	str	r3, [r1, #0]
 8004a08:	e015      	b.n	8004a36 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004a0a:	4b26      	ldr	r3, [pc, #152]	@ (8004aa4 <HAL_RCC_OscConfig+0x270>)
 8004a0c:	2200      	movs	r2, #0
 8004a0e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a10:	f7fd fd62 	bl	80024d8 <HAL_GetTick>
 8004a14:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004a16:	e008      	b.n	8004a2a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004a18:	f7fd fd5e 	bl	80024d8 <HAL_GetTick>
 8004a1c:	4602      	mov	r2, r0
 8004a1e:	693b      	ldr	r3, [r7, #16]
 8004a20:	1ad3      	subs	r3, r2, r3
 8004a22:	2b02      	cmp	r3, #2
 8004a24:	d901      	bls.n	8004a2a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8004a26:	2303      	movs	r3, #3
 8004a28:	e180      	b.n	8004d2c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004a2a:	4b1d      	ldr	r3, [pc, #116]	@ (8004aa0 <HAL_RCC_OscConfig+0x26c>)
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	f003 0302 	and.w	r3, r3, #2
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d1f0      	bne.n	8004a18 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	f003 0308 	and.w	r3, r3, #8
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d03a      	beq.n	8004ab8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	699b      	ldr	r3, [r3, #24]
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d019      	beq.n	8004a7e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004a4a:	4b17      	ldr	r3, [pc, #92]	@ (8004aa8 <HAL_RCC_OscConfig+0x274>)
 8004a4c:	2201      	movs	r2, #1
 8004a4e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004a50:	f7fd fd42 	bl	80024d8 <HAL_GetTick>
 8004a54:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004a56:	e008      	b.n	8004a6a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004a58:	f7fd fd3e 	bl	80024d8 <HAL_GetTick>
 8004a5c:	4602      	mov	r2, r0
 8004a5e:	693b      	ldr	r3, [r7, #16]
 8004a60:	1ad3      	subs	r3, r2, r3
 8004a62:	2b02      	cmp	r3, #2
 8004a64:	d901      	bls.n	8004a6a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8004a66:	2303      	movs	r3, #3
 8004a68:	e160      	b.n	8004d2c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004a6a:	4b0d      	ldr	r3, [pc, #52]	@ (8004aa0 <HAL_RCC_OscConfig+0x26c>)
 8004a6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a6e:	f003 0302 	and.w	r3, r3, #2
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d0f0      	beq.n	8004a58 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8004a76:	2001      	movs	r0, #1
 8004a78:	f000 face 	bl	8005018 <RCC_Delay>
 8004a7c:	e01c      	b.n	8004ab8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004a7e:	4b0a      	ldr	r3, [pc, #40]	@ (8004aa8 <HAL_RCC_OscConfig+0x274>)
 8004a80:	2200      	movs	r2, #0
 8004a82:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004a84:	f7fd fd28 	bl	80024d8 <HAL_GetTick>
 8004a88:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004a8a:	e00f      	b.n	8004aac <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004a8c:	f7fd fd24 	bl	80024d8 <HAL_GetTick>
 8004a90:	4602      	mov	r2, r0
 8004a92:	693b      	ldr	r3, [r7, #16]
 8004a94:	1ad3      	subs	r3, r2, r3
 8004a96:	2b02      	cmp	r3, #2
 8004a98:	d908      	bls.n	8004aac <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8004a9a:	2303      	movs	r3, #3
 8004a9c:	e146      	b.n	8004d2c <HAL_RCC_OscConfig+0x4f8>
 8004a9e:	bf00      	nop
 8004aa0:	40021000 	.word	0x40021000
 8004aa4:	42420000 	.word	0x42420000
 8004aa8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004aac:	4b92      	ldr	r3, [pc, #584]	@ (8004cf8 <HAL_RCC_OscConfig+0x4c4>)
 8004aae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ab0:	f003 0302 	and.w	r3, r3, #2
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d1e9      	bne.n	8004a8c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	f003 0304 	and.w	r3, r3, #4
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	f000 80a6 	beq.w	8004c12 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004ac6:	2300      	movs	r3, #0
 8004ac8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004aca:	4b8b      	ldr	r3, [pc, #556]	@ (8004cf8 <HAL_RCC_OscConfig+0x4c4>)
 8004acc:	69db      	ldr	r3, [r3, #28]
 8004ace:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d10d      	bne.n	8004af2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004ad6:	4b88      	ldr	r3, [pc, #544]	@ (8004cf8 <HAL_RCC_OscConfig+0x4c4>)
 8004ad8:	69db      	ldr	r3, [r3, #28]
 8004ada:	4a87      	ldr	r2, [pc, #540]	@ (8004cf8 <HAL_RCC_OscConfig+0x4c4>)
 8004adc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004ae0:	61d3      	str	r3, [r2, #28]
 8004ae2:	4b85      	ldr	r3, [pc, #532]	@ (8004cf8 <HAL_RCC_OscConfig+0x4c4>)
 8004ae4:	69db      	ldr	r3, [r3, #28]
 8004ae6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004aea:	60bb      	str	r3, [r7, #8]
 8004aec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004aee:	2301      	movs	r3, #1
 8004af0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004af2:	4b82      	ldr	r3, [pc, #520]	@ (8004cfc <HAL_RCC_OscConfig+0x4c8>)
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d118      	bne.n	8004b30 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004afe:	4b7f      	ldr	r3, [pc, #508]	@ (8004cfc <HAL_RCC_OscConfig+0x4c8>)
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	4a7e      	ldr	r2, [pc, #504]	@ (8004cfc <HAL_RCC_OscConfig+0x4c8>)
 8004b04:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004b08:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004b0a:	f7fd fce5 	bl	80024d8 <HAL_GetTick>
 8004b0e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b10:	e008      	b.n	8004b24 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004b12:	f7fd fce1 	bl	80024d8 <HAL_GetTick>
 8004b16:	4602      	mov	r2, r0
 8004b18:	693b      	ldr	r3, [r7, #16]
 8004b1a:	1ad3      	subs	r3, r2, r3
 8004b1c:	2b64      	cmp	r3, #100	@ 0x64
 8004b1e:	d901      	bls.n	8004b24 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004b20:	2303      	movs	r3, #3
 8004b22:	e103      	b.n	8004d2c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b24:	4b75      	ldr	r3, [pc, #468]	@ (8004cfc <HAL_RCC_OscConfig+0x4c8>)
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d0f0      	beq.n	8004b12 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	68db      	ldr	r3, [r3, #12]
 8004b34:	2b01      	cmp	r3, #1
 8004b36:	d106      	bne.n	8004b46 <HAL_RCC_OscConfig+0x312>
 8004b38:	4b6f      	ldr	r3, [pc, #444]	@ (8004cf8 <HAL_RCC_OscConfig+0x4c4>)
 8004b3a:	6a1b      	ldr	r3, [r3, #32]
 8004b3c:	4a6e      	ldr	r2, [pc, #440]	@ (8004cf8 <HAL_RCC_OscConfig+0x4c4>)
 8004b3e:	f043 0301 	orr.w	r3, r3, #1
 8004b42:	6213      	str	r3, [r2, #32]
 8004b44:	e02d      	b.n	8004ba2 <HAL_RCC_OscConfig+0x36e>
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	68db      	ldr	r3, [r3, #12]
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d10c      	bne.n	8004b68 <HAL_RCC_OscConfig+0x334>
 8004b4e:	4b6a      	ldr	r3, [pc, #424]	@ (8004cf8 <HAL_RCC_OscConfig+0x4c4>)
 8004b50:	6a1b      	ldr	r3, [r3, #32]
 8004b52:	4a69      	ldr	r2, [pc, #420]	@ (8004cf8 <HAL_RCC_OscConfig+0x4c4>)
 8004b54:	f023 0301 	bic.w	r3, r3, #1
 8004b58:	6213      	str	r3, [r2, #32]
 8004b5a:	4b67      	ldr	r3, [pc, #412]	@ (8004cf8 <HAL_RCC_OscConfig+0x4c4>)
 8004b5c:	6a1b      	ldr	r3, [r3, #32]
 8004b5e:	4a66      	ldr	r2, [pc, #408]	@ (8004cf8 <HAL_RCC_OscConfig+0x4c4>)
 8004b60:	f023 0304 	bic.w	r3, r3, #4
 8004b64:	6213      	str	r3, [r2, #32]
 8004b66:	e01c      	b.n	8004ba2 <HAL_RCC_OscConfig+0x36e>
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	68db      	ldr	r3, [r3, #12]
 8004b6c:	2b05      	cmp	r3, #5
 8004b6e:	d10c      	bne.n	8004b8a <HAL_RCC_OscConfig+0x356>
 8004b70:	4b61      	ldr	r3, [pc, #388]	@ (8004cf8 <HAL_RCC_OscConfig+0x4c4>)
 8004b72:	6a1b      	ldr	r3, [r3, #32]
 8004b74:	4a60      	ldr	r2, [pc, #384]	@ (8004cf8 <HAL_RCC_OscConfig+0x4c4>)
 8004b76:	f043 0304 	orr.w	r3, r3, #4
 8004b7a:	6213      	str	r3, [r2, #32]
 8004b7c:	4b5e      	ldr	r3, [pc, #376]	@ (8004cf8 <HAL_RCC_OscConfig+0x4c4>)
 8004b7e:	6a1b      	ldr	r3, [r3, #32]
 8004b80:	4a5d      	ldr	r2, [pc, #372]	@ (8004cf8 <HAL_RCC_OscConfig+0x4c4>)
 8004b82:	f043 0301 	orr.w	r3, r3, #1
 8004b86:	6213      	str	r3, [r2, #32]
 8004b88:	e00b      	b.n	8004ba2 <HAL_RCC_OscConfig+0x36e>
 8004b8a:	4b5b      	ldr	r3, [pc, #364]	@ (8004cf8 <HAL_RCC_OscConfig+0x4c4>)
 8004b8c:	6a1b      	ldr	r3, [r3, #32]
 8004b8e:	4a5a      	ldr	r2, [pc, #360]	@ (8004cf8 <HAL_RCC_OscConfig+0x4c4>)
 8004b90:	f023 0301 	bic.w	r3, r3, #1
 8004b94:	6213      	str	r3, [r2, #32]
 8004b96:	4b58      	ldr	r3, [pc, #352]	@ (8004cf8 <HAL_RCC_OscConfig+0x4c4>)
 8004b98:	6a1b      	ldr	r3, [r3, #32]
 8004b9a:	4a57      	ldr	r2, [pc, #348]	@ (8004cf8 <HAL_RCC_OscConfig+0x4c4>)
 8004b9c:	f023 0304 	bic.w	r3, r3, #4
 8004ba0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	68db      	ldr	r3, [r3, #12]
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d015      	beq.n	8004bd6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004baa:	f7fd fc95 	bl	80024d8 <HAL_GetTick>
 8004bae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004bb0:	e00a      	b.n	8004bc8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004bb2:	f7fd fc91 	bl	80024d8 <HAL_GetTick>
 8004bb6:	4602      	mov	r2, r0
 8004bb8:	693b      	ldr	r3, [r7, #16]
 8004bba:	1ad3      	subs	r3, r2, r3
 8004bbc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004bc0:	4293      	cmp	r3, r2
 8004bc2:	d901      	bls.n	8004bc8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004bc4:	2303      	movs	r3, #3
 8004bc6:	e0b1      	b.n	8004d2c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004bc8:	4b4b      	ldr	r3, [pc, #300]	@ (8004cf8 <HAL_RCC_OscConfig+0x4c4>)
 8004bca:	6a1b      	ldr	r3, [r3, #32]
 8004bcc:	f003 0302 	and.w	r3, r3, #2
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d0ee      	beq.n	8004bb2 <HAL_RCC_OscConfig+0x37e>
 8004bd4:	e014      	b.n	8004c00 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004bd6:	f7fd fc7f 	bl	80024d8 <HAL_GetTick>
 8004bda:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004bdc:	e00a      	b.n	8004bf4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004bde:	f7fd fc7b 	bl	80024d8 <HAL_GetTick>
 8004be2:	4602      	mov	r2, r0
 8004be4:	693b      	ldr	r3, [r7, #16]
 8004be6:	1ad3      	subs	r3, r2, r3
 8004be8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004bec:	4293      	cmp	r3, r2
 8004bee:	d901      	bls.n	8004bf4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004bf0:	2303      	movs	r3, #3
 8004bf2:	e09b      	b.n	8004d2c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004bf4:	4b40      	ldr	r3, [pc, #256]	@ (8004cf8 <HAL_RCC_OscConfig+0x4c4>)
 8004bf6:	6a1b      	ldr	r3, [r3, #32]
 8004bf8:	f003 0302 	and.w	r3, r3, #2
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d1ee      	bne.n	8004bde <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004c00:	7dfb      	ldrb	r3, [r7, #23]
 8004c02:	2b01      	cmp	r3, #1
 8004c04:	d105      	bne.n	8004c12 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004c06:	4b3c      	ldr	r3, [pc, #240]	@ (8004cf8 <HAL_RCC_OscConfig+0x4c4>)
 8004c08:	69db      	ldr	r3, [r3, #28]
 8004c0a:	4a3b      	ldr	r2, [pc, #236]	@ (8004cf8 <HAL_RCC_OscConfig+0x4c4>)
 8004c0c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004c10:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	69db      	ldr	r3, [r3, #28]
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	f000 8087 	beq.w	8004d2a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004c1c:	4b36      	ldr	r3, [pc, #216]	@ (8004cf8 <HAL_RCC_OscConfig+0x4c4>)
 8004c1e:	685b      	ldr	r3, [r3, #4]
 8004c20:	f003 030c 	and.w	r3, r3, #12
 8004c24:	2b08      	cmp	r3, #8
 8004c26:	d061      	beq.n	8004cec <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	69db      	ldr	r3, [r3, #28]
 8004c2c:	2b02      	cmp	r3, #2
 8004c2e:	d146      	bne.n	8004cbe <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004c30:	4b33      	ldr	r3, [pc, #204]	@ (8004d00 <HAL_RCC_OscConfig+0x4cc>)
 8004c32:	2200      	movs	r2, #0
 8004c34:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c36:	f7fd fc4f 	bl	80024d8 <HAL_GetTick>
 8004c3a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004c3c:	e008      	b.n	8004c50 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004c3e:	f7fd fc4b 	bl	80024d8 <HAL_GetTick>
 8004c42:	4602      	mov	r2, r0
 8004c44:	693b      	ldr	r3, [r7, #16]
 8004c46:	1ad3      	subs	r3, r2, r3
 8004c48:	2b02      	cmp	r3, #2
 8004c4a:	d901      	bls.n	8004c50 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004c4c:	2303      	movs	r3, #3
 8004c4e:	e06d      	b.n	8004d2c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004c50:	4b29      	ldr	r3, [pc, #164]	@ (8004cf8 <HAL_RCC_OscConfig+0x4c4>)
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d1f0      	bne.n	8004c3e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	6a1b      	ldr	r3, [r3, #32]
 8004c60:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004c64:	d108      	bne.n	8004c78 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004c66:	4b24      	ldr	r3, [pc, #144]	@ (8004cf8 <HAL_RCC_OscConfig+0x4c4>)
 8004c68:	685b      	ldr	r3, [r3, #4]
 8004c6a:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	689b      	ldr	r3, [r3, #8]
 8004c72:	4921      	ldr	r1, [pc, #132]	@ (8004cf8 <HAL_RCC_OscConfig+0x4c4>)
 8004c74:	4313      	orrs	r3, r2
 8004c76:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004c78:	4b1f      	ldr	r3, [pc, #124]	@ (8004cf8 <HAL_RCC_OscConfig+0x4c4>)
 8004c7a:	685b      	ldr	r3, [r3, #4]
 8004c7c:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	6a19      	ldr	r1, [r3, #32]
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c88:	430b      	orrs	r3, r1
 8004c8a:	491b      	ldr	r1, [pc, #108]	@ (8004cf8 <HAL_RCC_OscConfig+0x4c4>)
 8004c8c:	4313      	orrs	r3, r2
 8004c8e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004c90:	4b1b      	ldr	r3, [pc, #108]	@ (8004d00 <HAL_RCC_OscConfig+0x4cc>)
 8004c92:	2201      	movs	r2, #1
 8004c94:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c96:	f7fd fc1f 	bl	80024d8 <HAL_GetTick>
 8004c9a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004c9c:	e008      	b.n	8004cb0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004c9e:	f7fd fc1b 	bl	80024d8 <HAL_GetTick>
 8004ca2:	4602      	mov	r2, r0
 8004ca4:	693b      	ldr	r3, [r7, #16]
 8004ca6:	1ad3      	subs	r3, r2, r3
 8004ca8:	2b02      	cmp	r3, #2
 8004caa:	d901      	bls.n	8004cb0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004cac:	2303      	movs	r3, #3
 8004cae:	e03d      	b.n	8004d2c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004cb0:	4b11      	ldr	r3, [pc, #68]	@ (8004cf8 <HAL_RCC_OscConfig+0x4c4>)
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d0f0      	beq.n	8004c9e <HAL_RCC_OscConfig+0x46a>
 8004cbc:	e035      	b.n	8004d2a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004cbe:	4b10      	ldr	r3, [pc, #64]	@ (8004d00 <HAL_RCC_OscConfig+0x4cc>)
 8004cc0:	2200      	movs	r2, #0
 8004cc2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004cc4:	f7fd fc08 	bl	80024d8 <HAL_GetTick>
 8004cc8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004cca:	e008      	b.n	8004cde <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004ccc:	f7fd fc04 	bl	80024d8 <HAL_GetTick>
 8004cd0:	4602      	mov	r2, r0
 8004cd2:	693b      	ldr	r3, [r7, #16]
 8004cd4:	1ad3      	subs	r3, r2, r3
 8004cd6:	2b02      	cmp	r3, #2
 8004cd8:	d901      	bls.n	8004cde <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8004cda:	2303      	movs	r3, #3
 8004cdc:	e026      	b.n	8004d2c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004cde:	4b06      	ldr	r3, [pc, #24]	@ (8004cf8 <HAL_RCC_OscConfig+0x4c4>)
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d1f0      	bne.n	8004ccc <HAL_RCC_OscConfig+0x498>
 8004cea:	e01e      	b.n	8004d2a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	69db      	ldr	r3, [r3, #28]
 8004cf0:	2b01      	cmp	r3, #1
 8004cf2:	d107      	bne.n	8004d04 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8004cf4:	2301      	movs	r3, #1
 8004cf6:	e019      	b.n	8004d2c <HAL_RCC_OscConfig+0x4f8>
 8004cf8:	40021000 	.word	0x40021000
 8004cfc:	40007000 	.word	0x40007000
 8004d00:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004d04:	4b0b      	ldr	r3, [pc, #44]	@ (8004d34 <HAL_RCC_OscConfig+0x500>)
 8004d06:	685b      	ldr	r3, [r3, #4]
 8004d08:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	6a1b      	ldr	r3, [r3, #32]
 8004d14:	429a      	cmp	r2, r3
 8004d16:	d106      	bne.n	8004d26 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004d22:	429a      	cmp	r2, r3
 8004d24:	d001      	beq.n	8004d2a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8004d26:	2301      	movs	r3, #1
 8004d28:	e000      	b.n	8004d2c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8004d2a:	2300      	movs	r3, #0
}
 8004d2c:	4618      	mov	r0, r3
 8004d2e:	3718      	adds	r7, #24
 8004d30:	46bd      	mov	sp, r7
 8004d32:	bd80      	pop	{r7, pc}
 8004d34:	40021000 	.word	0x40021000

08004d38 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004d38:	b580      	push	{r7, lr}
 8004d3a:	b084      	sub	sp, #16
 8004d3c:	af00      	add	r7, sp, #0
 8004d3e:	6078      	str	r0, [r7, #4]
 8004d40:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d101      	bne.n	8004d4c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004d48:	2301      	movs	r3, #1
 8004d4a:	e0d0      	b.n	8004eee <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004d4c:	4b6a      	ldr	r3, [pc, #424]	@ (8004ef8 <HAL_RCC_ClockConfig+0x1c0>)
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	f003 0307 	and.w	r3, r3, #7
 8004d54:	683a      	ldr	r2, [r7, #0]
 8004d56:	429a      	cmp	r2, r3
 8004d58:	d910      	bls.n	8004d7c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004d5a:	4b67      	ldr	r3, [pc, #412]	@ (8004ef8 <HAL_RCC_ClockConfig+0x1c0>)
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	f023 0207 	bic.w	r2, r3, #7
 8004d62:	4965      	ldr	r1, [pc, #404]	@ (8004ef8 <HAL_RCC_ClockConfig+0x1c0>)
 8004d64:	683b      	ldr	r3, [r7, #0]
 8004d66:	4313      	orrs	r3, r2
 8004d68:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d6a:	4b63      	ldr	r3, [pc, #396]	@ (8004ef8 <HAL_RCC_ClockConfig+0x1c0>)
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	f003 0307 	and.w	r3, r3, #7
 8004d72:	683a      	ldr	r2, [r7, #0]
 8004d74:	429a      	cmp	r2, r3
 8004d76:	d001      	beq.n	8004d7c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004d78:	2301      	movs	r3, #1
 8004d7a:	e0b8      	b.n	8004eee <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	f003 0302 	and.w	r3, r3, #2
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d020      	beq.n	8004dca <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	f003 0304 	and.w	r3, r3, #4
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d005      	beq.n	8004da0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004d94:	4b59      	ldr	r3, [pc, #356]	@ (8004efc <HAL_RCC_ClockConfig+0x1c4>)
 8004d96:	685b      	ldr	r3, [r3, #4]
 8004d98:	4a58      	ldr	r2, [pc, #352]	@ (8004efc <HAL_RCC_ClockConfig+0x1c4>)
 8004d9a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8004d9e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	f003 0308 	and.w	r3, r3, #8
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d005      	beq.n	8004db8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004dac:	4b53      	ldr	r3, [pc, #332]	@ (8004efc <HAL_RCC_ClockConfig+0x1c4>)
 8004dae:	685b      	ldr	r3, [r3, #4]
 8004db0:	4a52      	ldr	r2, [pc, #328]	@ (8004efc <HAL_RCC_ClockConfig+0x1c4>)
 8004db2:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8004db6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004db8:	4b50      	ldr	r3, [pc, #320]	@ (8004efc <HAL_RCC_ClockConfig+0x1c4>)
 8004dba:	685b      	ldr	r3, [r3, #4]
 8004dbc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	689b      	ldr	r3, [r3, #8]
 8004dc4:	494d      	ldr	r1, [pc, #308]	@ (8004efc <HAL_RCC_ClockConfig+0x1c4>)
 8004dc6:	4313      	orrs	r3, r2
 8004dc8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	f003 0301 	and.w	r3, r3, #1
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d040      	beq.n	8004e58 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	685b      	ldr	r3, [r3, #4]
 8004dda:	2b01      	cmp	r3, #1
 8004ddc:	d107      	bne.n	8004dee <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004dde:	4b47      	ldr	r3, [pc, #284]	@ (8004efc <HAL_RCC_ClockConfig+0x1c4>)
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d115      	bne.n	8004e16 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004dea:	2301      	movs	r3, #1
 8004dec:	e07f      	b.n	8004eee <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	685b      	ldr	r3, [r3, #4]
 8004df2:	2b02      	cmp	r3, #2
 8004df4:	d107      	bne.n	8004e06 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004df6:	4b41      	ldr	r3, [pc, #260]	@ (8004efc <HAL_RCC_ClockConfig+0x1c4>)
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d109      	bne.n	8004e16 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004e02:	2301      	movs	r3, #1
 8004e04:	e073      	b.n	8004eee <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004e06:	4b3d      	ldr	r3, [pc, #244]	@ (8004efc <HAL_RCC_ClockConfig+0x1c4>)
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	f003 0302 	and.w	r3, r3, #2
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d101      	bne.n	8004e16 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004e12:	2301      	movs	r3, #1
 8004e14:	e06b      	b.n	8004eee <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004e16:	4b39      	ldr	r3, [pc, #228]	@ (8004efc <HAL_RCC_ClockConfig+0x1c4>)
 8004e18:	685b      	ldr	r3, [r3, #4]
 8004e1a:	f023 0203 	bic.w	r2, r3, #3
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	685b      	ldr	r3, [r3, #4]
 8004e22:	4936      	ldr	r1, [pc, #216]	@ (8004efc <HAL_RCC_ClockConfig+0x1c4>)
 8004e24:	4313      	orrs	r3, r2
 8004e26:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004e28:	f7fd fb56 	bl	80024d8 <HAL_GetTick>
 8004e2c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004e2e:	e00a      	b.n	8004e46 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004e30:	f7fd fb52 	bl	80024d8 <HAL_GetTick>
 8004e34:	4602      	mov	r2, r0
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	1ad3      	subs	r3, r2, r3
 8004e3a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004e3e:	4293      	cmp	r3, r2
 8004e40:	d901      	bls.n	8004e46 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004e42:	2303      	movs	r3, #3
 8004e44:	e053      	b.n	8004eee <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004e46:	4b2d      	ldr	r3, [pc, #180]	@ (8004efc <HAL_RCC_ClockConfig+0x1c4>)
 8004e48:	685b      	ldr	r3, [r3, #4]
 8004e4a:	f003 020c 	and.w	r2, r3, #12
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	685b      	ldr	r3, [r3, #4]
 8004e52:	009b      	lsls	r3, r3, #2
 8004e54:	429a      	cmp	r2, r3
 8004e56:	d1eb      	bne.n	8004e30 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004e58:	4b27      	ldr	r3, [pc, #156]	@ (8004ef8 <HAL_RCC_ClockConfig+0x1c0>)
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	f003 0307 	and.w	r3, r3, #7
 8004e60:	683a      	ldr	r2, [r7, #0]
 8004e62:	429a      	cmp	r2, r3
 8004e64:	d210      	bcs.n	8004e88 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004e66:	4b24      	ldr	r3, [pc, #144]	@ (8004ef8 <HAL_RCC_ClockConfig+0x1c0>)
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	f023 0207 	bic.w	r2, r3, #7
 8004e6e:	4922      	ldr	r1, [pc, #136]	@ (8004ef8 <HAL_RCC_ClockConfig+0x1c0>)
 8004e70:	683b      	ldr	r3, [r7, #0]
 8004e72:	4313      	orrs	r3, r2
 8004e74:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004e76:	4b20      	ldr	r3, [pc, #128]	@ (8004ef8 <HAL_RCC_ClockConfig+0x1c0>)
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	f003 0307 	and.w	r3, r3, #7
 8004e7e:	683a      	ldr	r2, [r7, #0]
 8004e80:	429a      	cmp	r2, r3
 8004e82:	d001      	beq.n	8004e88 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004e84:	2301      	movs	r3, #1
 8004e86:	e032      	b.n	8004eee <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	f003 0304 	and.w	r3, r3, #4
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d008      	beq.n	8004ea6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004e94:	4b19      	ldr	r3, [pc, #100]	@ (8004efc <HAL_RCC_ClockConfig+0x1c4>)
 8004e96:	685b      	ldr	r3, [r3, #4]
 8004e98:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	68db      	ldr	r3, [r3, #12]
 8004ea0:	4916      	ldr	r1, [pc, #88]	@ (8004efc <HAL_RCC_ClockConfig+0x1c4>)
 8004ea2:	4313      	orrs	r3, r2
 8004ea4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	f003 0308 	and.w	r3, r3, #8
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d009      	beq.n	8004ec6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004eb2:	4b12      	ldr	r3, [pc, #72]	@ (8004efc <HAL_RCC_ClockConfig+0x1c4>)
 8004eb4:	685b      	ldr	r3, [r3, #4]
 8004eb6:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	691b      	ldr	r3, [r3, #16]
 8004ebe:	00db      	lsls	r3, r3, #3
 8004ec0:	490e      	ldr	r1, [pc, #56]	@ (8004efc <HAL_RCC_ClockConfig+0x1c4>)
 8004ec2:	4313      	orrs	r3, r2
 8004ec4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004ec6:	f000 f821 	bl	8004f0c <HAL_RCC_GetSysClockFreq>
 8004eca:	4602      	mov	r2, r0
 8004ecc:	4b0b      	ldr	r3, [pc, #44]	@ (8004efc <HAL_RCC_ClockConfig+0x1c4>)
 8004ece:	685b      	ldr	r3, [r3, #4]
 8004ed0:	091b      	lsrs	r3, r3, #4
 8004ed2:	f003 030f 	and.w	r3, r3, #15
 8004ed6:	490a      	ldr	r1, [pc, #40]	@ (8004f00 <HAL_RCC_ClockConfig+0x1c8>)
 8004ed8:	5ccb      	ldrb	r3, [r1, r3]
 8004eda:	fa22 f303 	lsr.w	r3, r2, r3
 8004ede:	4a09      	ldr	r2, [pc, #36]	@ (8004f04 <HAL_RCC_ClockConfig+0x1cc>)
 8004ee0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004ee2:	4b09      	ldr	r3, [pc, #36]	@ (8004f08 <HAL_RCC_ClockConfig+0x1d0>)
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	4618      	mov	r0, r3
 8004ee8:	f7fd fab4 	bl	8002454 <HAL_InitTick>

  return HAL_OK;
 8004eec:	2300      	movs	r3, #0
}
 8004eee:	4618      	mov	r0, r3
 8004ef0:	3710      	adds	r7, #16
 8004ef2:	46bd      	mov	sp, r7
 8004ef4:	bd80      	pop	{r7, pc}
 8004ef6:	bf00      	nop
 8004ef8:	40022000 	.word	0x40022000
 8004efc:	40021000 	.word	0x40021000
 8004f00:	08008968 	.word	0x08008968
 8004f04:	20000000 	.word	0x20000000
 8004f08:	20000004 	.word	0x20000004

08004f0c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004f0c:	b480      	push	{r7}
 8004f0e:	b087      	sub	sp, #28
 8004f10:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004f12:	2300      	movs	r3, #0
 8004f14:	60fb      	str	r3, [r7, #12]
 8004f16:	2300      	movs	r3, #0
 8004f18:	60bb      	str	r3, [r7, #8]
 8004f1a:	2300      	movs	r3, #0
 8004f1c:	617b      	str	r3, [r7, #20]
 8004f1e:	2300      	movs	r3, #0
 8004f20:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8004f22:	2300      	movs	r3, #0
 8004f24:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004f26:	4b1e      	ldr	r3, [pc, #120]	@ (8004fa0 <HAL_RCC_GetSysClockFreq+0x94>)
 8004f28:	685b      	ldr	r3, [r3, #4]
 8004f2a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	f003 030c 	and.w	r3, r3, #12
 8004f32:	2b04      	cmp	r3, #4
 8004f34:	d002      	beq.n	8004f3c <HAL_RCC_GetSysClockFreq+0x30>
 8004f36:	2b08      	cmp	r3, #8
 8004f38:	d003      	beq.n	8004f42 <HAL_RCC_GetSysClockFreq+0x36>
 8004f3a:	e027      	b.n	8004f8c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004f3c:	4b19      	ldr	r3, [pc, #100]	@ (8004fa4 <HAL_RCC_GetSysClockFreq+0x98>)
 8004f3e:	613b      	str	r3, [r7, #16]
      break;
 8004f40:	e027      	b.n	8004f92 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	0c9b      	lsrs	r3, r3, #18
 8004f46:	f003 030f 	and.w	r3, r3, #15
 8004f4a:	4a17      	ldr	r2, [pc, #92]	@ (8004fa8 <HAL_RCC_GetSysClockFreq+0x9c>)
 8004f4c:	5cd3      	ldrb	r3, [r2, r3]
 8004f4e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d010      	beq.n	8004f7c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004f5a:	4b11      	ldr	r3, [pc, #68]	@ (8004fa0 <HAL_RCC_GetSysClockFreq+0x94>)
 8004f5c:	685b      	ldr	r3, [r3, #4]
 8004f5e:	0c5b      	lsrs	r3, r3, #17
 8004f60:	f003 0301 	and.w	r3, r3, #1
 8004f64:	4a11      	ldr	r2, [pc, #68]	@ (8004fac <HAL_RCC_GetSysClockFreq+0xa0>)
 8004f66:	5cd3      	ldrb	r3, [r2, r3]
 8004f68:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	4a0d      	ldr	r2, [pc, #52]	@ (8004fa4 <HAL_RCC_GetSysClockFreq+0x98>)
 8004f6e:	fb03 f202 	mul.w	r2, r3, r2
 8004f72:	68bb      	ldr	r3, [r7, #8]
 8004f74:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f78:	617b      	str	r3, [r7, #20]
 8004f7a:	e004      	b.n	8004f86 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	4a0c      	ldr	r2, [pc, #48]	@ (8004fb0 <HAL_RCC_GetSysClockFreq+0xa4>)
 8004f80:	fb02 f303 	mul.w	r3, r2, r3
 8004f84:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8004f86:	697b      	ldr	r3, [r7, #20]
 8004f88:	613b      	str	r3, [r7, #16]
      break;
 8004f8a:	e002      	b.n	8004f92 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004f8c:	4b05      	ldr	r3, [pc, #20]	@ (8004fa4 <HAL_RCC_GetSysClockFreq+0x98>)
 8004f8e:	613b      	str	r3, [r7, #16]
      break;
 8004f90:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004f92:	693b      	ldr	r3, [r7, #16]
}
 8004f94:	4618      	mov	r0, r3
 8004f96:	371c      	adds	r7, #28
 8004f98:	46bd      	mov	sp, r7
 8004f9a:	bc80      	pop	{r7}
 8004f9c:	4770      	bx	lr
 8004f9e:	bf00      	nop
 8004fa0:	40021000 	.word	0x40021000
 8004fa4:	007a1200 	.word	0x007a1200
 8004fa8:	08008980 	.word	0x08008980
 8004fac:	08008990 	.word	0x08008990
 8004fb0:	003d0900 	.word	0x003d0900

08004fb4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004fb4:	b480      	push	{r7}
 8004fb6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004fb8:	4b02      	ldr	r3, [pc, #8]	@ (8004fc4 <HAL_RCC_GetHCLKFreq+0x10>)
 8004fba:	681b      	ldr	r3, [r3, #0]
}
 8004fbc:	4618      	mov	r0, r3
 8004fbe:	46bd      	mov	sp, r7
 8004fc0:	bc80      	pop	{r7}
 8004fc2:	4770      	bx	lr
 8004fc4:	20000000 	.word	0x20000000

08004fc8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004fc8:	b580      	push	{r7, lr}
 8004fca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004fcc:	f7ff fff2 	bl	8004fb4 <HAL_RCC_GetHCLKFreq>
 8004fd0:	4602      	mov	r2, r0
 8004fd2:	4b05      	ldr	r3, [pc, #20]	@ (8004fe8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004fd4:	685b      	ldr	r3, [r3, #4]
 8004fd6:	0a1b      	lsrs	r3, r3, #8
 8004fd8:	f003 0307 	and.w	r3, r3, #7
 8004fdc:	4903      	ldr	r1, [pc, #12]	@ (8004fec <HAL_RCC_GetPCLK1Freq+0x24>)
 8004fde:	5ccb      	ldrb	r3, [r1, r3]
 8004fe0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004fe4:	4618      	mov	r0, r3
 8004fe6:	bd80      	pop	{r7, pc}
 8004fe8:	40021000 	.word	0x40021000
 8004fec:	08008978 	.word	0x08008978

08004ff0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004ff0:	b580      	push	{r7, lr}
 8004ff2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004ff4:	f7ff ffde 	bl	8004fb4 <HAL_RCC_GetHCLKFreq>
 8004ff8:	4602      	mov	r2, r0
 8004ffa:	4b05      	ldr	r3, [pc, #20]	@ (8005010 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004ffc:	685b      	ldr	r3, [r3, #4]
 8004ffe:	0adb      	lsrs	r3, r3, #11
 8005000:	f003 0307 	and.w	r3, r3, #7
 8005004:	4903      	ldr	r1, [pc, #12]	@ (8005014 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005006:	5ccb      	ldrb	r3, [r1, r3]
 8005008:	fa22 f303 	lsr.w	r3, r2, r3
}
 800500c:	4618      	mov	r0, r3
 800500e:	bd80      	pop	{r7, pc}
 8005010:	40021000 	.word	0x40021000
 8005014:	08008978 	.word	0x08008978

08005018 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8005018:	b480      	push	{r7}
 800501a:	b085      	sub	sp, #20
 800501c:	af00      	add	r7, sp, #0
 800501e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8005020:	4b0a      	ldr	r3, [pc, #40]	@ (800504c <RCC_Delay+0x34>)
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	4a0a      	ldr	r2, [pc, #40]	@ (8005050 <RCC_Delay+0x38>)
 8005026:	fba2 2303 	umull	r2, r3, r2, r3
 800502a:	0a5b      	lsrs	r3, r3, #9
 800502c:	687a      	ldr	r2, [r7, #4]
 800502e:	fb02 f303 	mul.w	r3, r2, r3
 8005032:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8005034:	bf00      	nop
  }
  while (Delay --);
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	1e5a      	subs	r2, r3, #1
 800503a:	60fa      	str	r2, [r7, #12]
 800503c:	2b00      	cmp	r3, #0
 800503e:	d1f9      	bne.n	8005034 <RCC_Delay+0x1c>
}
 8005040:	bf00      	nop
 8005042:	bf00      	nop
 8005044:	3714      	adds	r7, #20
 8005046:	46bd      	mov	sp, r7
 8005048:	bc80      	pop	{r7}
 800504a:	4770      	bx	lr
 800504c:	20000000 	.word	0x20000000
 8005050:	10624dd3 	.word	0x10624dd3

08005054 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005054:	b580      	push	{r7, lr}
 8005056:	b082      	sub	sp, #8
 8005058:	af00      	add	r7, sp, #0
 800505a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	2b00      	cmp	r3, #0
 8005060:	d101      	bne.n	8005066 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005062:	2301      	movs	r3, #1
 8005064:	e041      	b.n	80050ea <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800506c:	b2db      	uxtb	r3, r3
 800506e:	2b00      	cmp	r3, #0
 8005070:	d106      	bne.n	8005080 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	2200      	movs	r2, #0
 8005076:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800507a:	6878      	ldr	r0, [r7, #4]
 800507c:	f7fc fe88 	bl	8001d90 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	2202      	movs	r2, #2
 8005084:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681a      	ldr	r2, [r3, #0]
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	3304      	adds	r3, #4
 8005090:	4619      	mov	r1, r3
 8005092:	4610      	mov	r0, r2
 8005094:	f000 f940 	bl	8005318 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	2201      	movs	r2, #1
 800509c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	2201      	movs	r2, #1
 80050a4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	2201      	movs	r2, #1
 80050ac:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	2201      	movs	r2, #1
 80050b4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	2201      	movs	r2, #1
 80050bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	2201      	movs	r2, #1
 80050c4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	2201      	movs	r2, #1
 80050cc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	2201      	movs	r2, #1
 80050d4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	2201      	movs	r2, #1
 80050dc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	2201      	movs	r2, #1
 80050e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80050e8:	2300      	movs	r3, #0
}
 80050ea:	4618      	mov	r0, r3
 80050ec:	3708      	adds	r7, #8
 80050ee:	46bd      	mov	sp, r7
 80050f0:	bd80      	pop	{r7, pc}
	...

080050f4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80050f4:	b480      	push	{r7}
 80050f6:	b085      	sub	sp, #20
 80050f8:	af00      	add	r7, sp, #0
 80050fa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005102:	b2db      	uxtb	r3, r3
 8005104:	2b01      	cmp	r3, #1
 8005106:	d001      	beq.n	800510c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8005108:	2301      	movs	r3, #1
 800510a:	e032      	b.n	8005172 <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	2202      	movs	r2, #2
 8005110:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	4a18      	ldr	r2, [pc, #96]	@ (800517c <HAL_TIM_Base_Start+0x88>)
 800511a:	4293      	cmp	r3, r2
 800511c:	d00e      	beq.n	800513c <HAL_TIM_Base_Start+0x48>
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005126:	d009      	beq.n	800513c <HAL_TIM_Base_Start+0x48>
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	4a14      	ldr	r2, [pc, #80]	@ (8005180 <HAL_TIM_Base_Start+0x8c>)
 800512e:	4293      	cmp	r3, r2
 8005130:	d004      	beq.n	800513c <HAL_TIM_Base_Start+0x48>
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	4a13      	ldr	r2, [pc, #76]	@ (8005184 <HAL_TIM_Base_Start+0x90>)
 8005138:	4293      	cmp	r3, r2
 800513a:	d111      	bne.n	8005160 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	689b      	ldr	r3, [r3, #8]
 8005142:	f003 0307 	and.w	r3, r3, #7
 8005146:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	2b06      	cmp	r3, #6
 800514c:	d010      	beq.n	8005170 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	681a      	ldr	r2, [r3, #0]
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	f042 0201 	orr.w	r2, r2, #1
 800515c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800515e:	e007      	b.n	8005170 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	681a      	ldr	r2, [r3, #0]
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	f042 0201 	orr.w	r2, r2, #1
 800516e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005170:	2300      	movs	r3, #0
}
 8005172:	4618      	mov	r0, r3
 8005174:	3714      	adds	r7, #20
 8005176:	46bd      	mov	sp, r7
 8005178:	bc80      	pop	{r7}
 800517a:	4770      	bx	lr
 800517c:	40012c00 	.word	0x40012c00
 8005180:	40000400 	.word	0x40000400
 8005184:	40000800 	.word	0x40000800

08005188 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005188:	b580      	push	{r7, lr}
 800518a:	b084      	sub	sp, #16
 800518c:	af00      	add	r7, sp, #0
 800518e:	6078      	str	r0, [r7, #4]
 8005190:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005192:	2300      	movs	r3, #0
 8005194:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800519c:	2b01      	cmp	r3, #1
 800519e:	d101      	bne.n	80051a4 <HAL_TIM_ConfigClockSource+0x1c>
 80051a0:	2302      	movs	r3, #2
 80051a2:	e0b4      	b.n	800530e <HAL_TIM_ConfigClockSource+0x186>
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	2201      	movs	r2, #1
 80051a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	2202      	movs	r2, #2
 80051b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	689b      	ldr	r3, [r3, #8]
 80051ba:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80051bc:	68bb      	ldr	r3, [r7, #8]
 80051be:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80051c2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80051c4:	68bb      	ldr	r3, [r7, #8]
 80051c6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80051ca:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	68ba      	ldr	r2, [r7, #8]
 80051d2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80051d4:	683b      	ldr	r3, [r7, #0]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80051dc:	d03e      	beq.n	800525c <HAL_TIM_ConfigClockSource+0xd4>
 80051de:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80051e2:	f200 8087 	bhi.w	80052f4 <HAL_TIM_ConfigClockSource+0x16c>
 80051e6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80051ea:	f000 8086 	beq.w	80052fa <HAL_TIM_ConfigClockSource+0x172>
 80051ee:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80051f2:	d87f      	bhi.n	80052f4 <HAL_TIM_ConfigClockSource+0x16c>
 80051f4:	2b70      	cmp	r3, #112	@ 0x70
 80051f6:	d01a      	beq.n	800522e <HAL_TIM_ConfigClockSource+0xa6>
 80051f8:	2b70      	cmp	r3, #112	@ 0x70
 80051fa:	d87b      	bhi.n	80052f4 <HAL_TIM_ConfigClockSource+0x16c>
 80051fc:	2b60      	cmp	r3, #96	@ 0x60
 80051fe:	d050      	beq.n	80052a2 <HAL_TIM_ConfigClockSource+0x11a>
 8005200:	2b60      	cmp	r3, #96	@ 0x60
 8005202:	d877      	bhi.n	80052f4 <HAL_TIM_ConfigClockSource+0x16c>
 8005204:	2b50      	cmp	r3, #80	@ 0x50
 8005206:	d03c      	beq.n	8005282 <HAL_TIM_ConfigClockSource+0xfa>
 8005208:	2b50      	cmp	r3, #80	@ 0x50
 800520a:	d873      	bhi.n	80052f4 <HAL_TIM_ConfigClockSource+0x16c>
 800520c:	2b40      	cmp	r3, #64	@ 0x40
 800520e:	d058      	beq.n	80052c2 <HAL_TIM_ConfigClockSource+0x13a>
 8005210:	2b40      	cmp	r3, #64	@ 0x40
 8005212:	d86f      	bhi.n	80052f4 <HAL_TIM_ConfigClockSource+0x16c>
 8005214:	2b30      	cmp	r3, #48	@ 0x30
 8005216:	d064      	beq.n	80052e2 <HAL_TIM_ConfigClockSource+0x15a>
 8005218:	2b30      	cmp	r3, #48	@ 0x30
 800521a:	d86b      	bhi.n	80052f4 <HAL_TIM_ConfigClockSource+0x16c>
 800521c:	2b20      	cmp	r3, #32
 800521e:	d060      	beq.n	80052e2 <HAL_TIM_ConfigClockSource+0x15a>
 8005220:	2b20      	cmp	r3, #32
 8005222:	d867      	bhi.n	80052f4 <HAL_TIM_ConfigClockSource+0x16c>
 8005224:	2b00      	cmp	r3, #0
 8005226:	d05c      	beq.n	80052e2 <HAL_TIM_ConfigClockSource+0x15a>
 8005228:	2b10      	cmp	r3, #16
 800522a:	d05a      	beq.n	80052e2 <HAL_TIM_ConfigClockSource+0x15a>
 800522c:	e062      	b.n	80052f4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005232:	683b      	ldr	r3, [r7, #0]
 8005234:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005236:	683b      	ldr	r3, [r7, #0]
 8005238:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800523a:	683b      	ldr	r3, [r7, #0]
 800523c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800523e:	f000 f950 	bl	80054e2 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	689b      	ldr	r3, [r3, #8]
 8005248:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800524a:	68bb      	ldr	r3, [r7, #8]
 800524c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005250:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	68ba      	ldr	r2, [r7, #8]
 8005258:	609a      	str	r2, [r3, #8]
      break;
 800525a:	e04f      	b.n	80052fc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005260:	683b      	ldr	r3, [r7, #0]
 8005262:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005264:	683b      	ldr	r3, [r7, #0]
 8005266:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005268:	683b      	ldr	r3, [r7, #0]
 800526a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800526c:	f000 f939 	bl	80054e2 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	689a      	ldr	r2, [r3, #8]
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800527e:	609a      	str	r2, [r3, #8]
      break;
 8005280:	e03c      	b.n	80052fc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005286:	683b      	ldr	r3, [r7, #0]
 8005288:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800528a:	683b      	ldr	r3, [r7, #0]
 800528c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800528e:	461a      	mov	r2, r3
 8005290:	f000 f8b0 	bl	80053f4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	2150      	movs	r1, #80	@ 0x50
 800529a:	4618      	mov	r0, r3
 800529c:	f000 f907 	bl	80054ae <TIM_ITRx_SetConfig>
      break;
 80052a0:	e02c      	b.n	80052fc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80052a6:	683b      	ldr	r3, [r7, #0]
 80052a8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80052aa:	683b      	ldr	r3, [r7, #0]
 80052ac:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80052ae:	461a      	mov	r2, r3
 80052b0:	f000 f8ce 	bl	8005450 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	2160      	movs	r1, #96	@ 0x60
 80052ba:	4618      	mov	r0, r3
 80052bc:	f000 f8f7 	bl	80054ae <TIM_ITRx_SetConfig>
      break;
 80052c0:	e01c      	b.n	80052fc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80052c6:	683b      	ldr	r3, [r7, #0]
 80052c8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80052ca:	683b      	ldr	r3, [r7, #0]
 80052cc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80052ce:	461a      	mov	r2, r3
 80052d0:	f000 f890 	bl	80053f4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	2140      	movs	r1, #64	@ 0x40
 80052da:	4618      	mov	r0, r3
 80052dc:	f000 f8e7 	bl	80054ae <TIM_ITRx_SetConfig>
      break;
 80052e0:	e00c      	b.n	80052fc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681a      	ldr	r2, [r3, #0]
 80052e6:	683b      	ldr	r3, [r7, #0]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	4619      	mov	r1, r3
 80052ec:	4610      	mov	r0, r2
 80052ee:	f000 f8de 	bl	80054ae <TIM_ITRx_SetConfig>
      break;
 80052f2:	e003      	b.n	80052fc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80052f4:	2301      	movs	r3, #1
 80052f6:	73fb      	strb	r3, [r7, #15]
      break;
 80052f8:	e000      	b.n	80052fc <HAL_TIM_ConfigClockSource+0x174>
      break;
 80052fa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	2201      	movs	r2, #1
 8005300:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	2200      	movs	r2, #0
 8005308:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800530c:	7bfb      	ldrb	r3, [r7, #15]
}
 800530e:	4618      	mov	r0, r3
 8005310:	3710      	adds	r7, #16
 8005312:	46bd      	mov	sp, r7
 8005314:	bd80      	pop	{r7, pc}
	...

08005318 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005318:	b480      	push	{r7}
 800531a:	b085      	sub	sp, #20
 800531c:	af00      	add	r7, sp, #0
 800531e:	6078      	str	r0, [r7, #4]
 8005320:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	4a2f      	ldr	r2, [pc, #188]	@ (80053e8 <TIM_Base_SetConfig+0xd0>)
 800532c:	4293      	cmp	r3, r2
 800532e:	d00b      	beq.n	8005348 <TIM_Base_SetConfig+0x30>
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005336:	d007      	beq.n	8005348 <TIM_Base_SetConfig+0x30>
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	4a2c      	ldr	r2, [pc, #176]	@ (80053ec <TIM_Base_SetConfig+0xd4>)
 800533c:	4293      	cmp	r3, r2
 800533e:	d003      	beq.n	8005348 <TIM_Base_SetConfig+0x30>
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	4a2b      	ldr	r2, [pc, #172]	@ (80053f0 <TIM_Base_SetConfig+0xd8>)
 8005344:	4293      	cmp	r3, r2
 8005346:	d108      	bne.n	800535a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800534e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005350:	683b      	ldr	r3, [r7, #0]
 8005352:	685b      	ldr	r3, [r3, #4]
 8005354:	68fa      	ldr	r2, [r7, #12]
 8005356:	4313      	orrs	r3, r2
 8005358:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	4a22      	ldr	r2, [pc, #136]	@ (80053e8 <TIM_Base_SetConfig+0xd0>)
 800535e:	4293      	cmp	r3, r2
 8005360:	d00b      	beq.n	800537a <TIM_Base_SetConfig+0x62>
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005368:	d007      	beq.n	800537a <TIM_Base_SetConfig+0x62>
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	4a1f      	ldr	r2, [pc, #124]	@ (80053ec <TIM_Base_SetConfig+0xd4>)
 800536e:	4293      	cmp	r3, r2
 8005370:	d003      	beq.n	800537a <TIM_Base_SetConfig+0x62>
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	4a1e      	ldr	r2, [pc, #120]	@ (80053f0 <TIM_Base_SetConfig+0xd8>)
 8005376:	4293      	cmp	r3, r2
 8005378:	d108      	bne.n	800538c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005380:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005382:	683b      	ldr	r3, [r7, #0]
 8005384:	68db      	ldr	r3, [r3, #12]
 8005386:	68fa      	ldr	r2, [r7, #12]
 8005388:	4313      	orrs	r3, r2
 800538a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005392:	683b      	ldr	r3, [r7, #0]
 8005394:	695b      	ldr	r3, [r3, #20]
 8005396:	4313      	orrs	r3, r2
 8005398:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	68fa      	ldr	r2, [r7, #12]
 800539e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80053a0:	683b      	ldr	r3, [r7, #0]
 80053a2:	689a      	ldr	r2, [r3, #8]
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80053a8:	683b      	ldr	r3, [r7, #0]
 80053aa:	681a      	ldr	r2, [r3, #0]
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	4a0d      	ldr	r2, [pc, #52]	@ (80053e8 <TIM_Base_SetConfig+0xd0>)
 80053b4:	4293      	cmp	r3, r2
 80053b6:	d103      	bne.n	80053c0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80053b8:	683b      	ldr	r3, [r7, #0]
 80053ba:	691a      	ldr	r2, [r3, #16]
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	2201      	movs	r2, #1
 80053c4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	691b      	ldr	r3, [r3, #16]
 80053ca:	f003 0301 	and.w	r3, r3, #1
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d005      	beq.n	80053de <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	691b      	ldr	r3, [r3, #16]
 80053d6:	f023 0201 	bic.w	r2, r3, #1
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	611a      	str	r2, [r3, #16]
  }
}
 80053de:	bf00      	nop
 80053e0:	3714      	adds	r7, #20
 80053e2:	46bd      	mov	sp, r7
 80053e4:	bc80      	pop	{r7}
 80053e6:	4770      	bx	lr
 80053e8:	40012c00 	.word	0x40012c00
 80053ec:	40000400 	.word	0x40000400
 80053f0:	40000800 	.word	0x40000800

080053f4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80053f4:	b480      	push	{r7}
 80053f6:	b087      	sub	sp, #28
 80053f8:	af00      	add	r7, sp, #0
 80053fa:	60f8      	str	r0, [r7, #12]
 80053fc:	60b9      	str	r1, [r7, #8]
 80053fe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	6a1b      	ldr	r3, [r3, #32]
 8005404:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	6a1b      	ldr	r3, [r3, #32]
 800540a:	f023 0201 	bic.w	r2, r3, #1
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	699b      	ldr	r3, [r3, #24]
 8005416:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005418:	693b      	ldr	r3, [r7, #16]
 800541a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800541e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	011b      	lsls	r3, r3, #4
 8005424:	693a      	ldr	r2, [r7, #16]
 8005426:	4313      	orrs	r3, r2
 8005428:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800542a:	697b      	ldr	r3, [r7, #20]
 800542c:	f023 030a 	bic.w	r3, r3, #10
 8005430:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005432:	697a      	ldr	r2, [r7, #20]
 8005434:	68bb      	ldr	r3, [r7, #8]
 8005436:	4313      	orrs	r3, r2
 8005438:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	693a      	ldr	r2, [r7, #16]
 800543e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	697a      	ldr	r2, [r7, #20]
 8005444:	621a      	str	r2, [r3, #32]
}
 8005446:	bf00      	nop
 8005448:	371c      	adds	r7, #28
 800544a:	46bd      	mov	sp, r7
 800544c:	bc80      	pop	{r7}
 800544e:	4770      	bx	lr

08005450 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005450:	b480      	push	{r7}
 8005452:	b087      	sub	sp, #28
 8005454:	af00      	add	r7, sp, #0
 8005456:	60f8      	str	r0, [r7, #12]
 8005458:	60b9      	str	r1, [r7, #8]
 800545a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	6a1b      	ldr	r3, [r3, #32]
 8005460:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	6a1b      	ldr	r3, [r3, #32]
 8005466:	f023 0210 	bic.w	r2, r3, #16
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	699b      	ldr	r3, [r3, #24]
 8005472:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005474:	693b      	ldr	r3, [r7, #16]
 8005476:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800547a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	031b      	lsls	r3, r3, #12
 8005480:	693a      	ldr	r2, [r7, #16]
 8005482:	4313      	orrs	r3, r2
 8005484:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005486:	697b      	ldr	r3, [r7, #20]
 8005488:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800548c:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800548e:	68bb      	ldr	r3, [r7, #8]
 8005490:	011b      	lsls	r3, r3, #4
 8005492:	697a      	ldr	r2, [r7, #20]
 8005494:	4313      	orrs	r3, r2
 8005496:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	693a      	ldr	r2, [r7, #16]
 800549c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	697a      	ldr	r2, [r7, #20]
 80054a2:	621a      	str	r2, [r3, #32]
}
 80054a4:	bf00      	nop
 80054a6:	371c      	adds	r7, #28
 80054a8:	46bd      	mov	sp, r7
 80054aa:	bc80      	pop	{r7}
 80054ac:	4770      	bx	lr

080054ae <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80054ae:	b480      	push	{r7}
 80054b0:	b085      	sub	sp, #20
 80054b2:	af00      	add	r7, sp, #0
 80054b4:	6078      	str	r0, [r7, #4]
 80054b6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	689b      	ldr	r3, [r3, #8]
 80054bc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80054c4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80054c6:	683a      	ldr	r2, [r7, #0]
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	4313      	orrs	r3, r2
 80054cc:	f043 0307 	orr.w	r3, r3, #7
 80054d0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	68fa      	ldr	r2, [r7, #12]
 80054d6:	609a      	str	r2, [r3, #8]
}
 80054d8:	bf00      	nop
 80054da:	3714      	adds	r7, #20
 80054dc:	46bd      	mov	sp, r7
 80054de:	bc80      	pop	{r7}
 80054e0:	4770      	bx	lr

080054e2 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80054e2:	b480      	push	{r7}
 80054e4:	b087      	sub	sp, #28
 80054e6:	af00      	add	r7, sp, #0
 80054e8:	60f8      	str	r0, [r7, #12]
 80054ea:	60b9      	str	r1, [r7, #8]
 80054ec:	607a      	str	r2, [r7, #4]
 80054ee:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	689b      	ldr	r3, [r3, #8]
 80054f4:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80054f6:	697b      	ldr	r3, [r7, #20]
 80054f8:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80054fc:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80054fe:	683b      	ldr	r3, [r7, #0]
 8005500:	021a      	lsls	r2, r3, #8
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	431a      	orrs	r2, r3
 8005506:	68bb      	ldr	r3, [r7, #8]
 8005508:	4313      	orrs	r3, r2
 800550a:	697a      	ldr	r2, [r7, #20]
 800550c:	4313      	orrs	r3, r2
 800550e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	697a      	ldr	r2, [r7, #20]
 8005514:	609a      	str	r2, [r3, #8]
}
 8005516:	bf00      	nop
 8005518:	371c      	adds	r7, #28
 800551a:	46bd      	mov	sp, r7
 800551c:	bc80      	pop	{r7}
 800551e:	4770      	bx	lr

08005520 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005520:	b480      	push	{r7}
 8005522:	b085      	sub	sp, #20
 8005524:	af00      	add	r7, sp, #0
 8005526:	6078      	str	r0, [r7, #4]
 8005528:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005530:	2b01      	cmp	r3, #1
 8005532:	d101      	bne.n	8005538 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005534:	2302      	movs	r3, #2
 8005536:	e046      	b.n	80055c6 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	2201      	movs	r2, #1
 800553c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	2202      	movs	r2, #2
 8005544:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	685b      	ldr	r3, [r3, #4]
 800554e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	689b      	ldr	r3, [r3, #8]
 8005556:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800555e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005560:	683b      	ldr	r3, [r7, #0]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	68fa      	ldr	r2, [r7, #12]
 8005566:	4313      	orrs	r3, r2
 8005568:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	68fa      	ldr	r2, [r7, #12]
 8005570:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	4a16      	ldr	r2, [pc, #88]	@ (80055d0 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8005578:	4293      	cmp	r3, r2
 800557a:	d00e      	beq.n	800559a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005584:	d009      	beq.n	800559a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	4a12      	ldr	r2, [pc, #72]	@ (80055d4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800558c:	4293      	cmp	r3, r2
 800558e:	d004      	beq.n	800559a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	4a10      	ldr	r2, [pc, #64]	@ (80055d8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8005596:	4293      	cmp	r3, r2
 8005598:	d10c      	bne.n	80055b4 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800559a:	68bb      	ldr	r3, [r7, #8]
 800559c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80055a0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80055a2:	683b      	ldr	r3, [r7, #0]
 80055a4:	685b      	ldr	r3, [r3, #4]
 80055a6:	68ba      	ldr	r2, [r7, #8]
 80055a8:	4313      	orrs	r3, r2
 80055aa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	68ba      	ldr	r2, [r7, #8]
 80055b2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	2201      	movs	r2, #1
 80055b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	2200      	movs	r2, #0
 80055c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80055c4:	2300      	movs	r3, #0
}
 80055c6:	4618      	mov	r0, r3
 80055c8:	3714      	adds	r7, #20
 80055ca:	46bd      	mov	sp, r7
 80055cc:	bc80      	pop	{r7}
 80055ce:	4770      	bx	lr
 80055d0:	40012c00 	.word	0x40012c00
 80055d4:	40000400 	.word	0x40000400
 80055d8:	40000800 	.word	0x40000800

080055dc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80055dc:	b580      	push	{r7, lr}
 80055de:	b082      	sub	sp, #8
 80055e0:	af00      	add	r7, sp, #0
 80055e2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d101      	bne.n	80055ee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80055ea:	2301      	movs	r3, #1
 80055ec:	e042      	b.n	8005674 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80055f4:	b2db      	uxtb	r3, r3
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d106      	bne.n	8005608 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	2200      	movs	r2, #0
 80055fe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005602:	6878      	ldr	r0, [r7, #4]
 8005604:	f7fc fb7a 	bl	8001cfc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	2224      	movs	r2, #36	@ 0x24
 800560c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	68da      	ldr	r2, [r3, #12]
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800561e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005620:	6878      	ldr	r0, [r7, #4]
 8005622:	f000 f971 	bl	8005908 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	691a      	ldr	r2, [r3, #16]
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005634:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	695a      	ldr	r2, [r3, #20]
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005644:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	68da      	ldr	r2, [r3, #12]
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005654:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	2200      	movs	r2, #0
 800565a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	2220      	movs	r2, #32
 8005660:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	2220      	movs	r2, #32
 8005668:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	2200      	movs	r2, #0
 8005670:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8005672:	2300      	movs	r3, #0
}
 8005674:	4618      	mov	r0, r3
 8005676:	3708      	adds	r7, #8
 8005678:	46bd      	mov	sp, r7
 800567a:	bd80      	pop	{r7, pc}

0800567c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800567c:	b580      	push	{r7, lr}
 800567e:	b08a      	sub	sp, #40	@ 0x28
 8005680:	af02      	add	r7, sp, #8
 8005682:	60f8      	str	r0, [r7, #12]
 8005684:	60b9      	str	r1, [r7, #8]
 8005686:	603b      	str	r3, [r7, #0]
 8005688:	4613      	mov	r3, r2
 800568a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800568c:	2300      	movs	r3, #0
 800568e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005696:	b2db      	uxtb	r3, r3
 8005698:	2b20      	cmp	r3, #32
 800569a:	d175      	bne.n	8005788 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800569c:	68bb      	ldr	r3, [r7, #8]
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d002      	beq.n	80056a8 <HAL_UART_Transmit+0x2c>
 80056a2:	88fb      	ldrh	r3, [r7, #6]
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d101      	bne.n	80056ac <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80056a8:	2301      	movs	r3, #1
 80056aa:	e06e      	b.n	800578a <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	2200      	movs	r2, #0
 80056b0:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	2221      	movs	r2, #33	@ 0x21
 80056b6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80056ba:	f7fc ff0d 	bl	80024d8 <HAL_GetTick>
 80056be:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	88fa      	ldrh	r2, [r7, #6]
 80056c4:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	88fa      	ldrh	r2, [r7, #6]
 80056ca:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	689b      	ldr	r3, [r3, #8]
 80056d0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80056d4:	d108      	bne.n	80056e8 <HAL_UART_Transmit+0x6c>
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	691b      	ldr	r3, [r3, #16]
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d104      	bne.n	80056e8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80056de:	2300      	movs	r3, #0
 80056e0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80056e2:	68bb      	ldr	r3, [r7, #8]
 80056e4:	61bb      	str	r3, [r7, #24]
 80056e6:	e003      	b.n	80056f0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80056e8:	68bb      	ldr	r3, [r7, #8]
 80056ea:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80056ec:	2300      	movs	r3, #0
 80056ee:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80056f0:	e02e      	b.n	8005750 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80056f2:	683b      	ldr	r3, [r7, #0]
 80056f4:	9300      	str	r3, [sp, #0]
 80056f6:	697b      	ldr	r3, [r7, #20]
 80056f8:	2200      	movs	r2, #0
 80056fa:	2180      	movs	r1, #128	@ 0x80
 80056fc:	68f8      	ldr	r0, [r7, #12]
 80056fe:	f000 f848 	bl	8005792 <UART_WaitOnFlagUntilTimeout>
 8005702:	4603      	mov	r3, r0
 8005704:	2b00      	cmp	r3, #0
 8005706:	d005      	beq.n	8005714 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	2220      	movs	r2, #32
 800570c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8005710:	2303      	movs	r3, #3
 8005712:	e03a      	b.n	800578a <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8005714:	69fb      	ldr	r3, [r7, #28]
 8005716:	2b00      	cmp	r3, #0
 8005718:	d10b      	bne.n	8005732 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800571a:	69bb      	ldr	r3, [r7, #24]
 800571c:	881b      	ldrh	r3, [r3, #0]
 800571e:	461a      	mov	r2, r3
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005728:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800572a:	69bb      	ldr	r3, [r7, #24]
 800572c:	3302      	adds	r3, #2
 800572e:	61bb      	str	r3, [r7, #24]
 8005730:	e007      	b.n	8005742 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005732:	69fb      	ldr	r3, [r7, #28]
 8005734:	781a      	ldrb	r2, [r3, #0]
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800573c:	69fb      	ldr	r3, [r7, #28]
 800573e:	3301      	adds	r3, #1
 8005740:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005746:	b29b      	uxth	r3, r3
 8005748:	3b01      	subs	r3, #1
 800574a:	b29a      	uxth	r2, r3
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005754:	b29b      	uxth	r3, r3
 8005756:	2b00      	cmp	r3, #0
 8005758:	d1cb      	bne.n	80056f2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800575a:	683b      	ldr	r3, [r7, #0]
 800575c:	9300      	str	r3, [sp, #0]
 800575e:	697b      	ldr	r3, [r7, #20]
 8005760:	2200      	movs	r2, #0
 8005762:	2140      	movs	r1, #64	@ 0x40
 8005764:	68f8      	ldr	r0, [r7, #12]
 8005766:	f000 f814 	bl	8005792 <UART_WaitOnFlagUntilTimeout>
 800576a:	4603      	mov	r3, r0
 800576c:	2b00      	cmp	r3, #0
 800576e:	d005      	beq.n	800577c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	2220      	movs	r2, #32
 8005774:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8005778:	2303      	movs	r3, #3
 800577a:	e006      	b.n	800578a <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	2220      	movs	r2, #32
 8005780:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8005784:	2300      	movs	r3, #0
 8005786:	e000      	b.n	800578a <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8005788:	2302      	movs	r3, #2
  }
}
 800578a:	4618      	mov	r0, r3
 800578c:	3720      	adds	r7, #32
 800578e:	46bd      	mov	sp, r7
 8005790:	bd80      	pop	{r7, pc}

08005792 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005792:	b580      	push	{r7, lr}
 8005794:	b086      	sub	sp, #24
 8005796:	af00      	add	r7, sp, #0
 8005798:	60f8      	str	r0, [r7, #12]
 800579a:	60b9      	str	r1, [r7, #8]
 800579c:	603b      	str	r3, [r7, #0]
 800579e:	4613      	mov	r3, r2
 80057a0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80057a2:	e03b      	b.n	800581c <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80057a4:	6a3b      	ldr	r3, [r7, #32]
 80057a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057aa:	d037      	beq.n	800581c <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80057ac:	f7fc fe94 	bl	80024d8 <HAL_GetTick>
 80057b0:	4602      	mov	r2, r0
 80057b2:	683b      	ldr	r3, [r7, #0]
 80057b4:	1ad3      	subs	r3, r2, r3
 80057b6:	6a3a      	ldr	r2, [r7, #32]
 80057b8:	429a      	cmp	r2, r3
 80057ba:	d302      	bcc.n	80057c2 <UART_WaitOnFlagUntilTimeout+0x30>
 80057bc:	6a3b      	ldr	r3, [r7, #32]
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d101      	bne.n	80057c6 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80057c2:	2303      	movs	r3, #3
 80057c4:	e03a      	b.n	800583c <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	68db      	ldr	r3, [r3, #12]
 80057cc:	f003 0304 	and.w	r3, r3, #4
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d023      	beq.n	800581c <UART_WaitOnFlagUntilTimeout+0x8a>
 80057d4:	68bb      	ldr	r3, [r7, #8]
 80057d6:	2b80      	cmp	r3, #128	@ 0x80
 80057d8:	d020      	beq.n	800581c <UART_WaitOnFlagUntilTimeout+0x8a>
 80057da:	68bb      	ldr	r3, [r7, #8]
 80057dc:	2b40      	cmp	r3, #64	@ 0x40
 80057de:	d01d      	beq.n	800581c <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	f003 0308 	and.w	r3, r3, #8
 80057ea:	2b08      	cmp	r3, #8
 80057ec:	d116      	bne.n	800581c <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80057ee:	2300      	movs	r3, #0
 80057f0:	617b      	str	r3, [r7, #20]
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	617b      	str	r3, [r7, #20]
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	685b      	ldr	r3, [r3, #4]
 8005800:	617b      	str	r3, [r7, #20]
 8005802:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005804:	68f8      	ldr	r0, [r7, #12]
 8005806:	f000 f81d 	bl	8005844 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	2208      	movs	r2, #8
 800580e:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	2200      	movs	r2, #0
 8005814:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8005818:	2301      	movs	r3, #1
 800581a:	e00f      	b.n	800583c <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	681a      	ldr	r2, [r3, #0]
 8005822:	68bb      	ldr	r3, [r7, #8]
 8005824:	4013      	ands	r3, r2
 8005826:	68ba      	ldr	r2, [r7, #8]
 8005828:	429a      	cmp	r2, r3
 800582a:	bf0c      	ite	eq
 800582c:	2301      	moveq	r3, #1
 800582e:	2300      	movne	r3, #0
 8005830:	b2db      	uxtb	r3, r3
 8005832:	461a      	mov	r2, r3
 8005834:	79fb      	ldrb	r3, [r7, #7]
 8005836:	429a      	cmp	r2, r3
 8005838:	d0b4      	beq.n	80057a4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800583a:	2300      	movs	r3, #0
}
 800583c:	4618      	mov	r0, r3
 800583e:	3718      	adds	r7, #24
 8005840:	46bd      	mov	sp, r7
 8005842:	bd80      	pop	{r7, pc}

08005844 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005844:	b480      	push	{r7}
 8005846:	b095      	sub	sp, #84	@ 0x54
 8005848:	af00      	add	r7, sp, #0
 800584a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	330c      	adds	r3, #12
 8005852:	637b      	str	r3, [r7, #52]	@ 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005854:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005856:	e853 3f00 	ldrex	r3, [r3]
 800585a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800585c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800585e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005862:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	330c      	adds	r3, #12
 800586a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800586c:	643a      	str	r2, [r7, #64]	@ 0x40
 800586e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005870:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005872:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005874:	e841 2300 	strex	r3, r2, [r1]
 8005878:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800587a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800587c:	2b00      	cmp	r3, #0
 800587e:	d1e5      	bne.n	800584c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	3314      	adds	r3, #20
 8005886:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005888:	6a3b      	ldr	r3, [r7, #32]
 800588a:	e853 3f00 	ldrex	r3, [r3]
 800588e:	61fb      	str	r3, [r7, #28]
   return(result);
 8005890:	69fb      	ldr	r3, [r7, #28]
 8005892:	f023 0301 	bic.w	r3, r3, #1
 8005896:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	3314      	adds	r3, #20
 800589e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80058a0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80058a2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058a4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80058a6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80058a8:	e841 2300 	strex	r3, r2, [r1]
 80058ac:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80058ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d1e5      	bne.n	8005880 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80058b8:	2b01      	cmp	r3, #1
 80058ba:	d119      	bne.n	80058f0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	330c      	adds	r3, #12
 80058c2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	e853 3f00 	ldrex	r3, [r3]
 80058ca:	60bb      	str	r3, [r7, #8]
   return(result);
 80058cc:	68bb      	ldr	r3, [r7, #8]
 80058ce:	f023 0310 	bic.w	r3, r3, #16
 80058d2:	647b      	str	r3, [r7, #68]	@ 0x44
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	330c      	adds	r3, #12
 80058da:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80058dc:	61ba      	str	r2, [r7, #24]
 80058de:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058e0:	6979      	ldr	r1, [r7, #20]
 80058e2:	69ba      	ldr	r2, [r7, #24]
 80058e4:	e841 2300 	strex	r3, r2, [r1]
 80058e8:	613b      	str	r3, [r7, #16]
   return(result);
 80058ea:	693b      	ldr	r3, [r7, #16]
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d1e5      	bne.n	80058bc <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	2220      	movs	r2, #32
 80058f4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	2200      	movs	r2, #0
 80058fc:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80058fe:	bf00      	nop
 8005900:	3754      	adds	r7, #84	@ 0x54
 8005902:	46bd      	mov	sp, r7
 8005904:	bc80      	pop	{r7}
 8005906:	4770      	bx	lr

08005908 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005908:	b580      	push	{r7, lr}
 800590a:	b084      	sub	sp, #16
 800590c:	af00      	add	r7, sp, #0
 800590e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	691b      	ldr	r3, [r3, #16]
 8005916:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	68da      	ldr	r2, [r3, #12]
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	430a      	orrs	r2, r1
 8005924:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	689a      	ldr	r2, [r3, #8]
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	691b      	ldr	r3, [r3, #16]
 800592e:	431a      	orrs	r2, r3
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	695b      	ldr	r3, [r3, #20]
 8005934:	4313      	orrs	r3, r2
 8005936:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	68db      	ldr	r3, [r3, #12]
 800593e:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8005942:	f023 030c 	bic.w	r3, r3, #12
 8005946:	687a      	ldr	r2, [r7, #4]
 8005948:	6812      	ldr	r2, [r2, #0]
 800594a:	68b9      	ldr	r1, [r7, #8]
 800594c:	430b      	orrs	r3, r1
 800594e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	695b      	ldr	r3, [r3, #20]
 8005956:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	699a      	ldr	r2, [r3, #24]
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	430a      	orrs	r2, r1
 8005964:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	4a2c      	ldr	r2, [pc, #176]	@ (8005a1c <UART_SetConfig+0x114>)
 800596c:	4293      	cmp	r3, r2
 800596e:	d103      	bne.n	8005978 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8005970:	f7ff fb3e 	bl	8004ff0 <HAL_RCC_GetPCLK2Freq>
 8005974:	60f8      	str	r0, [r7, #12]
 8005976:	e002      	b.n	800597e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8005978:	f7ff fb26 	bl	8004fc8 <HAL_RCC_GetPCLK1Freq>
 800597c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800597e:	68fa      	ldr	r2, [r7, #12]
 8005980:	4613      	mov	r3, r2
 8005982:	009b      	lsls	r3, r3, #2
 8005984:	4413      	add	r3, r2
 8005986:	009a      	lsls	r2, r3, #2
 8005988:	441a      	add	r2, r3
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	685b      	ldr	r3, [r3, #4]
 800598e:	009b      	lsls	r3, r3, #2
 8005990:	fbb2 f3f3 	udiv	r3, r2, r3
 8005994:	4a22      	ldr	r2, [pc, #136]	@ (8005a20 <UART_SetConfig+0x118>)
 8005996:	fba2 2303 	umull	r2, r3, r2, r3
 800599a:	095b      	lsrs	r3, r3, #5
 800599c:	0119      	lsls	r1, r3, #4
 800599e:	68fa      	ldr	r2, [r7, #12]
 80059a0:	4613      	mov	r3, r2
 80059a2:	009b      	lsls	r3, r3, #2
 80059a4:	4413      	add	r3, r2
 80059a6:	009a      	lsls	r2, r3, #2
 80059a8:	441a      	add	r2, r3
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	685b      	ldr	r3, [r3, #4]
 80059ae:	009b      	lsls	r3, r3, #2
 80059b0:	fbb2 f2f3 	udiv	r2, r2, r3
 80059b4:	4b1a      	ldr	r3, [pc, #104]	@ (8005a20 <UART_SetConfig+0x118>)
 80059b6:	fba3 0302 	umull	r0, r3, r3, r2
 80059ba:	095b      	lsrs	r3, r3, #5
 80059bc:	2064      	movs	r0, #100	@ 0x64
 80059be:	fb00 f303 	mul.w	r3, r0, r3
 80059c2:	1ad3      	subs	r3, r2, r3
 80059c4:	011b      	lsls	r3, r3, #4
 80059c6:	3332      	adds	r3, #50	@ 0x32
 80059c8:	4a15      	ldr	r2, [pc, #84]	@ (8005a20 <UART_SetConfig+0x118>)
 80059ca:	fba2 2303 	umull	r2, r3, r2, r3
 80059ce:	095b      	lsrs	r3, r3, #5
 80059d0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80059d4:	4419      	add	r1, r3
 80059d6:	68fa      	ldr	r2, [r7, #12]
 80059d8:	4613      	mov	r3, r2
 80059da:	009b      	lsls	r3, r3, #2
 80059dc:	4413      	add	r3, r2
 80059de:	009a      	lsls	r2, r3, #2
 80059e0:	441a      	add	r2, r3
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	685b      	ldr	r3, [r3, #4]
 80059e6:	009b      	lsls	r3, r3, #2
 80059e8:	fbb2 f2f3 	udiv	r2, r2, r3
 80059ec:	4b0c      	ldr	r3, [pc, #48]	@ (8005a20 <UART_SetConfig+0x118>)
 80059ee:	fba3 0302 	umull	r0, r3, r3, r2
 80059f2:	095b      	lsrs	r3, r3, #5
 80059f4:	2064      	movs	r0, #100	@ 0x64
 80059f6:	fb00 f303 	mul.w	r3, r0, r3
 80059fa:	1ad3      	subs	r3, r2, r3
 80059fc:	011b      	lsls	r3, r3, #4
 80059fe:	3332      	adds	r3, #50	@ 0x32
 8005a00:	4a07      	ldr	r2, [pc, #28]	@ (8005a20 <UART_SetConfig+0x118>)
 8005a02:	fba2 2303 	umull	r2, r3, r2, r3
 8005a06:	095b      	lsrs	r3, r3, #5
 8005a08:	f003 020f 	and.w	r2, r3, #15
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	440a      	add	r2, r1
 8005a12:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8005a14:	bf00      	nop
 8005a16:	3710      	adds	r7, #16
 8005a18:	46bd      	mov	sp, r7
 8005a1a:	bd80      	pop	{r7, pc}
 8005a1c:	40013800 	.word	0x40013800
 8005a20:	51eb851f 	.word	0x51eb851f

08005a24 <__cvt>:
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005a2a:	461d      	mov	r5, r3
 8005a2c:	bfbb      	ittet	lt
 8005a2e:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 8005a32:	461d      	movlt	r5, r3
 8005a34:	2300      	movge	r3, #0
 8005a36:	232d      	movlt	r3, #45	@ 0x2d
 8005a38:	b088      	sub	sp, #32
 8005a3a:	4614      	mov	r4, r2
 8005a3c:	bfb8      	it	lt
 8005a3e:	4614      	movlt	r4, r2
 8005a40:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8005a42:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 8005a44:	7013      	strb	r3, [r2, #0]
 8005a46:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8005a48:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 8005a4c:	f023 0820 	bic.w	r8, r3, #32
 8005a50:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8005a54:	d005      	beq.n	8005a62 <__cvt+0x3e>
 8005a56:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8005a5a:	d100      	bne.n	8005a5e <__cvt+0x3a>
 8005a5c:	3601      	adds	r6, #1
 8005a5e:	2302      	movs	r3, #2
 8005a60:	e000      	b.n	8005a64 <__cvt+0x40>
 8005a62:	2303      	movs	r3, #3
 8005a64:	aa07      	add	r2, sp, #28
 8005a66:	9204      	str	r2, [sp, #16]
 8005a68:	aa06      	add	r2, sp, #24
 8005a6a:	e9cd a202 	strd	sl, r2, [sp, #8]
 8005a6e:	e9cd 3600 	strd	r3, r6, [sp]
 8005a72:	4622      	mov	r2, r4
 8005a74:	462b      	mov	r3, r5
 8005a76:	f000 fea3 	bl	80067c0 <_dtoa_r>
 8005a7a:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8005a7e:	4607      	mov	r7, r0
 8005a80:	d119      	bne.n	8005ab6 <__cvt+0x92>
 8005a82:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8005a84:	07db      	lsls	r3, r3, #31
 8005a86:	d50e      	bpl.n	8005aa6 <__cvt+0x82>
 8005a88:	eb00 0906 	add.w	r9, r0, r6
 8005a8c:	2200      	movs	r2, #0
 8005a8e:	2300      	movs	r3, #0
 8005a90:	4620      	mov	r0, r4
 8005a92:	4629      	mov	r1, r5
 8005a94:	f7fa ff88 	bl	80009a8 <__aeabi_dcmpeq>
 8005a98:	b108      	cbz	r0, 8005a9e <__cvt+0x7a>
 8005a9a:	f8cd 901c 	str.w	r9, [sp, #28]
 8005a9e:	2230      	movs	r2, #48	@ 0x30
 8005aa0:	9b07      	ldr	r3, [sp, #28]
 8005aa2:	454b      	cmp	r3, r9
 8005aa4:	d31e      	bcc.n	8005ae4 <__cvt+0xc0>
 8005aa6:	4638      	mov	r0, r7
 8005aa8:	9b07      	ldr	r3, [sp, #28]
 8005aaa:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8005aac:	1bdb      	subs	r3, r3, r7
 8005aae:	6013      	str	r3, [r2, #0]
 8005ab0:	b008      	add	sp, #32
 8005ab2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005ab6:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8005aba:	eb00 0906 	add.w	r9, r0, r6
 8005abe:	d1e5      	bne.n	8005a8c <__cvt+0x68>
 8005ac0:	7803      	ldrb	r3, [r0, #0]
 8005ac2:	2b30      	cmp	r3, #48	@ 0x30
 8005ac4:	d10a      	bne.n	8005adc <__cvt+0xb8>
 8005ac6:	2200      	movs	r2, #0
 8005ac8:	2300      	movs	r3, #0
 8005aca:	4620      	mov	r0, r4
 8005acc:	4629      	mov	r1, r5
 8005ace:	f7fa ff6b 	bl	80009a8 <__aeabi_dcmpeq>
 8005ad2:	b918      	cbnz	r0, 8005adc <__cvt+0xb8>
 8005ad4:	f1c6 0601 	rsb	r6, r6, #1
 8005ad8:	f8ca 6000 	str.w	r6, [sl]
 8005adc:	f8da 3000 	ldr.w	r3, [sl]
 8005ae0:	4499      	add	r9, r3
 8005ae2:	e7d3      	b.n	8005a8c <__cvt+0x68>
 8005ae4:	1c59      	adds	r1, r3, #1
 8005ae6:	9107      	str	r1, [sp, #28]
 8005ae8:	701a      	strb	r2, [r3, #0]
 8005aea:	e7d9      	b.n	8005aa0 <__cvt+0x7c>

08005aec <__exponent>:
 8005aec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005aee:	2900      	cmp	r1, #0
 8005af0:	bfb6      	itet	lt
 8005af2:	232d      	movlt	r3, #45	@ 0x2d
 8005af4:	232b      	movge	r3, #43	@ 0x2b
 8005af6:	4249      	neglt	r1, r1
 8005af8:	2909      	cmp	r1, #9
 8005afa:	7002      	strb	r2, [r0, #0]
 8005afc:	7043      	strb	r3, [r0, #1]
 8005afe:	dd29      	ble.n	8005b54 <__exponent+0x68>
 8005b00:	f10d 0307 	add.w	r3, sp, #7
 8005b04:	461d      	mov	r5, r3
 8005b06:	270a      	movs	r7, #10
 8005b08:	fbb1 f6f7 	udiv	r6, r1, r7
 8005b0c:	461a      	mov	r2, r3
 8005b0e:	fb07 1416 	mls	r4, r7, r6, r1
 8005b12:	3430      	adds	r4, #48	@ 0x30
 8005b14:	f802 4c01 	strb.w	r4, [r2, #-1]
 8005b18:	460c      	mov	r4, r1
 8005b1a:	2c63      	cmp	r4, #99	@ 0x63
 8005b1c:	4631      	mov	r1, r6
 8005b1e:	f103 33ff 	add.w	r3, r3, #4294967295
 8005b22:	dcf1      	bgt.n	8005b08 <__exponent+0x1c>
 8005b24:	3130      	adds	r1, #48	@ 0x30
 8005b26:	1e94      	subs	r4, r2, #2
 8005b28:	f803 1c01 	strb.w	r1, [r3, #-1]
 8005b2c:	4623      	mov	r3, r4
 8005b2e:	1c41      	adds	r1, r0, #1
 8005b30:	42ab      	cmp	r3, r5
 8005b32:	d30a      	bcc.n	8005b4a <__exponent+0x5e>
 8005b34:	f10d 0309 	add.w	r3, sp, #9
 8005b38:	1a9b      	subs	r3, r3, r2
 8005b3a:	42ac      	cmp	r4, r5
 8005b3c:	bf88      	it	hi
 8005b3e:	2300      	movhi	r3, #0
 8005b40:	3302      	adds	r3, #2
 8005b42:	4403      	add	r3, r0
 8005b44:	1a18      	subs	r0, r3, r0
 8005b46:	b003      	add	sp, #12
 8005b48:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005b4a:	f813 6b01 	ldrb.w	r6, [r3], #1
 8005b4e:	f801 6f01 	strb.w	r6, [r1, #1]!
 8005b52:	e7ed      	b.n	8005b30 <__exponent+0x44>
 8005b54:	2330      	movs	r3, #48	@ 0x30
 8005b56:	3130      	adds	r1, #48	@ 0x30
 8005b58:	7083      	strb	r3, [r0, #2]
 8005b5a:	70c1      	strb	r1, [r0, #3]
 8005b5c:	1d03      	adds	r3, r0, #4
 8005b5e:	e7f1      	b.n	8005b44 <__exponent+0x58>

08005b60 <_printf_float>:
 8005b60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b64:	b091      	sub	sp, #68	@ 0x44
 8005b66:	460c      	mov	r4, r1
 8005b68:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 8005b6c:	4616      	mov	r6, r2
 8005b6e:	461f      	mov	r7, r3
 8005b70:	4605      	mov	r5, r0
 8005b72:	f000 fd07 	bl	8006584 <_localeconv_r>
 8005b76:	6803      	ldr	r3, [r0, #0]
 8005b78:	4618      	mov	r0, r3
 8005b7a:	9308      	str	r3, [sp, #32]
 8005b7c:	f7fa fae8 	bl	8000150 <strlen>
 8005b80:	2300      	movs	r3, #0
 8005b82:	930e      	str	r3, [sp, #56]	@ 0x38
 8005b84:	f8d8 3000 	ldr.w	r3, [r8]
 8005b88:	9009      	str	r0, [sp, #36]	@ 0x24
 8005b8a:	3307      	adds	r3, #7
 8005b8c:	f023 0307 	bic.w	r3, r3, #7
 8005b90:	f103 0208 	add.w	r2, r3, #8
 8005b94:	f894 a018 	ldrb.w	sl, [r4, #24]
 8005b98:	f8d4 b000 	ldr.w	fp, [r4]
 8005b9c:	f8c8 2000 	str.w	r2, [r8]
 8005ba0:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005ba4:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8005ba8:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005baa:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8005bae:	f04f 32ff 	mov.w	r2, #4294967295
 8005bb2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8005bb6:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8005bba:	4b9c      	ldr	r3, [pc, #624]	@ (8005e2c <_printf_float+0x2cc>)
 8005bbc:	f7fa ff26 	bl	8000a0c <__aeabi_dcmpun>
 8005bc0:	bb70      	cbnz	r0, 8005c20 <_printf_float+0xc0>
 8005bc2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8005bc6:	f04f 32ff 	mov.w	r2, #4294967295
 8005bca:	4b98      	ldr	r3, [pc, #608]	@ (8005e2c <_printf_float+0x2cc>)
 8005bcc:	f7fa ff00 	bl	80009d0 <__aeabi_dcmple>
 8005bd0:	bb30      	cbnz	r0, 8005c20 <_printf_float+0xc0>
 8005bd2:	2200      	movs	r2, #0
 8005bd4:	2300      	movs	r3, #0
 8005bd6:	4640      	mov	r0, r8
 8005bd8:	4649      	mov	r1, r9
 8005bda:	f7fa feef 	bl	80009bc <__aeabi_dcmplt>
 8005bde:	b110      	cbz	r0, 8005be6 <_printf_float+0x86>
 8005be0:	232d      	movs	r3, #45	@ 0x2d
 8005be2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005be6:	4a92      	ldr	r2, [pc, #584]	@ (8005e30 <_printf_float+0x2d0>)
 8005be8:	4b92      	ldr	r3, [pc, #584]	@ (8005e34 <_printf_float+0x2d4>)
 8005bea:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8005bee:	bf8c      	ite	hi
 8005bf0:	4690      	movhi	r8, r2
 8005bf2:	4698      	movls	r8, r3
 8005bf4:	2303      	movs	r3, #3
 8005bf6:	f04f 0900 	mov.w	r9, #0
 8005bfa:	6123      	str	r3, [r4, #16]
 8005bfc:	f02b 0304 	bic.w	r3, fp, #4
 8005c00:	6023      	str	r3, [r4, #0]
 8005c02:	4633      	mov	r3, r6
 8005c04:	4621      	mov	r1, r4
 8005c06:	4628      	mov	r0, r5
 8005c08:	9700      	str	r7, [sp, #0]
 8005c0a:	aa0f      	add	r2, sp, #60	@ 0x3c
 8005c0c:	f000 f9d4 	bl	8005fb8 <_printf_common>
 8005c10:	3001      	adds	r0, #1
 8005c12:	f040 8090 	bne.w	8005d36 <_printf_float+0x1d6>
 8005c16:	f04f 30ff 	mov.w	r0, #4294967295
 8005c1a:	b011      	add	sp, #68	@ 0x44
 8005c1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005c20:	4642      	mov	r2, r8
 8005c22:	464b      	mov	r3, r9
 8005c24:	4640      	mov	r0, r8
 8005c26:	4649      	mov	r1, r9
 8005c28:	f7fa fef0 	bl	8000a0c <__aeabi_dcmpun>
 8005c2c:	b148      	cbz	r0, 8005c42 <_printf_float+0xe2>
 8005c2e:	464b      	mov	r3, r9
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	bfb8      	it	lt
 8005c34:	232d      	movlt	r3, #45	@ 0x2d
 8005c36:	4a80      	ldr	r2, [pc, #512]	@ (8005e38 <_printf_float+0x2d8>)
 8005c38:	bfb8      	it	lt
 8005c3a:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8005c3e:	4b7f      	ldr	r3, [pc, #508]	@ (8005e3c <_printf_float+0x2dc>)
 8005c40:	e7d3      	b.n	8005bea <_printf_float+0x8a>
 8005c42:	6863      	ldr	r3, [r4, #4]
 8005c44:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 8005c48:	1c5a      	adds	r2, r3, #1
 8005c4a:	d13f      	bne.n	8005ccc <_printf_float+0x16c>
 8005c4c:	2306      	movs	r3, #6
 8005c4e:	6063      	str	r3, [r4, #4]
 8005c50:	2200      	movs	r2, #0
 8005c52:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 8005c56:	6023      	str	r3, [r4, #0]
 8005c58:	9206      	str	r2, [sp, #24]
 8005c5a:	aa0e      	add	r2, sp, #56	@ 0x38
 8005c5c:	e9cd a204 	strd	sl, r2, [sp, #16]
 8005c60:	aa0d      	add	r2, sp, #52	@ 0x34
 8005c62:	9203      	str	r2, [sp, #12]
 8005c64:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 8005c68:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8005c6c:	6863      	ldr	r3, [r4, #4]
 8005c6e:	4642      	mov	r2, r8
 8005c70:	9300      	str	r3, [sp, #0]
 8005c72:	4628      	mov	r0, r5
 8005c74:	464b      	mov	r3, r9
 8005c76:	910a      	str	r1, [sp, #40]	@ 0x28
 8005c78:	f7ff fed4 	bl	8005a24 <__cvt>
 8005c7c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8005c7e:	4680      	mov	r8, r0
 8005c80:	2947      	cmp	r1, #71	@ 0x47
 8005c82:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8005c84:	d128      	bne.n	8005cd8 <_printf_float+0x178>
 8005c86:	1cc8      	adds	r0, r1, #3
 8005c88:	db02      	blt.n	8005c90 <_printf_float+0x130>
 8005c8a:	6863      	ldr	r3, [r4, #4]
 8005c8c:	4299      	cmp	r1, r3
 8005c8e:	dd40      	ble.n	8005d12 <_printf_float+0x1b2>
 8005c90:	f1aa 0a02 	sub.w	sl, sl, #2
 8005c94:	fa5f fa8a 	uxtb.w	sl, sl
 8005c98:	4652      	mov	r2, sl
 8005c9a:	3901      	subs	r1, #1
 8005c9c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8005ca0:	910d      	str	r1, [sp, #52]	@ 0x34
 8005ca2:	f7ff ff23 	bl	8005aec <__exponent>
 8005ca6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8005ca8:	4681      	mov	r9, r0
 8005caa:	1813      	adds	r3, r2, r0
 8005cac:	2a01      	cmp	r2, #1
 8005cae:	6123      	str	r3, [r4, #16]
 8005cb0:	dc02      	bgt.n	8005cb8 <_printf_float+0x158>
 8005cb2:	6822      	ldr	r2, [r4, #0]
 8005cb4:	07d2      	lsls	r2, r2, #31
 8005cb6:	d501      	bpl.n	8005cbc <_printf_float+0x15c>
 8005cb8:	3301      	adds	r3, #1
 8005cba:	6123      	str	r3, [r4, #16]
 8005cbc:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d09e      	beq.n	8005c02 <_printf_float+0xa2>
 8005cc4:	232d      	movs	r3, #45	@ 0x2d
 8005cc6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005cca:	e79a      	b.n	8005c02 <_printf_float+0xa2>
 8005ccc:	2947      	cmp	r1, #71	@ 0x47
 8005cce:	d1bf      	bne.n	8005c50 <_printf_float+0xf0>
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d1bd      	bne.n	8005c50 <_printf_float+0xf0>
 8005cd4:	2301      	movs	r3, #1
 8005cd6:	e7ba      	b.n	8005c4e <_printf_float+0xee>
 8005cd8:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8005cdc:	d9dc      	bls.n	8005c98 <_printf_float+0x138>
 8005cde:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8005ce2:	d118      	bne.n	8005d16 <_printf_float+0x1b6>
 8005ce4:	2900      	cmp	r1, #0
 8005ce6:	6863      	ldr	r3, [r4, #4]
 8005ce8:	dd0b      	ble.n	8005d02 <_printf_float+0x1a2>
 8005cea:	6121      	str	r1, [r4, #16]
 8005cec:	b913      	cbnz	r3, 8005cf4 <_printf_float+0x194>
 8005cee:	6822      	ldr	r2, [r4, #0]
 8005cf0:	07d0      	lsls	r0, r2, #31
 8005cf2:	d502      	bpl.n	8005cfa <_printf_float+0x19a>
 8005cf4:	3301      	adds	r3, #1
 8005cf6:	440b      	add	r3, r1
 8005cf8:	6123      	str	r3, [r4, #16]
 8005cfa:	f04f 0900 	mov.w	r9, #0
 8005cfe:	65a1      	str	r1, [r4, #88]	@ 0x58
 8005d00:	e7dc      	b.n	8005cbc <_printf_float+0x15c>
 8005d02:	b913      	cbnz	r3, 8005d0a <_printf_float+0x1aa>
 8005d04:	6822      	ldr	r2, [r4, #0]
 8005d06:	07d2      	lsls	r2, r2, #31
 8005d08:	d501      	bpl.n	8005d0e <_printf_float+0x1ae>
 8005d0a:	3302      	adds	r3, #2
 8005d0c:	e7f4      	b.n	8005cf8 <_printf_float+0x198>
 8005d0e:	2301      	movs	r3, #1
 8005d10:	e7f2      	b.n	8005cf8 <_printf_float+0x198>
 8005d12:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8005d16:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005d18:	4299      	cmp	r1, r3
 8005d1a:	db05      	blt.n	8005d28 <_printf_float+0x1c8>
 8005d1c:	6823      	ldr	r3, [r4, #0]
 8005d1e:	6121      	str	r1, [r4, #16]
 8005d20:	07d8      	lsls	r0, r3, #31
 8005d22:	d5ea      	bpl.n	8005cfa <_printf_float+0x19a>
 8005d24:	1c4b      	adds	r3, r1, #1
 8005d26:	e7e7      	b.n	8005cf8 <_printf_float+0x198>
 8005d28:	2900      	cmp	r1, #0
 8005d2a:	bfcc      	ite	gt
 8005d2c:	2201      	movgt	r2, #1
 8005d2e:	f1c1 0202 	rsble	r2, r1, #2
 8005d32:	4413      	add	r3, r2
 8005d34:	e7e0      	b.n	8005cf8 <_printf_float+0x198>
 8005d36:	6823      	ldr	r3, [r4, #0]
 8005d38:	055a      	lsls	r2, r3, #21
 8005d3a:	d407      	bmi.n	8005d4c <_printf_float+0x1ec>
 8005d3c:	6923      	ldr	r3, [r4, #16]
 8005d3e:	4642      	mov	r2, r8
 8005d40:	4631      	mov	r1, r6
 8005d42:	4628      	mov	r0, r5
 8005d44:	47b8      	blx	r7
 8005d46:	3001      	adds	r0, #1
 8005d48:	d12b      	bne.n	8005da2 <_printf_float+0x242>
 8005d4a:	e764      	b.n	8005c16 <_printf_float+0xb6>
 8005d4c:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8005d50:	f240 80dc 	bls.w	8005f0c <_printf_float+0x3ac>
 8005d54:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8005d58:	2200      	movs	r2, #0
 8005d5a:	2300      	movs	r3, #0
 8005d5c:	f7fa fe24 	bl	80009a8 <__aeabi_dcmpeq>
 8005d60:	2800      	cmp	r0, #0
 8005d62:	d033      	beq.n	8005dcc <_printf_float+0x26c>
 8005d64:	2301      	movs	r3, #1
 8005d66:	4631      	mov	r1, r6
 8005d68:	4628      	mov	r0, r5
 8005d6a:	4a35      	ldr	r2, [pc, #212]	@ (8005e40 <_printf_float+0x2e0>)
 8005d6c:	47b8      	blx	r7
 8005d6e:	3001      	adds	r0, #1
 8005d70:	f43f af51 	beq.w	8005c16 <_printf_float+0xb6>
 8005d74:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 8005d78:	4543      	cmp	r3, r8
 8005d7a:	db02      	blt.n	8005d82 <_printf_float+0x222>
 8005d7c:	6823      	ldr	r3, [r4, #0]
 8005d7e:	07d8      	lsls	r0, r3, #31
 8005d80:	d50f      	bpl.n	8005da2 <_printf_float+0x242>
 8005d82:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8005d86:	4631      	mov	r1, r6
 8005d88:	4628      	mov	r0, r5
 8005d8a:	47b8      	blx	r7
 8005d8c:	3001      	adds	r0, #1
 8005d8e:	f43f af42 	beq.w	8005c16 <_printf_float+0xb6>
 8005d92:	f04f 0900 	mov.w	r9, #0
 8005d96:	f108 38ff 	add.w	r8, r8, #4294967295
 8005d9a:	f104 0a1a 	add.w	sl, r4, #26
 8005d9e:	45c8      	cmp	r8, r9
 8005da0:	dc09      	bgt.n	8005db6 <_printf_float+0x256>
 8005da2:	6823      	ldr	r3, [r4, #0]
 8005da4:	079b      	lsls	r3, r3, #30
 8005da6:	f100 8102 	bmi.w	8005fae <_printf_float+0x44e>
 8005daa:	68e0      	ldr	r0, [r4, #12]
 8005dac:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005dae:	4298      	cmp	r0, r3
 8005db0:	bfb8      	it	lt
 8005db2:	4618      	movlt	r0, r3
 8005db4:	e731      	b.n	8005c1a <_printf_float+0xba>
 8005db6:	2301      	movs	r3, #1
 8005db8:	4652      	mov	r2, sl
 8005dba:	4631      	mov	r1, r6
 8005dbc:	4628      	mov	r0, r5
 8005dbe:	47b8      	blx	r7
 8005dc0:	3001      	adds	r0, #1
 8005dc2:	f43f af28 	beq.w	8005c16 <_printf_float+0xb6>
 8005dc6:	f109 0901 	add.w	r9, r9, #1
 8005dca:	e7e8      	b.n	8005d9e <_printf_float+0x23e>
 8005dcc:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	dc38      	bgt.n	8005e44 <_printf_float+0x2e4>
 8005dd2:	2301      	movs	r3, #1
 8005dd4:	4631      	mov	r1, r6
 8005dd6:	4628      	mov	r0, r5
 8005dd8:	4a19      	ldr	r2, [pc, #100]	@ (8005e40 <_printf_float+0x2e0>)
 8005dda:	47b8      	blx	r7
 8005ddc:	3001      	adds	r0, #1
 8005dde:	f43f af1a 	beq.w	8005c16 <_printf_float+0xb6>
 8005de2:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 8005de6:	ea59 0303 	orrs.w	r3, r9, r3
 8005dea:	d102      	bne.n	8005df2 <_printf_float+0x292>
 8005dec:	6823      	ldr	r3, [r4, #0]
 8005dee:	07d9      	lsls	r1, r3, #31
 8005df0:	d5d7      	bpl.n	8005da2 <_printf_float+0x242>
 8005df2:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8005df6:	4631      	mov	r1, r6
 8005df8:	4628      	mov	r0, r5
 8005dfa:	47b8      	blx	r7
 8005dfc:	3001      	adds	r0, #1
 8005dfe:	f43f af0a 	beq.w	8005c16 <_printf_float+0xb6>
 8005e02:	f04f 0a00 	mov.w	sl, #0
 8005e06:	f104 0b1a 	add.w	fp, r4, #26
 8005e0a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005e0c:	425b      	negs	r3, r3
 8005e0e:	4553      	cmp	r3, sl
 8005e10:	dc01      	bgt.n	8005e16 <_printf_float+0x2b6>
 8005e12:	464b      	mov	r3, r9
 8005e14:	e793      	b.n	8005d3e <_printf_float+0x1de>
 8005e16:	2301      	movs	r3, #1
 8005e18:	465a      	mov	r2, fp
 8005e1a:	4631      	mov	r1, r6
 8005e1c:	4628      	mov	r0, r5
 8005e1e:	47b8      	blx	r7
 8005e20:	3001      	adds	r0, #1
 8005e22:	f43f aef8 	beq.w	8005c16 <_printf_float+0xb6>
 8005e26:	f10a 0a01 	add.w	sl, sl, #1
 8005e2a:	e7ee      	b.n	8005e0a <_printf_float+0x2aa>
 8005e2c:	7fefffff 	.word	0x7fefffff
 8005e30:	08008996 	.word	0x08008996
 8005e34:	08008992 	.word	0x08008992
 8005e38:	0800899e 	.word	0x0800899e
 8005e3c:	0800899a 	.word	0x0800899a
 8005e40:	080089a2 	.word	0x080089a2
 8005e44:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8005e46:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8005e4a:	4553      	cmp	r3, sl
 8005e4c:	bfa8      	it	ge
 8005e4e:	4653      	movge	r3, sl
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	4699      	mov	r9, r3
 8005e54:	dc36      	bgt.n	8005ec4 <_printf_float+0x364>
 8005e56:	f04f 0b00 	mov.w	fp, #0
 8005e5a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005e5e:	f104 021a 	add.w	r2, r4, #26
 8005e62:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8005e64:	930a      	str	r3, [sp, #40]	@ 0x28
 8005e66:	eba3 0309 	sub.w	r3, r3, r9
 8005e6a:	455b      	cmp	r3, fp
 8005e6c:	dc31      	bgt.n	8005ed2 <_printf_float+0x372>
 8005e6e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005e70:	459a      	cmp	sl, r3
 8005e72:	dc3a      	bgt.n	8005eea <_printf_float+0x38a>
 8005e74:	6823      	ldr	r3, [r4, #0]
 8005e76:	07da      	lsls	r2, r3, #31
 8005e78:	d437      	bmi.n	8005eea <_printf_float+0x38a>
 8005e7a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005e7c:	ebaa 0903 	sub.w	r9, sl, r3
 8005e80:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005e82:	ebaa 0303 	sub.w	r3, sl, r3
 8005e86:	4599      	cmp	r9, r3
 8005e88:	bfa8      	it	ge
 8005e8a:	4699      	movge	r9, r3
 8005e8c:	f1b9 0f00 	cmp.w	r9, #0
 8005e90:	dc33      	bgt.n	8005efa <_printf_float+0x39a>
 8005e92:	f04f 0800 	mov.w	r8, #0
 8005e96:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005e9a:	f104 0b1a 	add.w	fp, r4, #26
 8005e9e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005ea0:	ebaa 0303 	sub.w	r3, sl, r3
 8005ea4:	eba3 0309 	sub.w	r3, r3, r9
 8005ea8:	4543      	cmp	r3, r8
 8005eaa:	f77f af7a 	ble.w	8005da2 <_printf_float+0x242>
 8005eae:	2301      	movs	r3, #1
 8005eb0:	465a      	mov	r2, fp
 8005eb2:	4631      	mov	r1, r6
 8005eb4:	4628      	mov	r0, r5
 8005eb6:	47b8      	blx	r7
 8005eb8:	3001      	adds	r0, #1
 8005eba:	f43f aeac 	beq.w	8005c16 <_printf_float+0xb6>
 8005ebe:	f108 0801 	add.w	r8, r8, #1
 8005ec2:	e7ec      	b.n	8005e9e <_printf_float+0x33e>
 8005ec4:	4642      	mov	r2, r8
 8005ec6:	4631      	mov	r1, r6
 8005ec8:	4628      	mov	r0, r5
 8005eca:	47b8      	blx	r7
 8005ecc:	3001      	adds	r0, #1
 8005ece:	d1c2      	bne.n	8005e56 <_printf_float+0x2f6>
 8005ed0:	e6a1      	b.n	8005c16 <_printf_float+0xb6>
 8005ed2:	2301      	movs	r3, #1
 8005ed4:	4631      	mov	r1, r6
 8005ed6:	4628      	mov	r0, r5
 8005ed8:	920a      	str	r2, [sp, #40]	@ 0x28
 8005eda:	47b8      	blx	r7
 8005edc:	3001      	adds	r0, #1
 8005ede:	f43f ae9a 	beq.w	8005c16 <_printf_float+0xb6>
 8005ee2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005ee4:	f10b 0b01 	add.w	fp, fp, #1
 8005ee8:	e7bb      	b.n	8005e62 <_printf_float+0x302>
 8005eea:	4631      	mov	r1, r6
 8005eec:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8005ef0:	4628      	mov	r0, r5
 8005ef2:	47b8      	blx	r7
 8005ef4:	3001      	adds	r0, #1
 8005ef6:	d1c0      	bne.n	8005e7a <_printf_float+0x31a>
 8005ef8:	e68d      	b.n	8005c16 <_printf_float+0xb6>
 8005efa:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005efc:	464b      	mov	r3, r9
 8005efe:	4631      	mov	r1, r6
 8005f00:	4628      	mov	r0, r5
 8005f02:	4442      	add	r2, r8
 8005f04:	47b8      	blx	r7
 8005f06:	3001      	adds	r0, #1
 8005f08:	d1c3      	bne.n	8005e92 <_printf_float+0x332>
 8005f0a:	e684      	b.n	8005c16 <_printf_float+0xb6>
 8005f0c:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8005f10:	f1ba 0f01 	cmp.w	sl, #1
 8005f14:	dc01      	bgt.n	8005f1a <_printf_float+0x3ba>
 8005f16:	07db      	lsls	r3, r3, #31
 8005f18:	d536      	bpl.n	8005f88 <_printf_float+0x428>
 8005f1a:	2301      	movs	r3, #1
 8005f1c:	4642      	mov	r2, r8
 8005f1e:	4631      	mov	r1, r6
 8005f20:	4628      	mov	r0, r5
 8005f22:	47b8      	blx	r7
 8005f24:	3001      	adds	r0, #1
 8005f26:	f43f ae76 	beq.w	8005c16 <_printf_float+0xb6>
 8005f2a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8005f2e:	4631      	mov	r1, r6
 8005f30:	4628      	mov	r0, r5
 8005f32:	47b8      	blx	r7
 8005f34:	3001      	adds	r0, #1
 8005f36:	f43f ae6e 	beq.w	8005c16 <_printf_float+0xb6>
 8005f3a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8005f3e:	2200      	movs	r2, #0
 8005f40:	2300      	movs	r3, #0
 8005f42:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005f46:	f7fa fd2f 	bl	80009a8 <__aeabi_dcmpeq>
 8005f4a:	b9c0      	cbnz	r0, 8005f7e <_printf_float+0x41e>
 8005f4c:	4653      	mov	r3, sl
 8005f4e:	f108 0201 	add.w	r2, r8, #1
 8005f52:	4631      	mov	r1, r6
 8005f54:	4628      	mov	r0, r5
 8005f56:	47b8      	blx	r7
 8005f58:	3001      	adds	r0, #1
 8005f5a:	d10c      	bne.n	8005f76 <_printf_float+0x416>
 8005f5c:	e65b      	b.n	8005c16 <_printf_float+0xb6>
 8005f5e:	2301      	movs	r3, #1
 8005f60:	465a      	mov	r2, fp
 8005f62:	4631      	mov	r1, r6
 8005f64:	4628      	mov	r0, r5
 8005f66:	47b8      	blx	r7
 8005f68:	3001      	adds	r0, #1
 8005f6a:	f43f ae54 	beq.w	8005c16 <_printf_float+0xb6>
 8005f6e:	f108 0801 	add.w	r8, r8, #1
 8005f72:	45d0      	cmp	r8, sl
 8005f74:	dbf3      	blt.n	8005f5e <_printf_float+0x3fe>
 8005f76:	464b      	mov	r3, r9
 8005f78:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8005f7c:	e6e0      	b.n	8005d40 <_printf_float+0x1e0>
 8005f7e:	f04f 0800 	mov.w	r8, #0
 8005f82:	f104 0b1a 	add.w	fp, r4, #26
 8005f86:	e7f4      	b.n	8005f72 <_printf_float+0x412>
 8005f88:	2301      	movs	r3, #1
 8005f8a:	4642      	mov	r2, r8
 8005f8c:	e7e1      	b.n	8005f52 <_printf_float+0x3f2>
 8005f8e:	2301      	movs	r3, #1
 8005f90:	464a      	mov	r2, r9
 8005f92:	4631      	mov	r1, r6
 8005f94:	4628      	mov	r0, r5
 8005f96:	47b8      	blx	r7
 8005f98:	3001      	adds	r0, #1
 8005f9a:	f43f ae3c 	beq.w	8005c16 <_printf_float+0xb6>
 8005f9e:	f108 0801 	add.w	r8, r8, #1
 8005fa2:	68e3      	ldr	r3, [r4, #12]
 8005fa4:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8005fa6:	1a5b      	subs	r3, r3, r1
 8005fa8:	4543      	cmp	r3, r8
 8005faa:	dcf0      	bgt.n	8005f8e <_printf_float+0x42e>
 8005fac:	e6fd      	b.n	8005daa <_printf_float+0x24a>
 8005fae:	f04f 0800 	mov.w	r8, #0
 8005fb2:	f104 0919 	add.w	r9, r4, #25
 8005fb6:	e7f4      	b.n	8005fa2 <_printf_float+0x442>

08005fb8 <_printf_common>:
 8005fb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005fbc:	4616      	mov	r6, r2
 8005fbe:	4698      	mov	r8, r3
 8005fc0:	688a      	ldr	r2, [r1, #8]
 8005fc2:	690b      	ldr	r3, [r1, #16]
 8005fc4:	4607      	mov	r7, r0
 8005fc6:	4293      	cmp	r3, r2
 8005fc8:	bfb8      	it	lt
 8005fca:	4613      	movlt	r3, r2
 8005fcc:	6033      	str	r3, [r6, #0]
 8005fce:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005fd2:	460c      	mov	r4, r1
 8005fd4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005fd8:	b10a      	cbz	r2, 8005fde <_printf_common+0x26>
 8005fda:	3301      	adds	r3, #1
 8005fdc:	6033      	str	r3, [r6, #0]
 8005fde:	6823      	ldr	r3, [r4, #0]
 8005fe0:	0699      	lsls	r1, r3, #26
 8005fe2:	bf42      	ittt	mi
 8005fe4:	6833      	ldrmi	r3, [r6, #0]
 8005fe6:	3302      	addmi	r3, #2
 8005fe8:	6033      	strmi	r3, [r6, #0]
 8005fea:	6825      	ldr	r5, [r4, #0]
 8005fec:	f015 0506 	ands.w	r5, r5, #6
 8005ff0:	d106      	bne.n	8006000 <_printf_common+0x48>
 8005ff2:	f104 0a19 	add.w	sl, r4, #25
 8005ff6:	68e3      	ldr	r3, [r4, #12]
 8005ff8:	6832      	ldr	r2, [r6, #0]
 8005ffa:	1a9b      	subs	r3, r3, r2
 8005ffc:	42ab      	cmp	r3, r5
 8005ffe:	dc2b      	bgt.n	8006058 <_printf_common+0xa0>
 8006000:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006004:	6822      	ldr	r2, [r4, #0]
 8006006:	3b00      	subs	r3, #0
 8006008:	bf18      	it	ne
 800600a:	2301      	movne	r3, #1
 800600c:	0692      	lsls	r2, r2, #26
 800600e:	d430      	bmi.n	8006072 <_printf_common+0xba>
 8006010:	4641      	mov	r1, r8
 8006012:	4638      	mov	r0, r7
 8006014:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006018:	47c8      	blx	r9
 800601a:	3001      	adds	r0, #1
 800601c:	d023      	beq.n	8006066 <_printf_common+0xae>
 800601e:	6823      	ldr	r3, [r4, #0]
 8006020:	6922      	ldr	r2, [r4, #16]
 8006022:	f003 0306 	and.w	r3, r3, #6
 8006026:	2b04      	cmp	r3, #4
 8006028:	bf14      	ite	ne
 800602a:	2500      	movne	r5, #0
 800602c:	6833      	ldreq	r3, [r6, #0]
 800602e:	f04f 0600 	mov.w	r6, #0
 8006032:	bf08      	it	eq
 8006034:	68e5      	ldreq	r5, [r4, #12]
 8006036:	f104 041a 	add.w	r4, r4, #26
 800603a:	bf08      	it	eq
 800603c:	1aed      	subeq	r5, r5, r3
 800603e:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8006042:	bf08      	it	eq
 8006044:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006048:	4293      	cmp	r3, r2
 800604a:	bfc4      	itt	gt
 800604c:	1a9b      	subgt	r3, r3, r2
 800604e:	18ed      	addgt	r5, r5, r3
 8006050:	42b5      	cmp	r5, r6
 8006052:	d11a      	bne.n	800608a <_printf_common+0xd2>
 8006054:	2000      	movs	r0, #0
 8006056:	e008      	b.n	800606a <_printf_common+0xb2>
 8006058:	2301      	movs	r3, #1
 800605a:	4652      	mov	r2, sl
 800605c:	4641      	mov	r1, r8
 800605e:	4638      	mov	r0, r7
 8006060:	47c8      	blx	r9
 8006062:	3001      	adds	r0, #1
 8006064:	d103      	bne.n	800606e <_printf_common+0xb6>
 8006066:	f04f 30ff 	mov.w	r0, #4294967295
 800606a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800606e:	3501      	adds	r5, #1
 8006070:	e7c1      	b.n	8005ff6 <_printf_common+0x3e>
 8006072:	2030      	movs	r0, #48	@ 0x30
 8006074:	18e1      	adds	r1, r4, r3
 8006076:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800607a:	1c5a      	adds	r2, r3, #1
 800607c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006080:	4422      	add	r2, r4
 8006082:	3302      	adds	r3, #2
 8006084:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006088:	e7c2      	b.n	8006010 <_printf_common+0x58>
 800608a:	2301      	movs	r3, #1
 800608c:	4622      	mov	r2, r4
 800608e:	4641      	mov	r1, r8
 8006090:	4638      	mov	r0, r7
 8006092:	47c8      	blx	r9
 8006094:	3001      	adds	r0, #1
 8006096:	d0e6      	beq.n	8006066 <_printf_common+0xae>
 8006098:	3601      	adds	r6, #1
 800609a:	e7d9      	b.n	8006050 <_printf_common+0x98>

0800609c <_printf_i>:
 800609c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80060a0:	7e0f      	ldrb	r7, [r1, #24]
 80060a2:	4691      	mov	r9, r2
 80060a4:	2f78      	cmp	r7, #120	@ 0x78
 80060a6:	4680      	mov	r8, r0
 80060a8:	460c      	mov	r4, r1
 80060aa:	469a      	mov	sl, r3
 80060ac:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80060ae:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80060b2:	d807      	bhi.n	80060c4 <_printf_i+0x28>
 80060b4:	2f62      	cmp	r7, #98	@ 0x62
 80060b6:	d80a      	bhi.n	80060ce <_printf_i+0x32>
 80060b8:	2f00      	cmp	r7, #0
 80060ba:	f000 80d1 	beq.w	8006260 <_printf_i+0x1c4>
 80060be:	2f58      	cmp	r7, #88	@ 0x58
 80060c0:	f000 80b8 	beq.w	8006234 <_printf_i+0x198>
 80060c4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80060c8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80060cc:	e03a      	b.n	8006144 <_printf_i+0xa8>
 80060ce:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80060d2:	2b15      	cmp	r3, #21
 80060d4:	d8f6      	bhi.n	80060c4 <_printf_i+0x28>
 80060d6:	a101      	add	r1, pc, #4	@ (adr r1, 80060dc <_printf_i+0x40>)
 80060d8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80060dc:	08006135 	.word	0x08006135
 80060e0:	08006149 	.word	0x08006149
 80060e4:	080060c5 	.word	0x080060c5
 80060e8:	080060c5 	.word	0x080060c5
 80060ec:	080060c5 	.word	0x080060c5
 80060f0:	080060c5 	.word	0x080060c5
 80060f4:	08006149 	.word	0x08006149
 80060f8:	080060c5 	.word	0x080060c5
 80060fc:	080060c5 	.word	0x080060c5
 8006100:	080060c5 	.word	0x080060c5
 8006104:	080060c5 	.word	0x080060c5
 8006108:	08006247 	.word	0x08006247
 800610c:	08006173 	.word	0x08006173
 8006110:	08006201 	.word	0x08006201
 8006114:	080060c5 	.word	0x080060c5
 8006118:	080060c5 	.word	0x080060c5
 800611c:	08006269 	.word	0x08006269
 8006120:	080060c5 	.word	0x080060c5
 8006124:	08006173 	.word	0x08006173
 8006128:	080060c5 	.word	0x080060c5
 800612c:	080060c5 	.word	0x080060c5
 8006130:	08006209 	.word	0x08006209
 8006134:	6833      	ldr	r3, [r6, #0]
 8006136:	1d1a      	adds	r2, r3, #4
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	6032      	str	r2, [r6, #0]
 800613c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006140:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006144:	2301      	movs	r3, #1
 8006146:	e09c      	b.n	8006282 <_printf_i+0x1e6>
 8006148:	6833      	ldr	r3, [r6, #0]
 800614a:	6820      	ldr	r0, [r4, #0]
 800614c:	1d19      	adds	r1, r3, #4
 800614e:	6031      	str	r1, [r6, #0]
 8006150:	0606      	lsls	r6, r0, #24
 8006152:	d501      	bpl.n	8006158 <_printf_i+0xbc>
 8006154:	681d      	ldr	r5, [r3, #0]
 8006156:	e003      	b.n	8006160 <_printf_i+0xc4>
 8006158:	0645      	lsls	r5, r0, #25
 800615a:	d5fb      	bpl.n	8006154 <_printf_i+0xb8>
 800615c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006160:	2d00      	cmp	r5, #0
 8006162:	da03      	bge.n	800616c <_printf_i+0xd0>
 8006164:	232d      	movs	r3, #45	@ 0x2d
 8006166:	426d      	negs	r5, r5
 8006168:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800616c:	230a      	movs	r3, #10
 800616e:	4858      	ldr	r0, [pc, #352]	@ (80062d0 <_printf_i+0x234>)
 8006170:	e011      	b.n	8006196 <_printf_i+0xfa>
 8006172:	6821      	ldr	r1, [r4, #0]
 8006174:	6833      	ldr	r3, [r6, #0]
 8006176:	0608      	lsls	r0, r1, #24
 8006178:	f853 5b04 	ldr.w	r5, [r3], #4
 800617c:	d402      	bmi.n	8006184 <_printf_i+0xe8>
 800617e:	0649      	lsls	r1, r1, #25
 8006180:	bf48      	it	mi
 8006182:	b2ad      	uxthmi	r5, r5
 8006184:	2f6f      	cmp	r7, #111	@ 0x6f
 8006186:	6033      	str	r3, [r6, #0]
 8006188:	bf14      	ite	ne
 800618a:	230a      	movne	r3, #10
 800618c:	2308      	moveq	r3, #8
 800618e:	4850      	ldr	r0, [pc, #320]	@ (80062d0 <_printf_i+0x234>)
 8006190:	2100      	movs	r1, #0
 8006192:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006196:	6866      	ldr	r6, [r4, #4]
 8006198:	2e00      	cmp	r6, #0
 800619a:	60a6      	str	r6, [r4, #8]
 800619c:	db05      	blt.n	80061aa <_printf_i+0x10e>
 800619e:	6821      	ldr	r1, [r4, #0]
 80061a0:	432e      	orrs	r6, r5
 80061a2:	f021 0104 	bic.w	r1, r1, #4
 80061a6:	6021      	str	r1, [r4, #0]
 80061a8:	d04b      	beq.n	8006242 <_printf_i+0x1a6>
 80061aa:	4616      	mov	r6, r2
 80061ac:	fbb5 f1f3 	udiv	r1, r5, r3
 80061b0:	fb03 5711 	mls	r7, r3, r1, r5
 80061b4:	5dc7      	ldrb	r7, [r0, r7]
 80061b6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80061ba:	462f      	mov	r7, r5
 80061bc:	42bb      	cmp	r3, r7
 80061be:	460d      	mov	r5, r1
 80061c0:	d9f4      	bls.n	80061ac <_printf_i+0x110>
 80061c2:	2b08      	cmp	r3, #8
 80061c4:	d10b      	bne.n	80061de <_printf_i+0x142>
 80061c6:	6823      	ldr	r3, [r4, #0]
 80061c8:	07df      	lsls	r7, r3, #31
 80061ca:	d508      	bpl.n	80061de <_printf_i+0x142>
 80061cc:	6923      	ldr	r3, [r4, #16]
 80061ce:	6861      	ldr	r1, [r4, #4]
 80061d0:	4299      	cmp	r1, r3
 80061d2:	bfde      	ittt	le
 80061d4:	2330      	movle	r3, #48	@ 0x30
 80061d6:	f806 3c01 	strble.w	r3, [r6, #-1]
 80061da:	f106 36ff 	addle.w	r6, r6, #4294967295
 80061de:	1b92      	subs	r2, r2, r6
 80061e0:	6122      	str	r2, [r4, #16]
 80061e2:	464b      	mov	r3, r9
 80061e4:	4621      	mov	r1, r4
 80061e6:	4640      	mov	r0, r8
 80061e8:	f8cd a000 	str.w	sl, [sp]
 80061ec:	aa03      	add	r2, sp, #12
 80061ee:	f7ff fee3 	bl	8005fb8 <_printf_common>
 80061f2:	3001      	adds	r0, #1
 80061f4:	d14a      	bne.n	800628c <_printf_i+0x1f0>
 80061f6:	f04f 30ff 	mov.w	r0, #4294967295
 80061fa:	b004      	add	sp, #16
 80061fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006200:	6823      	ldr	r3, [r4, #0]
 8006202:	f043 0320 	orr.w	r3, r3, #32
 8006206:	6023      	str	r3, [r4, #0]
 8006208:	2778      	movs	r7, #120	@ 0x78
 800620a:	4832      	ldr	r0, [pc, #200]	@ (80062d4 <_printf_i+0x238>)
 800620c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006210:	6823      	ldr	r3, [r4, #0]
 8006212:	6831      	ldr	r1, [r6, #0]
 8006214:	061f      	lsls	r7, r3, #24
 8006216:	f851 5b04 	ldr.w	r5, [r1], #4
 800621a:	d402      	bmi.n	8006222 <_printf_i+0x186>
 800621c:	065f      	lsls	r7, r3, #25
 800621e:	bf48      	it	mi
 8006220:	b2ad      	uxthmi	r5, r5
 8006222:	6031      	str	r1, [r6, #0]
 8006224:	07d9      	lsls	r1, r3, #31
 8006226:	bf44      	itt	mi
 8006228:	f043 0320 	orrmi.w	r3, r3, #32
 800622c:	6023      	strmi	r3, [r4, #0]
 800622e:	b11d      	cbz	r5, 8006238 <_printf_i+0x19c>
 8006230:	2310      	movs	r3, #16
 8006232:	e7ad      	b.n	8006190 <_printf_i+0xf4>
 8006234:	4826      	ldr	r0, [pc, #152]	@ (80062d0 <_printf_i+0x234>)
 8006236:	e7e9      	b.n	800620c <_printf_i+0x170>
 8006238:	6823      	ldr	r3, [r4, #0]
 800623a:	f023 0320 	bic.w	r3, r3, #32
 800623e:	6023      	str	r3, [r4, #0]
 8006240:	e7f6      	b.n	8006230 <_printf_i+0x194>
 8006242:	4616      	mov	r6, r2
 8006244:	e7bd      	b.n	80061c2 <_printf_i+0x126>
 8006246:	6833      	ldr	r3, [r6, #0]
 8006248:	6825      	ldr	r5, [r4, #0]
 800624a:	1d18      	adds	r0, r3, #4
 800624c:	6961      	ldr	r1, [r4, #20]
 800624e:	6030      	str	r0, [r6, #0]
 8006250:	062e      	lsls	r6, r5, #24
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	d501      	bpl.n	800625a <_printf_i+0x1be>
 8006256:	6019      	str	r1, [r3, #0]
 8006258:	e002      	b.n	8006260 <_printf_i+0x1c4>
 800625a:	0668      	lsls	r0, r5, #25
 800625c:	d5fb      	bpl.n	8006256 <_printf_i+0x1ba>
 800625e:	8019      	strh	r1, [r3, #0]
 8006260:	2300      	movs	r3, #0
 8006262:	4616      	mov	r6, r2
 8006264:	6123      	str	r3, [r4, #16]
 8006266:	e7bc      	b.n	80061e2 <_printf_i+0x146>
 8006268:	6833      	ldr	r3, [r6, #0]
 800626a:	2100      	movs	r1, #0
 800626c:	1d1a      	adds	r2, r3, #4
 800626e:	6032      	str	r2, [r6, #0]
 8006270:	681e      	ldr	r6, [r3, #0]
 8006272:	6862      	ldr	r2, [r4, #4]
 8006274:	4630      	mov	r0, r6
 8006276:	f000 f9fc 	bl	8006672 <memchr>
 800627a:	b108      	cbz	r0, 8006280 <_printf_i+0x1e4>
 800627c:	1b80      	subs	r0, r0, r6
 800627e:	6060      	str	r0, [r4, #4]
 8006280:	6863      	ldr	r3, [r4, #4]
 8006282:	6123      	str	r3, [r4, #16]
 8006284:	2300      	movs	r3, #0
 8006286:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800628a:	e7aa      	b.n	80061e2 <_printf_i+0x146>
 800628c:	4632      	mov	r2, r6
 800628e:	4649      	mov	r1, r9
 8006290:	4640      	mov	r0, r8
 8006292:	6923      	ldr	r3, [r4, #16]
 8006294:	47d0      	blx	sl
 8006296:	3001      	adds	r0, #1
 8006298:	d0ad      	beq.n	80061f6 <_printf_i+0x15a>
 800629a:	6823      	ldr	r3, [r4, #0]
 800629c:	079b      	lsls	r3, r3, #30
 800629e:	d413      	bmi.n	80062c8 <_printf_i+0x22c>
 80062a0:	68e0      	ldr	r0, [r4, #12]
 80062a2:	9b03      	ldr	r3, [sp, #12]
 80062a4:	4298      	cmp	r0, r3
 80062a6:	bfb8      	it	lt
 80062a8:	4618      	movlt	r0, r3
 80062aa:	e7a6      	b.n	80061fa <_printf_i+0x15e>
 80062ac:	2301      	movs	r3, #1
 80062ae:	4632      	mov	r2, r6
 80062b0:	4649      	mov	r1, r9
 80062b2:	4640      	mov	r0, r8
 80062b4:	47d0      	blx	sl
 80062b6:	3001      	adds	r0, #1
 80062b8:	d09d      	beq.n	80061f6 <_printf_i+0x15a>
 80062ba:	3501      	adds	r5, #1
 80062bc:	68e3      	ldr	r3, [r4, #12]
 80062be:	9903      	ldr	r1, [sp, #12]
 80062c0:	1a5b      	subs	r3, r3, r1
 80062c2:	42ab      	cmp	r3, r5
 80062c4:	dcf2      	bgt.n	80062ac <_printf_i+0x210>
 80062c6:	e7eb      	b.n	80062a0 <_printf_i+0x204>
 80062c8:	2500      	movs	r5, #0
 80062ca:	f104 0619 	add.w	r6, r4, #25
 80062ce:	e7f5      	b.n	80062bc <_printf_i+0x220>
 80062d0:	080089a4 	.word	0x080089a4
 80062d4:	080089b5 	.word	0x080089b5

080062d8 <std>:
 80062d8:	2300      	movs	r3, #0
 80062da:	b510      	push	{r4, lr}
 80062dc:	4604      	mov	r4, r0
 80062de:	e9c0 3300 	strd	r3, r3, [r0]
 80062e2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80062e6:	6083      	str	r3, [r0, #8]
 80062e8:	8181      	strh	r1, [r0, #12]
 80062ea:	6643      	str	r3, [r0, #100]	@ 0x64
 80062ec:	81c2      	strh	r2, [r0, #14]
 80062ee:	6183      	str	r3, [r0, #24]
 80062f0:	4619      	mov	r1, r3
 80062f2:	2208      	movs	r2, #8
 80062f4:	305c      	adds	r0, #92	@ 0x5c
 80062f6:	f000 f93c 	bl	8006572 <memset>
 80062fa:	4b0d      	ldr	r3, [pc, #52]	@ (8006330 <std+0x58>)
 80062fc:	6224      	str	r4, [r4, #32]
 80062fe:	6263      	str	r3, [r4, #36]	@ 0x24
 8006300:	4b0c      	ldr	r3, [pc, #48]	@ (8006334 <std+0x5c>)
 8006302:	62a3      	str	r3, [r4, #40]	@ 0x28
 8006304:	4b0c      	ldr	r3, [pc, #48]	@ (8006338 <std+0x60>)
 8006306:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8006308:	4b0c      	ldr	r3, [pc, #48]	@ (800633c <std+0x64>)
 800630a:	6323      	str	r3, [r4, #48]	@ 0x30
 800630c:	4b0c      	ldr	r3, [pc, #48]	@ (8006340 <std+0x68>)
 800630e:	429c      	cmp	r4, r3
 8006310:	d006      	beq.n	8006320 <std+0x48>
 8006312:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8006316:	4294      	cmp	r4, r2
 8006318:	d002      	beq.n	8006320 <std+0x48>
 800631a:	33d0      	adds	r3, #208	@ 0xd0
 800631c:	429c      	cmp	r4, r3
 800631e:	d105      	bne.n	800632c <std+0x54>
 8006320:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006324:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006328:	f000 b9a0 	b.w	800666c <__retarget_lock_init_recursive>
 800632c:	bd10      	pop	{r4, pc}
 800632e:	bf00      	nop
 8006330:	080064ed 	.word	0x080064ed
 8006334:	0800650f 	.word	0x0800650f
 8006338:	08006547 	.word	0x08006547
 800633c:	0800656b 	.word	0x0800656b
 8006340:	20000354 	.word	0x20000354

08006344 <stdio_exit_handler>:
 8006344:	4a02      	ldr	r2, [pc, #8]	@ (8006350 <stdio_exit_handler+0xc>)
 8006346:	4903      	ldr	r1, [pc, #12]	@ (8006354 <stdio_exit_handler+0x10>)
 8006348:	4803      	ldr	r0, [pc, #12]	@ (8006358 <stdio_exit_handler+0x14>)
 800634a:	f000 b869 	b.w	8006420 <_fwalk_sglue>
 800634e:	bf00      	nop
 8006350:	2000000c 	.word	0x2000000c
 8006354:	08008289 	.word	0x08008289
 8006358:	2000001c 	.word	0x2000001c

0800635c <cleanup_stdio>:
 800635c:	6841      	ldr	r1, [r0, #4]
 800635e:	4b0c      	ldr	r3, [pc, #48]	@ (8006390 <cleanup_stdio+0x34>)
 8006360:	b510      	push	{r4, lr}
 8006362:	4299      	cmp	r1, r3
 8006364:	4604      	mov	r4, r0
 8006366:	d001      	beq.n	800636c <cleanup_stdio+0x10>
 8006368:	f001 ff8e 	bl	8008288 <_fflush_r>
 800636c:	68a1      	ldr	r1, [r4, #8]
 800636e:	4b09      	ldr	r3, [pc, #36]	@ (8006394 <cleanup_stdio+0x38>)
 8006370:	4299      	cmp	r1, r3
 8006372:	d002      	beq.n	800637a <cleanup_stdio+0x1e>
 8006374:	4620      	mov	r0, r4
 8006376:	f001 ff87 	bl	8008288 <_fflush_r>
 800637a:	68e1      	ldr	r1, [r4, #12]
 800637c:	4b06      	ldr	r3, [pc, #24]	@ (8006398 <cleanup_stdio+0x3c>)
 800637e:	4299      	cmp	r1, r3
 8006380:	d004      	beq.n	800638c <cleanup_stdio+0x30>
 8006382:	4620      	mov	r0, r4
 8006384:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006388:	f001 bf7e 	b.w	8008288 <_fflush_r>
 800638c:	bd10      	pop	{r4, pc}
 800638e:	bf00      	nop
 8006390:	20000354 	.word	0x20000354
 8006394:	200003bc 	.word	0x200003bc
 8006398:	20000424 	.word	0x20000424

0800639c <global_stdio_init.part.0>:
 800639c:	b510      	push	{r4, lr}
 800639e:	4b0b      	ldr	r3, [pc, #44]	@ (80063cc <global_stdio_init.part.0+0x30>)
 80063a0:	4c0b      	ldr	r4, [pc, #44]	@ (80063d0 <global_stdio_init.part.0+0x34>)
 80063a2:	4a0c      	ldr	r2, [pc, #48]	@ (80063d4 <global_stdio_init.part.0+0x38>)
 80063a4:	4620      	mov	r0, r4
 80063a6:	601a      	str	r2, [r3, #0]
 80063a8:	2104      	movs	r1, #4
 80063aa:	2200      	movs	r2, #0
 80063ac:	f7ff ff94 	bl	80062d8 <std>
 80063b0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80063b4:	2201      	movs	r2, #1
 80063b6:	2109      	movs	r1, #9
 80063b8:	f7ff ff8e 	bl	80062d8 <std>
 80063bc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80063c0:	2202      	movs	r2, #2
 80063c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80063c6:	2112      	movs	r1, #18
 80063c8:	f7ff bf86 	b.w	80062d8 <std>
 80063cc:	2000048c 	.word	0x2000048c
 80063d0:	20000354 	.word	0x20000354
 80063d4:	08006345 	.word	0x08006345

080063d8 <__sfp_lock_acquire>:
 80063d8:	4801      	ldr	r0, [pc, #4]	@ (80063e0 <__sfp_lock_acquire+0x8>)
 80063da:	f000 b948 	b.w	800666e <__retarget_lock_acquire_recursive>
 80063de:	bf00      	nop
 80063e0:	20000495 	.word	0x20000495

080063e4 <__sfp_lock_release>:
 80063e4:	4801      	ldr	r0, [pc, #4]	@ (80063ec <__sfp_lock_release+0x8>)
 80063e6:	f000 b943 	b.w	8006670 <__retarget_lock_release_recursive>
 80063ea:	bf00      	nop
 80063ec:	20000495 	.word	0x20000495

080063f0 <__sinit>:
 80063f0:	b510      	push	{r4, lr}
 80063f2:	4604      	mov	r4, r0
 80063f4:	f7ff fff0 	bl	80063d8 <__sfp_lock_acquire>
 80063f8:	6a23      	ldr	r3, [r4, #32]
 80063fa:	b11b      	cbz	r3, 8006404 <__sinit+0x14>
 80063fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006400:	f7ff bff0 	b.w	80063e4 <__sfp_lock_release>
 8006404:	4b04      	ldr	r3, [pc, #16]	@ (8006418 <__sinit+0x28>)
 8006406:	6223      	str	r3, [r4, #32]
 8006408:	4b04      	ldr	r3, [pc, #16]	@ (800641c <__sinit+0x2c>)
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	2b00      	cmp	r3, #0
 800640e:	d1f5      	bne.n	80063fc <__sinit+0xc>
 8006410:	f7ff ffc4 	bl	800639c <global_stdio_init.part.0>
 8006414:	e7f2      	b.n	80063fc <__sinit+0xc>
 8006416:	bf00      	nop
 8006418:	0800635d 	.word	0x0800635d
 800641c:	2000048c 	.word	0x2000048c

08006420 <_fwalk_sglue>:
 8006420:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006424:	4607      	mov	r7, r0
 8006426:	4688      	mov	r8, r1
 8006428:	4614      	mov	r4, r2
 800642a:	2600      	movs	r6, #0
 800642c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006430:	f1b9 0901 	subs.w	r9, r9, #1
 8006434:	d505      	bpl.n	8006442 <_fwalk_sglue+0x22>
 8006436:	6824      	ldr	r4, [r4, #0]
 8006438:	2c00      	cmp	r4, #0
 800643a:	d1f7      	bne.n	800642c <_fwalk_sglue+0xc>
 800643c:	4630      	mov	r0, r6
 800643e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006442:	89ab      	ldrh	r3, [r5, #12]
 8006444:	2b01      	cmp	r3, #1
 8006446:	d907      	bls.n	8006458 <_fwalk_sglue+0x38>
 8006448:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800644c:	3301      	adds	r3, #1
 800644e:	d003      	beq.n	8006458 <_fwalk_sglue+0x38>
 8006450:	4629      	mov	r1, r5
 8006452:	4638      	mov	r0, r7
 8006454:	47c0      	blx	r8
 8006456:	4306      	orrs	r6, r0
 8006458:	3568      	adds	r5, #104	@ 0x68
 800645a:	e7e9      	b.n	8006430 <_fwalk_sglue+0x10>

0800645c <iprintf>:
 800645c:	b40f      	push	{r0, r1, r2, r3}
 800645e:	b507      	push	{r0, r1, r2, lr}
 8006460:	4906      	ldr	r1, [pc, #24]	@ (800647c <iprintf+0x20>)
 8006462:	ab04      	add	r3, sp, #16
 8006464:	6808      	ldr	r0, [r1, #0]
 8006466:	f853 2b04 	ldr.w	r2, [r3], #4
 800646a:	6881      	ldr	r1, [r0, #8]
 800646c:	9301      	str	r3, [sp, #4]
 800646e:	f001 fd73 	bl	8007f58 <_vfiprintf_r>
 8006472:	b003      	add	sp, #12
 8006474:	f85d eb04 	ldr.w	lr, [sp], #4
 8006478:	b004      	add	sp, #16
 800647a:	4770      	bx	lr
 800647c:	20000018 	.word	0x20000018

08006480 <sniprintf>:
 8006480:	b40c      	push	{r2, r3}
 8006482:	b530      	push	{r4, r5, lr}
 8006484:	4b18      	ldr	r3, [pc, #96]	@ (80064e8 <sniprintf+0x68>)
 8006486:	1e0c      	subs	r4, r1, #0
 8006488:	681d      	ldr	r5, [r3, #0]
 800648a:	b09d      	sub	sp, #116	@ 0x74
 800648c:	da08      	bge.n	80064a0 <sniprintf+0x20>
 800648e:	238b      	movs	r3, #139	@ 0x8b
 8006490:	f04f 30ff 	mov.w	r0, #4294967295
 8006494:	602b      	str	r3, [r5, #0]
 8006496:	b01d      	add	sp, #116	@ 0x74
 8006498:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800649c:	b002      	add	sp, #8
 800649e:	4770      	bx	lr
 80064a0:	f44f 7302 	mov.w	r3, #520	@ 0x208
 80064a4:	f8ad 3014 	strh.w	r3, [sp, #20]
 80064a8:	f04f 0300 	mov.w	r3, #0
 80064ac:	931b      	str	r3, [sp, #108]	@ 0x6c
 80064ae:	bf0c      	ite	eq
 80064b0:	4623      	moveq	r3, r4
 80064b2:	f104 33ff 	addne.w	r3, r4, #4294967295
 80064b6:	9304      	str	r3, [sp, #16]
 80064b8:	9307      	str	r3, [sp, #28]
 80064ba:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80064be:	9002      	str	r0, [sp, #8]
 80064c0:	9006      	str	r0, [sp, #24]
 80064c2:	f8ad 3016 	strh.w	r3, [sp, #22]
 80064c6:	4628      	mov	r0, r5
 80064c8:	ab21      	add	r3, sp, #132	@ 0x84
 80064ca:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80064cc:	a902      	add	r1, sp, #8
 80064ce:	9301      	str	r3, [sp, #4]
 80064d0:	f001 fc1e 	bl	8007d10 <_svfiprintf_r>
 80064d4:	1c43      	adds	r3, r0, #1
 80064d6:	bfbc      	itt	lt
 80064d8:	238b      	movlt	r3, #139	@ 0x8b
 80064da:	602b      	strlt	r3, [r5, #0]
 80064dc:	2c00      	cmp	r4, #0
 80064de:	d0da      	beq.n	8006496 <sniprintf+0x16>
 80064e0:	2200      	movs	r2, #0
 80064e2:	9b02      	ldr	r3, [sp, #8]
 80064e4:	701a      	strb	r2, [r3, #0]
 80064e6:	e7d6      	b.n	8006496 <sniprintf+0x16>
 80064e8:	20000018 	.word	0x20000018

080064ec <__sread>:
 80064ec:	b510      	push	{r4, lr}
 80064ee:	460c      	mov	r4, r1
 80064f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80064f4:	f000 f86c 	bl	80065d0 <_read_r>
 80064f8:	2800      	cmp	r0, #0
 80064fa:	bfab      	itete	ge
 80064fc:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80064fe:	89a3      	ldrhlt	r3, [r4, #12]
 8006500:	181b      	addge	r3, r3, r0
 8006502:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8006506:	bfac      	ite	ge
 8006508:	6563      	strge	r3, [r4, #84]	@ 0x54
 800650a:	81a3      	strhlt	r3, [r4, #12]
 800650c:	bd10      	pop	{r4, pc}

0800650e <__swrite>:
 800650e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006512:	461f      	mov	r7, r3
 8006514:	898b      	ldrh	r3, [r1, #12]
 8006516:	4605      	mov	r5, r0
 8006518:	05db      	lsls	r3, r3, #23
 800651a:	460c      	mov	r4, r1
 800651c:	4616      	mov	r6, r2
 800651e:	d505      	bpl.n	800652c <__swrite+0x1e>
 8006520:	2302      	movs	r3, #2
 8006522:	2200      	movs	r2, #0
 8006524:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006528:	f000 f840 	bl	80065ac <_lseek_r>
 800652c:	89a3      	ldrh	r3, [r4, #12]
 800652e:	4632      	mov	r2, r6
 8006530:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006534:	81a3      	strh	r3, [r4, #12]
 8006536:	4628      	mov	r0, r5
 8006538:	463b      	mov	r3, r7
 800653a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800653e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006542:	f000 b857 	b.w	80065f4 <_write_r>

08006546 <__sseek>:
 8006546:	b510      	push	{r4, lr}
 8006548:	460c      	mov	r4, r1
 800654a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800654e:	f000 f82d 	bl	80065ac <_lseek_r>
 8006552:	1c43      	adds	r3, r0, #1
 8006554:	89a3      	ldrh	r3, [r4, #12]
 8006556:	bf15      	itete	ne
 8006558:	6560      	strne	r0, [r4, #84]	@ 0x54
 800655a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800655e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8006562:	81a3      	strheq	r3, [r4, #12]
 8006564:	bf18      	it	ne
 8006566:	81a3      	strhne	r3, [r4, #12]
 8006568:	bd10      	pop	{r4, pc}

0800656a <__sclose>:
 800656a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800656e:	f000 b80d 	b.w	800658c <_close_r>

08006572 <memset>:
 8006572:	4603      	mov	r3, r0
 8006574:	4402      	add	r2, r0
 8006576:	4293      	cmp	r3, r2
 8006578:	d100      	bne.n	800657c <memset+0xa>
 800657a:	4770      	bx	lr
 800657c:	f803 1b01 	strb.w	r1, [r3], #1
 8006580:	e7f9      	b.n	8006576 <memset+0x4>
	...

08006584 <_localeconv_r>:
 8006584:	4800      	ldr	r0, [pc, #0]	@ (8006588 <_localeconv_r+0x4>)
 8006586:	4770      	bx	lr
 8006588:	20000158 	.word	0x20000158

0800658c <_close_r>:
 800658c:	b538      	push	{r3, r4, r5, lr}
 800658e:	2300      	movs	r3, #0
 8006590:	4d05      	ldr	r5, [pc, #20]	@ (80065a8 <_close_r+0x1c>)
 8006592:	4604      	mov	r4, r0
 8006594:	4608      	mov	r0, r1
 8006596:	602b      	str	r3, [r5, #0]
 8006598:	f7fb fca9 	bl	8001eee <_close>
 800659c:	1c43      	adds	r3, r0, #1
 800659e:	d102      	bne.n	80065a6 <_close_r+0x1a>
 80065a0:	682b      	ldr	r3, [r5, #0]
 80065a2:	b103      	cbz	r3, 80065a6 <_close_r+0x1a>
 80065a4:	6023      	str	r3, [r4, #0]
 80065a6:	bd38      	pop	{r3, r4, r5, pc}
 80065a8:	20000490 	.word	0x20000490

080065ac <_lseek_r>:
 80065ac:	b538      	push	{r3, r4, r5, lr}
 80065ae:	4604      	mov	r4, r0
 80065b0:	4608      	mov	r0, r1
 80065b2:	4611      	mov	r1, r2
 80065b4:	2200      	movs	r2, #0
 80065b6:	4d05      	ldr	r5, [pc, #20]	@ (80065cc <_lseek_r+0x20>)
 80065b8:	602a      	str	r2, [r5, #0]
 80065ba:	461a      	mov	r2, r3
 80065bc:	f7fb fcbb 	bl	8001f36 <_lseek>
 80065c0:	1c43      	adds	r3, r0, #1
 80065c2:	d102      	bne.n	80065ca <_lseek_r+0x1e>
 80065c4:	682b      	ldr	r3, [r5, #0]
 80065c6:	b103      	cbz	r3, 80065ca <_lseek_r+0x1e>
 80065c8:	6023      	str	r3, [r4, #0]
 80065ca:	bd38      	pop	{r3, r4, r5, pc}
 80065cc:	20000490 	.word	0x20000490

080065d0 <_read_r>:
 80065d0:	b538      	push	{r3, r4, r5, lr}
 80065d2:	4604      	mov	r4, r0
 80065d4:	4608      	mov	r0, r1
 80065d6:	4611      	mov	r1, r2
 80065d8:	2200      	movs	r2, #0
 80065da:	4d05      	ldr	r5, [pc, #20]	@ (80065f0 <_read_r+0x20>)
 80065dc:	602a      	str	r2, [r5, #0]
 80065de:	461a      	mov	r2, r3
 80065e0:	f7fb fc4c 	bl	8001e7c <_read>
 80065e4:	1c43      	adds	r3, r0, #1
 80065e6:	d102      	bne.n	80065ee <_read_r+0x1e>
 80065e8:	682b      	ldr	r3, [r5, #0]
 80065ea:	b103      	cbz	r3, 80065ee <_read_r+0x1e>
 80065ec:	6023      	str	r3, [r4, #0]
 80065ee:	bd38      	pop	{r3, r4, r5, pc}
 80065f0:	20000490 	.word	0x20000490

080065f4 <_write_r>:
 80065f4:	b538      	push	{r3, r4, r5, lr}
 80065f6:	4604      	mov	r4, r0
 80065f8:	4608      	mov	r0, r1
 80065fa:	4611      	mov	r1, r2
 80065fc:	2200      	movs	r2, #0
 80065fe:	4d05      	ldr	r5, [pc, #20]	@ (8006614 <_write_r+0x20>)
 8006600:	602a      	str	r2, [r5, #0]
 8006602:	461a      	mov	r2, r3
 8006604:	f7fb fc57 	bl	8001eb6 <_write>
 8006608:	1c43      	adds	r3, r0, #1
 800660a:	d102      	bne.n	8006612 <_write_r+0x1e>
 800660c:	682b      	ldr	r3, [r5, #0]
 800660e:	b103      	cbz	r3, 8006612 <_write_r+0x1e>
 8006610:	6023      	str	r3, [r4, #0]
 8006612:	bd38      	pop	{r3, r4, r5, pc}
 8006614:	20000490 	.word	0x20000490

08006618 <__errno>:
 8006618:	4b01      	ldr	r3, [pc, #4]	@ (8006620 <__errno+0x8>)
 800661a:	6818      	ldr	r0, [r3, #0]
 800661c:	4770      	bx	lr
 800661e:	bf00      	nop
 8006620:	20000018 	.word	0x20000018

08006624 <__libc_init_array>:
 8006624:	b570      	push	{r4, r5, r6, lr}
 8006626:	2600      	movs	r6, #0
 8006628:	4d0c      	ldr	r5, [pc, #48]	@ (800665c <__libc_init_array+0x38>)
 800662a:	4c0d      	ldr	r4, [pc, #52]	@ (8006660 <__libc_init_array+0x3c>)
 800662c:	1b64      	subs	r4, r4, r5
 800662e:	10a4      	asrs	r4, r4, #2
 8006630:	42a6      	cmp	r6, r4
 8006632:	d109      	bne.n	8006648 <__libc_init_array+0x24>
 8006634:	f002 f8a8 	bl	8008788 <_init>
 8006638:	2600      	movs	r6, #0
 800663a:	4d0a      	ldr	r5, [pc, #40]	@ (8006664 <__libc_init_array+0x40>)
 800663c:	4c0a      	ldr	r4, [pc, #40]	@ (8006668 <__libc_init_array+0x44>)
 800663e:	1b64      	subs	r4, r4, r5
 8006640:	10a4      	asrs	r4, r4, #2
 8006642:	42a6      	cmp	r6, r4
 8006644:	d105      	bne.n	8006652 <__libc_init_array+0x2e>
 8006646:	bd70      	pop	{r4, r5, r6, pc}
 8006648:	f855 3b04 	ldr.w	r3, [r5], #4
 800664c:	4798      	blx	r3
 800664e:	3601      	adds	r6, #1
 8006650:	e7ee      	b.n	8006630 <__libc_init_array+0xc>
 8006652:	f855 3b04 	ldr.w	r3, [r5], #4
 8006656:	4798      	blx	r3
 8006658:	3601      	adds	r6, #1
 800665a:	e7f2      	b.n	8006642 <__libc_init_array+0x1e>
 800665c:	08008d0c 	.word	0x08008d0c
 8006660:	08008d0c 	.word	0x08008d0c
 8006664:	08008d0c 	.word	0x08008d0c
 8006668:	08008d10 	.word	0x08008d10

0800666c <__retarget_lock_init_recursive>:
 800666c:	4770      	bx	lr

0800666e <__retarget_lock_acquire_recursive>:
 800666e:	4770      	bx	lr

08006670 <__retarget_lock_release_recursive>:
 8006670:	4770      	bx	lr

08006672 <memchr>:
 8006672:	4603      	mov	r3, r0
 8006674:	b510      	push	{r4, lr}
 8006676:	b2c9      	uxtb	r1, r1
 8006678:	4402      	add	r2, r0
 800667a:	4293      	cmp	r3, r2
 800667c:	4618      	mov	r0, r3
 800667e:	d101      	bne.n	8006684 <memchr+0x12>
 8006680:	2000      	movs	r0, #0
 8006682:	e003      	b.n	800668c <memchr+0x1a>
 8006684:	7804      	ldrb	r4, [r0, #0]
 8006686:	3301      	adds	r3, #1
 8006688:	428c      	cmp	r4, r1
 800668a:	d1f6      	bne.n	800667a <memchr+0x8>
 800668c:	bd10      	pop	{r4, pc}

0800668e <memcpy>:
 800668e:	440a      	add	r2, r1
 8006690:	4291      	cmp	r1, r2
 8006692:	f100 33ff 	add.w	r3, r0, #4294967295
 8006696:	d100      	bne.n	800669a <memcpy+0xc>
 8006698:	4770      	bx	lr
 800669a:	b510      	push	{r4, lr}
 800669c:	f811 4b01 	ldrb.w	r4, [r1], #1
 80066a0:	4291      	cmp	r1, r2
 80066a2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80066a6:	d1f9      	bne.n	800669c <memcpy+0xe>
 80066a8:	bd10      	pop	{r4, pc}

080066aa <quorem>:
 80066aa:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80066ae:	6903      	ldr	r3, [r0, #16]
 80066b0:	690c      	ldr	r4, [r1, #16]
 80066b2:	4607      	mov	r7, r0
 80066b4:	42a3      	cmp	r3, r4
 80066b6:	db7e      	blt.n	80067b6 <quorem+0x10c>
 80066b8:	3c01      	subs	r4, #1
 80066ba:	00a3      	lsls	r3, r4, #2
 80066bc:	f100 0514 	add.w	r5, r0, #20
 80066c0:	f101 0814 	add.w	r8, r1, #20
 80066c4:	9300      	str	r3, [sp, #0]
 80066c6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80066ca:	9301      	str	r3, [sp, #4]
 80066cc:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80066d0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80066d4:	3301      	adds	r3, #1
 80066d6:	429a      	cmp	r2, r3
 80066d8:	fbb2 f6f3 	udiv	r6, r2, r3
 80066dc:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80066e0:	d32e      	bcc.n	8006740 <quorem+0x96>
 80066e2:	f04f 0a00 	mov.w	sl, #0
 80066e6:	46c4      	mov	ip, r8
 80066e8:	46ae      	mov	lr, r5
 80066ea:	46d3      	mov	fp, sl
 80066ec:	f85c 3b04 	ldr.w	r3, [ip], #4
 80066f0:	b298      	uxth	r0, r3
 80066f2:	fb06 a000 	mla	r0, r6, r0, sl
 80066f6:	0c1b      	lsrs	r3, r3, #16
 80066f8:	0c02      	lsrs	r2, r0, #16
 80066fa:	fb06 2303 	mla	r3, r6, r3, r2
 80066fe:	f8de 2000 	ldr.w	r2, [lr]
 8006702:	b280      	uxth	r0, r0
 8006704:	b292      	uxth	r2, r2
 8006706:	1a12      	subs	r2, r2, r0
 8006708:	445a      	add	r2, fp
 800670a:	f8de 0000 	ldr.w	r0, [lr]
 800670e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006712:	b29b      	uxth	r3, r3
 8006714:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8006718:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800671c:	b292      	uxth	r2, r2
 800671e:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8006722:	45e1      	cmp	r9, ip
 8006724:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8006728:	f84e 2b04 	str.w	r2, [lr], #4
 800672c:	d2de      	bcs.n	80066ec <quorem+0x42>
 800672e:	9b00      	ldr	r3, [sp, #0]
 8006730:	58eb      	ldr	r3, [r5, r3]
 8006732:	b92b      	cbnz	r3, 8006740 <quorem+0x96>
 8006734:	9b01      	ldr	r3, [sp, #4]
 8006736:	3b04      	subs	r3, #4
 8006738:	429d      	cmp	r5, r3
 800673a:	461a      	mov	r2, r3
 800673c:	d32f      	bcc.n	800679e <quorem+0xf4>
 800673e:	613c      	str	r4, [r7, #16]
 8006740:	4638      	mov	r0, r7
 8006742:	f001 f981 	bl	8007a48 <__mcmp>
 8006746:	2800      	cmp	r0, #0
 8006748:	db25      	blt.n	8006796 <quorem+0xec>
 800674a:	4629      	mov	r1, r5
 800674c:	2000      	movs	r0, #0
 800674e:	f858 2b04 	ldr.w	r2, [r8], #4
 8006752:	f8d1 c000 	ldr.w	ip, [r1]
 8006756:	fa1f fe82 	uxth.w	lr, r2
 800675a:	fa1f f38c 	uxth.w	r3, ip
 800675e:	eba3 030e 	sub.w	r3, r3, lr
 8006762:	4403      	add	r3, r0
 8006764:	0c12      	lsrs	r2, r2, #16
 8006766:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800676a:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800676e:	b29b      	uxth	r3, r3
 8006770:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006774:	45c1      	cmp	r9, r8
 8006776:	ea4f 4022 	mov.w	r0, r2, asr #16
 800677a:	f841 3b04 	str.w	r3, [r1], #4
 800677e:	d2e6      	bcs.n	800674e <quorem+0xa4>
 8006780:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006784:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006788:	b922      	cbnz	r2, 8006794 <quorem+0xea>
 800678a:	3b04      	subs	r3, #4
 800678c:	429d      	cmp	r5, r3
 800678e:	461a      	mov	r2, r3
 8006790:	d30b      	bcc.n	80067aa <quorem+0x100>
 8006792:	613c      	str	r4, [r7, #16]
 8006794:	3601      	adds	r6, #1
 8006796:	4630      	mov	r0, r6
 8006798:	b003      	add	sp, #12
 800679a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800679e:	6812      	ldr	r2, [r2, #0]
 80067a0:	3b04      	subs	r3, #4
 80067a2:	2a00      	cmp	r2, #0
 80067a4:	d1cb      	bne.n	800673e <quorem+0x94>
 80067a6:	3c01      	subs	r4, #1
 80067a8:	e7c6      	b.n	8006738 <quorem+0x8e>
 80067aa:	6812      	ldr	r2, [r2, #0]
 80067ac:	3b04      	subs	r3, #4
 80067ae:	2a00      	cmp	r2, #0
 80067b0:	d1ef      	bne.n	8006792 <quorem+0xe8>
 80067b2:	3c01      	subs	r4, #1
 80067b4:	e7ea      	b.n	800678c <quorem+0xe2>
 80067b6:	2000      	movs	r0, #0
 80067b8:	e7ee      	b.n	8006798 <quorem+0xee>
 80067ba:	0000      	movs	r0, r0
 80067bc:	0000      	movs	r0, r0
	...

080067c0 <_dtoa_r>:
 80067c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80067c4:	4614      	mov	r4, r2
 80067c6:	461d      	mov	r5, r3
 80067c8:	69c7      	ldr	r7, [r0, #28]
 80067ca:	b097      	sub	sp, #92	@ 0x5c
 80067cc:	4681      	mov	r9, r0
 80067ce:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80067d2:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 80067d4:	b97f      	cbnz	r7, 80067f6 <_dtoa_r+0x36>
 80067d6:	2010      	movs	r0, #16
 80067d8:	f000 fe0e 	bl	80073f8 <malloc>
 80067dc:	4602      	mov	r2, r0
 80067de:	f8c9 001c 	str.w	r0, [r9, #28]
 80067e2:	b920      	cbnz	r0, 80067ee <_dtoa_r+0x2e>
 80067e4:	21ef      	movs	r1, #239	@ 0xef
 80067e6:	4bac      	ldr	r3, [pc, #688]	@ (8006a98 <_dtoa_r+0x2d8>)
 80067e8:	48ac      	ldr	r0, [pc, #688]	@ (8006a9c <_dtoa_r+0x2dc>)
 80067ea:	f001 fe33 	bl	8008454 <__assert_func>
 80067ee:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80067f2:	6007      	str	r7, [r0, #0]
 80067f4:	60c7      	str	r7, [r0, #12]
 80067f6:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80067fa:	6819      	ldr	r1, [r3, #0]
 80067fc:	b159      	cbz	r1, 8006816 <_dtoa_r+0x56>
 80067fe:	685a      	ldr	r2, [r3, #4]
 8006800:	2301      	movs	r3, #1
 8006802:	4093      	lsls	r3, r2
 8006804:	604a      	str	r2, [r1, #4]
 8006806:	608b      	str	r3, [r1, #8]
 8006808:	4648      	mov	r0, r9
 800680a:	f000 feeb 	bl	80075e4 <_Bfree>
 800680e:	2200      	movs	r2, #0
 8006810:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8006814:	601a      	str	r2, [r3, #0]
 8006816:	1e2b      	subs	r3, r5, #0
 8006818:	bfaf      	iteee	ge
 800681a:	2300      	movge	r3, #0
 800681c:	2201      	movlt	r2, #1
 800681e:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8006822:	9307      	strlt	r3, [sp, #28]
 8006824:	bfa8      	it	ge
 8006826:	6033      	strge	r3, [r6, #0]
 8006828:	f8dd 801c 	ldr.w	r8, [sp, #28]
 800682c:	4b9c      	ldr	r3, [pc, #624]	@ (8006aa0 <_dtoa_r+0x2e0>)
 800682e:	bfb8      	it	lt
 8006830:	6032      	strlt	r2, [r6, #0]
 8006832:	ea33 0308 	bics.w	r3, r3, r8
 8006836:	d112      	bne.n	800685e <_dtoa_r+0x9e>
 8006838:	f242 730f 	movw	r3, #9999	@ 0x270f
 800683c:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800683e:	6013      	str	r3, [r2, #0]
 8006840:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8006844:	4323      	orrs	r3, r4
 8006846:	f000 855e 	beq.w	8007306 <_dtoa_r+0xb46>
 800684a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800684c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8006aa4 <_dtoa_r+0x2e4>
 8006850:	2b00      	cmp	r3, #0
 8006852:	f000 8560 	beq.w	8007316 <_dtoa_r+0xb56>
 8006856:	f10a 0303 	add.w	r3, sl, #3
 800685a:	f000 bd5a 	b.w	8007312 <_dtoa_r+0xb52>
 800685e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006862:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8006866:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800686a:	2200      	movs	r2, #0
 800686c:	2300      	movs	r3, #0
 800686e:	f7fa f89b 	bl	80009a8 <__aeabi_dcmpeq>
 8006872:	4607      	mov	r7, r0
 8006874:	b158      	cbz	r0, 800688e <_dtoa_r+0xce>
 8006876:	2301      	movs	r3, #1
 8006878:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800687a:	6013      	str	r3, [r2, #0]
 800687c:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800687e:	b113      	cbz	r3, 8006886 <_dtoa_r+0xc6>
 8006880:	4b89      	ldr	r3, [pc, #548]	@ (8006aa8 <_dtoa_r+0x2e8>)
 8006882:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8006884:	6013      	str	r3, [r2, #0]
 8006886:	f8df a224 	ldr.w	sl, [pc, #548]	@ 8006aac <_dtoa_r+0x2ec>
 800688a:	f000 bd44 	b.w	8007316 <_dtoa_r+0xb56>
 800688e:	ab14      	add	r3, sp, #80	@ 0x50
 8006890:	9301      	str	r3, [sp, #4]
 8006892:	ab15      	add	r3, sp, #84	@ 0x54
 8006894:	9300      	str	r3, [sp, #0]
 8006896:	4648      	mov	r0, r9
 8006898:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800689c:	f001 f984 	bl	8007ba8 <__d2b>
 80068a0:	f3c8 560a 	ubfx	r6, r8, #20, #11
 80068a4:	9003      	str	r0, [sp, #12]
 80068a6:	2e00      	cmp	r6, #0
 80068a8:	d078      	beq.n	800699c <_dtoa_r+0x1dc>
 80068aa:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80068ae:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80068b0:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80068b4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80068b8:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80068bc:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80068c0:	9712      	str	r7, [sp, #72]	@ 0x48
 80068c2:	4619      	mov	r1, r3
 80068c4:	2200      	movs	r2, #0
 80068c6:	4b7a      	ldr	r3, [pc, #488]	@ (8006ab0 <_dtoa_r+0x2f0>)
 80068c8:	f7f9 fc4e 	bl	8000168 <__aeabi_dsub>
 80068cc:	a36c      	add	r3, pc, #432	@ (adr r3, 8006a80 <_dtoa_r+0x2c0>)
 80068ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068d2:	f7f9 fe01 	bl	80004d8 <__aeabi_dmul>
 80068d6:	a36c      	add	r3, pc, #432	@ (adr r3, 8006a88 <_dtoa_r+0x2c8>)
 80068d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068dc:	f7f9 fc46 	bl	800016c <__adddf3>
 80068e0:	4604      	mov	r4, r0
 80068e2:	4630      	mov	r0, r6
 80068e4:	460d      	mov	r5, r1
 80068e6:	f7f9 fd8d 	bl	8000404 <__aeabi_i2d>
 80068ea:	a369      	add	r3, pc, #420	@ (adr r3, 8006a90 <_dtoa_r+0x2d0>)
 80068ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068f0:	f7f9 fdf2 	bl	80004d8 <__aeabi_dmul>
 80068f4:	4602      	mov	r2, r0
 80068f6:	460b      	mov	r3, r1
 80068f8:	4620      	mov	r0, r4
 80068fa:	4629      	mov	r1, r5
 80068fc:	f7f9 fc36 	bl	800016c <__adddf3>
 8006900:	4604      	mov	r4, r0
 8006902:	460d      	mov	r5, r1
 8006904:	f7fa f898 	bl	8000a38 <__aeabi_d2iz>
 8006908:	2200      	movs	r2, #0
 800690a:	4607      	mov	r7, r0
 800690c:	2300      	movs	r3, #0
 800690e:	4620      	mov	r0, r4
 8006910:	4629      	mov	r1, r5
 8006912:	f7fa f853 	bl	80009bc <__aeabi_dcmplt>
 8006916:	b140      	cbz	r0, 800692a <_dtoa_r+0x16a>
 8006918:	4638      	mov	r0, r7
 800691a:	f7f9 fd73 	bl	8000404 <__aeabi_i2d>
 800691e:	4622      	mov	r2, r4
 8006920:	462b      	mov	r3, r5
 8006922:	f7fa f841 	bl	80009a8 <__aeabi_dcmpeq>
 8006926:	b900      	cbnz	r0, 800692a <_dtoa_r+0x16a>
 8006928:	3f01      	subs	r7, #1
 800692a:	2f16      	cmp	r7, #22
 800692c:	d854      	bhi.n	80069d8 <_dtoa_r+0x218>
 800692e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006932:	4b60      	ldr	r3, [pc, #384]	@ (8006ab4 <_dtoa_r+0x2f4>)
 8006934:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006938:	e9d3 2300 	ldrd	r2, r3, [r3]
 800693c:	f7fa f83e 	bl	80009bc <__aeabi_dcmplt>
 8006940:	2800      	cmp	r0, #0
 8006942:	d04b      	beq.n	80069dc <_dtoa_r+0x21c>
 8006944:	2300      	movs	r3, #0
 8006946:	3f01      	subs	r7, #1
 8006948:	930f      	str	r3, [sp, #60]	@ 0x3c
 800694a:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800694c:	1b9b      	subs	r3, r3, r6
 800694e:	1e5a      	subs	r2, r3, #1
 8006950:	bf49      	itett	mi
 8006952:	f1c3 0301 	rsbmi	r3, r3, #1
 8006956:	2300      	movpl	r3, #0
 8006958:	9304      	strmi	r3, [sp, #16]
 800695a:	2300      	movmi	r3, #0
 800695c:	9209      	str	r2, [sp, #36]	@ 0x24
 800695e:	bf54      	ite	pl
 8006960:	9304      	strpl	r3, [sp, #16]
 8006962:	9309      	strmi	r3, [sp, #36]	@ 0x24
 8006964:	2f00      	cmp	r7, #0
 8006966:	db3b      	blt.n	80069e0 <_dtoa_r+0x220>
 8006968:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800696a:	970e      	str	r7, [sp, #56]	@ 0x38
 800696c:	443b      	add	r3, r7
 800696e:	9309      	str	r3, [sp, #36]	@ 0x24
 8006970:	2300      	movs	r3, #0
 8006972:	930a      	str	r3, [sp, #40]	@ 0x28
 8006974:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8006976:	2b09      	cmp	r3, #9
 8006978:	d865      	bhi.n	8006a46 <_dtoa_r+0x286>
 800697a:	2b05      	cmp	r3, #5
 800697c:	bfc4      	itt	gt
 800697e:	3b04      	subgt	r3, #4
 8006980:	9320      	strgt	r3, [sp, #128]	@ 0x80
 8006982:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8006984:	bfc8      	it	gt
 8006986:	2400      	movgt	r4, #0
 8006988:	f1a3 0302 	sub.w	r3, r3, #2
 800698c:	bfd8      	it	le
 800698e:	2401      	movle	r4, #1
 8006990:	2b03      	cmp	r3, #3
 8006992:	d864      	bhi.n	8006a5e <_dtoa_r+0x29e>
 8006994:	e8df f003 	tbb	[pc, r3]
 8006998:	2c385553 	.word	0x2c385553
 800699c:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 80069a0:	441e      	add	r6, r3
 80069a2:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80069a6:	2b20      	cmp	r3, #32
 80069a8:	bfc1      	itttt	gt
 80069aa:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 80069ae:	fa08 f803 	lslgt.w	r8, r8, r3
 80069b2:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 80069b6:	fa24 f303 	lsrgt.w	r3, r4, r3
 80069ba:	bfd6      	itet	le
 80069bc:	f1c3 0320 	rsble	r3, r3, #32
 80069c0:	ea48 0003 	orrgt.w	r0, r8, r3
 80069c4:	fa04 f003 	lslle.w	r0, r4, r3
 80069c8:	f7f9 fd0c 	bl	80003e4 <__aeabi_ui2d>
 80069cc:	2201      	movs	r2, #1
 80069ce:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 80069d2:	3e01      	subs	r6, #1
 80069d4:	9212      	str	r2, [sp, #72]	@ 0x48
 80069d6:	e774      	b.n	80068c2 <_dtoa_r+0x102>
 80069d8:	2301      	movs	r3, #1
 80069da:	e7b5      	b.n	8006948 <_dtoa_r+0x188>
 80069dc:	900f      	str	r0, [sp, #60]	@ 0x3c
 80069de:	e7b4      	b.n	800694a <_dtoa_r+0x18a>
 80069e0:	9b04      	ldr	r3, [sp, #16]
 80069e2:	1bdb      	subs	r3, r3, r7
 80069e4:	9304      	str	r3, [sp, #16]
 80069e6:	427b      	negs	r3, r7
 80069e8:	930a      	str	r3, [sp, #40]	@ 0x28
 80069ea:	2300      	movs	r3, #0
 80069ec:	930e      	str	r3, [sp, #56]	@ 0x38
 80069ee:	e7c1      	b.n	8006974 <_dtoa_r+0x1b4>
 80069f0:	2301      	movs	r3, #1
 80069f2:	930b      	str	r3, [sp, #44]	@ 0x2c
 80069f4:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80069f6:	eb07 0b03 	add.w	fp, r7, r3
 80069fa:	f10b 0301 	add.w	r3, fp, #1
 80069fe:	2b01      	cmp	r3, #1
 8006a00:	9308      	str	r3, [sp, #32]
 8006a02:	bfb8      	it	lt
 8006a04:	2301      	movlt	r3, #1
 8006a06:	e006      	b.n	8006a16 <_dtoa_r+0x256>
 8006a08:	2301      	movs	r3, #1
 8006a0a:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006a0c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	dd28      	ble.n	8006a64 <_dtoa_r+0x2a4>
 8006a12:	469b      	mov	fp, r3
 8006a14:	9308      	str	r3, [sp, #32]
 8006a16:	2100      	movs	r1, #0
 8006a18:	2204      	movs	r2, #4
 8006a1a:	f8d9 001c 	ldr.w	r0, [r9, #28]
 8006a1e:	f102 0514 	add.w	r5, r2, #20
 8006a22:	429d      	cmp	r5, r3
 8006a24:	d926      	bls.n	8006a74 <_dtoa_r+0x2b4>
 8006a26:	6041      	str	r1, [r0, #4]
 8006a28:	4648      	mov	r0, r9
 8006a2a:	f000 fd9b 	bl	8007564 <_Balloc>
 8006a2e:	4682      	mov	sl, r0
 8006a30:	2800      	cmp	r0, #0
 8006a32:	d143      	bne.n	8006abc <_dtoa_r+0x2fc>
 8006a34:	4602      	mov	r2, r0
 8006a36:	f240 11af 	movw	r1, #431	@ 0x1af
 8006a3a:	4b1f      	ldr	r3, [pc, #124]	@ (8006ab8 <_dtoa_r+0x2f8>)
 8006a3c:	e6d4      	b.n	80067e8 <_dtoa_r+0x28>
 8006a3e:	2300      	movs	r3, #0
 8006a40:	e7e3      	b.n	8006a0a <_dtoa_r+0x24a>
 8006a42:	2300      	movs	r3, #0
 8006a44:	e7d5      	b.n	80069f2 <_dtoa_r+0x232>
 8006a46:	2401      	movs	r4, #1
 8006a48:	2300      	movs	r3, #0
 8006a4a:	940b      	str	r4, [sp, #44]	@ 0x2c
 8006a4c:	9320      	str	r3, [sp, #128]	@ 0x80
 8006a4e:	f04f 3bff 	mov.w	fp, #4294967295
 8006a52:	2200      	movs	r2, #0
 8006a54:	2312      	movs	r3, #18
 8006a56:	f8cd b020 	str.w	fp, [sp, #32]
 8006a5a:	9221      	str	r2, [sp, #132]	@ 0x84
 8006a5c:	e7db      	b.n	8006a16 <_dtoa_r+0x256>
 8006a5e:	2301      	movs	r3, #1
 8006a60:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006a62:	e7f4      	b.n	8006a4e <_dtoa_r+0x28e>
 8006a64:	f04f 0b01 	mov.w	fp, #1
 8006a68:	465b      	mov	r3, fp
 8006a6a:	f8cd b020 	str.w	fp, [sp, #32]
 8006a6e:	f8cd b084 	str.w	fp, [sp, #132]	@ 0x84
 8006a72:	e7d0      	b.n	8006a16 <_dtoa_r+0x256>
 8006a74:	3101      	adds	r1, #1
 8006a76:	0052      	lsls	r2, r2, #1
 8006a78:	e7d1      	b.n	8006a1e <_dtoa_r+0x25e>
 8006a7a:	bf00      	nop
 8006a7c:	f3af 8000 	nop.w
 8006a80:	636f4361 	.word	0x636f4361
 8006a84:	3fd287a7 	.word	0x3fd287a7
 8006a88:	8b60c8b3 	.word	0x8b60c8b3
 8006a8c:	3fc68a28 	.word	0x3fc68a28
 8006a90:	509f79fb 	.word	0x509f79fb
 8006a94:	3fd34413 	.word	0x3fd34413
 8006a98:	080089d3 	.word	0x080089d3
 8006a9c:	080089ea 	.word	0x080089ea
 8006aa0:	7ff00000 	.word	0x7ff00000
 8006aa4:	080089cf 	.word	0x080089cf
 8006aa8:	080089a3 	.word	0x080089a3
 8006aac:	080089a2 	.word	0x080089a2
 8006ab0:	3ff80000 	.word	0x3ff80000
 8006ab4:	08008b38 	.word	0x08008b38
 8006ab8:	08008a42 	.word	0x08008a42
 8006abc:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8006ac0:	6018      	str	r0, [r3, #0]
 8006ac2:	9b08      	ldr	r3, [sp, #32]
 8006ac4:	2b0e      	cmp	r3, #14
 8006ac6:	f200 80a1 	bhi.w	8006c0c <_dtoa_r+0x44c>
 8006aca:	2c00      	cmp	r4, #0
 8006acc:	f000 809e 	beq.w	8006c0c <_dtoa_r+0x44c>
 8006ad0:	2f00      	cmp	r7, #0
 8006ad2:	dd33      	ble.n	8006b3c <_dtoa_r+0x37c>
 8006ad4:	4b9c      	ldr	r3, [pc, #624]	@ (8006d48 <_dtoa_r+0x588>)
 8006ad6:	f007 020f 	and.w	r2, r7, #15
 8006ada:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006ade:	05f8      	lsls	r0, r7, #23
 8006ae0:	e9d3 3400 	ldrd	r3, r4, [r3]
 8006ae4:	e9cd 3410 	strd	r3, r4, [sp, #64]	@ 0x40
 8006ae8:	ea4f 1427 	mov.w	r4, r7, asr #4
 8006aec:	d516      	bpl.n	8006b1c <_dtoa_r+0x35c>
 8006aee:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006af2:	4b96      	ldr	r3, [pc, #600]	@ (8006d4c <_dtoa_r+0x58c>)
 8006af4:	2603      	movs	r6, #3
 8006af6:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006afa:	f7f9 fe17 	bl	800072c <__aeabi_ddiv>
 8006afe:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8006b02:	f004 040f 	and.w	r4, r4, #15
 8006b06:	4d91      	ldr	r5, [pc, #580]	@ (8006d4c <_dtoa_r+0x58c>)
 8006b08:	b954      	cbnz	r4, 8006b20 <_dtoa_r+0x360>
 8006b0a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006b0e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006b12:	f7f9 fe0b 	bl	800072c <__aeabi_ddiv>
 8006b16:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8006b1a:	e028      	b.n	8006b6e <_dtoa_r+0x3ae>
 8006b1c:	2602      	movs	r6, #2
 8006b1e:	e7f2      	b.n	8006b06 <_dtoa_r+0x346>
 8006b20:	07e1      	lsls	r1, r4, #31
 8006b22:	d508      	bpl.n	8006b36 <_dtoa_r+0x376>
 8006b24:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8006b28:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006b2c:	f7f9 fcd4 	bl	80004d8 <__aeabi_dmul>
 8006b30:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006b34:	3601      	adds	r6, #1
 8006b36:	1064      	asrs	r4, r4, #1
 8006b38:	3508      	adds	r5, #8
 8006b3a:	e7e5      	b.n	8006b08 <_dtoa_r+0x348>
 8006b3c:	f000 80af 	beq.w	8006c9e <_dtoa_r+0x4de>
 8006b40:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006b44:	427c      	negs	r4, r7
 8006b46:	4b80      	ldr	r3, [pc, #512]	@ (8006d48 <_dtoa_r+0x588>)
 8006b48:	f004 020f 	and.w	r2, r4, #15
 8006b4c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006b50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b54:	f7f9 fcc0 	bl	80004d8 <__aeabi_dmul>
 8006b58:	2602      	movs	r6, #2
 8006b5a:	2300      	movs	r3, #0
 8006b5c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8006b60:	4d7a      	ldr	r5, [pc, #488]	@ (8006d4c <_dtoa_r+0x58c>)
 8006b62:	1124      	asrs	r4, r4, #4
 8006b64:	2c00      	cmp	r4, #0
 8006b66:	f040 808f 	bne.w	8006c88 <_dtoa_r+0x4c8>
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d1d3      	bne.n	8006b16 <_dtoa_r+0x356>
 8006b6e:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 8006b72:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	f000 8094 	beq.w	8006ca2 <_dtoa_r+0x4e2>
 8006b7a:	2200      	movs	r2, #0
 8006b7c:	4620      	mov	r0, r4
 8006b7e:	4629      	mov	r1, r5
 8006b80:	4b73      	ldr	r3, [pc, #460]	@ (8006d50 <_dtoa_r+0x590>)
 8006b82:	f7f9 ff1b 	bl	80009bc <__aeabi_dcmplt>
 8006b86:	2800      	cmp	r0, #0
 8006b88:	f000 808b 	beq.w	8006ca2 <_dtoa_r+0x4e2>
 8006b8c:	9b08      	ldr	r3, [sp, #32]
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	f000 8087 	beq.w	8006ca2 <_dtoa_r+0x4e2>
 8006b94:	f1bb 0f00 	cmp.w	fp, #0
 8006b98:	dd34      	ble.n	8006c04 <_dtoa_r+0x444>
 8006b9a:	4620      	mov	r0, r4
 8006b9c:	2200      	movs	r2, #0
 8006b9e:	4629      	mov	r1, r5
 8006ba0:	4b6c      	ldr	r3, [pc, #432]	@ (8006d54 <_dtoa_r+0x594>)
 8006ba2:	f7f9 fc99 	bl	80004d8 <__aeabi_dmul>
 8006ba6:	465c      	mov	r4, fp
 8006ba8:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8006bac:	f107 38ff 	add.w	r8, r7, #4294967295
 8006bb0:	3601      	adds	r6, #1
 8006bb2:	4630      	mov	r0, r6
 8006bb4:	f7f9 fc26 	bl	8000404 <__aeabi_i2d>
 8006bb8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006bbc:	f7f9 fc8c 	bl	80004d8 <__aeabi_dmul>
 8006bc0:	2200      	movs	r2, #0
 8006bc2:	4b65      	ldr	r3, [pc, #404]	@ (8006d58 <_dtoa_r+0x598>)
 8006bc4:	f7f9 fad2 	bl	800016c <__adddf3>
 8006bc8:	4605      	mov	r5, r0
 8006bca:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8006bce:	2c00      	cmp	r4, #0
 8006bd0:	d16a      	bne.n	8006ca8 <_dtoa_r+0x4e8>
 8006bd2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006bd6:	2200      	movs	r2, #0
 8006bd8:	4b60      	ldr	r3, [pc, #384]	@ (8006d5c <_dtoa_r+0x59c>)
 8006bda:	f7f9 fac5 	bl	8000168 <__aeabi_dsub>
 8006bde:	4602      	mov	r2, r0
 8006be0:	460b      	mov	r3, r1
 8006be2:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8006be6:	462a      	mov	r2, r5
 8006be8:	4633      	mov	r3, r6
 8006bea:	f7f9 ff05 	bl	80009f8 <__aeabi_dcmpgt>
 8006bee:	2800      	cmp	r0, #0
 8006bf0:	f040 8298 	bne.w	8007124 <_dtoa_r+0x964>
 8006bf4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006bf8:	462a      	mov	r2, r5
 8006bfa:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8006bfe:	f7f9 fedd 	bl	80009bc <__aeabi_dcmplt>
 8006c02:	bb38      	cbnz	r0, 8006c54 <_dtoa_r+0x494>
 8006c04:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8006c08:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8006c0c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	f2c0 8157 	blt.w	8006ec2 <_dtoa_r+0x702>
 8006c14:	2f0e      	cmp	r7, #14
 8006c16:	f300 8154 	bgt.w	8006ec2 <_dtoa_r+0x702>
 8006c1a:	4b4b      	ldr	r3, [pc, #300]	@ (8006d48 <_dtoa_r+0x588>)
 8006c1c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006c20:	e9d3 3400 	ldrd	r3, r4, [r3]
 8006c24:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8006c28:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	f280 80e5 	bge.w	8006dfa <_dtoa_r+0x63a>
 8006c30:	9b08      	ldr	r3, [sp, #32]
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	f300 80e1 	bgt.w	8006dfa <_dtoa_r+0x63a>
 8006c38:	d10c      	bne.n	8006c54 <_dtoa_r+0x494>
 8006c3a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006c3e:	2200      	movs	r2, #0
 8006c40:	4b46      	ldr	r3, [pc, #280]	@ (8006d5c <_dtoa_r+0x59c>)
 8006c42:	f7f9 fc49 	bl	80004d8 <__aeabi_dmul>
 8006c46:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006c4a:	f7f9 fecb 	bl	80009e4 <__aeabi_dcmpge>
 8006c4e:	2800      	cmp	r0, #0
 8006c50:	f000 8266 	beq.w	8007120 <_dtoa_r+0x960>
 8006c54:	2400      	movs	r4, #0
 8006c56:	4625      	mov	r5, r4
 8006c58:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8006c5a:	4656      	mov	r6, sl
 8006c5c:	ea6f 0803 	mvn.w	r8, r3
 8006c60:	2700      	movs	r7, #0
 8006c62:	4621      	mov	r1, r4
 8006c64:	4648      	mov	r0, r9
 8006c66:	f000 fcbd 	bl	80075e4 <_Bfree>
 8006c6a:	2d00      	cmp	r5, #0
 8006c6c:	f000 80bd 	beq.w	8006dea <_dtoa_r+0x62a>
 8006c70:	b12f      	cbz	r7, 8006c7e <_dtoa_r+0x4be>
 8006c72:	42af      	cmp	r7, r5
 8006c74:	d003      	beq.n	8006c7e <_dtoa_r+0x4be>
 8006c76:	4639      	mov	r1, r7
 8006c78:	4648      	mov	r0, r9
 8006c7a:	f000 fcb3 	bl	80075e4 <_Bfree>
 8006c7e:	4629      	mov	r1, r5
 8006c80:	4648      	mov	r0, r9
 8006c82:	f000 fcaf 	bl	80075e4 <_Bfree>
 8006c86:	e0b0      	b.n	8006dea <_dtoa_r+0x62a>
 8006c88:	07e2      	lsls	r2, r4, #31
 8006c8a:	d505      	bpl.n	8006c98 <_dtoa_r+0x4d8>
 8006c8c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006c90:	f7f9 fc22 	bl	80004d8 <__aeabi_dmul>
 8006c94:	2301      	movs	r3, #1
 8006c96:	3601      	adds	r6, #1
 8006c98:	1064      	asrs	r4, r4, #1
 8006c9a:	3508      	adds	r5, #8
 8006c9c:	e762      	b.n	8006b64 <_dtoa_r+0x3a4>
 8006c9e:	2602      	movs	r6, #2
 8006ca0:	e765      	b.n	8006b6e <_dtoa_r+0x3ae>
 8006ca2:	46b8      	mov	r8, r7
 8006ca4:	9c08      	ldr	r4, [sp, #32]
 8006ca6:	e784      	b.n	8006bb2 <_dtoa_r+0x3f2>
 8006ca8:	4b27      	ldr	r3, [pc, #156]	@ (8006d48 <_dtoa_r+0x588>)
 8006caa:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8006cac:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006cb0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006cb4:	4454      	add	r4, sl
 8006cb6:	2900      	cmp	r1, #0
 8006cb8:	d054      	beq.n	8006d64 <_dtoa_r+0x5a4>
 8006cba:	2000      	movs	r0, #0
 8006cbc:	4928      	ldr	r1, [pc, #160]	@ (8006d60 <_dtoa_r+0x5a0>)
 8006cbe:	f7f9 fd35 	bl	800072c <__aeabi_ddiv>
 8006cc2:	4633      	mov	r3, r6
 8006cc4:	462a      	mov	r2, r5
 8006cc6:	f7f9 fa4f 	bl	8000168 <__aeabi_dsub>
 8006cca:	4656      	mov	r6, sl
 8006ccc:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006cd0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006cd4:	f7f9 feb0 	bl	8000a38 <__aeabi_d2iz>
 8006cd8:	4605      	mov	r5, r0
 8006cda:	f7f9 fb93 	bl	8000404 <__aeabi_i2d>
 8006cde:	4602      	mov	r2, r0
 8006ce0:	460b      	mov	r3, r1
 8006ce2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006ce6:	f7f9 fa3f 	bl	8000168 <__aeabi_dsub>
 8006cea:	4602      	mov	r2, r0
 8006cec:	460b      	mov	r3, r1
 8006cee:	3530      	adds	r5, #48	@ 0x30
 8006cf0:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8006cf4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006cf8:	f806 5b01 	strb.w	r5, [r6], #1
 8006cfc:	f7f9 fe5e 	bl	80009bc <__aeabi_dcmplt>
 8006d00:	2800      	cmp	r0, #0
 8006d02:	d172      	bne.n	8006dea <_dtoa_r+0x62a>
 8006d04:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006d08:	2000      	movs	r0, #0
 8006d0a:	4911      	ldr	r1, [pc, #68]	@ (8006d50 <_dtoa_r+0x590>)
 8006d0c:	f7f9 fa2c 	bl	8000168 <__aeabi_dsub>
 8006d10:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006d14:	f7f9 fe52 	bl	80009bc <__aeabi_dcmplt>
 8006d18:	2800      	cmp	r0, #0
 8006d1a:	f040 80b4 	bne.w	8006e86 <_dtoa_r+0x6c6>
 8006d1e:	42a6      	cmp	r6, r4
 8006d20:	f43f af70 	beq.w	8006c04 <_dtoa_r+0x444>
 8006d24:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8006d28:	2200      	movs	r2, #0
 8006d2a:	4b0a      	ldr	r3, [pc, #40]	@ (8006d54 <_dtoa_r+0x594>)
 8006d2c:	f7f9 fbd4 	bl	80004d8 <__aeabi_dmul>
 8006d30:	2200      	movs	r2, #0
 8006d32:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006d36:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006d3a:	4b06      	ldr	r3, [pc, #24]	@ (8006d54 <_dtoa_r+0x594>)
 8006d3c:	f7f9 fbcc 	bl	80004d8 <__aeabi_dmul>
 8006d40:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8006d44:	e7c4      	b.n	8006cd0 <_dtoa_r+0x510>
 8006d46:	bf00      	nop
 8006d48:	08008b38 	.word	0x08008b38
 8006d4c:	08008b10 	.word	0x08008b10
 8006d50:	3ff00000 	.word	0x3ff00000
 8006d54:	40240000 	.word	0x40240000
 8006d58:	401c0000 	.word	0x401c0000
 8006d5c:	40140000 	.word	0x40140000
 8006d60:	3fe00000 	.word	0x3fe00000
 8006d64:	4631      	mov	r1, r6
 8006d66:	4628      	mov	r0, r5
 8006d68:	f7f9 fbb6 	bl	80004d8 <__aeabi_dmul>
 8006d6c:	4656      	mov	r6, sl
 8006d6e:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006d72:	9413      	str	r4, [sp, #76]	@ 0x4c
 8006d74:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006d78:	f7f9 fe5e 	bl	8000a38 <__aeabi_d2iz>
 8006d7c:	4605      	mov	r5, r0
 8006d7e:	f7f9 fb41 	bl	8000404 <__aeabi_i2d>
 8006d82:	4602      	mov	r2, r0
 8006d84:	460b      	mov	r3, r1
 8006d86:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006d8a:	f7f9 f9ed 	bl	8000168 <__aeabi_dsub>
 8006d8e:	4602      	mov	r2, r0
 8006d90:	460b      	mov	r3, r1
 8006d92:	3530      	adds	r5, #48	@ 0x30
 8006d94:	f806 5b01 	strb.w	r5, [r6], #1
 8006d98:	42a6      	cmp	r6, r4
 8006d9a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8006d9e:	f04f 0200 	mov.w	r2, #0
 8006da2:	d124      	bne.n	8006dee <_dtoa_r+0x62e>
 8006da4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8006da8:	4bae      	ldr	r3, [pc, #696]	@ (8007064 <_dtoa_r+0x8a4>)
 8006daa:	f7f9 f9df 	bl	800016c <__adddf3>
 8006dae:	4602      	mov	r2, r0
 8006db0:	460b      	mov	r3, r1
 8006db2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006db6:	f7f9 fe1f 	bl	80009f8 <__aeabi_dcmpgt>
 8006dba:	2800      	cmp	r0, #0
 8006dbc:	d163      	bne.n	8006e86 <_dtoa_r+0x6c6>
 8006dbe:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006dc2:	2000      	movs	r0, #0
 8006dc4:	49a7      	ldr	r1, [pc, #668]	@ (8007064 <_dtoa_r+0x8a4>)
 8006dc6:	f7f9 f9cf 	bl	8000168 <__aeabi_dsub>
 8006dca:	4602      	mov	r2, r0
 8006dcc:	460b      	mov	r3, r1
 8006dce:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006dd2:	f7f9 fdf3 	bl	80009bc <__aeabi_dcmplt>
 8006dd6:	2800      	cmp	r0, #0
 8006dd8:	f43f af14 	beq.w	8006c04 <_dtoa_r+0x444>
 8006ddc:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8006dde:	1e73      	subs	r3, r6, #1
 8006de0:	9313      	str	r3, [sp, #76]	@ 0x4c
 8006de2:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8006de6:	2b30      	cmp	r3, #48	@ 0x30
 8006de8:	d0f8      	beq.n	8006ddc <_dtoa_r+0x61c>
 8006dea:	4647      	mov	r7, r8
 8006dec:	e03b      	b.n	8006e66 <_dtoa_r+0x6a6>
 8006dee:	4b9e      	ldr	r3, [pc, #632]	@ (8007068 <_dtoa_r+0x8a8>)
 8006df0:	f7f9 fb72 	bl	80004d8 <__aeabi_dmul>
 8006df4:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8006df8:	e7bc      	b.n	8006d74 <_dtoa_r+0x5b4>
 8006dfa:	4656      	mov	r6, sl
 8006dfc:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 8006e00:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006e04:	4620      	mov	r0, r4
 8006e06:	4629      	mov	r1, r5
 8006e08:	f7f9 fc90 	bl	800072c <__aeabi_ddiv>
 8006e0c:	f7f9 fe14 	bl	8000a38 <__aeabi_d2iz>
 8006e10:	4680      	mov	r8, r0
 8006e12:	f7f9 faf7 	bl	8000404 <__aeabi_i2d>
 8006e16:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006e1a:	f7f9 fb5d 	bl	80004d8 <__aeabi_dmul>
 8006e1e:	4602      	mov	r2, r0
 8006e20:	460b      	mov	r3, r1
 8006e22:	4620      	mov	r0, r4
 8006e24:	4629      	mov	r1, r5
 8006e26:	f7f9 f99f 	bl	8000168 <__aeabi_dsub>
 8006e2a:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8006e2e:	9d08      	ldr	r5, [sp, #32]
 8006e30:	f806 4b01 	strb.w	r4, [r6], #1
 8006e34:	eba6 040a 	sub.w	r4, r6, sl
 8006e38:	42a5      	cmp	r5, r4
 8006e3a:	4602      	mov	r2, r0
 8006e3c:	460b      	mov	r3, r1
 8006e3e:	d133      	bne.n	8006ea8 <_dtoa_r+0x6e8>
 8006e40:	f7f9 f994 	bl	800016c <__adddf3>
 8006e44:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006e48:	4604      	mov	r4, r0
 8006e4a:	460d      	mov	r5, r1
 8006e4c:	f7f9 fdd4 	bl	80009f8 <__aeabi_dcmpgt>
 8006e50:	b9c0      	cbnz	r0, 8006e84 <_dtoa_r+0x6c4>
 8006e52:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006e56:	4620      	mov	r0, r4
 8006e58:	4629      	mov	r1, r5
 8006e5a:	f7f9 fda5 	bl	80009a8 <__aeabi_dcmpeq>
 8006e5e:	b110      	cbz	r0, 8006e66 <_dtoa_r+0x6a6>
 8006e60:	f018 0f01 	tst.w	r8, #1
 8006e64:	d10e      	bne.n	8006e84 <_dtoa_r+0x6c4>
 8006e66:	4648      	mov	r0, r9
 8006e68:	9903      	ldr	r1, [sp, #12]
 8006e6a:	f000 fbbb 	bl	80075e4 <_Bfree>
 8006e6e:	2300      	movs	r3, #0
 8006e70:	7033      	strb	r3, [r6, #0]
 8006e72:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8006e74:	3701      	adds	r7, #1
 8006e76:	601f      	str	r7, [r3, #0]
 8006e78:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	f000 824b 	beq.w	8007316 <_dtoa_r+0xb56>
 8006e80:	601e      	str	r6, [r3, #0]
 8006e82:	e248      	b.n	8007316 <_dtoa_r+0xb56>
 8006e84:	46b8      	mov	r8, r7
 8006e86:	4633      	mov	r3, r6
 8006e88:	461e      	mov	r6, r3
 8006e8a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006e8e:	2a39      	cmp	r2, #57	@ 0x39
 8006e90:	d106      	bne.n	8006ea0 <_dtoa_r+0x6e0>
 8006e92:	459a      	cmp	sl, r3
 8006e94:	d1f8      	bne.n	8006e88 <_dtoa_r+0x6c8>
 8006e96:	2230      	movs	r2, #48	@ 0x30
 8006e98:	f108 0801 	add.w	r8, r8, #1
 8006e9c:	f88a 2000 	strb.w	r2, [sl]
 8006ea0:	781a      	ldrb	r2, [r3, #0]
 8006ea2:	3201      	adds	r2, #1
 8006ea4:	701a      	strb	r2, [r3, #0]
 8006ea6:	e7a0      	b.n	8006dea <_dtoa_r+0x62a>
 8006ea8:	2200      	movs	r2, #0
 8006eaa:	4b6f      	ldr	r3, [pc, #444]	@ (8007068 <_dtoa_r+0x8a8>)
 8006eac:	f7f9 fb14 	bl	80004d8 <__aeabi_dmul>
 8006eb0:	2200      	movs	r2, #0
 8006eb2:	2300      	movs	r3, #0
 8006eb4:	4604      	mov	r4, r0
 8006eb6:	460d      	mov	r5, r1
 8006eb8:	f7f9 fd76 	bl	80009a8 <__aeabi_dcmpeq>
 8006ebc:	2800      	cmp	r0, #0
 8006ebe:	d09f      	beq.n	8006e00 <_dtoa_r+0x640>
 8006ec0:	e7d1      	b.n	8006e66 <_dtoa_r+0x6a6>
 8006ec2:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8006ec4:	2a00      	cmp	r2, #0
 8006ec6:	f000 80ea 	beq.w	800709e <_dtoa_r+0x8de>
 8006eca:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8006ecc:	2a01      	cmp	r2, #1
 8006ece:	f300 80cd 	bgt.w	800706c <_dtoa_r+0x8ac>
 8006ed2:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8006ed4:	2a00      	cmp	r2, #0
 8006ed6:	f000 80c1 	beq.w	800705c <_dtoa_r+0x89c>
 8006eda:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8006ede:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8006ee0:	9e04      	ldr	r6, [sp, #16]
 8006ee2:	9a04      	ldr	r2, [sp, #16]
 8006ee4:	2101      	movs	r1, #1
 8006ee6:	441a      	add	r2, r3
 8006ee8:	9204      	str	r2, [sp, #16]
 8006eea:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006eec:	4648      	mov	r0, r9
 8006eee:	441a      	add	r2, r3
 8006ef0:	9209      	str	r2, [sp, #36]	@ 0x24
 8006ef2:	f000 fc2b 	bl	800774c <__i2b>
 8006ef6:	4605      	mov	r5, r0
 8006ef8:	b166      	cbz	r6, 8006f14 <_dtoa_r+0x754>
 8006efa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	dd09      	ble.n	8006f14 <_dtoa_r+0x754>
 8006f00:	42b3      	cmp	r3, r6
 8006f02:	bfa8      	it	ge
 8006f04:	4633      	movge	r3, r6
 8006f06:	9a04      	ldr	r2, [sp, #16]
 8006f08:	1af6      	subs	r6, r6, r3
 8006f0a:	1ad2      	subs	r2, r2, r3
 8006f0c:	9204      	str	r2, [sp, #16]
 8006f0e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006f10:	1ad3      	subs	r3, r2, r3
 8006f12:	9309      	str	r3, [sp, #36]	@ 0x24
 8006f14:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006f16:	b30b      	cbz	r3, 8006f5c <_dtoa_r+0x79c>
 8006f18:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	f000 80c6 	beq.w	80070ac <_dtoa_r+0x8ec>
 8006f20:	2c00      	cmp	r4, #0
 8006f22:	f000 80c0 	beq.w	80070a6 <_dtoa_r+0x8e6>
 8006f26:	4629      	mov	r1, r5
 8006f28:	4622      	mov	r2, r4
 8006f2a:	4648      	mov	r0, r9
 8006f2c:	f000 fcc6 	bl	80078bc <__pow5mult>
 8006f30:	9a03      	ldr	r2, [sp, #12]
 8006f32:	4601      	mov	r1, r0
 8006f34:	4605      	mov	r5, r0
 8006f36:	4648      	mov	r0, r9
 8006f38:	f000 fc1e 	bl	8007778 <__multiply>
 8006f3c:	9903      	ldr	r1, [sp, #12]
 8006f3e:	4680      	mov	r8, r0
 8006f40:	4648      	mov	r0, r9
 8006f42:	f000 fb4f 	bl	80075e4 <_Bfree>
 8006f46:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006f48:	1b1b      	subs	r3, r3, r4
 8006f4a:	930a      	str	r3, [sp, #40]	@ 0x28
 8006f4c:	f000 80b1 	beq.w	80070b2 <_dtoa_r+0x8f2>
 8006f50:	4641      	mov	r1, r8
 8006f52:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006f54:	4648      	mov	r0, r9
 8006f56:	f000 fcb1 	bl	80078bc <__pow5mult>
 8006f5a:	9003      	str	r0, [sp, #12]
 8006f5c:	2101      	movs	r1, #1
 8006f5e:	4648      	mov	r0, r9
 8006f60:	f000 fbf4 	bl	800774c <__i2b>
 8006f64:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006f66:	4604      	mov	r4, r0
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	f000 81d8 	beq.w	800731e <_dtoa_r+0xb5e>
 8006f6e:	461a      	mov	r2, r3
 8006f70:	4601      	mov	r1, r0
 8006f72:	4648      	mov	r0, r9
 8006f74:	f000 fca2 	bl	80078bc <__pow5mult>
 8006f78:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8006f7a:	4604      	mov	r4, r0
 8006f7c:	2b01      	cmp	r3, #1
 8006f7e:	f300 809f 	bgt.w	80070c0 <_dtoa_r+0x900>
 8006f82:	9b06      	ldr	r3, [sp, #24]
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	f040 8097 	bne.w	80070b8 <_dtoa_r+0x8f8>
 8006f8a:	9b07      	ldr	r3, [sp, #28]
 8006f8c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	f040 8093 	bne.w	80070bc <_dtoa_r+0x8fc>
 8006f96:	9b07      	ldr	r3, [sp, #28]
 8006f98:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006f9c:	0d1b      	lsrs	r3, r3, #20
 8006f9e:	051b      	lsls	r3, r3, #20
 8006fa0:	b133      	cbz	r3, 8006fb0 <_dtoa_r+0x7f0>
 8006fa2:	9b04      	ldr	r3, [sp, #16]
 8006fa4:	3301      	adds	r3, #1
 8006fa6:	9304      	str	r3, [sp, #16]
 8006fa8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006faa:	3301      	adds	r3, #1
 8006fac:	9309      	str	r3, [sp, #36]	@ 0x24
 8006fae:	2301      	movs	r3, #1
 8006fb0:	930a      	str	r3, [sp, #40]	@ 0x28
 8006fb2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	f000 81b8 	beq.w	800732a <_dtoa_r+0xb6a>
 8006fba:	6923      	ldr	r3, [r4, #16]
 8006fbc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8006fc0:	6918      	ldr	r0, [r3, #16]
 8006fc2:	f000 fb77 	bl	80076b4 <__hi0bits>
 8006fc6:	f1c0 0020 	rsb	r0, r0, #32
 8006fca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006fcc:	4418      	add	r0, r3
 8006fce:	f010 001f 	ands.w	r0, r0, #31
 8006fd2:	f000 8082 	beq.w	80070da <_dtoa_r+0x91a>
 8006fd6:	f1c0 0320 	rsb	r3, r0, #32
 8006fda:	2b04      	cmp	r3, #4
 8006fdc:	dd73      	ble.n	80070c6 <_dtoa_r+0x906>
 8006fde:	9b04      	ldr	r3, [sp, #16]
 8006fe0:	f1c0 001c 	rsb	r0, r0, #28
 8006fe4:	4403      	add	r3, r0
 8006fe6:	9304      	str	r3, [sp, #16]
 8006fe8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006fea:	4406      	add	r6, r0
 8006fec:	4403      	add	r3, r0
 8006fee:	9309      	str	r3, [sp, #36]	@ 0x24
 8006ff0:	9b04      	ldr	r3, [sp, #16]
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	dd05      	ble.n	8007002 <_dtoa_r+0x842>
 8006ff6:	461a      	mov	r2, r3
 8006ff8:	4648      	mov	r0, r9
 8006ffa:	9903      	ldr	r1, [sp, #12]
 8006ffc:	f000 fcb8 	bl	8007970 <__lshift>
 8007000:	9003      	str	r0, [sp, #12]
 8007002:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007004:	2b00      	cmp	r3, #0
 8007006:	dd05      	ble.n	8007014 <_dtoa_r+0x854>
 8007008:	4621      	mov	r1, r4
 800700a:	461a      	mov	r2, r3
 800700c:	4648      	mov	r0, r9
 800700e:	f000 fcaf 	bl	8007970 <__lshift>
 8007012:	4604      	mov	r4, r0
 8007014:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007016:	2b00      	cmp	r3, #0
 8007018:	d061      	beq.n	80070de <_dtoa_r+0x91e>
 800701a:	4621      	mov	r1, r4
 800701c:	9803      	ldr	r0, [sp, #12]
 800701e:	f000 fd13 	bl	8007a48 <__mcmp>
 8007022:	2800      	cmp	r0, #0
 8007024:	da5b      	bge.n	80070de <_dtoa_r+0x91e>
 8007026:	2300      	movs	r3, #0
 8007028:	220a      	movs	r2, #10
 800702a:	4648      	mov	r0, r9
 800702c:	9903      	ldr	r1, [sp, #12]
 800702e:	f000 fafb 	bl	8007628 <__multadd>
 8007032:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007034:	f107 38ff 	add.w	r8, r7, #4294967295
 8007038:	9003      	str	r0, [sp, #12]
 800703a:	2b00      	cmp	r3, #0
 800703c:	f000 8177 	beq.w	800732e <_dtoa_r+0xb6e>
 8007040:	4629      	mov	r1, r5
 8007042:	2300      	movs	r3, #0
 8007044:	220a      	movs	r2, #10
 8007046:	4648      	mov	r0, r9
 8007048:	f000 faee 	bl	8007628 <__multadd>
 800704c:	f1bb 0f00 	cmp.w	fp, #0
 8007050:	4605      	mov	r5, r0
 8007052:	dc6f      	bgt.n	8007134 <_dtoa_r+0x974>
 8007054:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8007056:	2b02      	cmp	r3, #2
 8007058:	dc49      	bgt.n	80070ee <_dtoa_r+0x92e>
 800705a:	e06b      	b.n	8007134 <_dtoa_r+0x974>
 800705c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800705e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8007062:	e73c      	b.n	8006ede <_dtoa_r+0x71e>
 8007064:	3fe00000 	.word	0x3fe00000
 8007068:	40240000 	.word	0x40240000
 800706c:	9b08      	ldr	r3, [sp, #32]
 800706e:	1e5c      	subs	r4, r3, #1
 8007070:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007072:	42a3      	cmp	r3, r4
 8007074:	db09      	blt.n	800708a <_dtoa_r+0x8ca>
 8007076:	1b1c      	subs	r4, r3, r4
 8007078:	9b08      	ldr	r3, [sp, #32]
 800707a:	2b00      	cmp	r3, #0
 800707c:	f6bf af30 	bge.w	8006ee0 <_dtoa_r+0x720>
 8007080:	9b04      	ldr	r3, [sp, #16]
 8007082:	9a08      	ldr	r2, [sp, #32]
 8007084:	1a9e      	subs	r6, r3, r2
 8007086:	2300      	movs	r3, #0
 8007088:	e72b      	b.n	8006ee2 <_dtoa_r+0x722>
 800708a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800708c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800708e:	1ae3      	subs	r3, r4, r3
 8007090:	441a      	add	r2, r3
 8007092:	940a      	str	r4, [sp, #40]	@ 0x28
 8007094:	9e04      	ldr	r6, [sp, #16]
 8007096:	2400      	movs	r4, #0
 8007098:	9b08      	ldr	r3, [sp, #32]
 800709a:	920e      	str	r2, [sp, #56]	@ 0x38
 800709c:	e721      	b.n	8006ee2 <_dtoa_r+0x722>
 800709e:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80070a0:	9e04      	ldr	r6, [sp, #16]
 80070a2:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 80070a4:	e728      	b.n	8006ef8 <_dtoa_r+0x738>
 80070a6:	f8dd 800c 	ldr.w	r8, [sp, #12]
 80070aa:	e751      	b.n	8006f50 <_dtoa_r+0x790>
 80070ac:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80070ae:	9903      	ldr	r1, [sp, #12]
 80070b0:	e750      	b.n	8006f54 <_dtoa_r+0x794>
 80070b2:	f8cd 800c 	str.w	r8, [sp, #12]
 80070b6:	e751      	b.n	8006f5c <_dtoa_r+0x79c>
 80070b8:	2300      	movs	r3, #0
 80070ba:	e779      	b.n	8006fb0 <_dtoa_r+0x7f0>
 80070bc:	9b06      	ldr	r3, [sp, #24]
 80070be:	e777      	b.n	8006fb0 <_dtoa_r+0x7f0>
 80070c0:	2300      	movs	r3, #0
 80070c2:	930a      	str	r3, [sp, #40]	@ 0x28
 80070c4:	e779      	b.n	8006fba <_dtoa_r+0x7fa>
 80070c6:	d093      	beq.n	8006ff0 <_dtoa_r+0x830>
 80070c8:	9a04      	ldr	r2, [sp, #16]
 80070ca:	331c      	adds	r3, #28
 80070cc:	441a      	add	r2, r3
 80070ce:	9204      	str	r2, [sp, #16]
 80070d0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80070d2:	441e      	add	r6, r3
 80070d4:	441a      	add	r2, r3
 80070d6:	9209      	str	r2, [sp, #36]	@ 0x24
 80070d8:	e78a      	b.n	8006ff0 <_dtoa_r+0x830>
 80070da:	4603      	mov	r3, r0
 80070dc:	e7f4      	b.n	80070c8 <_dtoa_r+0x908>
 80070de:	9b08      	ldr	r3, [sp, #32]
 80070e0:	46b8      	mov	r8, r7
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	dc20      	bgt.n	8007128 <_dtoa_r+0x968>
 80070e6:	469b      	mov	fp, r3
 80070e8:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80070ea:	2b02      	cmp	r3, #2
 80070ec:	dd1e      	ble.n	800712c <_dtoa_r+0x96c>
 80070ee:	f1bb 0f00 	cmp.w	fp, #0
 80070f2:	f47f adb1 	bne.w	8006c58 <_dtoa_r+0x498>
 80070f6:	4621      	mov	r1, r4
 80070f8:	465b      	mov	r3, fp
 80070fa:	2205      	movs	r2, #5
 80070fc:	4648      	mov	r0, r9
 80070fe:	f000 fa93 	bl	8007628 <__multadd>
 8007102:	4601      	mov	r1, r0
 8007104:	4604      	mov	r4, r0
 8007106:	9803      	ldr	r0, [sp, #12]
 8007108:	f000 fc9e 	bl	8007a48 <__mcmp>
 800710c:	2800      	cmp	r0, #0
 800710e:	f77f ada3 	ble.w	8006c58 <_dtoa_r+0x498>
 8007112:	4656      	mov	r6, sl
 8007114:	2331      	movs	r3, #49	@ 0x31
 8007116:	f108 0801 	add.w	r8, r8, #1
 800711a:	f806 3b01 	strb.w	r3, [r6], #1
 800711e:	e59f      	b.n	8006c60 <_dtoa_r+0x4a0>
 8007120:	46b8      	mov	r8, r7
 8007122:	9c08      	ldr	r4, [sp, #32]
 8007124:	4625      	mov	r5, r4
 8007126:	e7f4      	b.n	8007112 <_dtoa_r+0x952>
 8007128:	f8dd b020 	ldr.w	fp, [sp, #32]
 800712c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800712e:	2b00      	cmp	r3, #0
 8007130:	f000 8101 	beq.w	8007336 <_dtoa_r+0xb76>
 8007134:	2e00      	cmp	r6, #0
 8007136:	dd05      	ble.n	8007144 <_dtoa_r+0x984>
 8007138:	4629      	mov	r1, r5
 800713a:	4632      	mov	r2, r6
 800713c:	4648      	mov	r0, r9
 800713e:	f000 fc17 	bl	8007970 <__lshift>
 8007142:	4605      	mov	r5, r0
 8007144:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007146:	2b00      	cmp	r3, #0
 8007148:	d05c      	beq.n	8007204 <_dtoa_r+0xa44>
 800714a:	4648      	mov	r0, r9
 800714c:	6869      	ldr	r1, [r5, #4]
 800714e:	f000 fa09 	bl	8007564 <_Balloc>
 8007152:	4606      	mov	r6, r0
 8007154:	b928      	cbnz	r0, 8007162 <_dtoa_r+0x9a2>
 8007156:	4602      	mov	r2, r0
 8007158:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800715c:	4b80      	ldr	r3, [pc, #512]	@ (8007360 <_dtoa_r+0xba0>)
 800715e:	f7ff bb43 	b.w	80067e8 <_dtoa_r+0x28>
 8007162:	692a      	ldr	r2, [r5, #16]
 8007164:	f105 010c 	add.w	r1, r5, #12
 8007168:	3202      	adds	r2, #2
 800716a:	0092      	lsls	r2, r2, #2
 800716c:	300c      	adds	r0, #12
 800716e:	f7ff fa8e 	bl	800668e <memcpy>
 8007172:	2201      	movs	r2, #1
 8007174:	4631      	mov	r1, r6
 8007176:	4648      	mov	r0, r9
 8007178:	f000 fbfa 	bl	8007970 <__lshift>
 800717c:	462f      	mov	r7, r5
 800717e:	4605      	mov	r5, r0
 8007180:	f10a 0301 	add.w	r3, sl, #1
 8007184:	9304      	str	r3, [sp, #16]
 8007186:	eb0a 030b 	add.w	r3, sl, fp
 800718a:	930a      	str	r3, [sp, #40]	@ 0x28
 800718c:	9b06      	ldr	r3, [sp, #24]
 800718e:	f003 0301 	and.w	r3, r3, #1
 8007192:	9309      	str	r3, [sp, #36]	@ 0x24
 8007194:	9b04      	ldr	r3, [sp, #16]
 8007196:	4621      	mov	r1, r4
 8007198:	9803      	ldr	r0, [sp, #12]
 800719a:	f103 3bff 	add.w	fp, r3, #4294967295
 800719e:	f7ff fa84 	bl	80066aa <quorem>
 80071a2:	4603      	mov	r3, r0
 80071a4:	4639      	mov	r1, r7
 80071a6:	3330      	adds	r3, #48	@ 0x30
 80071a8:	9006      	str	r0, [sp, #24]
 80071aa:	9803      	ldr	r0, [sp, #12]
 80071ac:	930b      	str	r3, [sp, #44]	@ 0x2c
 80071ae:	f000 fc4b 	bl	8007a48 <__mcmp>
 80071b2:	462a      	mov	r2, r5
 80071b4:	9008      	str	r0, [sp, #32]
 80071b6:	4621      	mov	r1, r4
 80071b8:	4648      	mov	r0, r9
 80071ba:	f000 fc61 	bl	8007a80 <__mdiff>
 80071be:	68c2      	ldr	r2, [r0, #12]
 80071c0:	4606      	mov	r6, r0
 80071c2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80071c4:	bb02      	cbnz	r2, 8007208 <_dtoa_r+0xa48>
 80071c6:	4601      	mov	r1, r0
 80071c8:	9803      	ldr	r0, [sp, #12]
 80071ca:	f000 fc3d 	bl	8007a48 <__mcmp>
 80071ce:	4602      	mov	r2, r0
 80071d0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80071d2:	4631      	mov	r1, r6
 80071d4:	4648      	mov	r0, r9
 80071d6:	e9cd 320b 	strd	r3, r2, [sp, #44]	@ 0x2c
 80071da:	f000 fa03 	bl	80075e4 <_Bfree>
 80071de:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80071e0:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80071e2:	9e04      	ldr	r6, [sp, #16]
 80071e4:	ea42 0103 	orr.w	r1, r2, r3
 80071e8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80071ea:	4319      	orrs	r1, r3
 80071ec:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80071ee:	d10d      	bne.n	800720c <_dtoa_r+0xa4c>
 80071f0:	2b39      	cmp	r3, #57	@ 0x39
 80071f2:	d027      	beq.n	8007244 <_dtoa_r+0xa84>
 80071f4:	9a08      	ldr	r2, [sp, #32]
 80071f6:	2a00      	cmp	r2, #0
 80071f8:	dd01      	ble.n	80071fe <_dtoa_r+0xa3e>
 80071fa:	9b06      	ldr	r3, [sp, #24]
 80071fc:	3331      	adds	r3, #49	@ 0x31
 80071fe:	f88b 3000 	strb.w	r3, [fp]
 8007202:	e52e      	b.n	8006c62 <_dtoa_r+0x4a2>
 8007204:	4628      	mov	r0, r5
 8007206:	e7b9      	b.n	800717c <_dtoa_r+0x9bc>
 8007208:	2201      	movs	r2, #1
 800720a:	e7e2      	b.n	80071d2 <_dtoa_r+0xa12>
 800720c:	9908      	ldr	r1, [sp, #32]
 800720e:	2900      	cmp	r1, #0
 8007210:	db04      	blt.n	800721c <_dtoa_r+0xa5c>
 8007212:	9820      	ldr	r0, [sp, #128]	@ 0x80
 8007214:	4301      	orrs	r1, r0
 8007216:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007218:	4301      	orrs	r1, r0
 800721a:	d120      	bne.n	800725e <_dtoa_r+0xa9e>
 800721c:	2a00      	cmp	r2, #0
 800721e:	ddee      	ble.n	80071fe <_dtoa_r+0xa3e>
 8007220:	2201      	movs	r2, #1
 8007222:	9903      	ldr	r1, [sp, #12]
 8007224:	4648      	mov	r0, r9
 8007226:	9304      	str	r3, [sp, #16]
 8007228:	f000 fba2 	bl	8007970 <__lshift>
 800722c:	4621      	mov	r1, r4
 800722e:	9003      	str	r0, [sp, #12]
 8007230:	f000 fc0a 	bl	8007a48 <__mcmp>
 8007234:	2800      	cmp	r0, #0
 8007236:	9b04      	ldr	r3, [sp, #16]
 8007238:	dc02      	bgt.n	8007240 <_dtoa_r+0xa80>
 800723a:	d1e0      	bne.n	80071fe <_dtoa_r+0xa3e>
 800723c:	07da      	lsls	r2, r3, #31
 800723e:	d5de      	bpl.n	80071fe <_dtoa_r+0xa3e>
 8007240:	2b39      	cmp	r3, #57	@ 0x39
 8007242:	d1da      	bne.n	80071fa <_dtoa_r+0xa3a>
 8007244:	2339      	movs	r3, #57	@ 0x39
 8007246:	f88b 3000 	strb.w	r3, [fp]
 800724a:	4633      	mov	r3, r6
 800724c:	461e      	mov	r6, r3
 800724e:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8007252:	3b01      	subs	r3, #1
 8007254:	2a39      	cmp	r2, #57	@ 0x39
 8007256:	d04e      	beq.n	80072f6 <_dtoa_r+0xb36>
 8007258:	3201      	adds	r2, #1
 800725a:	701a      	strb	r2, [r3, #0]
 800725c:	e501      	b.n	8006c62 <_dtoa_r+0x4a2>
 800725e:	2a00      	cmp	r2, #0
 8007260:	dd03      	ble.n	800726a <_dtoa_r+0xaaa>
 8007262:	2b39      	cmp	r3, #57	@ 0x39
 8007264:	d0ee      	beq.n	8007244 <_dtoa_r+0xa84>
 8007266:	3301      	adds	r3, #1
 8007268:	e7c9      	b.n	80071fe <_dtoa_r+0xa3e>
 800726a:	9a04      	ldr	r2, [sp, #16]
 800726c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800726e:	f802 3c01 	strb.w	r3, [r2, #-1]
 8007272:	428a      	cmp	r2, r1
 8007274:	d028      	beq.n	80072c8 <_dtoa_r+0xb08>
 8007276:	2300      	movs	r3, #0
 8007278:	220a      	movs	r2, #10
 800727a:	9903      	ldr	r1, [sp, #12]
 800727c:	4648      	mov	r0, r9
 800727e:	f000 f9d3 	bl	8007628 <__multadd>
 8007282:	42af      	cmp	r7, r5
 8007284:	9003      	str	r0, [sp, #12]
 8007286:	f04f 0300 	mov.w	r3, #0
 800728a:	f04f 020a 	mov.w	r2, #10
 800728e:	4639      	mov	r1, r7
 8007290:	4648      	mov	r0, r9
 8007292:	d107      	bne.n	80072a4 <_dtoa_r+0xae4>
 8007294:	f000 f9c8 	bl	8007628 <__multadd>
 8007298:	4607      	mov	r7, r0
 800729a:	4605      	mov	r5, r0
 800729c:	9b04      	ldr	r3, [sp, #16]
 800729e:	3301      	adds	r3, #1
 80072a0:	9304      	str	r3, [sp, #16]
 80072a2:	e777      	b.n	8007194 <_dtoa_r+0x9d4>
 80072a4:	f000 f9c0 	bl	8007628 <__multadd>
 80072a8:	4629      	mov	r1, r5
 80072aa:	4607      	mov	r7, r0
 80072ac:	2300      	movs	r3, #0
 80072ae:	220a      	movs	r2, #10
 80072b0:	4648      	mov	r0, r9
 80072b2:	f000 f9b9 	bl	8007628 <__multadd>
 80072b6:	4605      	mov	r5, r0
 80072b8:	e7f0      	b.n	800729c <_dtoa_r+0xadc>
 80072ba:	f1bb 0f00 	cmp.w	fp, #0
 80072be:	bfcc      	ite	gt
 80072c0:	465e      	movgt	r6, fp
 80072c2:	2601      	movle	r6, #1
 80072c4:	2700      	movs	r7, #0
 80072c6:	4456      	add	r6, sl
 80072c8:	2201      	movs	r2, #1
 80072ca:	9903      	ldr	r1, [sp, #12]
 80072cc:	4648      	mov	r0, r9
 80072ce:	9304      	str	r3, [sp, #16]
 80072d0:	f000 fb4e 	bl	8007970 <__lshift>
 80072d4:	4621      	mov	r1, r4
 80072d6:	9003      	str	r0, [sp, #12]
 80072d8:	f000 fbb6 	bl	8007a48 <__mcmp>
 80072dc:	2800      	cmp	r0, #0
 80072de:	dcb4      	bgt.n	800724a <_dtoa_r+0xa8a>
 80072e0:	d102      	bne.n	80072e8 <_dtoa_r+0xb28>
 80072e2:	9b04      	ldr	r3, [sp, #16]
 80072e4:	07db      	lsls	r3, r3, #31
 80072e6:	d4b0      	bmi.n	800724a <_dtoa_r+0xa8a>
 80072e8:	4633      	mov	r3, r6
 80072ea:	461e      	mov	r6, r3
 80072ec:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80072f0:	2a30      	cmp	r2, #48	@ 0x30
 80072f2:	d0fa      	beq.n	80072ea <_dtoa_r+0xb2a>
 80072f4:	e4b5      	b.n	8006c62 <_dtoa_r+0x4a2>
 80072f6:	459a      	cmp	sl, r3
 80072f8:	d1a8      	bne.n	800724c <_dtoa_r+0xa8c>
 80072fa:	2331      	movs	r3, #49	@ 0x31
 80072fc:	f108 0801 	add.w	r8, r8, #1
 8007300:	f88a 3000 	strb.w	r3, [sl]
 8007304:	e4ad      	b.n	8006c62 <_dtoa_r+0x4a2>
 8007306:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8007308:	f8df a058 	ldr.w	sl, [pc, #88]	@ 8007364 <_dtoa_r+0xba4>
 800730c:	b11b      	cbz	r3, 8007316 <_dtoa_r+0xb56>
 800730e:	f10a 0308 	add.w	r3, sl, #8
 8007312:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8007314:	6013      	str	r3, [r2, #0]
 8007316:	4650      	mov	r0, sl
 8007318:	b017      	add	sp, #92	@ 0x5c
 800731a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800731e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8007320:	2b01      	cmp	r3, #1
 8007322:	f77f ae2e 	ble.w	8006f82 <_dtoa_r+0x7c2>
 8007326:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007328:	930a      	str	r3, [sp, #40]	@ 0x28
 800732a:	2001      	movs	r0, #1
 800732c:	e64d      	b.n	8006fca <_dtoa_r+0x80a>
 800732e:	f1bb 0f00 	cmp.w	fp, #0
 8007332:	f77f aed9 	ble.w	80070e8 <_dtoa_r+0x928>
 8007336:	4656      	mov	r6, sl
 8007338:	4621      	mov	r1, r4
 800733a:	9803      	ldr	r0, [sp, #12]
 800733c:	f7ff f9b5 	bl	80066aa <quorem>
 8007340:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 8007344:	f806 3b01 	strb.w	r3, [r6], #1
 8007348:	eba6 020a 	sub.w	r2, r6, sl
 800734c:	4593      	cmp	fp, r2
 800734e:	ddb4      	ble.n	80072ba <_dtoa_r+0xafa>
 8007350:	2300      	movs	r3, #0
 8007352:	220a      	movs	r2, #10
 8007354:	4648      	mov	r0, r9
 8007356:	9903      	ldr	r1, [sp, #12]
 8007358:	f000 f966 	bl	8007628 <__multadd>
 800735c:	9003      	str	r0, [sp, #12]
 800735e:	e7eb      	b.n	8007338 <_dtoa_r+0xb78>
 8007360:	08008a42 	.word	0x08008a42
 8007364:	080089c6 	.word	0x080089c6

08007368 <_free_r>:
 8007368:	b538      	push	{r3, r4, r5, lr}
 800736a:	4605      	mov	r5, r0
 800736c:	2900      	cmp	r1, #0
 800736e:	d040      	beq.n	80073f2 <_free_r+0x8a>
 8007370:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007374:	1f0c      	subs	r4, r1, #4
 8007376:	2b00      	cmp	r3, #0
 8007378:	bfb8      	it	lt
 800737a:	18e4      	addlt	r4, r4, r3
 800737c:	f000 f8e6 	bl	800754c <__malloc_lock>
 8007380:	4a1c      	ldr	r2, [pc, #112]	@ (80073f4 <_free_r+0x8c>)
 8007382:	6813      	ldr	r3, [r2, #0]
 8007384:	b933      	cbnz	r3, 8007394 <_free_r+0x2c>
 8007386:	6063      	str	r3, [r4, #4]
 8007388:	6014      	str	r4, [r2, #0]
 800738a:	4628      	mov	r0, r5
 800738c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007390:	f000 b8e2 	b.w	8007558 <__malloc_unlock>
 8007394:	42a3      	cmp	r3, r4
 8007396:	d908      	bls.n	80073aa <_free_r+0x42>
 8007398:	6820      	ldr	r0, [r4, #0]
 800739a:	1821      	adds	r1, r4, r0
 800739c:	428b      	cmp	r3, r1
 800739e:	bf01      	itttt	eq
 80073a0:	6819      	ldreq	r1, [r3, #0]
 80073a2:	685b      	ldreq	r3, [r3, #4]
 80073a4:	1809      	addeq	r1, r1, r0
 80073a6:	6021      	streq	r1, [r4, #0]
 80073a8:	e7ed      	b.n	8007386 <_free_r+0x1e>
 80073aa:	461a      	mov	r2, r3
 80073ac:	685b      	ldr	r3, [r3, #4]
 80073ae:	b10b      	cbz	r3, 80073b4 <_free_r+0x4c>
 80073b0:	42a3      	cmp	r3, r4
 80073b2:	d9fa      	bls.n	80073aa <_free_r+0x42>
 80073b4:	6811      	ldr	r1, [r2, #0]
 80073b6:	1850      	adds	r0, r2, r1
 80073b8:	42a0      	cmp	r0, r4
 80073ba:	d10b      	bne.n	80073d4 <_free_r+0x6c>
 80073bc:	6820      	ldr	r0, [r4, #0]
 80073be:	4401      	add	r1, r0
 80073c0:	1850      	adds	r0, r2, r1
 80073c2:	4283      	cmp	r3, r0
 80073c4:	6011      	str	r1, [r2, #0]
 80073c6:	d1e0      	bne.n	800738a <_free_r+0x22>
 80073c8:	6818      	ldr	r0, [r3, #0]
 80073ca:	685b      	ldr	r3, [r3, #4]
 80073cc:	4408      	add	r0, r1
 80073ce:	6010      	str	r0, [r2, #0]
 80073d0:	6053      	str	r3, [r2, #4]
 80073d2:	e7da      	b.n	800738a <_free_r+0x22>
 80073d4:	d902      	bls.n	80073dc <_free_r+0x74>
 80073d6:	230c      	movs	r3, #12
 80073d8:	602b      	str	r3, [r5, #0]
 80073da:	e7d6      	b.n	800738a <_free_r+0x22>
 80073dc:	6820      	ldr	r0, [r4, #0]
 80073de:	1821      	adds	r1, r4, r0
 80073e0:	428b      	cmp	r3, r1
 80073e2:	bf01      	itttt	eq
 80073e4:	6819      	ldreq	r1, [r3, #0]
 80073e6:	685b      	ldreq	r3, [r3, #4]
 80073e8:	1809      	addeq	r1, r1, r0
 80073ea:	6021      	streq	r1, [r4, #0]
 80073ec:	6063      	str	r3, [r4, #4]
 80073ee:	6054      	str	r4, [r2, #4]
 80073f0:	e7cb      	b.n	800738a <_free_r+0x22>
 80073f2:	bd38      	pop	{r3, r4, r5, pc}
 80073f4:	2000049c 	.word	0x2000049c

080073f8 <malloc>:
 80073f8:	4b02      	ldr	r3, [pc, #8]	@ (8007404 <malloc+0xc>)
 80073fa:	4601      	mov	r1, r0
 80073fc:	6818      	ldr	r0, [r3, #0]
 80073fe:	f000 b825 	b.w	800744c <_malloc_r>
 8007402:	bf00      	nop
 8007404:	20000018 	.word	0x20000018

08007408 <sbrk_aligned>:
 8007408:	b570      	push	{r4, r5, r6, lr}
 800740a:	4e0f      	ldr	r6, [pc, #60]	@ (8007448 <sbrk_aligned+0x40>)
 800740c:	460c      	mov	r4, r1
 800740e:	6831      	ldr	r1, [r6, #0]
 8007410:	4605      	mov	r5, r0
 8007412:	b911      	cbnz	r1, 800741a <sbrk_aligned+0x12>
 8007414:	f001 f80e 	bl	8008434 <_sbrk_r>
 8007418:	6030      	str	r0, [r6, #0]
 800741a:	4621      	mov	r1, r4
 800741c:	4628      	mov	r0, r5
 800741e:	f001 f809 	bl	8008434 <_sbrk_r>
 8007422:	1c43      	adds	r3, r0, #1
 8007424:	d103      	bne.n	800742e <sbrk_aligned+0x26>
 8007426:	f04f 34ff 	mov.w	r4, #4294967295
 800742a:	4620      	mov	r0, r4
 800742c:	bd70      	pop	{r4, r5, r6, pc}
 800742e:	1cc4      	adds	r4, r0, #3
 8007430:	f024 0403 	bic.w	r4, r4, #3
 8007434:	42a0      	cmp	r0, r4
 8007436:	d0f8      	beq.n	800742a <sbrk_aligned+0x22>
 8007438:	1a21      	subs	r1, r4, r0
 800743a:	4628      	mov	r0, r5
 800743c:	f000 fffa 	bl	8008434 <_sbrk_r>
 8007440:	3001      	adds	r0, #1
 8007442:	d1f2      	bne.n	800742a <sbrk_aligned+0x22>
 8007444:	e7ef      	b.n	8007426 <sbrk_aligned+0x1e>
 8007446:	bf00      	nop
 8007448:	20000498 	.word	0x20000498

0800744c <_malloc_r>:
 800744c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007450:	1ccd      	adds	r5, r1, #3
 8007452:	f025 0503 	bic.w	r5, r5, #3
 8007456:	3508      	adds	r5, #8
 8007458:	2d0c      	cmp	r5, #12
 800745a:	bf38      	it	cc
 800745c:	250c      	movcc	r5, #12
 800745e:	2d00      	cmp	r5, #0
 8007460:	4606      	mov	r6, r0
 8007462:	db01      	blt.n	8007468 <_malloc_r+0x1c>
 8007464:	42a9      	cmp	r1, r5
 8007466:	d904      	bls.n	8007472 <_malloc_r+0x26>
 8007468:	230c      	movs	r3, #12
 800746a:	6033      	str	r3, [r6, #0]
 800746c:	2000      	movs	r0, #0
 800746e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007472:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007548 <_malloc_r+0xfc>
 8007476:	f000 f869 	bl	800754c <__malloc_lock>
 800747a:	f8d8 3000 	ldr.w	r3, [r8]
 800747e:	461c      	mov	r4, r3
 8007480:	bb44      	cbnz	r4, 80074d4 <_malloc_r+0x88>
 8007482:	4629      	mov	r1, r5
 8007484:	4630      	mov	r0, r6
 8007486:	f7ff ffbf 	bl	8007408 <sbrk_aligned>
 800748a:	1c43      	adds	r3, r0, #1
 800748c:	4604      	mov	r4, r0
 800748e:	d158      	bne.n	8007542 <_malloc_r+0xf6>
 8007490:	f8d8 4000 	ldr.w	r4, [r8]
 8007494:	4627      	mov	r7, r4
 8007496:	2f00      	cmp	r7, #0
 8007498:	d143      	bne.n	8007522 <_malloc_r+0xd6>
 800749a:	2c00      	cmp	r4, #0
 800749c:	d04b      	beq.n	8007536 <_malloc_r+0xea>
 800749e:	6823      	ldr	r3, [r4, #0]
 80074a0:	4639      	mov	r1, r7
 80074a2:	4630      	mov	r0, r6
 80074a4:	eb04 0903 	add.w	r9, r4, r3
 80074a8:	f000 ffc4 	bl	8008434 <_sbrk_r>
 80074ac:	4581      	cmp	r9, r0
 80074ae:	d142      	bne.n	8007536 <_malloc_r+0xea>
 80074b0:	6821      	ldr	r1, [r4, #0]
 80074b2:	4630      	mov	r0, r6
 80074b4:	1a6d      	subs	r5, r5, r1
 80074b6:	4629      	mov	r1, r5
 80074b8:	f7ff ffa6 	bl	8007408 <sbrk_aligned>
 80074bc:	3001      	adds	r0, #1
 80074be:	d03a      	beq.n	8007536 <_malloc_r+0xea>
 80074c0:	6823      	ldr	r3, [r4, #0]
 80074c2:	442b      	add	r3, r5
 80074c4:	6023      	str	r3, [r4, #0]
 80074c6:	f8d8 3000 	ldr.w	r3, [r8]
 80074ca:	685a      	ldr	r2, [r3, #4]
 80074cc:	bb62      	cbnz	r2, 8007528 <_malloc_r+0xdc>
 80074ce:	f8c8 7000 	str.w	r7, [r8]
 80074d2:	e00f      	b.n	80074f4 <_malloc_r+0xa8>
 80074d4:	6822      	ldr	r2, [r4, #0]
 80074d6:	1b52      	subs	r2, r2, r5
 80074d8:	d420      	bmi.n	800751c <_malloc_r+0xd0>
 80074da:	2a0b      	cmp	r2, #11
 80074dc:	d917      	bls.n	800750e <_malloc_r+0xc2>
 80074de:	1961      	adds	r1, r4, r5
 80074e0:	42a3      	cmp	r3, r4
 80074e2:	6025      	str	r5, [r4, #0]
 80074e4:	bf18      	it	ne
 80074e6:	6059      	strne	r1, [r3, #4]
 80074e8:	6863      	ldr	r3, [r4, #4]
 80074ea:	bf08      	it	eq
 80074ec:	f8c8 1000 	streq.w	r1, [r8]
 80074f0:	5162      	str	r2, [r4, r5]
 80074f2:	604b      	str	r3, [r1, #4]
 80074f4:	4630      	mov	r0, r6
 80074f6:	f000 f82f 	bl	8007558 <__malloc_unlock>
 80074fa:	f104 000b 	add.w	r0, r4, #11
 80074fe:	1d23      	adds	r3, r4, #4
 8007500:	f020 0007 	bic.w	r0, r0, #7
 8007504:	1ac2      	subs	r2, r0, r3
 8007506:	bf1c      	itt	ne
 8007508:	1a1b      	subne	r3, r3, r0
 800750a:	50a3      	strne	r3, [r4, r2]
 800750c:	e7af      	b.n	800746e <_malloc_r+0x22>
 800750e:	6862      	ldr	r2, [r4, #4]
 8007510:	42a3      	cmp	r3, r4
 8007512:	bf0c      	ite	eq
 8007514:	f8c8 2000 	streq.w	r2, [r8]
 8007518:	605a      	strne	r2, [r3, #4]
 800751a:	e7eb      	b.n	80074f4 <_malloc_r+0xa8>
 800751c:	4623      	mov	r3, r4
 800751e:	6864      	ldr	r4, [r4, #4]
 8007520:	e7ae      	b.n	8007480 <_malloc_r+0x34>
 8007522:	463c      	mov	r4, r7
 8007524:	687f      	ldr	r7, [r7, #4]
 8007526:	e7b6      	b.n	8007496 <_malloc_r+0x4a>
 8007528:	461a      	mov	r2, r3
 800752a:	685b      	ldr	r3, [r3, #4]
 800752c:	42a3      	cmp	r3, r4
 800752e:	d1fb      	bne.n	8007528 <_malloc_r+0xdc>
 8007530:	2300      	movs	r3, #0
 8007532:	6053      	str	r3, [r2, #4]
 8007534:	e7de      	b.n	80074f4 <_malloc_r+0xa8>
 8007536:	230c      	movs	r3, #12
 8007538:	4630      	mov	r0, r6
 800753a:	6033      	str	r3, [r6, #0]
 800753c:	f000 f80c 	bl	8007558 <__malloc_unlock>
 8007540:	e794      	b.n	800746c <_malloc_r+0x20>
 8007542:	6005      	str	r5, [r0, #0]
 8007544:	e7d6      	b.n	80074f4 <_malloc_r+0xa8>
 8007546:	bf00      	nop
 8007548:	2000049c 	.word	0x2000049c

0800754c <__malloc_lock>:
 800754c:	4801      	ldr	r0, [pc, #4]	@ (8007554 <__malloc_lock+0x8>)
 800754e:	f7ff b88e 	b.w	800666e <__retarget_lock_acquire_recursive>
 8007552:	bf00      	nop
 8007554:	20000494 	.word	0x20000494

08007558 <__malloc_unlock>:
 8007558:	4801      	ldr	r0, [pc, #4]	@ (8007560 <__malloc_unlock+0x8>)
 800755a:	f7ff b889 	b.w	8006670 <__retarget_lock_release_recursive>
 800755e:	bf00      	nop
 8007560:	20000494 	.word	0x20000494

08007564 <_Balloc>:
 8007564:	b570      	push	{r4, r5, r6, lr}
 8007566:	69c6      	ldr	r6, [r0, #28]
 8007568:	4604      	mov	r4, r0
 800756a:	460d      	mov	r5, r1
 800756c:	b976      	cbnz	r6, 800758c <_Balloc+0x28>
 800756e:	2010      	movs	r0, #16
 8007570:	f7ff ff42 	bl	80073f8 <malloc>
 8007574:	4602      	mov	r2, r0
 8007576:	61e0      	str	r0, [r4, #28]
 8007578:	b920      	cbnz	r0, 8007584 <_Balloc+0x20>
 800757a:	216b      	movs	r1, #107	@ 0x6b
 800757c:	4b17      	ldr	r3, [pc, #92]	@ (80075dc <_Balloc+0x78>)
 800757e:	4818      	ldr	r0, [pc, #96]	@ (80075e0 <_Balloc+0x7c>)
 8007580:	f000 ff68 	bl	8008454 <__assert_func>
 8007584:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007588:	6006      	str	r6, [r0, #0]
 800758a:	60c6      	str	r6, [r0, #12]
 800758c:	69e6      	ldr	r6, [r4, #28]
 800758e:	68f3      	ldr	r3, [r6, #12]
 8007590:	b183      	cbz	r3, 80075b4 <_Balloc+0x50>
 8007592:	69e3      	ldr	r3, [r4, #28]
 8007594:	68db      	ldr	r3, [r3, #12]
 8007596:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800759a:	b9b8      	cbnz	r0, 80075cc <_Balloc+0x68>
 800759c:	2101      	movs	r1, #1
 800759e:	fa01 f605 	lsl.w	r6, r1, r5
 80075a2:	1d72      	adds	r2, r6, #5
 80075a4:	4620      	mov	r0, r4
 80075a6:	0092      	lsls	r2, r2, #2
 80075a8:	f000 ff72 	bl	8008490 <_calloc_r>
 80075ac:	b160      	cbz	r0, 80075c8 <_Balloc+0x64>
 80075ae:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80075b2:	e00e      	b.n	80075d2 <_Balloc+0x6e>
 80075b4:	2221      	movs	r2, #33	@ 0x21
 80075b6:	2104      	movs	r1, #4
 80075b8:	4620      	mov	r0, r4
 80075ba:	f000 ff69 	bl	8008490 <_calloc_r>
 80075be:	69e3      	ldr	r3, [r4, #28]
 80075c0:	60f0      	str	r0, [r6, #12]
 80075c2:	68db      	ldr	r3, [r3, #12]
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d1e4      	bne.n	8007592 <_Balloc+0x2e>
 80075c8:	2000      	movs	r0, #0
 80075ca:	bd70      	pop	{r4, r5, r6, pc}
 80075cc:	6802      	ldr	r2, [r0, #0]
 80075ce:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80075d2:	2300      	movs	r3, #0
 80075d4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80075d8:	e7f7      	b.n	80075ca <_Balloc+0x66>
 80075da:	bf00      	nop
 80075dc:	080089d3 	.word	0x080089d3
 80075e0:	08008a53 	.word	0x08008a53

080075e4 <_Bfree>:
 80075e4:	b570      	push	{r4, r5, r6, lr}
 80075e6:	69c6      	ldr	r6, [r0, #28]
 80075e8:	4605      	mov	r5, r0
 80075ea:	460c      	mov	r4, r1
 80075ec:	b976      	cbnz	r6, 800760c <_Bfree+0x28>
 80075ee:	2010      	movs	r0, #16
 80075f0:	f7ff ff02 	bl	80073f8 <malloc>
 80075f4:	4602      	mov	r2, r0
 80075f6:	61e8      	str	r0, [r5, #28]
 80075f8:	b920      	cbnz	r0, 8007604 <_Bfree+0x20>
 80075fa:	218f      	movs	r1, #143	@ 0x8f
 80075fc:	4b08      	ldr	r3, [pc, #32]	@ (8007620 <_Bfree+0x3c>)
 80075fe:	4809      	ldr	r0, [pc, #36]	@ (8007624 <_Bfree+0x40>)
 8007600:	f000 ff28 	bl	8008454 <__assert_func>
 8007604:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007608:	6006      	str	r6, [r0, #0]
 800760a:	60c6      	str	r6, [r0, #12]
 800760c:	b13c      	cbz	r4, 800761e <_Bfree+0x3a>
 800760e:	69eb      	ldr	r3, [r5, #28]
 8007610:	6862      	ldr	r2, [r4, #4]
 8007612:	68db      	ldr	r3, [r3, #12]
 8007614:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007618:	6021      	str	r1, [r4, #0]
 800761a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800761e:	bd70      	pop	{r4, r5, r6, pc}
 8007620:	080089d3 	.word	0x080089d3
 8007624:	08008a53 	.word	0x08008a53

08007628 <__multadd>:
 8007628:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800762c:	4607      	mov	r7, r0
 800762e:	460c      	mov	r4, r1
 8007630:	461e      	mov	r6, r3
 8007632:	2000      	movs	r0, #0
 8007634:	690d      	ldr	r5, [r1, #16]
 8007636:	f101 0c14 	add.w	ip, r1, #20
 800763a:	f8dc 3000 	ldr.w	r3, [ip]
 800763e:	3001      	adds	r0, #1
 8007640:	b299      	uxth	r1, r3
 8007642:	fb02 6101 	mla	r1, r2, r1, r6
 8007646:	0c1e      	lsrs	r6, r3, #16
 8007648:	0c0b      	lsrs	r3, r1, #16
 800764a:	fb02 3306 	mla	r3, r2, r6, r3
 800764e:	b289      	uxth	r1, r1
 8007650:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007654:	4285      	cmp	r5, r0
 8007656:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800765a:	f84c 1b04 	str.w	r1, [ip], #4
 800765e:	dcec      	bgt.n	800763a <__multadd+0x12>
 8007660:	b30e      	cbz	r6, 80076a6 <__multadd+0x7e>
 8007662:	68a3      	ldr	r3, [r4, #8]
 8007664:	42ab      	cmp	r3, r5
 8007666:	dc19      	bgt.n	800769c <__multadd+0x74>
 8007668:	6861      	ldr	r1, [r4, #4]
 800766a:	4638      	mov	r0, r7
 800766c:	3101      	adds	r1, #1
 800766e:	f7ff ff79 	bl	8007564 <_Balloc>
 8007672:	4680      	mov	r8, r0
 8007674:	b928      	cbnz	r0, 8007682 <__multadd+0x5a>
 8007676:	4602      	mov	r2, r0
 8007678:	21ba      	movs	r1, #186	@ 0xba
 800767a:	4b0c      	ldr	r3, [pc, #48]	@ (80076ac <__multadd+0x84>)
 800767c:	480c      	ldr	r0, [pc, #48]	@ (80076b0 <__multadd+0x88>)
 800767e:	f000 fee9 	bl	8008454 <__assert_func>
 8007682:	6922      	ldr	r2, [r4, #16]
 8007684:	f104 010c 	add.w	r1, r4, #12
 8007688:	3202      	adds	r2, #2
 800768a:	0092      	lsls	r2, r2, #2
 800768c:	300c      	adds	r0, #12
 800768e:	f7fe fffe 	bl	800668e <memcpy>
 8007692:	4621      	mov	r1, r4
 8007694:	4638      	mov	r0, r7
 8007696:	f7ff ffa5 	bl	80075e4 <_Bfree>
 800769a:	4644      	mov	r4, r8
 800769c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80076a0:	3501      	adds	r5, #1
 80076a2:	615e      	str	r6, [r3, #20]
 80076a4:	6125      	str	r5, [r4, #16]
 80076a6:	4620      	mov	r0, r4
 80076a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80076ac:	08008a42 	.word	0x08008a42
 80076b0:	08008a53 	.word	0x08008a53

080076b4 <__hi0bits>:
 80076b4:	4603      	mov	r3, r0
 80076b6:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80076ba:	bf3a      	itte	cc
 80076bc:	0403      	lslcc	r3, r0, #16
 80076be:	2010      	movcc	r0, #16
 80076c0:	2000      	movcs	r0, #0
 80076c2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80076c6:	bf3c      	itt	cc
 80076c8:	021b      	lslcc	r3, r3, #8
 80076ca:	3008      	addcc	r0, #8
 80076cc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80076d0:	bf3c      	itt	cc
 80076d2:	011b      	lslcc	r3, r3, #4
 80076d4:	3004      	addcc	r0, #4
 80076d6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80076da:	bf3c      	itt	cc
 80076dc:	009b      	lslcc	r3, r3, #2
 80076de:	3002      	addcc	r0, #2
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	db05      	blt.n	80076f0 <__hi0bits+0x3c>
 80076e4:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80076e8:	f100 0001 	add.w	r0, r0, #1
 80076ec:	bf08      	it	eq
 80076ee:	2020      	moveq	r0, #32
 80076f0:	4770      	bx	lr

080076f2 <__lo0bits>:
 80076f2:	6803      	ldr	r3, [r0, #0]
 80076f4:	4602      	mov	r2, r0
 80076f6:	f013 0007 	ands.w	r0, r3, #7
 80076fa:	d00b      	beq.n	8007714 <__lo0bits+0x22>
 80076fc:	07d9      	lsls	r1, r3, #31
 80076fe:	d421      	bmi.n	8007744 <__lo0bits+0x52>
 8007700:	0798      	lsls	r0, r3, #30
 8007702:	bf49      	itett	mi
 8007704:	085b      	lsrmi	r3, r3, #1
 8007706:	089b      	lsrpl	r3, r3, #2
 8007708:	2001      	movmi	r0, #1
 800770a:	6013      	strmi	r3, [r2, #0]
 800770c:	bf5c      	itt	pl
 800770e:	2002      	movpl	r0, #2
 8007710:	6013      	strpl	r3, [r2, #0]
 8007712:	4770      	bx	lr
 8007714:	b299      	uxth	r1, r3
 8007716:	b909      	cbnz	r1, 800771c <__lo0bits+0x2a>
 8007718:	2010      	movs	r0, #16
 800771a:	0c1b      	lsrs	r3, r3, #16
 800771c:	b2d9      	uxtb	r1, r3
 800771e:	b909      	cbnz	r1, 8007724 <__lo0bits+0x32>
 8007720:	3008      	adds	r0, #8
 8007722:	0a1b      	lsrs	r3, r3, #8
 8007724:	0719      	lsls	r1, r3, #28
 8007726:	bf04      	itt	eq
 8007728:	091b      	lsreq	r3, r3, #4
 800772a:	3004      	addeq	r0, #4
 800772c:	0799      	lsls	r1, r3, #30
 800772e:	bf04      	itt	eq
 8007730:	089b      	lsreq	r3, r3, #2
 8007732:	3002      	addeq	r0, #2
 8007734:	07d9      	lsls	r1, r3, #31
 8007736:	d403      	bmi.n	8007740 <__lo0bits+0x4e>
 8007738:	085b      	lsrs	r3, r3, #1
 800773a:	f100 0001 	add.w	r0, r0, #1
 800773e:	d003      	beq.n	8007748 <__lo0bits+0x56>
 8007740:	6013      	str	r3, [r2, #0]
 8007742:	4770      	bx	lr
 8007744:	2000      	movs	r0, #0
 8007746:	4770      	bx	lr
 8007748:	2020      	movs	r0, #32
 800774a:	4770      	bx	lr

0800774c <__i2b>:
 800774c:	b510      	push	{r4, lr}
 800774e:	460c      	mov	r4, r1
 8007750:	2101      	movs	r1, #1
 8007752:	f7ff ff07 	bl	8007564 <_Balloc>
 8007756:	4602      	mov	r2, r0
 8007758:	b928      	cbnz	r0, 8007766 <__i2b+0x1a>
 800775a:	f240 1145 	movw	r1, #325	@ 0x145
 800775e:	4b04      	ldr	r3, [pc, #16]	@ (8007770 <__i2b+0x24>)
 8007760:	4804      	ldr	r0, [pc, #16]	@ (8007774 <__i2b+0x28>)
 8007762:	f000 fe77 	bl	8008454 <__assert_func>
 8007766:	2301      	movs	r3, #1
 8007768:	6144      	str	r4, [r0, #20]
 800776a:	6103      	str	r3, [r0, #16]
 800776c:	bd10      	pop	{r4, pc}
 800776e:	bf00      	nop
 8007770:	08008a42 	.word	0x08008a42
 8007774:	08008a53 	.word	0x08008a53

08007778 <__multiply>:
 8007778:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800777c:	4617      	mov	r7, r2
 800777e:	690a      	ldr	r2, [r1, #16]
 8007780:	693b      	ldr	r3, [r7, #16]
 8007782:	4689      	mov	r9, r1
 8007784:	429a      	cmp	r2, r3
 8007786:	bfa2      	ittt	ge
 8007788:	463b      	movge	r3, r7
 800778a:	460f      	movge	r7, r1
 800778c:	4699      	movge	r9, r3
 800778e:	693d      	ldr	r5, [r7, #16]
 8007790:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8007794:	68bb      	ldr	r3, [r7, #8]
 8007796:	6879      	ldr	r1, [r7, #4]
 8007798:	eb05 060a 	add.w	r6, r5, sl
 800779c:	42b3      	cmp	r3, r6
 800779e:	b085      	sub	sp, #20
 80077a0:	bfb8      	it	lt
 80077a2:	3101      	addlt	r1, #1
 80077a4:	f7ff fede 	bl	8007564 <_Balloc>
 80077a8:	b930      	cbnz	r0, 80077b8 <__multiply+0x40>
 80077aa:	4602      	mov	r2, r0
 80077ac:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80077b0:	4b40      	ldr	r3, [pc, #256]	@ (80078b4 <__multiply+0x13c>)
 80077b2:	4841      	ldr	r0, [pc, #260]	@ (80078b8 <__multiply+0x140>)
 80077b4:	f000 fe4e 	bl	8008454 <__assert_func>
 80077b8:	f100 0414 	add.w	r4, r0, #20
 80077bc:	4623      	mov	r3, r4
 80077be:	2200      	movs	r2, #0
 80077c0:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 80077c4:	4573      	cmp	r3, lr
 80077c6:	d320      	bcc.n	800780a <__multiply+0x92>
 80077c8:	f107 0814 	add.w	r8, r7, #20
 80077cc:	f109 0114 	add.w	r1, r9, #20
 80077d0:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 80077d4:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 80077d8:	9302      	str	r3, [sp, #8]
 80077da:	1beb      	subs	r3, r5, r7
 80077dc:	3b15      	subs	r3, #21
 80077de:	f023 0303 	bic.w	r3, r3, #3
 80077e2:	3304      	adds	r3, #4
 80077e4:	3715      	adds	r7, #21
 80077e6:	42bd      	cmp	r5, r7
 80077e8:	bf38      	it	cc
 80077ea:	2304      	movcc	r3, #4
 80077ec:	9301      	str	r3, [sp, #4]
 80077ee:	9b02      	ldr	r3, [sp, #8]
 80077f0:	9103      	str	r1, [sp, #12]
 80077f2:	428b      	cmp	r3, r1
 80077f4:	d80c      	bhi.n	8007810 <__multiply+0x98>
 80077f6:	2e00      	cmp	r6, #0
 80077f8:	dd03      	ble.n	8007802 <__multiply+0x8a>
 80077fa:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 80077fe:	2b00      	cmp	r3, #0
 8007800:	d055      	beq.n	80078ae <__multiply+0x136>
 8007802:	6106      	str	r6, [r0, #16]
 8007804:	b005      	add	sp, #20
 8007806:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800780a:	f843 2b04 	str.w	r2, [r3], #4
 800780e:	e7d9      	b.n	80077c4 <__multiply+0x4c>
 8007810:	f8b1 a000 	ldrh.w	sl, [r1]
 8007814:	f1ba 0f00 	cmp.w	sl, #0
 8007818:	d01f      	beq.n	800785a <__multiply+0xe2>
 800781a:	46c4      	mov	ip, r8
 800781c:	46a1      	mov	r9, r4
 800781e:	2700      	movs	r7, #0
 8007820:	f85c 2b04 	ldr.w	r2, [ip], #4
 8007824:	f8d9 3000 	ldr.w	r3, [r9]
 8007828:	fa1f fb82 	uxth.w	fp, r2
 800782c:	b29b      	uxth	r3, r3
 800782e:	fb0a 330b 	mla	r3, sl, fp, r3
 8007832:	443b      	add	r3, r7
 8007834:	f8d9 7000 	ldr.w	r7, [r9]
 8007838:	0c12      	lsrs	r2, r2, #16
 800783a:	0c3f      	lsrs	r7, r7, #16
 800783c:	fb0a 7202 	mla	r2, sl, r2, r7
 8007840:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 8007844:	b29b      	uxth	r3, r3
 8007846:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800784a:	4565      	cmp	r5, ip
 800784c:	ea4f 4712 	mov.w	r7, r2, lsr #16
 8007850:	f849 3b04 	str.w	r3, [r9], #4
 8007854:	d8e4      	bhi.n	8007820 <__multiply+0xa8>
 8007856:	9b01      	ldr	r3, [sp, #4]
 8007858:	50e7      	str	r7, [r4, r3]
 800785a:	9b03      	ldr	r3, [sp, #12]
 800785c:	3104      	adds	r1, #4
 800785e:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8007862:	f1b9 0f00 	cmp.w	r9, #0
 8007866:	d020      	beq.n	80078aa <__multiply+0x132>
 8007868:	4647      	mov	r7, r8
 800786a:	46a4      	mov	ip, r4
 800786c:	f04f 0a00 	mov.w	sl, #0
 8007870:	6823      	ldr	r3, [r4, #0]
 8007872:	f8b7 b000 	ldrh.w	fp, [r7]
 8007876:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800787a:	b29b      	uxth	r3, r3
 800787c:	fb09 220b 	mla	r2, r9, fp, r2
 8007880:	4452      	add	r2, sl
 8007882:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007886:	f84c 3b04 	str.w	r3, [ip], #4
 800788a:	f857 3b04 	ldr.w	r3, [r7], #4
 800788e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007892:	f8bc 3000 	ldrh.w	r3, [ip]
 8007896:	42bd      	cmp	r5, r7
 8007898:	fb09 330a 	mla	r3, r9, sl, r3
 800789c:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 80078a0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80078a4:	d8e5      	bhi.n	8007872 <__multiply+0xfa>
 80078a6:	9a01      	ldr	r2, [sp, #4]
 80078a8:	50a3      	str	r3, [r4, r2]
 80078aa:	3404      	adds	r4, #4
 80078ac:	e79f      	b.n	80077ee <__multiply+0x76>
 80078ae:	3e01      	subs	r6, #1
 80078b0:	e7a1      	b.n	80077f6 <__multiply+0x7e>
 80078b2:	bf00      	nop
 80078b4:	08008a42 	.word	0x08008a42
 80078b8:	08008a53 	.word	0x08008a53

080078bc <__pow5mult>:
 80078bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80078c0:	4615      	mov	r5, r2
 80078c2:	f012 0203 	ands.w	r2, r2, #3
 80078c6:	4607      	mov	r7, r0
 80078c8:	460e      	mov	r6, r1
 80078ca:	d007      	beq.n	80078dc <__pow5mult+0x20>
 80078cc:	4c25      	ldr	r4, [pc, #148]	@ (8007964 <__pow5mult+0xa8>)
 80078ce:	3a01      	subs	r2, #1
 80078d0:	2300      	movs	r3, #0
 80078d2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80078d6:	f7ff fea7 	bl	8007628 <__multadd>
 80078da:	4606      	mov	r6, r0
 80078dc:	10ad      	asrs	r5, r5, #2
 80078de:	d03d      	beq.n	800795c <__pow5mult+0xa0>
 80078e0:	69fc      	ldr	r4, [r7, #28]
 80078e2:	b97c      	cbnz	r4, 8007904 <__pow5mult+0x48>
 80078e4:	2010      	movs	r0, #16
 80078e6:	f7ff fd87 	bl	80073f8 <malloc>
 80078ea:	4602      	mov	r2, r0
 80078ec:	61f8      	str	r0, [r7, #28]
 80078ee:	b928      	cbnz	r0, 80078fc <__pow5mult+0x40>
 80078f0:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80078f4:	4b1c      	ldr	r3, [pc, #112]	@ (8007968 <__pow5mult+0xac>)
 80078f6:	481d      	ldr	r0, [pc, #116]	@ (800796c <__pow5mult+0xb0>)
 80078f8:	f000 fdac 	bl	8008454 <__assert_func>
 80078fc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007900:	6004      	str	r4, [r0, #0]
 8007902:	60c4      	str	r4, [r0, #12]
 8007904:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8007908:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800790c:	b94c      	cbnz	r4, 8007922 <__pow5mult+0x66>
 800790e:	f240 2171 	movw	r1, #625	@ 0x271
 8007912:	4638      	mov	r0, r7
 8007914:	f7ff ff1a 	bl	800774c <__i2b>
 8007918:	2300      	movs	r3, #0
 800791a:	4604      	mov	r4, r0
 800791c:	f8c8 0008 	str.w	r0, [r8, #8]
 8007920:	6003      	str	r3, [r0, #0]
 8007922:	f04f 0900 	mov.w	r9, #0
 8007926:	07eb      	lsls	r3, r5, #31
 8007928:	d50a      	bpl.n	8007940 <__pow5mult+0x84>
 800792a:	4631      	mov	r1, r6
 800792c:	4622      	mov	r2, r4
 800792e:	4638      	mov	r0, r7
 8007930:	f7ff ff22 	bl	8007778 <__multiply>
 8007934:	4680      	mov	r8, r0
 8007936:	4631      	mov	r1, r6
 8007938:	4638      	mov	r0, r7
 800793a:	f7ff fe53 	bl	80075e4 <_Bfree>
 800793e:	4646      	mov	r6, r8
 8007940:	106d      	asrs	r5, r5, #1
 8007942:	d00b      	beq.n	800795c <__pow5mult+0xa0>
 8007944:	6820      	ldr	r0, [r4, #0]
 8007946:	b938      	cbnz	r0, 8007958 <__pow5mult+0x9c>
 8007948:	4622      	mov	r2, r4
 800794a:	4621      	mov	r1, r4
 800794c:	4638      	mov	r0, r7
 800794e:	f7ff ff13 	bl	8007778 <__multiply>
 8007952:	6020      	str	r0, [r4, #0]
 8007954:	f8c0 9000 	str.w	r9, [r0]
 8007958:	4604      	mov	r4, r0
 800795a:	e7e4      	b.n	8007926 <__pow5mult+0x6a>
 800795c:	4630      	mov	r0, r6
 800795e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007962:	bf00      	nop
 8007964:	08008b04 	.word	0x08008b04
 8007968:	080089d3 	.word	0x080089d3
 800796c:	08008a53 	.word	0x08008a53

08007970 <__lshift>:
 8007970:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007974:	460c      	mov	r4, r1
 8007976:	4607      	mov	r7, r0
 8007978:	4691      	mov	r9, r2
 800797a:	6923      	ldr	r3, [r4, #16]
 800797c:	6849      	ldr	r1, [r1, #4]
 800797e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007982:	68a3      	ldr	r3, [r4, #8]
 8007984:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007988:	f108 0601 	add.w	r6, r8, #1
 800798c:	42b3      	cmp	r3, r6
 800798e:	db0b      	blt.n	80079a8 <__lshift+0x38>
 8007990:	4638      	mov	r0, r7
 8007992:	f7ff fde7 	bl	8007564 <_Balloc>
 8007996:	4605      	mov	r5, r0
 8007998:	b948      	cbnz	r0, 80079ae <__lshift+0x3e>
 800799a:	4602      	mov	r2, r0
 800799c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80079a0:	4b27      	ldr	r3, [pc, #156]	@ (8007a40 <__lshift+0xd0>)
 80079a2:	4828      	ldr	r0, [pc, #160]	@ (8007a44 <__lshift+0xd4>)
 80079a4:	f000 fd56 	bl	8008454 <__assert_func>
 80079a8:	3101      	adds	r1, #1
 80079aa:	005b      	lsls	r3, r3, #1
 80079ac:	e7ee      	b.n	800798c <__lshift+0x1c>
 80079ae:	2300      	movs	r3, #0
 80079b0:	f100 0114 	add.w	r1, r0, #20
 80079b4:	f100 0210 	add.w	r2, r0, #16
 80079b8:	4618      	mov	r0, r3
 80079ba:	4553      	cmp	r3, sl
 80079bc:	db33      	blt.n	8007a26 <__lshift+0xb6>
 80079be:	6920      	ldr	r0, [r4, #16]
 80079c0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80079c4:	f104 0314 	add.w	r3, r4, #20
 80079c8:	f019 091f 	ands.w	r9, r9, #31
 80079cc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80079d0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80079d4:	d02b      	beq.n	8007a2e <__lshift+0xbe>
 80079d6:	468a      	mov	sl, r1
 80079d8:	2200      	movs	r2, #0
 80079da:	f1c9 0e20 	rsb	lr, r9, #32
 80079de:	6818      	ldr	r0, [r3, #0]
 80079e0:	fa00 f009 	lsl.w	r0, r0, r9
 80079e4:	4310      	orrs	r0, r2
 80079e6:	f84a 0b04 	str.w	r0, [sl], #4
 80079ea:	f853 2b04 	ldr.w	r2, [r3], #4
 80079ee:	459c      	cmp	ip, r3
 80079f0:	fa22 f20e 	lsr.w	r2, r2, lr
 80079f4:	d8f3      	bhi.n	80079de <__lshift+0x6e>
 80079f6:	ebac 0304 	sub.w	r3, ip, r4
 80079fa:	3b15      	subs	r3, #21
 80079fc:	f023 0303 	bic.w	r3, r3, #3
 8007a00:	3304      	adds	r3, #4
 8007a02:	f104 0015 	add.w	r0, r4, #21
 8007a06:	4560      	cmp	r0, ip
 8007a08:	bf88      	it	hi
 8007a0a:	2304      	movhi	r3, #4
 8007a0c:	50ca      	str	r2, [r1, r3]
 8007a0e:	b10a      	cbz	r2, 8007a14 <__lshift+0xa4>
 8007a10:	f108 0602 	add.w	r6, r8, #2
 8007a14:	3e01      	subs	r6, #1
 8007a16:	4638      	mov	r0, r7
 8007a18:	4621      	mov	r1, r4
 8007a1a:	612e      	str	r6, [r5, #16]
 8007a1c:	f7ff fde2 	bl	80075e4 <_Bfree>
 8007a20:	4628      	mov	r0, r5
 8007a22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007a26:	f842 0f04 	str.w	r0, [r2, #4]!
 8007a2a:	3301      	adds	r3, #1
 8007a2c:	e7c5      	b.n	80079ba <__lshift+0x4a>
 8007a2e:	3904      	subs	r1, #4
 8007a30:	f853 2b04 	ldr.w	r2, [r3], #4
 8007a34:	459c      	cmp	ip, r3
 8007a36:	f841 2f04 	str.w	r2, [r1, #4]!
 8007a3a:	d8f9      	bhi.n	8007a30 <__lshift+0xc0>
 8007a3c:	e7ea      	b.n	8007a14 <__lshift+0xa4>
 8007a3e:	bf00      	nop
 8007a40:	08008a42 	.word	0x08008a42
 8007a44:	08008a53 	.word	0x08008a53

08007a48 <__mcmp>:
 8007a48:	4603      	mov	r3, r0
 8007a4a:	690a      	ldr	r2, [r1, #16]
 8007a4c:	6900      	ldr	r0, [r0, #16]
 8007a4e:	b530      	push	{r4, r5, lr}
 8007a50:	1a80      	subs	r0, r0, r2
 8007a52:	d10e      	bne.n	8007a72 <__mcmp+0x2a>
 8007a54:	3314      	adds	r3, #20
 8007a56:	3114      	adds	r1, #20
 8007a58:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8007a5c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8007a60:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8007a64:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8007a68:	4295      	cmp	r5, r2
 8007a6a:	d003      	beq.n	8007a74 <__mcmp+0x2c>
 8007a6c:	d205      	bcs.n	8007a7a <__mcmp+0x32>
 8007a6e:	f04f 30ff 	mov.w	r0, #4294967295
 8007a72:	bd30      	pop	{r4, r5, pc}
 8007a74:	42a3      	cmp	r3, r4
 8007a76:	d3f3      	bcc.n	8007a60 <__mcmp+0x18>
 8007a78:	e7fb      	b.n	8007a72 <__mcmp+0x2a>
 8007a7a:	2001      	movs	r0, #1
 8007a7c:	e7f9      	b.n	8007a72 <__mcmp+0x2a>
	...

08007a80 <__mdiff>:
 8007a80:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a84:	4689      	mov	r9, r1
 8007a86:	4606      	mov	r6, r0
 8007a88:	4611      	mov	r1, r2
 8007a8a:	4648      	mov	r0, r9
 8007a8c:	4614      	mov	r4, r2
 8007a8e:	f7ff ffdb 	bl	8007a48 <__mcmp>
 8007a92:	1e05      	subs	r5, r0, #0
 8007a94:	d112      	bne.n	8007abc <__mdiff+0x3c>
 8007a96:	4629      	mov	r1, r5
 8007a98:	4630      	mov	r0, r6
 8007a9a:	f7ff fd63 	bl	8007564 <_Balloc>
 8007a9e:	4602      	mov	r2, r0
 8007aa0:	b928      	cbnz	r0, 8007aae <__mdiff+0x2e>
 8007aa2:	f240 2137 	movw	r1, #567	@ 0x237
 8007aa6:	4b3e      	ldr	r3, [pc, #248]	@ (8007ba0 <__mdiff+0x120>)
 8007aa8:	483e      	ldr	r0, [pc, #248]	@ (8007ba4 <__mdiff+0x124>)
 8007aaa:	f000 fcd3 	bl	8008454 <__assert_func>
 8007aae:	2301      	movs	r3, #1
 8007ab0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007ab4:	4610      	mov	r0, r2
 8007ab6:	b003      	add	sp, #12
 8007ab8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007abc:	bfbc      	itt	lt
 8007abe:	464b      	movlt	r3, r9
 8007ac0:	46a1      	movlt	r9, r4
 8007ac2:	4630      	mov	r0, r6
 8007ac4:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8007ac8:	bfba      	itte	lt
 8007aca:	461c      	movlt	r4, r3
 8007acc:	2501      	movlt	r5, #1
 8007ace:	2500      	movge	r5, #0
 8007ad0:	f7ff fd48 	bl	8007564 <_Balloc>
 8007ad4:	4602      	mov	r2, r0
 8007ad6:	b918      	cbnz	r0, 8007ae0 <__mdiff+0x60>
 8007ad8:	f240 2145 	movw	r1, #581	@ 0x245
 8007adc:	4b30      	ldr	r3, [pc, #192]	@ (8007ba0 <__mdiff+0x120>)
 8007ade:	e7e3      	b.n	8007aa8 <__mdiff+0x28>
 8007ae0:	f100 0b14 	add.w	fp, r0, #20
 8007ae4:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8007ae8:	f109 0310 	add.w	r3, r9, #16
 8007aec:	60c5      	str	r5, [r0, #12]
 8007aee:	f04f 0c00 	mov.w	ip, #0
 8007af2:	f109 0514 	add.w	r5, r9, #20
 8007af6:	46d9      	mov	r9, fp
 8007af8:	6926      	ldr	r6, [r4, #16]
 8007afa:	f104 0e14 	add.w	lr, r4, #20
 8007afe:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8007b02:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8007b06:	9301      	str	r3, [sp, #4]
 8007b08:	9b01      	ldr	r3, [sp, #4]
 8007b0a:	f85e 0b04 	ldr.w	r0, [lr], #4
 8007b0e:	f853 af04 	ldr.w	sl, [r3, #4]!
 8007b12:	b281      	uxth	r1, r0
 8007b14:	9301      	str	r3, [sp, #4]
 8007b16:	fa1f f38a 	uxth.w	r3, sl
 8007b1a:	1a5b      	subs	r3, r3, r1
 8007b1c:	0c00      	lsrs	r0, r0, #16
 8007b1e:	4463      	add	r3, ip
 8007b20:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8007b24:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8007b28:	b29b      	uxth	r3, r3
 8007b2a:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8007b2e:	4576      	cmp	r6, lr
 8007b30:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8007b34:	f849 3b04 	str.w	r3, [r9], #4
 8007b38:	d8e6      	bhi.n	8007b08 <__mdiff+0x88>
 8007b3a:	1b33      	subs	r3, r6, r4
 8007b3c:	3b15      	subs	r3, #21
 8007b3e:	f023 0303 	bic.w	r3, r3, #3
 8007b42:	3415      	adds	r4, #21
 8007b44:	3304      	adds	r3, #4
 8007b46:	42a6      	cmp	r6, r4
 8007b48:	bf38      	it	cc
 8007b4a:	2304      	movcc	r3, #4
 8007b4c:	441d      	add	r5, r3
 8007b4e:	445b      	add	r3, fp
 8007b50:	461e      	mov	r6, r3
 8007b52:	462c      	mov	r4, r5
 8007b54:	4544      	cmp	r4, r8
 8007b56:	d30e      	bcc.n	8007b76 <__mdiff+0xf6>
 8007b58:	f108 0103 	add.w	r1, r8, #3
 8007b5c:	1b49      	subs	r1, r1, r5
 8007b5e:	f021 0103 	bic.w	r1, r1, #3
 8007b62:	3d03      	subs	r5, #3
 8007b64:	45a8      	cmp	r8, r5
 8007b66:	bf38      	it	cc
 8007b68:	2100      	movcc	r1, #0
 8007b6a:	440b      	add	r3, r1
 8007b6c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8007b70:	b199      	cbz	r1, 8007b9a <__mdiff+0x11a>
 8007b72:	6117      	str	r7, [r2, #16]
 8007b74:	e79e      	b.n	8007ab4 <__mdiff+0x34>
 8007b76:	46e6      	mov	lr, ip
 8007b78:	f854 1b04 	ldr.w	r1, [r4], #4
 8007b7c:	fa1f fc81 	uxth.w	ip, r1
 8007b80:	44f4      	add	ip, lr
 8007b82:	0c08      	lsrs	r0, r1, #16
 8007b84:	4471      	add	r1, lr
 8007b86:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8007b8a:	b289      	uxth	r1, r1
 8007b8c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8007b90:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8007b94:	f846 1b04 	str.w	r1, [r6], #4
 8007b98:	e7dc      	b.n	8007b54 <__mdiff+0xd4>
 8007b9a:	3f01      	subs	r7, #1
 8007b9c:	e7e6      	b.n	8007b6c <__mdiff+0xec>
 8007b9e:	bf00      	nop
 8007ba0:	08008a42 	.word	0x08008a42
 8007ba4:	08008a53 	.word	0x08008a53

08007ba8 <__d2b>:
 8007ba8:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 8007bac:	2101      	movs	r1, #1
 8007bae:	4690      	mov	r8, r2
 8007bb0:	4699      	mov	r9, r3
 8007bb2:	9e08      	ldr	r6, [sp, #32]
 8007bb4:	f7ff fcd6 	bl	8007564 <_Balloc>
 8007bb8:	4604      	mov	r4, r0
 8007bba:	b930      	cbnz	r0, 8007bca <__d2b+0x22>
 8007bbc:	4602      	mov	r2, r0
 8007bbe:	f240 310f 	movw	r1, #783	@ 0x30f
 8007bc2:	4b23      	ldr	r3, [pc, #140]	@ (8007c50 <__d2b+0xa8>)
 8007bc4:	4823      	ldr	r0, [pc, #140]	@ (8007c54 <__d2b+0xac>)
 8007bc6:	f000 fc45 	bl	8008454 <__assert_func>
 8007bca:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8007bce:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007bd2:	b10d      	cbz	r5, 8007bd8 <__d2b+0x30>
 8007bd4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007bd8:	9301      	str	r3, [sp, #4]
 8007bda:	f1b8 0300 	subs.w	r3, r8, #0
 8007bde:	d024      	beq.n	8007c2a <__d2b+0x82>
 8007be0:	4668      	mov	r0, sp
 8007be2:	9300      	str	r3, [sp, #0]
 8007be4:	f7ff fd85 	bl	80076f2 <__lo0bits>
 8007be8:	e9dd 1200 	ldrd	r1, r2, [sp]
 8007bec:	b1d8      	cbz	r0, 8007c26 <__d2b+0x7e>
 8007bee:	f1c0 0320 	rsb	r3, r0, #32
 8007bf2:	fa02 f303 	lsl.w	r3, r2, r3
 8007bf6:	430b      	orrs	r3, r1
 8007bf8:	40c2      	lsrs	r2, r0
 8007bfa:	6163      	str	r3, [r4, #20]
 8007bfc:	9201      	str	r2, [sp, #4]
 8007bfe:	9b01      	ldr	r3, [sp, #4]
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	bf0c      	ite	eq
 8007c04:	2201      	moveq	r2, #1
 8007c06:	2202      	movne	r2, #2
 8007c08:	61a3      	str	r3, [r4, #24]
 8007c0a:	6122      	str	r2, [r4, #16]
 8007c0c:	b1ad      	cbz	r5, 8007c3a <__d2b+0x92>
 8007c0e:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8007c12:	4405      	add	r5, r0
 8007c14:	6035      	str	r5, [r6, #0]
 8007c16:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8007c1a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007c1c:	6018      	str	r0, [r3, #0]
 8007c1e:	4620      	mov	r0, r4
 8007c20:	b002      	add	sp, #8
 8007c22:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 8007c26:	6161      	str	r1, [r4, #20]
 8007c28:	e7e9      	b.n	8007bfe <__d2b+0x56>
 8007c2a:	a801      	add	r0, sp, #4
 8007c2c:	f7ff fd61 	bl	80076f2 <__lo0bits>
 8007c30:	9b01      	ldr	r3, [sp, #4]
 8007c32:	2201      	movs	r2, #1
 8007c34:	6163      	str	r3, [r4, #20]
 8007c36:	3020      	adds	r0, #32
 8007c38:	e7e7      	b.n	8007c0a <__d2b+0x62>
 8007c3a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8007c3e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007c42:	6030      	str	r0, [r6, #0]
 8007c44:	6918      	ldr	r0, [r3, #16]
 8007c46:	f7ff fd35 	bl	80076b4 <__hi0bits>
 8007c4a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8007c4e:	e7e4      	b.n	8007c1a <__d2b+0x72>
 8007c50:	08008a42 	.word	0x08008a42
 8007c54:	08008a53 	.word	0x08008a53

08007c58 <__ssputs_r>:
 8007c58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007c5c:	461f      	mov	r7, r3
 8007c5e:	688e      	ldr	r6, [r1, #8]
 8007c60:	4682      	mov	sl, r0
 8007c62:	42be      	cmp	r6, r7
 8007c64:	460c      	mov	r4, r1
 8007c66:	4690      	mov	r8, r2
 8007c68:	680b      	ldr	r3, [r1, #0]
 8007c6a:	d82d      	bhi.n	8007cc8 <__ssputs_r+0x70>
 8007c6c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007c70:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8007c74:	d026      	beq.n	8007cc4 <__ssputs_r+0x6c>
 8007c76:	6965      	ldr	r5, [r4, #20]
 8007c78:	6909      	ldr	r1, [r1, #16]
 8007c7a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007c7e:	eba3 0901 	sub.w	r9, r3, r1
 8007c82:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007c86:	1c7b      	adds	r3, r7, #1
 8007c88:	444b      	add	r3, r9
 8007c8a:	106d      	asrs	r5, r5, #1
 8007c8c:	429d      	cmp	r5, r3
 8007c8e:	bf38      	it	cc
 8007c90:	461d      	movcc	r5, r3
 8007c92:	0553      	lsls	r3, r2, #21
 8007c94:	d527      	bpl.n	8007ce6 <__ssputs_r+0x8e>
 8007c96:	4629      	mov	r1, r5
 8007c98:	f7ff fbd8 	bl	800744c <_malloc_r>
 8007c9c:	4606      	mov	r6, r0
 8007c9e:	b360      	cbz	r0, 8007cfa <__ssputs_r+0xa2>
 8007ca0:	464a      	mov	r2, r9
 8007ca2:	6921      	ldr	r1, [r4, #16]
 8007ca4:	f7fe fcf3 	bl	800668e <memcpy>
 8007ca8:	89a3      	ldrh	r3, [r4, #12]
 8007caa:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8007cae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007cb2:	81a3      	strh	r3, [r4, #12]
 8007cb4:	6126      	str	r6, [r4, #16]
 8007cb6:	444e      	add	r6, r9
 8007cb8:	6026      	str	r6, [r4, #0]
 8007cba:	463e      	mov	r6, r7
 8007cbc:	6165      	str	r5, [r4, #20]
 8007cbe:	eba5 0509 	sub.w	r5, r5, r9
 8007cc2:	60a5      	str	r5, [r4, #8]
 8007cc4:	42be      	cmp	r6, r7
 8007cc6:	d900      	bls.n	8007cca <__ssputs_r+0x72>
 8007cc8:	463e      	mov	r6, r7
 8007cca:	4632      	mov	r2, r6
 8007ccc:	4641      	mov	r1, r8
 8007cce:	6820      	ldr	r0, [r4, #0]
 8007cd0:	f000 fb96 	bl	8008400 <memmove>
 8007cd4:	2000      	movs	r0, #0
 8007cd6:	68a3      	ldr	r3, [r4, #8]
 8007cd8:	1b9b      	subs	r3, r3, r6
 8007cda:	60a3      	str	r3, [r4, #8]
 8007cdc:	6823      	ldr	r3, [r4, #0]
 8007cde:	4433      	add	r3, r6
 8007ce0:	6023      	str	r3, [r4, #0]
 8007ce2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007ce6:	462a      	mov	r2, r5
 8007ce8:	f000 fbf8 	bl	80084dc <_realloc_r>
 8007cec:	4606      	mov	r6, r0
 8007cee:	2800      	cmp	r0, #0
 8007cf0:	d1e0      	bne.n	8007cb4 <__ssputs_r+0x5c>
 8007cf2:	4650      	mov	r0, sl
 8007cf4:	6921      	ldr	r1, [r4, #16]
 8007cf6:	f7ff fb37 	bl	8007368 <_free_r>
 8007cfa:	230c      	movs	r3, #12
 8007cfc:	f8ca 3000 	str.w	r3, [sl]
 8007d00:	89a3      	ldrh	r3, [r4, #12]
 8007d02:	f04f 30ff 	mov.w	r0, #4294967295
 8007d06:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007d0a:	81a3      	strh	r3, [r4, #12]
 8007d0c:	e7e9      	b.n	8007ce2 <__ssputs_r+0x8a>
	...

08007d10 <_svfiprintf_r>:
 8007d10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d14:	4698      	mov	r8, r3
 8007d16:	898b      	ldrh	r3, [r1, #12]
 8007d18:	4607      	mov	r7, r0
 8007d1a:	061b      	lsls	r3, r3, #24
 8007d1c:	460d      	mov	r5, r1
 8007d1e:	4614      	mov	r4, r2
 8007d20:	b09d      	sub	sp, #116	@ 0x74
 8007d22:	d510      	bpl.n	8007d46 <_svfiprintf_r+0x36>
 8007d24:	690b      	ldr	r3, [r1, #16]
 8007d26:	b973      	cbnz	r3, 8007d46 <_svfiprintf_r+0x36>
 8007d28:	2140      	movs	r1, #64	@ 0x40
 8007d2a:	f7ff fb8f 	bl	800744c <_malloc_r>
 8007d2e:	6028      	str	r0, [r5, #0]
 8007d30:	6128      	str	r0, [r5, #16]
 8007d32:	b930      	cbnz	r0, 8007d42 <_svfiprintf_r+0x32>
 8007d34:	230c      	movs	r3, #12
 8007d36:	603b      	str	r3, [r7, #0]
 8007d38:	f04f 30ff 	mov.w	r0, #4294967295
 8007d3c:	b01d      	add	sp, #116	@ 0x74
 8007d3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d42:	2340      	movs	r3, #64	@ 0x40
 8007d44:	616b      	str	r3, [r5, #20]
 8007d46:	2300      	movs	r3, #0
 8007d48:	9309      	str	r3, [sp, #36]	@ 0x24
 8007d4a:	2320      	movs	r3, #32
 8007d4c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007d50:	2330      	movs	r3, #48	@ 0x30
 8007d52:	f04f 0901 	mov.w	r9, #1
 8007d56:	f8cd 800c 	str.w	r8, [sp, #12]
 8007d5a:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8007ef4 <_svfiprintf_r+0x1e4>
 8007d5e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007d62:	4623      	mov	r3, r4
 8007d64:	469a      	mov	sl, r3
 8007d66:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007d6a:	b10a      	cbz	r2, 8007d70 <_svfiprintf_r+0x60>
 8007d6c:	2a25      	cmp	r2, #37	@ 0x25
 8007d6e:	d1f9      	bne.n	8007d64 <_svfiprintf_r+0x54>
 8007d70:	ebba 0b04 	subs.w	fp, sl, r4
 8007d74:	d00b      	beq.n	8007d8e <_svfiprintf_r+0x7e>
 8007d76:	465b      	mov	r3, fp
 8007d78:	4622      	mov	r2, r4
 8007d7a:	4629      	mov	r1, r5
 8007d7c:	4638      	mov	r0, r7
 8007d7e:	f7ff ff6b 	bl	8007c58 <__ssputs_r>
 8007d82:	3001      	adds	r0, #1
 8007d84:	f000 80a7 	beq.w	8007ed6 <_svfiprintf_r+0x1c6>
 8007d88:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007d8a:	445a      	add	r2, fp
 8007d8c:	9209      	str	r2, [sp, #36]	@ 0x24
 8007d8e:	f89a 3000 	ldrb.w	r3, [sl]
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	f000 809f 	beq.w	8007ed6 <_svfiprintf_r+0x1c6>
 8007d98:	2300      	movs	r3, #0
 8007d9a:	f04f 32ff 	mov.w	r2, #4294967295
 8007d9e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007da2:	f10a 0a01 	add.w	sl, sl, #1
 8007da6:	9304      	str	r3, [sp, #16]
 8007da8:	9307      	str	r3, [sp, #28]
 8007daa:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007dae:	931a      	str	r3, [sp, #104]	@ 0x68
 8007db0:	4654      	mov	r4, sl
 8007db2:	2205      	movs	r2, #5
 8007db4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007db8:	484e      	ldr	r0, [pc, #312]	@ (8007ef4 <_svfiprintf_r+0x1e4>)
 8007dba:	f7fe fc5a 	bl	8006672 <memchr>
 8007dbe:	9a04      	ldr	r2, [sp, #16]
 8007dc0:	b9d8      	cbnz	r0, 8007dfa <_svfiprintf_r+0xea>
 8007dc2:	06d0      	lsls	r0, r2, #27
 8007dc4:	bf44      	itt	mi
 8007dc6:	2320      	movmi	r3, #32
 8007dc8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007dcc:	0711      	lsls	r1, r2, #28
 8007dce:	bf44      	itt	mi
 8007dd0:	232b      	movmi	r3, #43	@ 0x2b
 8007dd2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007dd6:	f89a 3000 	ldrb.w	r3, [sl]
 8007dda:	2b2a      	cmp	r3, #42	@ 0x2a
 8007ddc:	d015      	beq.n	8007e0a <_svfiprintf_r+0xfa>
 8007dde:	4654      	mov	r4, sl
 8007de0:	2000      	movs	r0, #0
 8007de2:	f04f 0c0a 	mov.w	ip, #10
 8007de6:	9a07      	ldr	r2, [sp, #28]
 8007de8:	4621      	mov	r1, r4
 8007dea:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007dee:	3b30      	subs	r3, #48	@ 0x30
 8007df0:	2b09      	cmp	r3, #9
 8007df2:	d94b      	bls.n	8007e8c <_svfiprintf_r+0x17c>
 8007df4:	b1b0      	cbz	r0, 8007e24 <_svfiprintf_r+0x114>
 8007df6:	9207      	str	r2, [sp, #28]
 8007df8:	e014      	b.n	8007e24 <_svfiprintf_r+0x114>
 8007dfa:	eba0 0308 	sub.w	r3, r0, r8
 8007dfe:	fa09 f303 	lsl.w	r3, r9, r3
 8007e02:	4313      	orrs	r3, r2
 8007e04:	46a2      	mov	sl, r4
 8007e06:	9304      	str	r3, [sp, #16]
 8007e08:	e7d2      	b.n	8007db0 <_svfiprintf_r+0xa0>
 8007e0a:	9b03      	ldr	r3, [sp, #12]
 8007e0c:	1d19      	adds	r1, r3, #4
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	9103      	str	r1, [sp, #12]
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	bfbb      	ittet	lt
 8007e16:	425b      	neglt	r3, r3
 8007e18:	f042 0202 	orrlt.w	r2, r2, #2
 8007e1c:	9307      	strge	r3, [sp, #28]
 8007e1e:	9307      	strlt	r3, [sp, #28]
 8007e20:	bfb8      	it	lt
 8007e22:	9204      	strlt	r2, [sp, #16]
 8007e24:	7823      	ldrb	r3, [r4, #0]
 8007e26:	2b2e      	cmp	r3, #46	@ 0x2e
 8007e28:	d10a      	bne.n	8007e40 <_svfiprintf_r+0x130>
 8007e2a:	7863      	ldrb	r3, [r4, #1]
 8007e2c:	2b2a      	cmp	r3, #42	@ 0x2a
 8007e2e:	d132      	bne.n	8007e96 <_svfiprintf_r+0x186>
 8007e30:	9b03      	ldr	r3, [sp, #12]
 8007e32:	3402      	adds	r4, #2
 8007e34:	1d1a      	adds	r2, r3, #4
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	9203      	str	r2, [sp, #12]
 8007e3a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007e3e:	9305      	str	r3, [sp, #20]
 8007e40:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8007ef8 <_svfiprintf_r+0x1e8>
 8007e44:	2203      	movs	r2, #3
 8007e46:	4650      	mov	r0, sl
 8007e48:	7821      	ldrb	r1, [r4, #0]
 8007e4a:	f7fe fc12 	bl	8006672 <memchr>
 8007e4e:	b138      	cbz	r0, 8007e60 <_svfiprintf_r+0x150>
 8007e50:	2240      	movs	r2, #64	@ 0x40
 8007e52:	9b04      	ldr	r3, [sp, #16]
 8007e54:	eba0 000a 	sub.w	r0, r0, sl
 8007e58:	4082      	lsls	r2, r0
 8007e5a:	4313      	orrs	r3, r2
 8007e5c:	3401      	adds	r4, #1
 8007e5e:	9304      	str	r3, [sp, #16]
 8007e60:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007e64:	2206      	movs	r2, #6
 8007e66:	4825      	ldr	r0, [pc, #148]	@ (8007efc <_svfiprintf_r+0x1ec>)
 8007e68:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007e6c:	f7fe fc01 	bl	8006672 <memchr>
 8007e70:	2800      	cmp	r0, #0
 8007e72:	d036      	beq.n	8007ee2 <_svfiprintf_r+0x1d2>
 8007e74:	4b22      	ldr	r3, [pc, #136]	@ (8007f00 <_svfiprintf_r+0x1f0>)
 8007e76:	bb1b      	cbnz	r3, 8007ec0 <_svfiprintf_r+0x1b0>
 8007e78:	9b03      	ldr	r3, [sp, #12]
 8007e7a:	3307      	adds	r3, #7
 8007e7c:	f023 0307 	bic.w	r3, r3, #7
 8007e80:	3308      	adds	r3, #8
 8007e82:	9303      	str	r3, [sp, #12]
 8007e84:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007e86:	4433      	add	r3, r6
 8007e88:	9309      	str	r3, [sp, #36]	@ 0x24
 8007e8a:	e76a      	b.n	8007d62 <_svfiprintf_r+0x52>
 8007e8c:	460c      	mov	r4, r1
 8007e8e:	2001      	movs	r0, #1
 8007e90:	fb0c 3202 	mla	r2, ip, r2, r3
 8007e94:	e7a8      	b.n	8007de8 <_svfiprintf_r+0xd8>
 8007e96:	2300      	movs	r3, #0
 8007e98:	f04f 0c0a 	mov.w	ip, #10
 8007e9c:	4619      	mov	r1, r3
 8007e9e:	3401      	adds	r4, #1
 8007ea0:	9305      	str	r3, [sp, #20]
 8007ea2:	4620      	mov	r0, r4
 8007ea4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007ea8:	3a30      	subs	r2, #48	@ 0x30
 8007eaa:	2a09      	cmp	r2, #9
 8007eac:	d903      	bls.n	8007eb6 <_svfiprintf_r+0x1a6>
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	d0c6      	beq.n	8007e40 <_svfiprintf_r+0x130>
 8007eb2:	9105      	str	r1, [sp, #20]
 8007eb4:	e7c4      	b.n	8007e40 <_svfiprintf_r+0x130>
 8007eb6:	4604      	mov	r4, r0
 8007eb8:	2301      	movs	r3, #1
 8007eba:	fb0c 2101 	mla	r1, ip, r1, r2
 8007ebe:	e7f0      	b.n	8007ea2 <_svfiprintf_r+0x192>
 8007ec0:	ab03      	add	r3, sp, #12
 8007ec2:	9300      	str	r3, [sp, #0]
 8007ec4:	462a      	mov	r2, r5
 8007ec6:	4638      	mov	r0, r7
 8007ec8:	4b0e      	ldr	r3, [pc, #56]	@ (8007f04 <_svfiprintf_r+0x1f4>)
 8007eca:	a904      	add	r1, sp, #16
 8007ecc:	f7fd fe48 	bl	8005b60 <_printf_float>
 8007ed0:	1c42      	adds	r2, r0, #1
 8007ed2:	4606      	mov	r6, r0
 8007ed4:	d1d6      	bne.n	8007e84 <_svfiprintf_r+0x174>
 8007ed6:	89ab      	ldrh	r3, [r5, #12]
 8007ed8:	065b      	lsls	r3, r3, #25
 8007eda:	f53f af2d 	bmi.w	8007d38 <_svfiprintf_r+0x28>
 8007ede:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007ee0:	e72c      	b.n	8007d3c <_svfiprintf_r+0x2c>
 8007ee2:	ab03      	add	r3, sp, #12
 8007ee4:	9300      	str	r3, [sp, #0]
 8007ee6:	462a      	mov	r2, r5
 8007ee8:	4638      	mov	r0, r7
 8007eea:	4b06      	ldr	r3, [pc, #24]	@ (8007f04 <_svfiprintf_r+0x1f4>)
 8007eec:	a904      	add	r1, sp, #16
 8007eee:	f7fe f8d5 	bl	800609c <_printf_i>
 8007ef2:	e7ed      	b.n	8007ed0 <_svfiprintf_r+0x1c0>
 8007ef4:	08008aac 	.word	0x08008aac
 8007ef8:	08008ab2 	.word	0x08008ab2
 8007efc:	08008ab6 	.word	0x08008ab6
 8007f00:	08005b61 	.word	0x08005b61
 8007f04:	08007c59 	.word	0x08007c59

08007f08 <__sfputc_r>:
 8007f08:	6893      	ldr	r3, [r2, #8]
 8007f0a:	b410      	push	{r4}
 8007f0c:	3b01      	subs	r3, #1
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	6093      	str	r3, [r2, #8]
 8007f12:	da07      	bge.n	8007f24 <__sfputc_r+0x1c>
 8007f14:	6994      	ldr	r4, [r2, #24]
 8007f16:	42a3      	cmp	r3, r4
 8007f18:	db01      	blt.n	8007f1e <__sfputc_r+0x16>
 8007f1a:	290a      	cmp	r1, #10
 8007f1c:	d102      	bne.n	8007f24 <__sfputc_r+0x1c>
 8007f1e:	bc10      	pop	{r4}
 8007f20:	f000 b9da 	b.w	80082d8 <__swbuf_r>
 8007f24:	6813      	ldr	r3, [r2, #0]
 8007f26:	1c58      	adds	r0, r3, #1
 8007f28:	6010      	str	r0, [r2, #0]
 8007f2a:	7019      	strb	r1, [r3, #0]
 8007f2c:	4608      	mov	r0, r1
 8007f2e:	bc10      	pop	{r4}
 8007f30:	4770      	bx	lr

08007f32 <__sfputs_r>:
 8007f32:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f34:	4606      	mov	r6, r0
 8007f36:	460f      	mov	r7, r1
 8007f38:	4614      	mov	r4, r2
 8007f3a:	18d5      	adds	r5, r2, r3
 8007f3c:	42ac      	cmp	r4, r5
 8007f3e:	d101      	bne.n	8007f44 <__sfputs_r+0x12>
 8007f40:	2000      	movs	r0, #0
 8007f42:	e007      	b.n	8007f54 <__sfputs_r+0x22>
 8007f44:	463a      	mov	r2, r7
 8007f46:	4630      	mov	r0, r6
 8007f48:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007f4c:	f7ff ffdc 	bl	8007f08 <__sfputc_r>
 8007f50:	1c43      	adds	r3, r0, #1
 8007f52:	d1f3      	bne.n	8007f3c <__sfputs_r+0xa>
 8007f54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007f58 <_vfiprintf_r>:
 8007f58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f5c:	460d      	mov	r5, r1
 8007f5e:	4614      	mov	r4, r2
 8007f60:	4698      	mov	r8, r3
 8007f62:	4606      	mov	r6, r0
 8007f64:	b09d      	sub	sp, #116	@ 0x74
 8007f66:	b118      	cbz	r0, 8007f70 <_vfiprintf_r+0x18>
 8007f68:	6a03      	ldr	r3, [r0, #32]
 8007f6a:	b90b      	cbnz	r3, 8007f70 <_vfiprintf_r+0x18>
 8007f6c:	f7fe fa40 	bl	80063f0 <__sinit>
 8007f70:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007f72:	07d9      	lsls	r1, r3, #31
 8007f74:	d405      	bmi.n	8007f82 <_vfiprintf_r+0x2a>
 8007f76:	89ab      	ldrh	r3, [r5, #12]
 8007f78:	059a      	lsls	r2, r3, #22
 8007f7a:	d402      	bmi.n	8007f82 <_vfiprintf_r+0x2a>
 8007f7c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007f7e:	f7fe fb76 	bl	800666e <__retarget_lock_acquire_recursive>
 8007f82:	89ab      	ldrh	r3, [r5, #12]
 8007f84:	071b      	lsls	r3, r3, #28
 8007f86:	d501      	bpl.n	8007f8c <_vfiprintf_r+0x34>
 8007f88:	692b      	ldr	r3, [r5, #16]
 8007f8a:	b99b      	cbnz	r3, 8007fb4 <_vfiprintf_r+0x5c>
 8007f8c:	4629      	mov	r1, r5
 8007f8e:	4630      	mov	r0, r6
 8007f90:	f000 f9e0 	bl	8008354 <__swsetup_r>
 8007f94:	b170      	cbz	r0, 8007fb4 <_vfiprintf_r+0x5c>
 8007f96:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007f98:	07dc      	lsls	r4, r3, #31
 8007f9a:	d504      	bpl.n	8007fa6 <_vfiprintf_r+0x4e>
 8007f9c:	f04f 30ff 	mov.w	r0, #4294967295
 8007fa0:	b01d      	add	sp, #116	@ 0x74
 8007fa2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007fa6:	89ab      	ldrh	r3, [r5, #12]
 8007fa8:	0598      	lsls	r0, r3, #22
 8007faa:	d4f7      	bmi.n	8007f9c <_vfiprintf_r+0x44>
 8007fac:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007fae:	f7fe fb5f 	bl	8006670 <__retarget_lock_release_recursive>
 8007fb2:	e7f3      	b.n	8007f9c <_vfiprintf_r+0x44>
 8007fb4:	2300      	movs	r3, #0
 8007fb6:	9309      	str	r3, [sp, #36]	@ 0x24
 8007fb8:	2320      	movs	r3, #32
 8007fba:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007fbe:	2330      	movs	r3, #48	@ 0x30
 8007fc0:	f04f 0901 	mov.w	r9, #1
 8007fc4:	f8cd 800c 	str.w	r8, [sp, #12]
 8007fc8:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8008174 <_vfiprintf_r+0x21c>
 8007fcc:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007fd0:	4623      	mov	r3, r4
 8007fd2:	469a      	mov	sl, r3
 8007fd4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007fd8:	b10a      	cbz	r2, 8007fde <_vfiprintf_r+0x86>
 8007fda:	2a25      	cmp	r2, #37	@ 0x25
 8007fdc:	d1f9      	bne.n	8007fd2 <_vfiprintf_r+0x7a>
 8007fde:	ebba 0b04 	subs.w	fp, sl, r4
 8007fe2:	d00b      	beq.n	8007ffc <_vfiprintf_r+0xa4>
 8007fe4:	465b      	mov	r3, fp
 8007fe6:	4622      	mov	r2, r4
 8007fe8:	4629      	mov	r1, r5
 8007fea:	4630      	mov	r0, r6
 8007fec:	f7ff ffa1 	bl	8007f32 <__sfputs_r>
 8007ff0:	3001      	adds	r0, #1
 8007ff2:	f000 80a7 	beq.w	8008144 <_vfiprintf_r+0x1ec>
 8007ff6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007ff8:	445a      	add	r2, fp
 8007ffa:	9209      	str	r2, [sp, #36]	@ 0x24
 8007ffc:	f89a 3000 	ldrb.w	r3, [sl]
 8008000:	2b00      	cmp	r3, #0
 8008002:	f000 809f 	beq.w	8008144 <_vfiprintf_r+0x1ec>
 8008006:	2300      	movs	r3, #0
 8008008:	f04f 32ff 	mov.w	r2, #4294967295
 800800c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008010:	f10a 0a01 	add.w	sl, sl, #1
 8008014:	9304      	str	r3, [sp, #16]
 8008016:	9307      	str	r3, [sp, #28]
 8008018:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800801c:	931a      	str	r3, [sp, #104]	@ 0x68
 800801e:	4654      	mov	r4, sl
 8008020:	2205      	movs	r2, #5
 8008022:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008026:	4853      	ldr	r0, [pc, #332]	@ (8008174 <_vfiprintf_r+0x21c>)
 8008028:	f7fe fb23 	bl	8006672 <memchr>
 800802c:	9a04      	ldr	r2, [sp, #16]
 800802e:	b9d8      	cbnz	r0, 8008068 <_vfiprintf_r+0x110>
 8008030:	06d1      	lsls	r1, r2, #27
 8008032:	bf44      	itt	mi
 8008034:	2320      	movmi	r3, #32
 8008036:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800803a:	0713      	lsls	r3, r2, #28
 800803c:	bf44      	itt	mi
 800803e:	232b      	movmi	r3, #43	@ 0x2b
 8008040:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008044:	f89a 3000 	ldrb.w	r3, [sl]
 8008048:	2b2a      	cmp	r3, #42	@ 0x2a
 800804a:	d015      	beq.n	8008078 <_vfiprintf_r+0x120>
 800804c:	4654      	mov	r4, sl
 800804e:	2000      	movs	r0, #0
 8008050:	f04f 0c0a 	mov.w	ip, #10
 8008054:	9a07      	ldr	r2, [sp, #28]
 8008056:	4621      	mov	r1, r4
 8008058:	f811 3b01 	ldrb.w	r3, [r1], #1
 800805c:	3b30      	subs	r3, #48	@ 0x30
 800805e:	2b09      	cmp	r3, #9
 8008060:	d94b      	bls.n	80080fa <_vfiprintf_r+0x1a2>
 8008062:	b1b0      	cbz	r0, 8008092 <_vfiprintf_r+0x13a>
 8008064:	9207      	str	r2, [sp, #28]
 8008066:	e014      	b.n	8008092 <_vfiprintf_r+0x13a>
 8008068:	eba0 0308 	sub.w	r3, r0, r8
 800806c:	fa09 f303 	lsl.w	r3, r9, r3
 8008070:	4313      	orrs	r3, r2
 8008072:	46a2      	mov	sl, r4
 8008074:	9304      	str	r3, [sp, #16]
 8008076:	e7d2      	b.n	800801e <_vfiprintf_r+0xc6>
 8008078:	9b03      	ldr	r3, [sp, #12]
 800807a:	1d19      	adds	r1, r3, #4
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	9103      	str	r1, [sp, #12]
 8008080:	2b00      	cmp	r3, #0
 8008082:	bfbb      	ittet	lt
 8008084:	425b      	neglt	r3, r3
 8008086:	f042 0202 	orrlt.w	r2, r2, #2
 800808a:	9307      	strge	r3, [sp, #28]
 800808c:	9307      	strlt	r3, [sp, #28]
 800808e:	bfb8      	it	lt
 8008090:	9204      	strlt	r2, [sp, #16]
 8008092:	7823      	ldrb	r3, [r4, #0]
 8008094:	2b2e      	cmp	r3, #46	@ 0x2e
 8008096:	d10a      	bne.n	80080ae <_vfiprintf_r+0x156>
 8008098:	7863      	ldrb	r3, [r4, #1]
 800809a:	2b2a      	cmp	r3, #42	@ 0x2a
 800809c:	d132      	bne.n	8008104 <_vfiprintf_r+0x1ac>
 800809e:	9b03      	ldr	r3, [sp, #12]
 80080a0:	3402      	adds	r4, #2
 80080a2:	1d1a      	adds	r2, r3, #4
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	9203      	str	r2, [sp, #12]
 80080a8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80080ac:	9305      	str	r3, [sp, #20]
 80080ae:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8008178 <_vfiprintf_r+0x220>
 80080b2:	2203      	movs	r2, #3
 80080b4:	4650      	mov	r0, sl
 80080b6:	7821      	ldrb	r1, [r4, #0]
 80080b8:	f7fe fadb 	bl	8006672 <memchr>
 80080bc:	b138      	cbz	r0, 80080ce <_vfiprintf_r+0x176>
 80080be:	2240      	movs	r2, #64	@ 0x40
 80080c0:	9b04      	ldr	r3, [sp, #16]
 80080c2:	eba0 000a 	sub.w	r0, r0, sl
 80080c6:	4082      	lsls	r2, r0
 80080c8:	4313      	orrs	r3, r2
 80080ca:	3401      	adds	r4, #1
 80080cc:	9304      	str	r3, [sp, #16]
 80080ce:	f814 1b01 	ldrb.w	r1, [r4], #1
 80080d2:	2206      	movs	r2, #6
 80080d4:	4829      	ldr	r0, [pc, #164]	@ (800817c <_vfiprintf_r+0x224>)
 80080d6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80080da:	f7fe faca 	bl	8006672 <memchr>
 80080de:	2800      	cmp	r0, #0
 80080e0:	d03f      	beq.n	8008162 <_vfiprintf_r+0x20a>
 80080e2:	4b27      	ldr	r3, [pc, #156]	@ (8008180 <_vfiprintf_r+0x228>)
 80080e4:	bb1b      	cbnz	r3, 800812e <_vfiprintf_r+0x1d6>
 80080e6:	9b03      	ldr	r3, [sp, #12]
 80080e8:	3307      	adds	r3, #7
 80080ea:	f023 0307 	bic.w	r3, r3, #7
 80080ee:	3308      	adds	r3, #8
 80080f0:	9303      	str	r3, [sp, #12]
 80080f2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80080f4:	443b      	add	r3, r7
 80080f6:	9309      	str	r3, [sp, #36]	@ 0x24
 80080f8:	e76a      	b.n	8007fd0 <_vfiprintf_r+0x78>
 80080fa:	460c      	mov	r4, r1
 80080fc:	2001      	movs	r0, #1
 80080fe:	fb0c 3202 	mla	r2, ip, r2, r3
 8008102:	e7a8      	b.n	8008056 <_vfiprintf_r+0xfe>
 8008104:	2300      	movs	r3, #0
 8008106:	f04f 0c0a 	mov.w	ip, #10
 800810a:	4619      	mov	r1, r3
 800810c:	3401      	adds	r4, #1
 800810e:	9305      	str	r3, [sp, #20]
 8008110:	4620      	mov	r0, r4
 8008112:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008116:	3a30      	subs	r2, #48	@ 0x30
 8008118:	2a09      	cmp	r2, #9
 800811a:	d903      	bls.n	8008124 <_vfiprintf_r+0x1cc>
 800811c:	2b00      	cmp	r3, #0
 800811e:	d0c6      	beq.n	80080ae <_vfiprintf_r+0x156>
 8008120:	9105      	str	r1, [sp, #20]
 8008122:	e7c4      	b.n	80080ae <_vfiprintf_r+0x156>
 8008124:	4604      	mov	r4, r0
 8008126:	2301      	movs	r3, #1
 8008128:	fb0c 2101 	mla	r1, ip, r1, r2
 800812c:	e7f0      	b.n	8008110 <_vfiprintf_r+0x1b8>
 800812e:	ab03      	add	r3, sp, #12
 8008130:	9300      	str	r3, [sp, #0]
 8008132:	462a      	mov	r2, r5
 8008134:	4630      	mov	r0, r6
 8008136:	4b13      	ldr	r3, [pc, #76]	@ (8008184 <_vfiprintf_r+0x22c>)
 8008138:	a904      	add	r1, sp, #16
 800813a:	f7fd fd11 	bl	8005b60 <_printf_float>
 800813e:	4607      	mov	r7, r0
 8008140:	1c78      	adds	r0, r7, #1
 8008142:	d1d6      	bne.n	80080f2 <_vfiprintf_r+0x19a>
 8008144:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008146:	07d9      	lsls	r1, r3, #31
 8008148:	d405      	bmi.n	8008156 <_vfiprintf_r+0x1fe>
 800814a:	89ab      	ldrh	r3, [r5, #12]
 800814c:	059a      	lsls	r2, r3, #22
 800814e:	d402      	bmi.n	8008156 <_vfiprintf_r+0x1fe>
 8008150:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008152:	f7fe fa8d 	bl	8006670 <__retarget_lock_release_recursive>
 8008156:	89ab      	ldrh	r3, [r5, #12]
 8008158:	065b      	lsls	r3, r3, #25
 800815a:	f53f af1f 	bmi.w	8007f9c <_vfiprintf_r+0x44>
 800815e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008160:	e71e      	b.n	8007fa0 <_vfiprintf_r+0x48>
 8008162:	ab03      	add	r3, sp, #12
 8008164:	9300      	str	r3, [sp, #0]
 8008166:	462a      	mov	r2, r5
 8008168:	4630      	mov	r0, r6
 800816a:	4b06      	ldr	r3, [pc, #24]	@ (8008184 <_vfiprintf_r+0x22c>)
 800816c:	a904      	add	r1, sp, #16
 800816e:	f7fd ff95 	bl	800609c <_printf_i>
 8008172:	e7e4      	b.n	800813e <_vfiprintf_r+0x1e6>
 8008174:	08008aac 	.word	0x08008aac
 8008178:	08008ab2 	.word	0x08008ab2
 800817c:	08008ab6 	.word	0x08008ab6
 8008180:	08005b61 	.word	0x08005b61
 8008184:	08007f33 	.word	0x08007f33

08008188 <__sflush_r>:
 8008188:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800818c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800818e:	0716      	lsls	r6, r2, #28
 8008190:	4605      	mov	r5, r0
 8008192:	460c      	mov	r4, r1
 8008194:	d454      	bmi.n	8008240 <__sflush_r+0xb8>
 8008196:	684b      	ldr	r3, [r1, #4]
 8008198:	2b00      	cmp	r3, #0
 800819a:	dc02      	bgt.n	80081a2 <__sflush_r+0x1a>
 800819c:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800819e:	2b00      	cmp	r3, #0
 80081a0:	dd48      	ble.n	8008234 <__sflush_r+0xac>
 80081a2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80081a4:	2e00      	cmp	r6, #0
 80081a6:	d045      	beq.n	8008234 <__sflush_r+0xac>
 80081a8:	2300      	movs	r3, #0
 80081aa:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80081ae:	682f      	ldr	r7, [r5, #0]
 80081b0:	6a21      	ldr	r1, [r4, #32]
 80081b2:	602b      	str	r3, [r5, #0]
 80081b4:	d030      	beq.n	8008218 <__sflush_r+0x90>
 80081b6:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80081b8:	89a3      	ldrh	r3, [r4, #12]
 80081ba:	0759      	lsls	r1, r3, #29
 80081bc:	d505      	bpl.n	80081ca <__sflush_r+0x42>
 80081be:	6863      	ldr	r3, [r4, #4]
 80081c0:	1ad2      	subs	r2, r2, r3
 80081c2:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80081c4:	b10b      	cbz	r3, 80081ca <__sflush_r+0x42>
 80081c6:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80081c8:	1ad2      	subs	r2, r2, r3
 80081ca:	2300      	movs	r3, #0
 80081cc:	4628      	mov	r0, r5
 80081ce:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80081d0:	6a21      	ldr	r1, [r4, #32]
 80081d2:	47b0      	blx	r6
 80081d4:	1c43      	adds	r3, r0, #1
 80081d6:	89a3      	ldrh	r3, [r4, #12]
 80081d8:	d106      	bne.n	80081e8 <__sflush_r+0x60>
 80081da:	6829      	ldr	r1, [r5, #0]
 80081dc:	291d      	cmp	r1, #29
 80081de:	d82b      	bhi.n	8008238 <__sflush_r+0xb0>
 80081e0:	4a28      	ldr	r2, [pc, #160]	@ (8008284 <__sflush_r+0xfc>)
 80081e2:	40ca      	lsrs	r2, r1
 80081e4:	07d6      	lsls	r6, r2, #31
 80081e6:	d527      	bpl.n	8008238 <__sflush_r+0xb0>
 80081e8:	2200      	movs	r2, #0
 80081ea:	6062      	str	r2, [r4, #4]
 80081ec:	6922      	ldr	r2, [r4, #16]
 80081ee:	04d9      	lsls	r1, r3, #19
 80081f0:	6022      	str	r2, [r4, #0]
 80081f2:	d504      	bpl.n	80081fe <__sflush_r+0x76>
 80081f4:	1c42      	adds	r2, r0, #1
 80081f6:	d101      	bne.n	80081fc <__sflush_r+0x74>
 80081f8:	682b      	ldr	r3, [r5, #0]
 80081fa:	b903      	cbnz	r3, 80081fe <__sflush_r+0x76>
 80081fc:	6560      	str	r0, [r4, #84]	@ 0x54
 80081fe:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008200:	602f      	str	r7, [r5, #0]
 8008202:	b1b9      	cbz	r1, 8008234 <__sflush_r+0xac>
 8008204:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008208:	4299      	cmp	r1, r3
 800820a:	d002      	beq.n	8008212 <__sflush_r+0x8a>
 800820c:	4628      	mov	r0, r5
 800820e:	f7ff f8ab 	bl	8007368 <_free_r>
 8008212:	2300      	movs	r3, #0
 8008214:	6363      	str	r3, [r4, #52]	@ 0x34
 8008216:	e00d      	b.n	8008234 <__sflush_r+0xac>
 8008218:	2301      	movs	r3, #1
 800821a:	4628      	mov	r0, r5
 800821c:	47b0      	blx	r6
 800821e:	4602      	mov	r2, r0
 8008220:	1c50      	adds	r0, r2, #1
 8008222:	d1c9      	bne.n	80081b8 <__sflush_r+0x30>
 8008224:	682b      	ldr	r3, [r5, #0]
 8008226:	2b00      	cmp	r3, #0
 8008228:	d0c6      	beq.n	80081b8 <__sflush_r+0x30>
 800822a:	2b1d      	cmp	r3, #29
 800822c:	d001      	beq.n	8008232 <__sflush_r+0xaa>
 800822e:	2b16      	cmp	r3, #22
 8008230:	d11d      	bne.n	800826e <__sflush_r+0xe6>
 8008232:	602f      	str	r7, [r5, #0]
 8008234:	2000      	movs	r0, #0
 8008236:	e021      	b.n	800827c <__sflush_r+0xf4>
 8008238:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800823c:	b21b      	sxth	r3, r3
 800823e:	e01a      	b.n	8008276 <__sflush_r+0xee>
 8008240:	690f      	ldr	r7, [r1, #16]
 8008242:	2f00      	cmp	r7, #0
 8008244:	d0f6      	beq.n	8008234 <__sflush_r+0xac>
 8008246:	0793      	lsls	r3, r2, #30
 8008248:	bf18      	it	ne
 800824a:	2300      	movne	r3, #0
 800824c:	680e      	ldr	r6, [r1, #0]
 800824e:	bf08      	it	eq
 8008250:	694b      	ldreq	r3, [r1, #20]
 8008252:	1bf6      	subs	r6, r6, r7
 8008254:	600f      	str	r7, [r1, #0]
 8008256:	608b      	str	r3, [r1, #8]
 8008258:	2e00      	cmp	r6, #0
 800825a:	ddeb      	ble.n	8008234 <__sflush_r+0xac>
 800825c:	4633      	mov	r3, r6
 800825e:	463a      	mov	r2, r7
 8008260:	4628      	mov	r0, r5
 8008262:	6a21      	ldr	r1, [r4, #32]
 8008264:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8008268:	47e0      	blx	ip
 800826a:	2800      	cmp	r0, #0
 800826c:	dc07      	bgt.n	800827e <__sflush_r+0xf6>
 800826e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008272:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008276:	f04f 30ff 	mov.w	r0, #4294967295
 800827a:	81a3      	strh	r3, [r4, #12]
 800827c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800827e:	4407      	add	r7, r0
 8008280:	1a36      	subs	r6, r6, r0
 8008282:	e7e9      	b.n	8008258 <__sflush_r+0xd0>
 8008284:	20400001 	.word	0x20400001

08008288 <_fflush_r>:
 8008288:	b538      	push	{r3, r4, r5, lr}
 800828a:	690b      	ldr	r3, [r1, #16]
 800828c:	4605      	mov	r5, r0
 800828e:	460c      	mov	r4, r1
 8008290:	b913      	cbnz	r3, 8008298 <_fflush_r+0x10>
 8008292:	2500      	movs	r5, #0
 8008294:	4628      	mov	r0, r5
 8008296:	bd38      	pop	{r3, r4, r5, pc}
 8008298:	b118      	cbz	r0, 80082a2 <_fflush_r+0x1a>
 800829a:	6a03      	ldr	r3, [r0, #32]
 800829c:	b90b      	cbnz	r3, 80082a2 <_fflush_r+0x1a>
 800829e:	f7fe f8a7 	bl	80063f0 <__sinit>
 80082a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	d0f3      	beq.n	8008292 <_fflush_r+0xa>
 80082aa:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80082ac:	07d0      	lsls	r0, r2, #31
 80082ae:	d404      	bmi.n	80082ba <_fflush_r+0x32>
 80082b0:	0599      	lsls	r1, r3, #22
 80082b2:	d402      	bmi.n	80082ba <_fflush_r+0x32>
 80082b4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80082b6:	f7fe f9da 	bl	800666e <__retarget_lock_acquire_recursive>
 80082ba:	4628      	mov	r0, r5
 80082bc:	4621      	mov	r1, r4
 80082be:	f7ff ff63 	bl	8008188 <__sflush_r>
 80082c2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80082c4:	4605      	mov	r5, r0
 80082c6:	07da      	lsls	r2, r3, #31
 80082c8:	d4e4      	bmi.n	8008294 <_fflush_r+0xc>
 80082ca:	89a3      	ldrh	r3, [r4, #12]
 80082cc:	059b      	lsls	r3, r3, #22
 80082ce:	d4e1      	bmi.n	8008294 <_fflush_r+0xc>
 80082d0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80082d2:	f7fe f9cd 	bl	8006670 <__retarget_lock_release_recursive>
 80082d6:	e7dd      	b.n	8008294 <_fflush_r+0xc>

080082d8 <__swbuf_r>:
 80082d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80082da:	460e      	mov	r6, r1
 80082dc:	4614      	mov	r4, r2
 80082de:	4605      	mov	r5, r0
 80082e0:	b118      	cbz	r0, 80082ea <__swbuf_r+0x12>
 80082e2:	6a03      	ldr	r3, [r0, #32]
 80082e4:	b90b      	cbnz	r3, 80082ea <__swbuf_r+0x12>
 80082e6:	f7fe f883 	bl	80063f0 <__sinit>
 80082ea:	69a3      	ldr	r3, [r4, #24]
 80082ec:	60a3      	str	r3, [r4, #8]
 80082ee:	89a3      	ldrh	r3, [r4, #12]
 80082f0:	071a      	lsls	r2, r3, #28
 80082f2:	d501      	bpl.n	80082f8 <__swbuf_r+0x20>
 80082f4:	6923      	ldr	r3, [r4, #16]
 80082f6:	b943      	cbnz	r3, 800830a <__swbuf_r+0x32>
 80082f8:	4621      	mov	r1, r4
 80082fa:	4628      	mov	r0, r5
 80082fc:	f000 f82a 	bl	8008354 <__swsetup_r>
 8008300:	b118      	cbz	r0, 800830a <__swbuf_r+0x32>
 8008302:	f04f 37ff 	mov.w	r7, #4294967295
 8008306:	4638      	mov	r0, r7
 8008308:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800830a:	6823      	ldr	r3, [r4, #0]
 800830c:	6922      	ldr	r2, [r4, #16]
 800830e:	b2f6      	uxtb	r6, r6
 8008310:	1a98      	subs	r0, r3, r2
 8008312:	6963      	ldr	r3, [r4, #20]
 8008314:	4637      	mov	r7, r6
 8008316:	4283      	cmp	r3, r0
 8008318:	dc05      	bgt.n	8008326 <__swbuf_r+0x4e>
 800831a:	4621      	mov	r1, r4
 800831c:	4628      	mov	r0, r5
 800831e:	f7ff ffb3 	bl	8008288 <_fflush_r>
 8008322:	2800      	cmp	r0, #0
 8008324:	d1ed      	bne.n	8008302 <__swbuf_r+0x2a>
 8008326:	68a3      	ldr	r3, [r4, #8]
 8008328:	3b01      	subs	r3, #1
 800832a:	60a3      	str	r3, [r4, #8]
 800832c:	6823      	ldr	r3, [r4, #0]
 800832e:	1c5a      	adds	r2, r3, #1
 8008330:	6022      	str	r2, [r4, #0]
 8008332:	701e      	strb	r6, [r3, #0]
 8008334:	6962      	ldr	r2, [r4, #20]
 8008336:	1c43      	adds	r3, r0, #1
 8008338:	429a      	cmp	r2, r3
 800833a:	d004      	beq.n	8008346 <__swbuf_r+0x6e>
 800833c:	89a3      	ldrh	r3, [r4, #12]
 800833e:	07db      	lsls	r3, r3, #31
 8008340:	d5e1      	bpl.n	8008306 <__swbuf_r+0x2e>
 8008342:	2e0a      	cmp	r6, #10
 8008344:	d1df      	bne.n	8008306 <__swbuf_r+0x2e>
 8008346:	4621      	mov	r1, r4
 8008348:	4628      	mov	r0, r5
 800834a:	f7ff ff9d 	bl	8008288 <_fflush_r>
 800834e:	2800      	cmp	r0, #0
 8008350:	d0d9      	beq.n	8008306 <__swbuf_r+0x2e>
 8008352:	e7d6      	b.n	8008302 <__swbuf_r+0x2a>

08008354 <__swsetup_r>:
 8008354:	b538      	push	{r3, r4, r5, lr}
 8008356:	4b29      	ldr	r3, [pc, #164]	@ (80083fc <__swsetup_r+0xa8>)
 8008358:	4605      	mov	r5, r0
 800835a:	6818      	ldr	r0, [r3, #0]
 800835c:	460c      	mov	r4, r1
 800835e:	b118      	cbz	r0, 8008368 <__swsetup_r+0x14>
 8008360:	6a03      	ldr	r3, [r0, #32]
 8008362:	b90b      	cbnz	r3, 8008368 <__swsetup_r+0x14>
 8008364:	f7fe f844 	bl	80063f0 <__sinit>
 8008368:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800836c:	0719      	lsls	r1, r3, #28
 800836e:	d422      	bmi.n	80083b6 <__swsetup_r+0x62>
 8008370:	06da      	lsls	r2, r3, #27
 8008372:	d407      	bmi.n	8008384 <__swsetup_r+0x30>
 8008374:	2209      	movs	r2, #9
 8008376:	602a      	str	r2, [r5, #0]
 8008378:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800837c:	f04f 30ff 	mov.w	r0, #4294967295
 8008380:	81a3      	strh	r3, [r4, #12]
 8008382:	e033      	b.n	80083ec <__swsetup_r+0x98>
 8008384:	0758      	lsls	r0, r3, #29
 8008386:	d512      	bpl.n	80083ae <__swsetup_r+0x5a>
 8008388:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800838a:	b141      	cbz	r1, 800839e <__swsetup_r+0x4a>
 800838c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008390:	4299      	cmp	r1, r3
 8008392:	d002      	beq.n	800839a <__swsetup_r+0x46>
 8008394:	4628      	mov	r0, r5
 8008396:	f7fe ffe7 	bl	8007368 <_free_r>
 800839a:	2300      	movs	r3, #0
 800839c:	6363      	str	r3, [r4, #52]	@ 0x34
 800839e:	89a3      	ldrh	r3, [r4, #12]
 80083a0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80083a4:	81a3      	strh	r3, [r4, #12]
 80083a6:	2300      	movs	r3, #0
 80083a8:	6063      	str	r3, [r4, #4]
 80083aa:	6923      	ldr	r3, [r4, #16]
 80083ac:	6023      	str	r3, [r4, #0]
 80083ae:	89a3      	ldrh	r3, [r4, #12]
 80083b0:	f043 0308 	orr.w	r3, r3, #8
 80083b4:	81a3      	strh	r3, [r4, #12]
 80083b6:	6923      	ldr	r3, [r4, #16]
 80083b8:	b94b      	cbnz	r3, 80083ce <__swsetup_r+0x7a>
 80083ba:	89a3      	ldrh	r3, [r4, #12]
 80083bc:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80083c0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80083c4:	d003      	beq.n	80083ce <__swsetup_r+0x7a>
 80083c6:	4621      	mov	r1, r4
 80083c8:	4628      	mov	r0, r5
 80083ca:	f000 f8fa 	bl	80085c2 <__smakebuf_r>
 80083ce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80083d2:	f013 0201 	ands.w	r2, r3, #1
 80083d6:	d00a      	beq.n	80083ee <__swsetup_r+0x9a>
 80083d8:	2200      	movs	r2, #0
 80083da:	60a2      	str	r2, [r4, #8]
 80083dc:	6962      	ldr	r2, [r4, #20]
 80083de:	4252      	negs	r2, r2
 80083e0:	61a2      	str	r2, [r4, #24]
 80083e2:	6922      	ldr	r2, [r4, #16]
 80083e4:	b942      	cbnz	r2, 80083f8 <__swsetup_r+0xa4>
 80083e6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80083ea:	d1c5      	bne.n	8008378 <__swsetup_r+0x24>
 80083ec:	bd38      	pop	{r3, r4, r5, pc}
 80083ee:	0799      	lsls	r1, r3, #30
 80083f0:	bf58      	it	pl
 80083f2:	6962      	ldrpl	r2, [r4, #20]
 80083f4:	60a2      	str	r2, [r4, #8]
 80083f6:	e7f4      	b.n	80083e2 <__swsetup_r+0x8e>
 80083f8:	2000      	movs	r0, #0
 80083fa:	e7f7      	b.n	80083ec <__swsetup_r+0x98>
 80083fc:	20000018 	.word	0x20000018

08008400 <memmove>:
 8008400:	4288      	cmp	r0, r1
 8008402:	b510      	push	{r4, lr}
 8008404:	eb01 0402 	add.w	r4, r1, r2
 8008408:	d902      	bls.n	8008410 <memmove+0x10>
 800840a:	4284      	cmp	r4, r0
 800840c:	4623      	mov	r3, r4
 800840e:	d807      	bhi.n	8008420 <memmove+0x20>
 8008410:	1e43      	subs	r3, r0, #1
 8008412:	42a1      	cmp	r1, r4
 8008414:	d008      	beq.n	8008428 <memmove+0x28>
 8008416:	f811 2b01 	ldrb.w	r2, [r1], #1
 800841a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800841e:	e7f8      	b.n	8008412 <memmove+0x12>
 8008420:	4601      	mov	r1, r0
 8008422:	4402      	add	r2, r0
 8008424:	428a      	cmp	r2, r1
 8008426:	d100      	bne.n	800842a <memmove+0x2a>
 8008428:	bd10      	pop	{r4, pc}
 800842a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800842e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008432:	e7f7      	b.n	8008424 <memmove+0x24>

08008434 <_sbrk_r>:
 8008434:	b538      	push	{r3, r4, r5, lr}
 8008436:	2300      	movs	r3, #0
 8008438:	4d05      	ldr	r5, [pc, #20]	@ (8008450 <_sbrk_r+0x1c>)
 800843a:	4604      	mov	r4, r0
 800843c:	4608      	mov	r0, r1
 800843e:	602b      	str	r3, [r5, #0]
 8008440:	f7f9 fd86 	bl	8001f50 <_sbrk>
 8008444:	1c43      	adds	r3, r0, #1
 8008446:	d102      	bne.n	800844e <_sbrk_r+0x1a>
 8008448:	682b      	ldr	r3, [r5, #0]
 800844a:	b103      	cbz	r3, 800844e <_sbrk_r+0x1a>
 800844c:	6023      	str	r3, [r4, #0]
 800844e:	bd38      	pop	{r3, r4, r5, pc}
 8008450:	20000490 	.word	0x20000490

08008454 <__assert_func>:
 8008454:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008456:	4614      	mov	r4, r2
 8008458:	461a      	mov	r2, r3
 800845a:	4b09      	ldr	r3, [pc, #36]	@ (8008480 <__assert_func+0x2c>)
 800845c:	4605      	mov	r5, r0
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	68d8      	ldr	r0, [r3, #12]
 8008462:	b14c      	cbz	r4, 8008478 <__assert_func+0x24>
 8008464:	4b07      	ldr	r3, [pc, #28]	@ (8008484 <__assert_func+0x30>)
 8008466:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800846a:	9100      	str	r1, [sp, #0]
 800846c:	462b      	mov	r3, r5
 800846e:	4906      	ldr	r1, [pc, #24]	@ (8008488 <__assert_func+0x34>)
 8008470:	f000 f870 	bl	8008554 <fiprintf>
 8008474:	f000 f904 	bl	8008680 <abort>
 8008478:	4b04      	ldr	r3, [pc, #16]	@ (800848c <__assert_func+0x38>)
 800847a:	461c      	mov	r4, r3
 800847c:	e7f3      	b.n	8008466 <__assert_func+0x12>
 800847e:	bf00      	nop
 8008480:	20000018 	.word	0x20000018
 8008484:	08008ac7 	.word	0x08008ac7
 8008488:	08008ad4 	.word	0x08008ad4
 800848c:	08008b02 	.word	0x08008b02

08008490 <_calloc_r>:
 8008490:	b570      	push	{r4, r5, r6, lr}
 8008492:	fba1 5402 	umull	r5, r4, r1, r2
 8008496:	b934      	cbnz	r4, 80084a6 <_calloc_r+0x16>
 8008498:	4629      	mov	r1, r5
 800849a:	f7fe ffd7 	bl	800744c <_malloc_r>
 800849e:	4606      	mov	r6, r0
 80084a0:	b928      	cbnz	r0, 80084ae <_calloc_r+0x1e>
 80084a2:	4630      	mov	r0, r6
 80084a4:	bd70      	pop	{r4, r5, r6, pc}
 80084a6:	220c      	movs	r2, #12
 80084a8:	2600      	movs	r6, #0
 80084aa:	6002      	str	r2, [r0, #0]
 80084ac:	e7f9      	b.n	80084a2 <_calloc_r+0x12>
 80084ae:	462a      	mov	r2, r5
 80084b0:	4621      	mov	r1, r4
 80084b2:	f7fe f85e 	bl	8006572 <memset>
 80084b6:	e7f4      	b.n	80084a2 <_calloc_r+0x12>

080084b8 <__ascii_mbtowc>:
 80084b8:	b082      	sub	sp, #8
 80084ba:	b901      	cbnz	r1, 80084be <__ascii_mbtowc+0x6>
 80084bc:	a901      	add	r1, sp, #4
 80084be:	b142      	cbz	r2, 80084d2 <__ascii_mbtowc+0x1a>
 80084c0:	b14b      	cbz	r3, 80084d6 <__ascii_mbtowc+0x1e>
 80084c2:	7813      	ldrb	r3, [r2, #0]
 80084c4:	600b      	str	r3, [r1, #0]
 80084c6:	7812      	ldrb	r2, [r2, #0]
 80084c8:	1e10      	subs	r0, r2, #0
 80084ca:	bf18      	it	ne
 80084cc:	2001      	movne	r0, #1
 80084ce:	b002      	add	sp, #8
 80084d0:	4770      	bx	lr
 80084d2:	4610      	mov	r0, r2
 80084d4:	e7fb      	b.n	80084ce <__ascii_mbtowc+0x16>
 80084d6:	f06f 0001 	mvn.w	r0, #1
 80084da:	e7f8      	b.n	80084ce <__ascii_mbtowc+0x16>

080084dc <_realloc_r>:
 80084dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80084e0:	4607      	mov	r7, r0
 80084e2:	4614      	mov	r4, r2
 80084e4:	460d      	mov	r5, r1
 80084e6:	b921      	cbnz	r1, 80084f2 <_realloc_r+0x16>
 80084e8:	4611      	mov	r1, r2
 80084ea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80084ee:	f7fe bfad 	b.w	800744c <_malloc_r>
 80084f2:	b92a      	cbnz	r2, 8008500 <_realloc_r+0x24>
 80084f4:	f7fe ff38 	bl	8007368 <_free_r>
 80084f8:	4625      	mov	r5, r4
 80084fa:	4628      	mov	r0, r5
 80084fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008500:	f000 f8c5 	bl	800868e <_malloc_usable_size_r>
 8008504:	4284      	cmp	r4, r0
 8008506:	4606      	mov	r6, r0
 8008508:	d802      	bhi.n	8008510 <_realloc_r+0x34>
 800850a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800850e:	d8f4      	bhi.n	80084fa <_realloc_r+0x1e>
 8008510:	4621      	mov	r1, r4
 8008512:	4638      	mov	r0, r7
 8008514:	f7fe ff9a 	bl	800744c <_malloc_r>
 8008518:	4680      	mov	r8, r0
 800851a:	b908      	cbnz	r0, 8008520 <_realloc_r+0x44>
 800851c:	4645      	mov	r5, r8
 800851e:	e7ec      	b.n	80084fa <_realloc_r+0x1e>
 8008520:	42b4      	cmp	r4, r6
 8008522:	4622      	mov	r2, r4
 8008524:	4629      	mov	r1, r5
 8008526:	bf28      	it	cs
 8008528:	4632      	movcs	r2, r6
 800852a:	f7fe f8b0 	bl	800668e <memcpy>
 800852e:	4629      	mov	r1, r5
 8008530:	4638      	mov	r0, r7
 8008532:	f7fe ff19 	bl	8007368 <_free_r>
 8008536:	e7f1      	b.n	800851c <_realloc_r+0x40>

08008538 <__ascii_wctomb>:
 8008538:	4603      	mov	r3, r0
 800853a:	4608      	mov	r0, r1
 800853c:	b141      	cbz	r1, 8008550 <__ascii_wctomb+0x18>
 800853e:	2aff      	cmp	r2, #255	@ 0xff
 8008540:	d904      	bls.n	800854c <__ascii_wctomb+0x14>
 8008542:	228a      	movs	r2, #138	@ 0x8a
 8008544:	f04f 30ff 	mov.w	r0, #4294967295
 8008548:	601a      	str	r2, [r3, #0]
 800854a:	4770      	bx	lr
 800854c:	2001      	movs	r0, #1
 800854e:	700a      	strb	r2, [r1, #0]
 8008550:	4770      	bx	lr
	...

08008554 <fiprintf>:
 8008554:	b40e      	push	{r1, r2, r3}
 8008556:	b503      	push	{r0, r1, lr}
 8008558:	4601      	mov	r1, r0
 800855a:	ab03      	add	r3, sp, #12
 800855c:	4805      	ldr	r0, [pc, #20]	@ (8008574 <fiprintf+0x20>)
 800855e:	f853 2b04 	ldr.w	r2, [r3], #4
 8008562:	6800      	ldr	r0, [r0, #0]
 8008564:	9301      	str	r3, [sp, #4]
 8008566:	f7ff fcf7 	bl	8007f58 <_vfiprintf_r>
 800856a:	b002      	add	sp, #8
 800856c:	f85d eb04 	ldr.w	lr, [sp], #4
 8008570:	b003      	add	sp, #12
 8008572:	4770      	bx	lr
 8008574:	20000018 	.word	0x20000018

08008578 <__swhatbuf_r>:
 8008578:	b570      	push	{r4, r5, r6, lr}
 800857a:	460c      	mov	r4, r1
 800857c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008580:	4615      	mov	r5, r2
 8008582:	2900      	cmp	r1, #0
 8008584:	461e      	mov	r6, r3
 8008586:	b096      	sub	sp, #88	@ 0x58
 8008588:	da0c      	bge.n	80085a4 <__swhatbuf_r+0x2c>
 800858a:	89a3      	ldrh	r3, [r4, #12]
 800858c:	2100      	movs	r1, #0
 800858e:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8008592:	bf14      	ite	ne
 8008594:	2340      	movne	r3, #64	@ 0x40
 8008596:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800859a:	2000      	movs	r0, #0
 800859c:	6031      	str	r1, [r6, #0]
 800859e:	602b      	str	r3, [r5, #0]
 80085a0:	b016      	add	sp, #88	@ 0x58
 80085a2:	bd70      	pop	{r4, r5, r6, pc}
 80085a4:	466a      	mov	r2, sp
 80085a6:	f000 f849 	bl	800863c <_fstat_r>
 80085aa:	2800      	cmp	r0, #0
 80085ac:	dbed      	blt.n	800858a <__swhatbuf_r+0x12>
 80085ae:	9901      	ldr	r1, [sp, #4]
 80085b0:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80085b4:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80085b8:	4259      	negs	r1, r3
 80085ba:	4159      	adcs	r1, r3
 80085bc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80085c0:	e7eb      	b.n	800859a <__swhatbuf_r+0x22>

080085c2 <__smakebuf_r>:
 80085c2:	898b      	ldrh	r3, [r1, #12]
 80085c4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80085c6:	079d      	lsls	r5, r3, #30
 80085c8:	4606      	mov	r6, r0
 80085ca:	460c      	mov	r4, r1
 80085cc:	d507      	bpl.n	80085de <__smakebuf_r+0x1c>
 80085ce:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80085d2:	6023      	str	r3, [r4, #0]
 80085d4:	6123      	str	r3, [r4, #16]
 80085d6:	2301      	movs	r3, #1
 80085d8:	6163      	str	r3, [r4, #20]
 80085da:	b003      	add	sp, #12
 80085dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80085de:	466a      	mov	r2, sp
 80085e0:	ab01      	add	r3, sp, #4
 80085e2:	f7ff ffc9 	bl	8008578 <__swhatbuf_r>
 80085e6:	9f00      	ldr	r7, [sp, #0]
 80085e8:	4605      	mov	r5, r0
 80085ea:	4639      	mov	r1, r7
 80085ec:	4630      	mov	r0, r6
 80085ee:	f7fe ff2d 	bl	800744c <_malloc_r>
 80085f2:	b948      	cbnz	r0, 8008608 <__smakebuf_r+0x46>
 80085f4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80085f8:	059a      	lsls	r2, r3, #22
 80085fa:	d4ee      	bmi.n	80085da <__smakebuf_r+0x18>
 80085fc:	f023 0303 	bic.w	r3, r3, #3
 8008600:	f043 0302 	orr.w	r3, r3, #2
 8008604:	81a3      	strh	r3, [r4, #12]
 8008606:	e7e2      	b.n	80085ce <__smakebuf_r+0xc>
 8008608:	89a3      	ldrh	r3, [r4, #12]
 800860a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800860e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008612:	81a3      	strh	r3, [r4, #12]
 8008614:	9b01      	ldr	r3, [sp, #4]
 8008616:	6020      	str	r0, [r4, #0]
 8008618:	b15b      	cbz	r3, 8008632 <__smakebuf_r+0x70>
 800861a:	4630      	mov	r0, r6
 800861c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008620:	f000 f81e 	bl	8008660 <_isatty_r>
 8008624:	b128      	cbz	r0, 8008632 <__smakebuf_r+0x70>
 8008626:	89a3      	ldrh	r3, [r4, #12]
 8008628:	f023 0303 	bic.w	r3, r3, #3
 800862c:	f043 0301 	orr.w	r3, r3, #1
 8008630:	81a3      	strh	r3, [r4, #12]
 8008632:	89a3      	ldrh	r3, [r4, #12]
 8008634:	431d      	orrs	r5, r3
 8008636:	81a5      	strh	r5, [r4, #12]
 8008638:	e7cf      	b.n	80085da <__smakebuf_r+0x18>
	...

0800863c <_fstat_r>:
 800863c:	b538      	push	{r3, r4, r5, lr}
 800863e:	2300      	movs	r3, #0
 8008640:	4d06      	ldr	r5, [pc, #24]	@ (800865c <_fstat_r+0x20>)
 8008642:	4604      	mov	r4, r0
 8008644:	4608      	mov	r0, r1
 8008646:	4611      	mov	r1, r2
 8008648:	602b      	str	r3, [r5, #0]
 800864a:	f7f9 fc5b 	bl	8001f04 <_fstat>
 800864e:	1c43      	adds	r3, r0, #1
 8008650:	d102      	bne.n	8008658 <_fstat_r+0x1c>
 8008652:	682b      	ldr	r3, [r5, #0]
 8008654:	b103      	cbz	r3, 8008658 <_fstat_r+0x1c>
 8008656:	6023      	str	r3, [r4, #0]
 8008658:	bd38      	pop	{r3, r4, r5, pc}
 800865a:	bf00      	nop
 800865c:	20000490 	.word	0x20000490

08008660 <_isatty_r>:
 8008660:	b538      	push	{r3, r4, r5, lr}
 8008662:	2300      	movs	r3, #0
 8008664:	4d05      	ldr	r5, [pc, #20]	@ (800867c <_isatty_r+0x1c>)
 8008666:	4604      	mov	r4, r0
 8008668:	4608      	mov	r0, r1
 800866a:	602b      	str	r3, [r5, #0]
 800866c:	f7f9 fc59 	bl	8001f22 <_isatty>
 8008670:	1c43      	adds	r3, r0, #1
 8008672:	d102      	bne.n	800867a <_isatty_r+0x1a>
 8008674:	682b      	ldr	r3, [r5, #0]
 8008676:	b103      	cbz	r3, 800867a <_isatty_r+0x1a>
 8008678:	6023      	str	r3, [r4, #0]
 800867a:	bd38      	pop	{r3, r4, r5, pc}
 800867c:	20000490 	.word	0x20000490

08008680 <abort>:
 8008680:	2006      	movs	r0, #6
 8008682:	b508      	push	{r3, lr}
 8008684:	f000 f834 	bl	80086f0 <raise>
 8008688:	2001      	movs	r0, #1
 800868a:	f7f9 fbec 	bl	8001e66 <_exit>

0800868e <_malloc_usable_size_r>:
 800868e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008692:	1f18      	subs	r0, r3, #4
 8008694:	2b00      	cmp	r3, #0
 8008696:	bfbc      	itt	lt
 8008698:	580b      	ldrlt	r3, [r1, r0]
 800869a:	18c0      	addlt	r0, r0, r3
 800869c:	4770      	bx	lr

0800869e <_raise_r>:
 800869e:	291f      	cmp	r1, #31
 80086a0:	b538      	push	{r3, r4, r5, lr}
 80086a2:	4605      	mov	r5, r0
 80086a4:	460c      	mov	r4, r1
 80086a6:	d904      	bls.n	80086b2 <_raise_r+0x14>
 80086a8:	2316      	movs	r3, #22
 80086aa:	6003      	str	r3, [r0, #0]
 80086ac:	f04f 30ff 	mov.w	r0, #4294967295
 80086b0:	bd38      	pop	{r3, r4, r5, pc}
 80086b2:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80086b4:	b112      	cbz	r2, 80086bc <_raise_r+0x1e>
 80086b6:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80086ba:	b94b      	cbnz	r3, 80086d0 <_raise_r+0x32>
 80086bc:	4628      	mov	r0, r5
 80086be:	f000 f831 	bl	8008724 <_getpid_r>
 80086c2:	4622      	mov	r2, r4
 80086c4:	4601      	mov	r1, r0
 80086c6:	4628      	mov	r0, r5
 80086c8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80086cc:	f000 b818 	b.w	8008700 <_kill_r>
 80086d0:	2b01      	cmp	r3, #1
 80086d2:	d00a      	beq.n	80086ea <_raise_r+0x4c>
 80086d4:	1c59      	adds	r1, r3, #1
 80086d6:	d103      	bne.n	80086e0 <_raise_r+0x42>
 80086d8:	2316      	movs	r3, #22
 80086da:	6003      	str	r3, [r0, #0]
 80086dc:	2001      	movs	r0, #1
 80086de:	e7e7      	b.n	80086b0 <_raise_r+0x12>
 80086e0:	2100      	movs	r1, #0
 80086e2:	4620      	mov	r0, r4
 80086e4:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80086e8:	4798      	blx	r3
 80086ea:	2000      	movs	r0, #0
 80086ec:	e7e0      	b.n	80086b0 <_raise_r+0x12>
	...

080086f0 <raise>:
 80086f0:	4b02      	ldr	r3, [pc, #8]	@ (80086fc <raise+0xc>)
 80086f2:	4601      	mov	r1, r0
 80086f4:	6818      	ldr	r0, [r3, #0]
 80086f6:	f7ff bfd2 	b.w	800869e <_raise_r>
 80086fa:	bf00      	nop
 80086fc:	20000018 	.word	0x20000018

08008700 <_kill_r>:
 8008700:	b538      	push	{r3, r4, r5, lr}
 8008702:	2300      	movs	r3, #0
 8008704:	4d06      	ldr	r5, [pc, #24]	@ (8008720 <_kill_r+0x20>)
 8008706:	4604      	mov	r4, r0
 8008708:	4608      	mov	r0, r1
 800870a:	4611      	mov	r1, r2
 800870c:	602b      	str	r3, [r5, #0]
 800870e:	f7f9 fb9a 	bl	8001e46 <_kill>
 8008712:	1c43      	adds	r3, r0, #1
 8008714:	d102      	bne.n	800871c <_kill_r+0x1c>
 8008716:	682b      	ldr	r3, [r5, #0]
 8008718:	b103      	cbz	r3, 800871c <_kill_r+0x1c>
 800871a:	6023      	str	r3, [r4, #0]
 800871c:	bd38      	pop	{r3, r4, r5, pc}
 800871e:	bf00      	nop
 8008720:	20000490 	.word	0x20000490

08008724 <_getpid_r>:
 8008724:	f7f9 bb88 	b.w	8001e38 <_getpid>

08008728 <fminf>:
 8008728:	b538      	push	{r3, r4, r5, lr}
 800872a:	4604      	mov	r4, r0
 800872c:	460d      	mov	r5, r1
 800872e:	f000 f811 	bl	8008754 <__fpclassifyf>
 8008732:	b910      	cbnz	r0, 800873a <fminf+0x12>
 8008734:	462c      	mov	r4, r5
 8008736:	4620      	mov	r0, r4
 8008738:	bd38      	pop	{r3, r4, r5, pc}
 800873a:	4628      	mov	r0, r5
 800873c:	f000 f80a 	bl	8008754 <__fpclassifyf>
 8008740:	2800      	cmp	r0, #0
 8008742:	d0f8      	beq.n	8008736 <fminf+0xe>
 8008744:	4629      	mov	r1, r5
 8008746:	4620      	mov	r0, r4
 8008748:	f7f8 fc9a 	bl	8001080 <__aeabi_fcmplt>
 800874c:	2800      	cmp	r0, #0
 800874e:	d0f1      	beq.n	8008734 <fminf+0xc>
 8008750:	e7f1      	b.n	8008736 <fminf+0xe>
	...

08008754 <__fpclassifyf>:
 8008754:	f030 4000 	bics.w	r0, r0, #2147483648	@ 0x80000000
 8008758:	d00d      	beq.n	8008776 <__fpclassifyf+0x22>
 800875a:	f5a0 0300 	sub.w	r3, r0, #8388608	@ 0x800000
 800875e:	f1b3 4ffe 	cmp.w	r3, #2130706432	@ 0x7f000000
 8008762:	d30a      	bcc.n	800877a <__fpclassifyf+0x26>
 8008764:	4b07      	ldr	r3, [pc, #28]	@ (8008784 <__fpclassifyf+0x30>)
 8008766:	1e42      	subs	r2, r0, #1
 8008768:	429a      	cmp	r2, r3
 800876a:	d908      	bls.n	800877e <__fpclassifyf+0x2a>
 800876c:	f1a0 43ff 	sub.w	r3, r0, #2139095040	@ 0x7f800000
 8008770:	4258      	negs	r0, r3
 8008772:	4158      	adcs	r0, r3
 8008774:	4770      	bx	lr
 8008776:	2002      	movs	r0, #2
 8008778:	4770      	bx	lr
 800877a:	2004      	movs	r0, #4
 800877c:	4770      	bx	lr
 800877e:	2003      	movs	r0, #3
 8008780:	4770      	bx	lr
 8008782:	bf00      	nop
 8008784:	007ffffe 	.word	0x007ffffe

08008788 <_init>:
 8008788:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800878a:	bf00      	nop
 800878c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800878e:	bc08      	pop	{r3}
 8008790:	469e      	mov	lr, r3
 8008792:	4770      	bx	lr

08008794 <_fini>:
 8008794:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008796:	bf00      	nop
 8008798:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800879a:	bc08      	pop	{r3}
 800879c:	469e      	mov	lr, r3
 800879e:	4770      	bx	lr
