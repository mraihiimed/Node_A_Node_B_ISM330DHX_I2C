
can_103rb2_node_A.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000086a0  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000564  080087b0  080087b0  000097b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008d14  08008d14  0000a1d4  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08008d14  08008d14  00009d14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008d1c  08008d1c  0000a1d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008d1c  08008d1c  00009d1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008d20  08008d20  00009d20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  08008d24  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002cc  200001d4  08008ef8  0000a1d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200004a0  08008ef8  0000a4a0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000a1d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   000141b2  00000000  00000000  0000a1fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000033ae  00000000  00000000  0001e3af  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001200  00000000  00000000  00021760  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000de2  00000000  00000000  00022960  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00005158  00000000  00000000  00023742  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001852a  00000000  00000000  0002889a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00091eb8  00000000  00000000  00040dc4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d2c7c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005d08  00000000  00000000  000d2cc0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004a  00000000  00000000  000d89c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001d4 	.word	0x200001d4
 800012c:	00000000 	.word	0x00000000
 8000130:	08008798 	.word	0x08008798

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001d8 	.word	0x200001d8
 800014c:	08008798 	.word	0x08008798

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	@ 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2f>:
 8000a88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a8c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000a90:	bf24      	itt	cs
 8000a92:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000a96:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000a9a:	d90d      	bls.n	8000ab8 <__aeabi_d2f+0x30>
 8000a9c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000aa0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000aa4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aa8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000aac:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ab0:	bf08      	it	eq
 8000ab2:	f020 0001 	biceq.w	r0, r0, #1
 8000ab6:	4770      	bx	lr
 8000ab8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000abc:	d121      	bne.n	8000b02 <__aeabi_d2f+0x7a>
 8000abe:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000ac2:	bfbc      	itt	lt
 8000ac4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000ac8:	4770      	bxlt	lr
 8000aca:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000ace:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ad2:	f1c2 0218 	rsb	r2, r2, #24
 8000ad6:	f1c2 0c20 	rsb	ip, r2, #32
 8000ada:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ade:	fa20 f002 	lsr.w	r0, r0, r2
 8000ae2:	bf18      	it	ne
 8000ae4:	f040 0001 	orrne.w	r0, r0, #1
 8000ae8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aec:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000af0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000af4:	ea40 000c 	orr.w	r0, r0, ip
 8000af8:	fa23 f302 	lsr.w	r3, r3, r2
 8000afc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b00:	e7cc      	b.n	8000a9c <__aeabi_d2f+0x14>
 8000b02:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b06:	d107      	bne.n	8000b18 <__aeabi_d2f+0x90>
 8000b08:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b0c:	bf1e      	ittt	ne
 8000b0e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b12:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b16:	4770      	bxne	lr
 8000b18:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b1c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b20:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop

08000b28 <__aeabi_frsub>:
 8000b28:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000b2c:	e002      	b.n	8000b34 <__addsf3>
 8000b2e:	bf00      	nop

08000b30 <__aeabi_fsub>:
 8000b30:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000b34 <__addsf3>:
 8000b34:	0042      	lsls	r2, r0, #1
 8000b36:	bf1f      	itttt	ne
 8000b38:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b3c:	ea92 0f03 	teqne	r2, r3
 8000b40:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b44:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b48:	d06a      	beq.n	8000c20 <__addsf3+0xec>
 8000b4a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b4e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b52:	bfc1      	itttt	gt
 8000b54:	18d2      	addgt	r2, r2, r3
 8000b56:	4041      	eorgt	r1, r0
 8000b58:	4048      	eorgt	r0, r1
 8000b5a:	4041      	eorgt	r1, r0
 8000b5c:	bfb8      	it	lt
 8000b5e:	425b      	neglt	r3, r3
 8000b60:	2b19      	cmp	r3, #25
 8000b62:	bf88      	it	hi
 8000b64:	4770      	bxhi	lr
 8000b66:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000b6a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b6e:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000b72:	bf18      	it	ne
 8000b74:	4240      	negne	r0, r0
 8000b76:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7a:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000b7e:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000b82:	bf18      	it	ne
 8000b84:	4249      	negne	r1, r1
 8000b86:	ea92 0f03 	teq	r2, r3
 8000b8a:	d03f      	beq.n	8000c0c <__addsf3+0xd8>
 8000b8c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b90:	fa41 fc03 	asr.w	ip, r1, r3
 8000b94:	eb10 000c 	adds.w	r0, r0, ip
 8000b98:	f1c3 0320 	rsb	r3, r3, #32
 8000b9c:	fa01 f103 	lsl.w	r1, r1, r3
 8000ba0:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000ba4:	d502      	bpl.n	8000bac <__addsf3+0x78>
 8000ba6:	4249      	negs	r1, r1
 8000ba8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bac:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000bb0:	d313      	bcc.n	8000bda <__addsf3+0xa6>
 8000bb2:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000bb6:	d306      	bcc.n	8000bc6 <__addsf3+0x92>
 8000bb8:	0840      	lsrs	r0, r0, #1
 8000bba:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bbe:	f102 0201 	add.w	r2, r2, #1
 8000bc2:	2afe      	cmp	r2, #254	@ 0xfe
 8000bc4:	d251      	bcs.n	8000c6a <__addsf3+0x136>
 8000bc6:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000bca:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bce:	bf08      	it	eq
 8000bd0:	f020 0001 	biceq.w	r0, r0, #1
 8000bd4:	ea40 0003 	orr.w	r0, r0, r3
 8000bd8:	4770      	bx	lr
 8000bda:	0049      	lsls	r1, r1, #1
 8000bdc:	eb40 0000 	adc.w	r0, r0, r0
 8000be0:	3a01      	subs	r2, #1
 8000be2:	bf28      	it	cs
 8000be4:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000be8:	d2ed      	bcs.n	8000bc6 <__addsf3+0x92>
 8000bea:	fab0 fc80 	clz	ip, r0
 8000bee:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bf2:	ebb2 020c 	subs.w	r2, r2, ip
 8000bf6:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bfa:	bfaa      	itet	ge
 8000bfc:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c00:	4252      	neglt	r2, r2
 8000c02:	4318      	orrge	r0, r3
 8000c04:	bfbc      	itt	lt
 8000c06:	40d0      	lsrlt	r0, r2
 8000c08:	4318      	orrlt	r0, r3
 8000c0a:	4770      	bx	lr
 8000c0c:	f092 0f00 	teq	r2, #0
 8000c10:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000c14:	bf06      	itte	eq
 8000c16:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000c1a:	3201      	addeq	r2, #1
 8000c1c:	3b01      	subne	r3, #1
 8000c1e:	e7b5      	b.n	8000b8c <__addsf3+0x58>
 8000c20:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c24:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c28:	bf18      	it	ne
 8000c2a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c2e:	d021      	beq.n	8000c74 <__addsf3+0x140>
 8000c30:	ea92 0f03 	teq	r2, r3
 8000c34:	d004      	beq.n	8000c40 <__addsf3+0x10c>
 8000c36:	f092 0f00 	teq	r2, #0
 8000c3a:	bf08      	it	eq
 8000c3c:	4608      	moveq	r0, r1
 8000c3e:	4770      	bx	lr
 8000c40:	ea90 0f01 	teq	r0, r1
 8000c44:	bf1c      	itt	ne
 8000c46:	2000      	movne	r0, #0
 8000c48:	4770      	bxne	lr
 8000c4a:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000c4e:	d104      	bne.n	8000c5a <__addsf3+0x126>
 8000c50:	0040      	lsls	r0, r0, #1
 8000c52:	bf28      	it	cs
 8000c54:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000c58:	4770      	bx	lr
 8000c5a:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000c5e:	bf3c      	itt	cc
 8000c60:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000c64:	4770      	bxcc	lr
 8000c66:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000c6a:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000c6e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c72:	4770      	bx	lr
 8000c74:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c78:	bf16      	itet	ne
 8000c7a:	4608      	movne	r0, r1
 8000c7c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c80:	4601      	movne	r1, r0
 8000c82:	0242      	lsls	r2, r0, #9
 8000c84:	bf06      	itte	eq
 8000c86:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c8a:	ea90 0f01 	teqeq	r0, r1
 8000c8e:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000c92:	4770      	bx	lr

08000c94 <__aeabi_ui2f>:
 8000c94:	f04f 0300 	mov.w	r3, #0
 8000c98:	e004      	b.n	8000ca4 <__aeabi_i2f+0x8>
 8000c9a:	bf00      	nop

08000c9c <__aeabi_i2f>:
 8000c9c:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000ca0:	bf48      	it	mi
 8000ca2:	4240      	negmi	r0, r0
 8000ca4:	ea5f 0c00 	movs.w	ip, r0
 8000ca8:	bf08      	it	eq
 8000caa:	4770      	bxeq	lr
 8000cac:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000cb0:	4601      	mov	r1, r0
 8000cb2:	f04f 0000 	mov.w	r0, #0
 8000cb6:	e01c      	b.n	8000cf2 <__aeabi_l2f+0x2a>

08000cb8 <__aeabi_ul2f>:
 8000cb8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cbc:	bf08      	it	eq
 8000cbe:	4770      	bxeq	lr
 8000cc0:	f04f 0300 	mov.w	r3, #0
 8000cc4:	e00a      	b.n	8000cdc <__aeabi_l2f+0x14>
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_l2f>:
 8000cc8:	ea50 0201 	orrs.w	r2, r0, r1
 8000ccc:	bf08      	it	eq
 8000cce:	4770      	bxeq	lr
 8000cd0:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000cd4:	d502      	bpl.n	8000cdc <__aeabi_l2f+0x14>
 8000cd6:	4240      	negs	r0, r0
 8000cd8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cdc:	ea5f 0c01 	movs.w	ip, r1
 8000ce0:	bf02      	ittt	eq
 8000ce2:	4684      	moveq	ip, r0
 8000ce4:	4601      	moveq	r1, r0
 8000ce6:	2000      	moveq	r0, #0
 8000ce8:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000cec:	bf08      	it	eq
 8000cee:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000cf2:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000cf6:	fabc f28c 	clz	r2, ip
 8000cfa:	3a08      	subs	r2, #8
 8000cfc:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d00:	db10      	blt.n	8000d24 <__aeabi_l2f+0x5c>
 8000d02:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d06:	4463      	add	r3, ip
 8000d08:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d0c:	f1c2 0220 	rsb	r2, r2, #32
 8000d10:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000d14:	fa20 f202 	lsr.w	r2, r0, r2
 8000d18:	eb43 0002 	adc.w	r0, r3, r2
 8000d1c:	bf08      	it	eq
 8000d1e:	f020 0001 	biceq.w	r0, r0, #1
 8000d22:	4770      	bx	lr
 8000d24:	f102 0220 	add.w	r2, r2, #32
 8000d28:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d2c:	f1c2 0220 	rsb	r2, r2, #32
 8000d30:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d34:	fa21 f202 	lsr.w	r2, r1, r2
 8000d38:	eb43 0002 	adc.w	r0, r3, r2
 8000d3c:	bf08      	it	eq
 8000d3e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d42:	4770      	bx	lr

08000d44 <__aeabi_fmul>:
 8000d44:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000d48:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d4c:	bf1e      	ittt	ne
 8000d4e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d52:	ea92 0f0c 	teqne	r2, ip
 8000d56:	ea93 0f0c 	teqne	r3, ip
 8000d5a:	d06f      	beq.n	8000e3c <__aeabi_fmul+0xf8>
 8000d5c:	441a      	add	r2, r3
 8000d5e:	ea80 0c01 	eor.w	ip, r0, r1
 8000d62:	0240      	lsls	r0, r0, #9
 8000d64:	bf18      	it	ne
 8000d66:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d6a:	d01e      	beq.n	8000daa <__aeabi_fmul+0x66>
 8000d6c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000d70:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d74:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d78:	fba0 3101 	umull	r3, r1, r0, r1
 8000d7c:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000d80:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000d84:	bf3e      	ittt	cc
 8000d86:	0049      	lslcc	r1, r1, #1
 8000d88:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d8c:	005b      	lslcc	r3, r3, #1
 8000d8e:	ea40 0001 	orr.w	r0, r0, r1
 8000d92:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000d96:	2afd      	cmp	r2, #253	@ 0xfd
 8000d98:	d81d      	bhi.n	8000dd6 <__aeabi_fmul+0x92>
 8000d9a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000d9e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000da2:	bf08      	it	eq
 8000da4:	f020 0001 	biceq.w	r0, r0, #1
 8000da8:	4770      	bx	lr
 8000daa:	f090 0f00 	teq	r0, #0
 8000dae:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000db2:	bf08      	it	eq
 8000db4:	0249      	lsleq	r1, r1, #9
 8000db6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dba:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dbe:	3a7f      	subs	r2, #127	@ 0x7f
 8000dc0:	bfc2      	ittt	gt
 8000dc2:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000dc6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dca:	4770      	bxgt	lr
 8000dcc:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000dd0:	f04f 0300 	mov.w	r3, #0
 8000dd4:	3a01      	subs	r2, #1
 8000dd6:	dc5d      	bgt.n	8000e94 <__aeabi_fmul+0x150>
 8000dd8:	f112 0f19 	cmn.w	r2, #25
 8000ddc:	bfdc      	itt	le
 8000dde:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000de2:	4770      	bxle	lr
 8000de4:	f1c2 0200 	rsb	r2, r2, #0
 8000de8:	0041      	lsls	r1, r0, #1
 8000dea:	fa21 f102 	lsr.w	r1, r1, r2
 8000dee:	f1c2 0220 	rsb	r2, r2, #32
 8000df2:	fa00 fc02 	lsl.w	ip, r0, r2
 8000df6:	ea5f 0031 	movs.w	r0, r1, rrx
 8000dfa:	f140 0000 	adc.w	r0, r0, #0
 8000dfe:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e02:	bf08      	it	eq
 8000e04:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e08:	4770      	bx	lr
 8000e0a:	f092 0f00 	teq	r2, #0
 8000e0e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000e12:	bf02      	ittt	eq
 8000e14:	0040      	lsleq	r0, r0, #1
 8000e16:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000e1a:	3a01      	subeq	r2, #1
 8000e1c:	d0f9      	beq.n	8000e12 <__aeabi_fmul+0xce>
 8000e1e:	ea40 000c 	orr.w	r0, r0, ip
 8000e22:	f093 0f00 	teq	r3, #0
 8000e26:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000e2a:	bf02      	ittt	eq
 8000e2c:	0049      	lsleq	r1, r1, #1
 8000e2e:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000e32:	3b01      	subeq	r3, #1
 8000e34:	d0f9      	beq.n	8000e2a <__aeabi_fmul+0xe6>
 8000e36:	ea41 010c 	orr.w	r1, r1, ip
 8000e3a:	e78f      	b.n	8000d5c <__aeabi_fmul+0x18>
 8000e3c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e40:	ea92 0f0c 	teq	r2, ip
 8000e44:	bf18      	it	ne
 8000e46:	ea93 0f0c 	teqne	r3, ip
 8000e4a:	d00a      	beq.n	8000e62 <__aeabi_fmul+0x11e>
 8000e4c:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000e50:	bf18      	it	ne
 8000e52:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000e56:	d1d8      	bne.n	8000e0a <__aeabi_fmul+0xc6>
 8000e58:	ea80 0001 	eor.w	r0, r0, r1
 8000e5c:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000e60:	4770      	bx	lr
 8000e62:	f090 0f00 	teq	r0, #0
 8000e66:	bf17      	itett	ne
 8000e68:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000e6c:	4608      	moveq	r0, r1
 8000e6e:	f091 0f00 	teqne	r1, #0
 8000e72:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000e76:	d014      	beq.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e78:	ea92 0f0c 	teq	r2, ip
 8000e7c:	d101      	bne.n	8000e82 <__aeabi_fmul+0x13e>
 8000e7e:	0242      	lsls	r2, r0, #9
 8000e80:	d10f      	bne.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e82:	ea93 0f0c 	teq	r3, ip
 8000e86:	d103      	bne.n	8000e90 <__aeabi_fmul+0x14c>
 8000e88:	024b      	lsls	r3, r1, #9
 8000e8a:	bf18      	it	ne
 8000e8c:	4608      	movne	r0, r1
 8000e8e:	d108      	bne.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e90:	ea80 0001 	eor.w	r0, r0, r1
 8000e94:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000e98:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000e9c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ea0:	4770      	bx	lr
 8000ea2:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ea6:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000eaa:	4770      	bx	lr

08000eac <__aeabi_fdiv>:
 8000eac:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000eb0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000eb4:	bf1e      	ittt	ne
 8000eb6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000eba:	ea92 0f0c 	teqne	r2, ip
 8000ebe:	ea93 0f0c 	teqne	r3, ip
 8000ec2:	d069      	beq.n	8000f98 <__aeabi_fdiv+0xec>
 8000ec4:	eba2 0203 	sub.w	r2, r2, r3
 8000ec8:	ea80 0c01 	eor.w	ip, r0, r1
 8000ecc:	0249      	lsls	r1, r1, #9
 8000ece:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000ed2:	d037      	beq.n	8000f44 <__aeabi_fdiv+0x98>
 8000ed4:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000ed8:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000edc:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ee0:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000ee4:	428b      	cmp	r3, r1
 8000ee6:	bf38      	it	cc
 8000ee8:	005b      	lslcc	r3, r3, #1
 8000eea:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000eee:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000ef2:	428b      	cmp	r3, r1
 8000ef4:	bf24      	itt	cs
 8000ef6:	1a5b      	subcs	r3, r3, r1
 8000ef8:	ea40 000c 	orrcs.w	r0, r0, ip
 8000efc:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f00:	bf24      	itt	cs
 8000f02:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f06:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f0a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f0e:	bf24      	itt	cs
 8000f10:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f14:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f18:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f1c:	bf24      	itt	cs
 8000f1e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f22:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f26:	011b      	lsls	r3, r3, #4
 8000f28:	bf18      	it	ne
 8000f2a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f2e:	d1e0      	bne.n	8000ef2 <__aeabi_fdiv+0x46>
 8000f30:	2afd      	cmp	r2, #253	@ 0xfd
 8000f32:	f63f af50 	bhi.w	8000dd6 <__aeabi_fmul+0x92>
 8000f36:	428b      	cmp	r3, r1
 8000f38:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f3c:	bf08      	it	eq
 8000f3e:	f020 0001 	biceq.w	r0, r0, #1
 8000f42:	4770      	bx	lr
 8000f44:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000f48:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f4c:	327f      	adds	r2, #127	@ 0x7f
 8000f4e:	bfc2      	ittt	gt
 8000f50:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000f54:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f58:	4770      	bxgt	lr
 8000f5a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000f5e:	f04f 0300 	mov.w	r3, #0
 8000f62:	3a01      	subs	r2, #1
 8000f64:	e737      	b.n	8000dd6 <__aeabi_fmul+0x92>
 8000f66:	f092 0f00 	teq	r2, #0
 8000f6a:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000f6e:	bf02      	ittt	eq
 8000f70:	0040      	lsleq	r0, r0, #1
 8000f72:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000f76:	3a01      	subeq	r2, #1
 8000f78:	d0f9      	beq.n	8000f6e <__aeabi_fdiv+0xc2>
 8000f7a:	ea40 000c 	orr.w	r0, r0, ip
 8000f7e:	f093 0f00 	teq	r3, #0
 8000f82:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000f86:	bf02      	ittt	eq
 8000f88:	0049      	lsleq	r1, r1, #1
 8000f8a:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000f8e:	3b01      	subeq	r3, #1
 8000f90:	d0f9      	beq.n	8000f86 <__aeabi_fdiv+0xda>
 8000f92:	ea41 010c 	orr.w	r1, r1, ip
 8000f96:	e795      	b.n	8000ec4 <__aeabi_fdiv+0x18>
 8000f98:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f9c:	ea92 0f0c 	teq	r2, ip
 8000fa0:	d108      	bne.n	8000fb4 <__aeabi_fdiv+0x108>
 8000fa2:	0242      	lsls	r2, r0, #9
 8000fa4:	f47f af7d 	bne.w	8000ea2 <__aeabi_fmul+0x15e>
 8000fa8:	ea93 0f0c 	teq	r3, ip
 8000fac:	f47f af70 	bne.w	8000e90 <__aeabi_fmul+0x14c>
 8000fb0:	4608      	mov	r0, r1
 8000fb2:	e776      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fb4:	ea93 0f0c 	teq	r3, ip
 8000fb8:	d104      	bne.n	8000fc4 <__aeabi_fdiv+0x118>
 8000fba:	024b      	lsls	r3, r1, #9
 8000fbc:	f43f af4c 	beq.w	8000e58 <__aeabi_fmul+0x114>
 8000fc0:	4608      	mov	r0, r1
 8000fc2:	e76e      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fc4:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000fc8:	bf18      	it	ne
 8000fca:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000fce:	d1ca      	bne.n	8000f66 <__aeabi_fdiv+0xba>
 8000fd0:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8000fd4:	f47f af5c 	bne.w	8000e90 <__aeabi_fmul+0x14c>
 8000fd8:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000fdc:	f47f af3c 	bne.w	8000e58 <__aeabi_fmul+0x114>
 8000fe0:	e75f      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fe2:	bf00      	nop

08000fe4 <__gesf2>:
 8000fe4:	f04f 3cff 	mov.w	ip, #4294967295
 8000fe8:	e006      	b.n	8000ff8 <__cmpsf2+0x4>
 8000fea:	bf00      	nop

08000fec <__lesf2>:
 8000fec:	f04f 0c01 	mov.w	ip, #1
 8000ff0:	e002      	b.n	8000ff8 <__cmpsf2+0x4>
 8000ff2:	bf00      	nop

08000ff4 <__cmpsf2>:
 8000ff4:	f04f 0c01 	mov.w	ip, #1
 8000ff8:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000ffc:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001000:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001004:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001008:	bf18      	it	ne
 800100a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800100e:	d011      	beq.n	8001034 <__cmpsf2+0x40>
 8001010:	b001      	add	sp, #4
 8001012:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001016:	bf18      	it	ne
 8001018:	ea90 0f01 	teqne	r0, r1
 800101c:	bf58      	it	pl
 800101e:	ebb2 0003 	subspl.w	r0, r2, r3
 8001022:	bf88      	it	hi
 8001024:	17c8      	asrhi	r0, r1, #31
 8001026:	bf38      	it	cc
 8001028:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800102c:	bf18      	it	ne
 800102e:	f040 0001 	orrne.w	r0, r0, #1
 8001032:	4770      	bx	lr
 8001034:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001038:	d102      	bne.n	8001040 <__cmpsf2+0x4c>
 800103a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800103e:	d105      	bne.n	800104c <__cmpsf2+0x58>
 8001040:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001044:	d1e4      	bne.n	8001010 <__cmpsf2+0x1c>
 8001046:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800104a:	d0e1      	beq.n	8001010 <__cmpsf2+0x1c>
 800104c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001050:	4770      	bx	lr
 8001052:	bf00      	nop

08001054 <__aeabi_cfrcmple>:
 8001054:	4684      	mov	ip, r0
 8001056:	4608      	mov	r0, r1
 8001058:	4661      	mov	r1, ip
 800105a:	e7ff      	b.n	800105c <__aeabi_cfcmpeq>

0800105c <__aeabi_cfcmpeq>:
 800105c:	b50f      	push	{r0, r1, r2, r3, lr}
 800105e:	f7ff ffc9 	bl	8000ff4 <__cmpsf2>
 8001062:	2800      	cmp	r0, #0
 8001064:	bf48      	it	mi
 8001066:	f110 0f00 	cmnmi.w	r0, #0
 800106a:	bd0f      	pop	{r0, r1, r2, r3, pc}

0800106c <__aeabi_fcmpeq>:
 800106c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001070:	f7ff fff4 	bl	800105c <__aeabi_cfcmpeq>
 8001074:	bf0c      	ite	eq
 8001076:	2001      	moveq	r0, #1
 8001078:	2000      	movne	r0, #0
 800107a:	f85d fb08 	ldr.w	pc, [sp], #8
 800107e:	bf00      	nop

08001080 <__aeabi_fcmplt>:
 8001080:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001084:	f7ff ffea 	bl	800105c <__aeabi_cfcmpeq>
 8001088:	bf34      	ite	cc
 800108a:	2001      	movcc	r0, #1
 800108c:	2000      	movcs	r0, #0
 800108e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001092:	bf00      	nop

08001094 <__aeabi_fcmple>:
 8001094:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001098:	f7ff ffe0 	bl	800105c <__aeabi_cfcmpeq>
 800109c:	bf94      	ite	ls
 800109e:	2001      	movls	r0, #1
 80010a0:	2000      	movhi	r0, #0
 80010a2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010a6:	bf00      	nop

080010a8 <__aeabi_fcmpge>:
 80010a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010ac:	f7ff ffd2 	bl	8001054 <__aeabi_cfrcmple>
 80010b0:	bf94      	ite	ls
 80010b2:	2001      	movls	r0, #1
 80010b4:	2000      	movhi	r0, #0
 80010b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ba:	bf00      	nop

080010bc <__aeabi_fcmpgt>:
 80010bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010c0:	f7ff ffc8 	bl	8001054 <__aeabi_cfrcmple>
 80010c4:	bf34      	ite	cc
 80010c6:	2001      	movcc	r0, #1
 80010c8:	2000      	movcs	r0, #0
 80010ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ce:	bf00      	nop

080010d0 <__aeabi_f2uiz>:
 80010d0:	0042      	lsls	r2, r0, #1
 80010d2:	d20e      	bcs.n	80010f2 <__aeabi_f2uiz+0x22>
 80010d4:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 80010d8:	d30b      	bcc.n	80010f2 <__aeabi_f2uiz+0x22>
 80010da:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 80010de:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80010e2:	d409      	bmi.n	80010f8 <__aeabi_f2uiz+0x28>
 80010e4:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80010e8:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80010ec:	fa23 f002 	lsr.w	r0, r3, r2
 80010f0:	4770      	bx	lr
 80010f2:	f04f 0000 	mov.w	r0, #0
 80010f6:	4770      	bx	lr
 80010f8:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 80010fc:	d101      	bne.n	8001102 <__aeabi_f2uiz+0x32>
 80010fe:	0242      	lsls	r2, r0, #9
 8001100:	d102      	bne.n	8001108 <__aeabi_f2uiz+0x38>
 8001102:	f04f 30ff 	mov.w	r0, #4294967295
 8001106:	4770      	bx	lr
 8001108:	f04f 0000 	mov.w	r0, #0
 800110c:	4770      	bx	lr
 800110e:	bf00      	nop

08001110 <MX_CAN_Init>:
  * @retval None
  */
extern CAN_HandleTypeDef hcan;

void MX_CAN_Init(void)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	b08a      	sub	sp, #40	@ 0x28
 8001114:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 8001116:	4b24      	ldr	r3, [pc, #144]	@ (80011a8 <MX_CAN_Init+0x98>)
 8001118:	4a24      	ldr	r2, [pc, #144]	@ (80011ac <MX_CAN_Init+0x9c>)
 800111a:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 9;
 800111c:	4b22      	ldr	r3, [pc, #136]	@ (80011a8 <MX_CAN_Init+0x98>)
 800111e:	2209      	movs	r2, #9
 8001120:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8001122:	4b21      	ldr	r3, [pc, #132]	@ (80011a8 <MX_CAN_Init+0x98>)
 8001124:	2200      	movs	r2, #0
 8001126:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001128:	4b1f      	ldr	r3, [pc, #124]	@ (80011a8 <MX_CAN_Init+0x98>)
 800112a:	2200      	movs	r2, #0
 800112c:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_5TQ;
 800112e:	4b1e      	ldr	r3, [pc, #120]	@ (80011a8 <MX_CAN_Init+0x98>)
 8001130:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8001134:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_2TQ;
 8001136:	4b1c      	ldr	r3, [pc, #112]	@ (80011a8 <MX_CAN_Init+0x98>)
 8001138:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800113c:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 800113e:	4b1a      	ldr	r3, [pc, #104]	@ (80011a8 <MX_CAN_Init+0x98>)
 8001140:	2200      	movs	r2, #0
 8001142:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8001144:	4b18      	ldr	r3, [pc, #96]	@ (80011a8 <MX_CAN_Init+0x98>)
 8001146:	2200      	movs	r2, #0
 8001148:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 800114a:	4b17      	ldr	r3, [pc, #92]	@ (80011a8 <MX_CAN_Init+0x98>)
 800114c:	2200      	movs	r2, #0
 800114e:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8001150:	4b15      	ldr	r3, [pc, #84]	@ (80011a8 <MX_CAN_Init+0x98>)
 8001152:	2200      	movs	r2, #0
 8001154:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8001156:	4b14      	ldr	r3, [pc, #80]	@ (80011a8 <MX_CAN_Init+0x98>)
 8001158:	2200      	movs	r2, #0
 800115a:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 800115c:	4b12      	ldr	r3, [pc, #72]	@ (80011a8 <MX_CAN_Init+0x98>)
 800115e:	2200      	movs	r2, #0
 8001160:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8001162:	4811      	ldr	r0, [pc, #68]	@ (80011a8 <MX_CAN_Init+0x98>)
 8001164:	f001 f9ee 	bl	8002544 <HAL_CAN_Init>
 8001168:	4603      	mov	r3, r0
 800116a:	2b00      	cmp	r3, #0
 800116c:	d001      	beq.n	8001172 <MX_CAN_Init+0x62>
  {
    Error_Handler();
 800116e:	f000 fc0b 	bl	8001988 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */
  CAN_FilterTypeDef filterConfig;
  filterConfig.FilterActivation = ENABLE;
 8001172:	2301      	movs	r3, #1
 8001174:	623b      	str	r3, [r7, #32]
  filterConfig.FilterBank = 0;
 8001176:	2300      	movs	r3, #0
 8001178:	617b      	str	r3, [r7, #20]
  filterConfig.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 800117a:	2300      	movs	r3, #0
 800117c:	613b      	str	r3, [r7, #16]
  filterConfig.FilterIdHigh = 0x0000;
 800117e:	2300      	movs	r3, #0
 8001180:	603b      	str	r3, [r7, #0]
  filterConfig.FilterIdLow = 0x0000;
 8001182:	2300      	movs	r3, #0
 8001184:	607b      	str	r3, [r7, #4]
  filterConfig.FilterMaskIdHigh = 0x0000;
 8001186:	2300      	movs	r3, #0
 8001188:	60bb      	str	r3, [r7, #8]
  filterConfig.FilterMaskIdLow = 0x0000;
 800118a:	2300      	movs	r3, #0
 800118c:	60fb      	str	r3, [r7, #12]
  filterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 800118e:	2300      	movs	r3, #0
 8001190:	61bb      	str	r3, [r7, #24]
  filterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8001192:	2301      	movs	r3, #1
 8001194:	61fb      	str	r3, [r7, #28]

  HAL_CAN_ConfigFilter(&hcan, &filterConfig);
 8001196:	463b      	mov	r3, r7
 8001198:	4619      	mov	r1, r3
 800119a:	4803      	ldr	r0, [pc, #12]	@ (80011a8 <MX_CAN_Init+0x98>)
 800119c:	f001 facd 	bl	800273a <HAL_CAN_ConfigFilter>

  /* USER CODE END CAN_Init 2 */

}
 80011a0:	bf00      	nop
 80011a2:	3728      	adds	r7, #40	@ 0x28
 80011a4:	46bd      	mov	sp, r7
 80011a6:	bd80      	pop	{r7, pc}
 80011a8:	20000230 	.word	0x20000230
 80011ac:	40006400 	.word	0x40006400

080011b0 <HAL_CAN_RxFifo0MsgPendingCallback>:
#include <string.h>

extern CAN_HandleTypeDef hcan;

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b08c      	sub	sp, #48	@ 0x30
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	6078      	str	r0, [r7, #4]
    CAN_RxHeaderTypeDef RxHeader;
    uint8_t RxData[8];

    HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, RxData);
 80011b8:	f107 030c 	add.w	r3, r7, #12
 80011bc:	f107 0214 	add.w	r2, r7, #20
 80011c0:	2100      	movs	r1, #0
 80011c2:	6878      	ldr	r0, [r7, #4]
 80011c4:	f001 fc95 	bl	8002af2 <HAL_CAN_GetRxMessage>

    handleCANRxMessage(RxHeader.StdId, RxData, RxHeader.DLC);
 80011c8:	697b      	ldr	r3, [r7, #20]
 80011ca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80011cc:	b2d2      	uxtb	r2, r2
 80011ce:	f107 010c 	add.w	r1, r7, #12
 80011d2:	4618      	mov	r0, r3
 80011d4:	f000 ffc0 	bl	8002158 <handleCANRxMessage>

    HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);  // Blink LED when message received
 80011d8:	2120      	movs	r1, #32
 80011da:	4803      	ldr	r0, [pc, #12]	@ (80011e8 <HAL_CAN_RxFifo0MsgPendingCallback+0x38>)
 80011dc:	f002 fab3 	bl	8003746 <HAL_GPIO_TogglePin>
}
 80011e0:	bf00      	nop
 80011e2:	3730      	adds	r7, #48	@ 0x30
 80011e4:	46bd      	mov	sp, r7
 80011e6:	bd80      	pop	{r7, pc}
 80011e8:	40010800 	.word	0x40010800

080011ec <sendMotionStatusToNodeA>:
void sendMotionStatusToNodeA(const MotionRaw_T* motion)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b08c      	sub	sp, #48	@ 0x30
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
    CAN_TxHeaderTypeDef txHeader;
    uint8_t txData[8];
    uint32_t txMailbox;

    txHeader.IDE = CAN_ID_STD;
 80011f4:	2300      	movs	r3, #0
 80011f6:	623b      	str	r3, [r7, #32]
    txHeader.RTR = CAN_RTR_DATA;
 80011f8:	2300      	movs	r3, #0
 80011fa:	627b      	str	r3, [r7, #36]	@ 0x24
    txHeader.DLC = 8;
 80011fc:	2308      	movs	r3, #8
 80011fe:	62bb      	str	r3, [r7, #40]	@ 0x28

    // Frame 1: ax, ay, az
    txHeader.StdId = 0x400;
 8001200:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001204:	61bb      	str	r3, [r7, #24]
    memcpy(txData, &motion->ax, 6); // ax, ay, az
 8001206:	6879      	ldr	r1, [r7, #4]
 8001208:	f107 0310 	add.w	r3, r7, #16
 800120c:	2206      	movs	r2, #6
 800120e:	4618      	mov	r0, r3
 8001210:	f005 fa45 	bl	800669e <memcpy>
    txData[6] = 0xAA; // marker or padding
 8001214:	23aa      	movs	r3, #170	@ 0xaa
 8001216:	75bb      	strb	r3, [r7, #22]
    txData[7] = 0x55;
 8001218:	2355      	movs	r3, #85	@ 0x55
 800121a:	75fb      	strb	r3, [r7, #23]
    HAL_CAN_AddTxMessage(&hcan, &txHeader, txData, &txMailbox);
 800121c:	f107 030c 	add.w	r3, r7, #12
 8001220:	f107 0210 	add.w	r2, r7, #16
 8001224:	f107 0118 	add.w	r1, r7, #24
 8001228:	480f      	ldr	r0, [pc, #60]	@ (8001268 <sendMotionStatusToNodeA+0x7c>)
 800122a:	f001 fb93 	bl	8002954 <HAL_CAN_AddTxMessage>

    // Frame 2: gx, gy, gz
    txHeader.StdId = 0x401;
 800122e:	f240 4301 	movw	r3, #1025	@ 0x401
 8001232:	61bb      	str	r3, [r7, #24]
    memcpy(txData, &motion->gx, 6); // gx, gy, gz
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	1d99      	adds	r1, r3, #6
 8001238:	f107 0310 	add.w	r3, r7, #16
 800123c:	2206      	movs	r2, #6
 800123e:	4618      	mov	r0, r3
 8001240:	f005 fa2d 	bl	800669e <memcpy>
    txData[6] = 0xCC;
 8001244:	23cc      	movs	r3, #204	@ 0xcc
 8001246:	75bb      	strb	r3, [r7, #22]
    txData[7] = 0x33;
 8001248:	2333      	movs	r3, #51	@ 0x33
 800124a:	75fb      	strb	r3, [r7, #23]
    HAL_CAN_AddTxMessage(&hcan, &txHeader, txData, &txMailbox);
 800124c:	f107 030c 	add.w	r3, r7, #12
 8001250:	f107 0210 	add.w	r2, r7, #16
 8001254:	f107 0118 	add.w	r1, r7, #24
 8001258:	4803      	ldr	r0, [pc, #12]	@ (8001268 <sendMotionStatusToNodeA+0x7c>)
 800125a:	f001 fb7b 	bl	8002954 <HAL_CAN_AddTxMessage>
}
 800125e:	bf00      	nop
 8001260:	3730      	adds	r7, #48	@ 0x30
 8001262:	46bd      	mov	sp, r7
 8001264:	bd80      	pop	{r7, pc}
 8001266:	bf00      	nop
 8001268:	20000230 	.word	0x20000230

0800126c <microDelay>:
#include "main.h"
#include "dht.h"
#include <stdio.h>

void microDelay (uint16_t delay)
{
 800126c:	b480      	push	{r7}
 800126e:	b083      	sub	sp, #12
 8001270:	af00      	add	r7, sp, #0
 8001272:	4603      	mov	r3, r0
 8001274:	80fb      	strh	r3, [r7, #6]
  __HAL_TIM_SET_COUNTER(&htim1, 0);
 8001276:	4b08      	ldr	r3, [pc, #32]	@ (8001298 <microDelay+0x2c>)
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	2200      	movs	r2, #0
 800127c:	625a      	str	r2, [r3, #36]	@ 0x24
  while (__HAL_TIM_GET_COUNTER(&htim1) < delay);
 800127e:	bf00      	nop
 8001280:	4b05      	ldr	r3, [pc, #20]	@ (8001298 <microDelay+0x2c>)
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001286:	88fb      	ldrh	r3, [r7, #6]
 8001288:	429a      	cmp	r2, r3
 800128a:	d3f9      	bcc.n	8001280 <microDelay+0x14>
}
 800128c:	bf00      	nop
 800128e:	bf00      	nop
 8001290:	370c      	adds	r7, #12
 8001292:	46bd      	mov	sp, r7
 8001294:	bc80      	pop	{r7}
 8001296:	4770      	bx	lr
 8001298:	200002ac 	.word	0x200002ac

0800129c <DHT11_Read>:

uint8_t DHT11_Read (void)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	b082      	sub	sp, #8
 80012a0:	af00      	add	r7, sp, #0
  uint8_t a,b;

  for (a=0;a<8;a++)
 80012a2:	2300      	movs	r3, #0
 80012a4:	71fb      	strb	r3, [r7, #7]
 80012a6:	e066      	b.n	8001376 <DHT11_Read+0xda>
  {
    pMillis = HAL_GetTick();
 80012a8:	f001 f91e 	bl	80024e8 <HAL_GetTick>
 80012ac:	4603      	mov	r3, r0
 80012ae:	4a36      	ldr	r2, [pc, #216]	@ (8001388 <DHT11_Read+0xec>)
 80012b0:	6013      	str	r3, [r2, #0]
    cMillis = HAL_GetTick();
 80012b2:	f001 f919 	bl	80024e8 <HAL_GetTick>
 80012b6:	4603      	mov	r3, r0
 80012b8:	4a34      	ldr	r2, [pc, #208]	@ (800138c <DHT11_Read+0xf0>)
 80012ba:	6013      	str	r3, [r2, #0]
    while (!(HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)) && pMillis + 2 > cMillis)
 80012bc:	e004      	b.n	80012c8 <DHT11_Read+0x2c>
    {  // wait for the pin to go high
      cMillis = HAL_GetTick();
 80012be:	f001 f913 	bl	80024e8 <HAL_GetTick>
 80012c2:	4603      	mov	r3, r0
 80012c4:	4a31      	ldr	r2, [pc, #196]	@ (800138c <DHT11_Read+0xf0>)
 80012c6:	6013      	str	r3, [r2, #0]
    while (!(HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)) && pMillis + 2 > cMillis)
 80012c8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80012cc:	4830      	ldr	r0, [pc, #192]	@ (8001390 <DHT11_Read+0xf4>)
 80012ce:	f002 fa0b 	bl	80036e8 <HAL_GPIO_ReadPin>
 80012d2:	4603      	mov	r3, r0
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d106      	bne.n	80012e6 <DHT11_Read+0x4a>
 80012d8:	4b2b      	ldr	r3, [pc, #172]	@ (8001388 <DHT11_Read+0xec>)
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	1c9a      	adds	r2, r3, #2
 80012de:	4b2b      	ldr	r3, [pc, #172]	@ (800138c <DHT11_Read+0xf0>)
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	429a      	cmp	r2, r3
 80012e4:	d8eb      	bhi.n	80012be <DHT11_Read+0x22>
    }
    microDelay (40);   // wait for 40 us
 80012e6:	2028      	movs	r0, #40	@ 0x28
 80012e8:	f7ff ffc0 	bl	800126c <microDelay>
    if (!(HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)))   // if the pin is low
 80012ec:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80012f0:	4827      	ldr	r0, [pc, #156]	@ (8001390 <DHT11_Read+0xf4>)
 80012f2:	f002 f9f9 	bl	80036e8 <HAL_GPIO_ReadPin>
 80012f6:	4603      	mov	r3, r0
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d10e      	bne.n	800131a <DHT11_Read+0x7e>
      b&= ~(1<<(7-a));
 80012fc:	79fb      	ldrb	r3, [r7, #7]
 80012fe:	f1c3 0307 	rsb	r3, r3, #7
 8001302:	2201      	movs	r2, #1
 8001304:	fa02 f303 	lsl.w	r3, r2, r3
 8001308:	b25b      	sxtb	r3, r3
 800130a:	43db      	mvns	r3, r3
 800130c:	b25a      	sxtb	r2, r3
 800130e:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001312:	4013      	ands	r3, r2
 8001314:	b25b      	sxtb	r3, r3
 8001316:	71bb      	strb	r3, [r7, #6]
 8001318:	e00b      	b.n	8001332 <DHT11_Read+0x96>
    else
      b|= (1<<(7-a));
 800131a:	79fb      	ldrb	r3, [r7, #7]
 800131c:	f1c3 0307 	rsb	r3, r3, #7
 8001320:	2201      	movs	r2, #1
 8001322:	fa02 f303 	lsl.w	r3, r2, r3
 8001326:	b25a      	sxtb	r2, r3
 8001328:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800132c:	4313      	orrs	r3, r2
 800132e:	b25b      	sxtb	r3, r3
 8001330:	71bb      	strb	r3, [r7, #6]
    pMillis = HAL_GetTick();
 8001332:	f001 f8d9 	bl	80024e8 <HAL_GetTick>
 8001336:	4603      	mov	r3, r0
 8001338:	4a13      	ldr	r2, [pc, #76]	@ (8001388 <DHT11_Read+0xec>)
 800133a:	6013      	str	r3, [r2, #0]
    cMillis = HAL_GetTick();
 800133c:	f001 f8d4 	bl	80024e8 <HAL_GetTick>
 8001340:	4603      	mov	r3, r0
 8001342:	4a12      	ldr	r2, [pc, #72]	@ (800138c <DHT11_Read+0xf0>)
 8001344:	6013      	str	r3, [r2, #0]
    while ((HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)) && pMillis + 2 > cMillis)
 8001346:	e004      	b.n	8001352 <DHT11_Read+0xb6>
    {  // wait for the pin to go low
      cMillis = HAL_GetTick();
 8001348:	f001 f8ce 	bl	80024e8 <HAL_GetTick>
 800134c:	4603      	mov	r3, r0
 800134e:	4a0f      	ldr	r2, [pc, #60]	@ (800138c <DHT11_Read+0xf0>)
 8001350:	6013      	str	r3, [r2, #0]
    while ((HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)) && pMillis + 2 > cMillis)
 8001352:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001356:	480e      	ldr	r0, [pc, #56]	@ (8001390 <DHT11_Read+0xf4>)
 8001358:	f002 f9c6 	bl	80036e8 <HAL_GPIO_ReadPin>
 800135c:	4603      	mov	r3, r0
 800135e:	2b00      	cmp	r3, #0
 8001360:	d006      	beq.n	8001370 <DHT11_Read+0xd4>
 8001362:	4b09      	ldr	r3, [pc, #36]	@ (8001388 <DHT11_Read+0xec>)
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	1c9a      	adds	r2, r3, #2
 8001368:	4b08      	ldr	r3, [pc, #32]	@ (800138c <DHT11_Read+0xf0>)
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	429a      	cmp	r2, r3
 800136e:	d8eb      	bhi.n	8001348 <DHT11_Read+0xac>
  for (a=0;a<8;a++)
 8001370:	79fb      	ldrb	r3, [r7, #7]
 8001372:	3301      	adds	r3, #1
 8001374:	71fb      	strb	r3, [r7, #7]
 8001376:	79fb      	ldrb	r3, [r7, #7]
 8001378:	2b07      	cmp	r3, #7
 800137a:	d995      	bls.n	80012a8 <DHT11_Read+0xc>
    }
  }
  return b;
 800137c:	79bb      	ldrb	r3, [r7, #6]
}
 800137e:	4618      	mov	r0, r3
 8001380:	3708      	adds	r7, #8
 8001382:	46bd      	mov	sp, r7
 8001384:	bd80      	pop	{r7, pc}
 8001386:	bf00      	nop
 8001388:	2000021c 	.word	0x2000021c
 800138c:	20000220 	.word	0x20000220
 8001390:	40010c00 	.word	0x40010c00

08001394 <DHT11_Start>:
uint8_t DHT11_Start (void)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	b086      	sub	sp, #24
 8001398:	af00      	add	r7, sp, #0
  uint8_t Response = 0;
 800139a:	2300      	movs	r3, #0
 800139c:	75fb      	strb	r3, [r7, #23]
  GPIO_InitTypeDef GPIO_InitStructPrivate = {0};
 800139e:	1d3b      	adds	r3, r7, #4
 80013a0:	2200      	movs	r2, #0
 80013a2:	601a      	str	r2, [r3, #0]
 80013a4:	605a      	str	r2, [r3, #4]
 80013a6:	609a      	str	r2, [r3, #8]
 80013a8:	60da      	str	r2, [r3, #12]
  GPIO_InitStructPrivate.Pin = DHT11_PIN;
 80013aa:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80013ae:	607b      	str	r3, [r7, #4]
  GPIO_InitStructPrivate.Mode = GPIO_MODE_OUTPUT_PP;
 80013b0:	2301      	movs	r3, #1
 80013b2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStructPrivate.Speed = GPIO_SPEED_FREQ_LOW;
 80013b4:	2302      	movs	r3, #2
 80013b6:	613b      	str	r3, [r7, #16]
  GPIO_InitStructPrivate.Pull = GPIO_NOPULL;
 80013b8:	2300      	movs	r3, #0
 80013ba:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(DHT11_PORT, &GPIO_InitStructPrivate); // set the pin as output
 80013bc:	1d3b      	adds	r3, r7, #4
 80013be:	4619      	mov	r1, r3
 80013c0:	482c      	ldr	r0, [pc, #176]	@ (8001474 <DHT11_Start+0xe0>)
 80013c2:	f002 f80d 	bl	80033e0 <HAL_GPIO_Init>
  HAL_GPIO_WritePin (DHT11_PORT, DHT11_PIN, 0);   // pull the pin low
 80013c6:	2200      	movs	r2, #0
 80013c8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80013cc:	4829      	ldr	r0, [pc, #164]	@ (8001474 <DHT11_Start+0xe0>)
 80013ce:	f002 f9a2 	bl	8003716 <HAL_GPIO_WritePin>
  HAL_Delay(20);   // wait for 20ms
 80013d2:	2014      	movs	r0, #20
 80013d4:	f001 f892 	bl	80024fc <HAL_Delay>
  HAL_GPIO_WritePin (DHT11_PORT, DHT11_PIN, 1);   // pull the pin high
 80013d8:	2201      	movs	r2, #1
 80013da:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80013de:	4825      	ldr	r0, [pc, #148]	@ (8001474 <DHT11_Start+0xe0>)
 80013e0:	f002 f999 	bl	8003716 <HAL_GPIO_WritePin>
  microDelay (30);   // wait for 30us
 80013e4:	201e      	movs	r0, #30
 80013e6:	f7ff ff41 	bl	800126c <microDelay>
  GPIO_InitStructPrivate.Mode = GPIO_MODE_INPUT;
 80013ea:	2300      	movs	r3, #0
 80013ec:	60bb      	str	r3, [r7, #8]
  GPIO_InitStructPrivate.Pull = GPIO_PULLUP;
 80013ee:	2301      	movs	r3, #1
 80013f0:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(DHT11_PORT, &GPIO_InitStructPrivate); // set the pin as input
 80013f2:	1d3b      	adds	r3, r7, #4
 80013f4:	4619      	mov	r1, r3
 80013f6:	481f      	ldr	r0, [pc, #124]	@ (8001474 <DHT11_Start+0xe0>)
 80013f8:	f001 fff2 	bl	80033e0 <HAL_GPIO_Init>
  microDelay (40);
 80013fc:	2028      	movs	r0, #40	@ 0x28
 80013fe:	f7ff ff35 	bl	800126c <microDelay>
  if (!(HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)))
 8001402:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001406:	481b      	ldr	r0, [pc, #108]	@ (8001474 <DHT11_Start+0xe0>)
 8001408:	f002 f96e 	bl	80036e8 <HAL_GPIO_ReadPin>
 800140c:	4603      	mov	r3, r0
 800140e:	2b00      	cmp	r3, #0
 8001410:	d10c      	bne.n	800142c <DHT11_Start+0x98>
  {
    microDelay (80);
 8001412:	2050      	movs	r0, #80	@ 0x50
 8001414:	f7ff ff2a 	bl	800126c <microDelay>
    if ((HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN))) Response = 1;
 8001418:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800141c:	4815      	ldr	r0, [pc, #84]	@ (8001474 <DHT11_Start+0xe0>)
 800141e:	f002 f963 	bl	80036e8 <HAL_GPIO_ReadPin>
 8001422:	4603      	mov	r3, r0
 8001424:	2b00      	cmp	r3, #0
 8001426:	d001      	beq.n	800142c <DHT11_Start+0x98>
 8001428:	2301      	movs	r3, #1
 800142a:	75fb      	strb	r3, [r7, #23]
  }
  pMillis = HAL_GetTick();
 800142c:	f001 f85c 	bl	80024e8 <HAL_GetTick>
 8001430:	4603      	mov	r3, r0
 8001432:	4a11      	ldr	r2, [pc, #68]	@ (8001478 <DHT11_Start+0xe4>)
 8001434:	6013      	str	r3, [r2, #0]
  cMillis = HAL_GetTick();
 8001436:	f001 f857 	bl	80024e8 <HAL_GetTick>
 800143a:	4603      	mov	r3, r0
 800143c:	4a0f      	ldr	r2, [pc, #60]	@ (800147c <DHT11_Start+0xe8>)
 800143e:	6013      	str	r3, [r2, #0]
  while ((HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)) && pMillis + 2 > cMillis)
 8001440:	e004      	b.n	800144c <DHT11_Start+0xb8>
  {
    cMillis = HAL_GetTick();
 8001442:	f001 f851 	bl	80024e8 <HAL_GetTick>
 8001446:	4603      	mov	r3, r0
 8001448:	4a0c      	ldr	r2, [pc, #48]	@ (800147c <DHT11_Start+0xe8>)
 800144a:	6013      	str	r3, [r2, #0]
  while ((HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)) && pMillis + 2 > cMillis)
 800144c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001450:	4808      	ldr	r0, [pc, #32]	@ (8001474 <DHT11_Start+0xe0>)
 8001452:	f002 f949 	bl	80036e8 <HAL_GPIO_ReadPin>
 8001456:	4603      	mov	r3, r0
 8001458:	2b00      	cmp	r3, #0
 800145a:	d006      	beq.n	800146a <DHT11_Start+0xd6>
 800145c:	4b06      	ldr	r3, [pc, #24]	@ (8001478 <DHT11_Start+0xe4>)
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	1c9a      	adds	r2, r3, #2
 8001462:	4b06      	ldr	r3, [pc, #24]	@ (800147c <DHT11_Start+0xe8>)
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	429a      	cmp	r2, r3
 8001468:	d8eb      	bhi.n	8001442 <DHT11_Start+0xae>
  }
  return Response;
 800146a:	7dfb      	ldrb	r3, [r7, #23]
}
 800146c:	4618      	mov	r0, r3
 800146e:	3718      	adds	r7, #24
 8001470:	46bd      	mov	sp, r7
 8001472:	bd80      	pop	{r7, pc}
 8001474:	40010c00 	.word	0x40010c00
 8001478:	2000021c 	.word	0x2000021c
 800147c:	20000220 	.word	0x20000220

08001480 <MX_GPIO_Init>:
  */

extern UART_HandleTypeDef huart2;

void MX_GPIO_Init(void)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	b088      	sub	sp, #32
 8001484:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001486:	f107 0310 	add.w	r3, r7, #16
 800148a:	2200      	movs	r2, #0
 800148c:	601a      	str	r2, [r3, #0]
 800148e:	605a      	str	r2, [r3, #4]
 8001490:	609a      	str	r2, [r3, #8]
 8001492:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001494:	4b2d      	ldr	r3, [pc, #180]	@ (800154c <MX_GPIO_Init+0xcc>)
 8001496:	699b      	ldr	r3, [r3, #24]
 8001498:	4a2c      	ldr	r2, [pc, #176]	@ (800154c <MX_GPIO_Init+0xcc>)
 800149a:	f043 0320 	orr.w	r3, r3, #32
 800149e:	6193      	str	r3, [r2, #24]
 80014a0:	4b2a      	ldr	r3, [pc, #168]	@ (800154c <MX_GPIO_Init+0xcc>)
 80014a2:	699b      	ldr	r3, [r3, #24]
 80014a4:	f003 0320 	and.w	r3, r3, #32
 80014a8:	60fb      	str	r3, [r7, #12]
 80014aa:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014ac:	4b27      	ldr	r3, [pc, #156]	@ (800154c <MX_GPIO_Init+0xcc>)
 80014ae:	699b      	ldr	r3, [r3, #24]
 80014b0:	4a26      	ldr	r2, [pc, #152]	@ (800154c <MX_GPIO_Init+0xcc>)
 80014b2:	f043 0304 	orr.w	r3, r3, #4
 80014b6:	6193      	str	r3, [r2, #24]
 80014b8:	4b24      	ldr	r3, [pc, #144]	@ (800154c <MX_GPIO_Init+0xcc>)
 80014ba:	699b      	ldr	r3, [r3, #24]
 80014bc:	f003 0304 	and.w	r3, r3, #4
 80014c0:	60bb      	str	r3, [r7, #8]
 80014c2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80014c4:	4b21      	ldr	r3, [pc, #132]	@ (800154c <MX_GPIO_Init+0xcc>)
 80014c6:	699b      	ldr	r3, [r3, #24]
 80014c8:	4a20      	ldr	r2, [pc, #128]	@ (800154c <MX_GPIO_Init+0xcc>)
 80014ca:	f043 0308 	orr.w	r3, r3, #8
 80014ce:	6193      	str	r3, [r2, #24]
 80014d0:	4b1e      	ldr	r3, [pc, #120]	@ (800154c <MX_GPIO_Init+0xcc>)
 80014d2:	699b      	ldr	r3, [r3, #24]
 80014d4:	f003 0308 	and.w	r3, r3, #8
 80014d8:	607b      	str	r3, [r7, #4]
 80014da:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 80014dc:	2200      	movs	r2, #0
 80014de:	2102      	movs	r1, #2
 80014e0:	481b      	ldr	r0, [pc, #108]	@ (8001550 <MX_GPIO_Init+0xd0>)
 80014e2:	f002 f918 	bl	8003716 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
 80014e6:	2200      	movs	r2, #0
 80014e8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80014ec:	4819      	ldr	r0, [pc, #100]	@ (8001554 <MX_GPIO_Init+0xd4>)
 80014ee:	f002 f912 	bl	8003716 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 80014f2:	2302      	movs	r3, #2
 80014f4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014f6:	2301      	movs	r3, #1
 80014f8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014fa:	2300      	movs	r3, #0
 80014fc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014fe:	2302      	movs	r3, #2
 8001500:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001502:	f107 0310 	add.w	r3, r7, #16
 8001506:	4619      	mov	r1, r3
 8001508:	4811      	ldr	r0, [pc, #68]	@ (8001550 <MX_GPIO_Init+0xd0>)
 800150a:	f001 ff69 	bl	80033e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_7;
 800150e:	2390      	movs	r3, #144	@ 0x90
 8001510:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001512:	2300      	movs	r3, #0
 8001514:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001516:	2300      	movs	r3, #0
 8001518:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800151a:	f107 0310 	add.w	r3, r7, #16
 800151e:	4619      	mov	r1, r3
 8001520:	480b      	ldr	r0, [pc, #44]	@ (8001550 <MX_GPIO_Init+0xd0>)
 8001522:	f001 ff5d 	bl	80033e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001526:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800152a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800152c:	2301      	movs	r3, #1
 800152e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001530:	2300      	movs	r3, #0
 8001532:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001534:	2302      	movs	r3, #2
 8001536:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001538:	f107 0310 	add.w	r3, r7, #16
 800153c:	4619      	mov	r1, r3
 800153e:	4805      	ldr	r0, [pc, #20]	@ (8001554 <MX_GPIO_Init+0xd4>)
 8001540:	f001 ff4e 	bl	80033e0 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8001544:	bf00      	nop
 8001546:	3720      	adds	r7, #32
 8001548:	46bd      	mov	sp, r7
 800154a:	bd80      	pop	{r7, pc}
 800154c:	40021000 	.word	0x40021000
 8001550:	40010800 	.word	0x40010800
 8001554:	40010c00 	.word	0x40010c00

08001558 <MX_I2C1_Init>:
  * @retval None
  */

extern I2C_HandleTypeDef hi2c1;
void MX_I2C1_Init(void)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800155c:	4b12      	ldr	r3, [pc, #72]	@ (80015a8 <MX_I2C1_Init+0x50>)
 800155e:	4a13      	ldr	r2, [pc, #76]	@ (80015ac <MX_I2C1_Init+0x54>)
 8001560:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001562:	4b11      	ldr	r3, [pc, #68]	@ (80015a8 <MX_I2C1_Init+0x50>)
 8001564:	4a12      	ldr	r2, [pc, #72]	@ (80015b0 <MX_I2C1_Init+0x58>)
 8001566:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001568:	4b0f      	ldr	r3, [pc, #60]	@ (80015a8 <MX_I2C1_Init+0x50>)
 800156a:	2200      	movs	r2, #0
 800156c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800156e:	4b0e      	ldr	r3, [pc, #56]	@ (80015a8 <MX_I2C1_Init+0x50>)
 8001570:	2200      	movs	r2, #0
 8001572:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001574:	4b0c      	ldr	r3, [pc, #48]	@ (80015a8 <MX_I2C1_Init+0x50>)
 8001576:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800157a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800157c:	4b0a      	ldr	r3, [pc, #40]	@ (80015a8 <MX_I2C1_Init+0x50>)
 800157e:	2200      	movs	r2, #0
 8001580:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001582:	4b09      	ldr	r3, [pc, #36]	@ (80015a8 <MX_I2C1_Init+0x50>)
 8001584:	2200      	movs	r2, #0
 8001586:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001588:	4b07      	ldr	r3, [pc, #28]	@ (80015a8 <MX_I2C1_Init+0x50>)
 800158a:	2200      	movs	r2, #0
 800158c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800158e:	4b06      	ldr	r3, [pc, #24]	@ (80015a8 <MX_I2C1_Init+0x50>)
 8001590:	2200      	movs	r2, #0
 8001592:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001594:	4804      	ldr	r0, [pc, #16]	@ (80015a8 <MX_I2C1_Init+0x50>)
 8001596:	f002 f8ef 	bl	8003778 <HAL_I2C_Init>
 800159a:	4603      	mov	r3, r0
 800159c:	2b00      	cmp	r3, #0
 800159e:	d001      	beq.n	80015a4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80015a0:	f000 f9f2 	bl	8001988 <Error_Handler>
  }
}
 80015a4:	bf00      	nop
 80015a6:	bd80      	pop	{r7, pc}
 80015a8:	20000258 	.word	0x20000258
 80015ac:	40005400 	.word	0x40005400
 80015b0:	000186a0 	.word	0x000186a0

080015b4 <ISM330DHCX_ReadRaw>:

// ---------- Read Accel + Gyro ----------
extern I2C_HandleTypeDef hi2c1; // or whichever I2C instance you're using

void ISM330DHCX_ReadRaw(MotionRaw_T* motion)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b08a      	sub	sp, #40	@ 0x28
 80015b8:	af04      	add	r7, sp, #16
 80015ba:	6078      	str	r0, [r7, #4]
    uint8_t rawData[12]; // 6 bytes accel + 6 bytes gyro

    // Read accelerometer data
    HAL_I2C_Mem_Read(&hi2c1, ISM330_ADDR, ISM330_OUTX_L_A, I2C_MEMADD_SIZE_8BIT, &rawData[0], 6, HAL_MAX_DELAY);
 80015bc:	f04f 33ff 	mov.w	r3, #4294967295
 80015c0:	9302      	str	r3, [sp, #8]
 80015c2:	2306      	movs	r3, #6
 80015c4:	9301      	str	r3, [sp, #4]
 80015c6:	f107 030c 	add.w	r3, r7, #12
 80015ca:	9300      	str	r3, [sp, #0]
 80015cc:	2301      	movs	r3, #1
 80015ce:	2228      	movs	r2, #40	@ 0x28
 80015d0:	21d4      	movs	r1, #212	@ 0xd4
 80015d2:	4829      	ldr	r0, [pc, #164]	@ (8001678 <ISM330DHCX_ReadRaw+0xc4>)
 80015d4:	f002 fb0e 	bl	8003bf4 <HAL_I2C_Mem_Read>

    // Read gyroscope data
    HAL_I2C_Mem_Read(&hi2c1, ISM330_ADDR, ISM330_OUTX_L_G, I2C_MEMADD_SIZE_8BIT, &rawData[6], 6, HAL_MAX_DELAY);
 80015d8:	f04f 33ff 	mov.w	r3, #4294967295
 80015dc:	9302      	str	r3, [sp, #8]
 80015de:	2306      	movs	r3, #6
 80015e0:	9301      	str	r3, [sp, #4]
 80015e2:	f107 030c 	add.w	r3, r7, #12
 80015e6:	3306      	adds	r3, #6
 80015e8:	9300      	str	r3, [sp, #0]
 80015ea:	2301      	movs	r3, #1
 80015ec:	2222      	movs	r2, #34	@ 0x22
 80015ee:	21d4      	movs	r1, #212	@ 0xd4
 80015f0:	4821      	ldr	r0, [pc, #132]	@ (8001678 <ISM330DHCX_ReadRaw+0xc4>)
 80015f2:	f002 faff 	bl	8003bf4 <HAL_I2C_Mem_Read>

    // Convert LSB to int16_t
    motion->ax = (int16_t)(rawData[1] << 8 | rawData[0]);
 80015f6:	7b7b      	ldrb	r3, [r7, #13]
 80015f8:	b21b      	sxth	r3, r3
 80015fa:	021b      	lsls	r3, r3, #8
 80015fc:	b21a      	sxth	r2, r3
 80015fe:	7b3b      	ldrb	r3, [r7, #12]
 8001600:	b21b      	sxth	r3, r3
 8001602:	4313      	orrs	r3, r2
 8001604:	b21a      	sxth	r2, r3
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	801a      	strh	r2, [r3, #0]
    motion->ay = (int16_t)(rawData[3] << 8 | rawData[2]);
 800160a:	7bfb      	ldrb	r3, [r7, #15]
 800160c:	b21b      	sxth	r3, r3
 800160e:	021b      	lsls	r3, r3, #8
 8001610:	b21a      	sxth	r2, r3
 8001612:	7bbb      	ldrb	r3, [r7, #14]
 8001614:	b21b      	sxth	r3, r3
 8001616:	4313      	orrs	r3, r2
 8001618:	b21a      	sxth	r2, r3
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	805a      	strh	r2, [r3, #2]
    motion->az = (int16_t)(rawData[5] << 8 | rawData[4]);
 800161e:	7c7b      	ldrb	r3, [r7, #17]
 8001620:	b21b      	sxth	r3, r3
 8001622:	021b      	lsls	r3, r3, #8
 8001624:	b21a      	sxth	r2, r3
 8001626:	7c3b      	ldrb	r3, [r7, #16]
 8001628:	b21b      	sxth	r3, r3
 800162a:	4313      	orrs	r3, r2
 800162c:	b21a      	sxth	r2, r3
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	809a      	strh	r2, [r3, #4]

    motion->gx = (int16_t)(rawData[7] << 8 | rawData[6]);
 8001632:	7cfb      	ldrb	r3, [r7, #19]
 8001634:	b21b      	sxth	r3, r3
 8001636:	021b      	lsls	r3, r3, #8
 8001638:	b21a      	sxth	r2, r3
 800163a:	7cbb      	ldrb	r3, [r7, #18]
 800163c:	b21b      	sxth	r3, r3
 800163e:	4313      	orrs	r3, r2
 8001640:	b21a      	sxth	r2, r3
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	80da      	strh	r2, [r3, #6]
    motion->gy = (int16_t)(rawData[9] << 8 | rawData[8]);
 8001646:	7d7b      	ldrb	r3, [r7, #21]
 8001648:	b21b      	sxth	r3, r3
 800164a:	021b      	lsls	r3, r3, #8
 800164c:	b21a      	sxth	r2, r3
 800164e:	7d3b      	ldrb	r3, [r7, #20]
 8001650:	b21b      	sxth	r3, r3
 8001652:	4313      	orrs	r3, r2
 8001654:	b21a      	sxth	r2, r3
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	811a      	strh	r2, [r3, #8]
    motion->gz = (int16_t)(rawData[11] << 8 | rawData[10]);
 800165a:	7dfb      	ldrb	r3, [r7, #23]
 800165c:	b21b      	sxth	r3, r3
 800165e:	021b      	lsls	r3, r3, #8
 8001660:	b21a      	sxth	r2, r3
 8001662:	7dbb      	ldrb	r3, [r7, #22]
 8001664:	b21b      	sxth	r3, r3
 8001666:	4313      	orrs	r3, r2
 8001668:	b21a      	sxth	r2, r3
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	815a      	strh	r2, [r3, #10]
}
 800166e:	bf00      	nop
 8001670:	3718      	adds	r7, #24
 8001672:	46bd      	mov	sp, r7
 8001674:	bd80      	pop	{r7, pc}
 8001676:	bf00      	nop
 8001678:	20000258 	.word	0x20000258

0800167c <ISM330_I2C_Read>:
// ---------- I2C Read/Write ----------
uint8_t ISM330_I2C_Read(uint8_t reg)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	b088      	sub	sp, #32
 8001680:	af04      	add	r7, sp, #16
 8001682:	4603      	mov	r3, r0
 8001684:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    HAL_I2C_Mem_Read(&hi2c1, ISM330_ADDR, reg, I2C_MEMADD_SIZE_8BIT, &value, 1, HAL_MAX_DELAY);
 8001686:	79fb      	ldrb	r3, [r7, #7]
 8001688:	b29a      	uxth	r2, r3
 800168a:	f04f 33ff 	mov.w	r3, #4294967295
 800168e:	9302      	str	r3, [sp, #8]
 8001690:	2301      	movs	r3, #1
 8001692:	9301      	str	r3, [sp, #4]
 8001694:	f107 030f 	add.w	r3, r7, #15
 8001698:	9300      	str	r3, [sp, #0]
 800169a:	2301      	movs	r3, #1
 800169c:	21d4      	movs	r1, #212	@ 0xd4
 800169e:	4804      	ldr	r0, [pc, #16]	@ (80016b0 <ISM330_I2C_Read+0x34>)
 80016a0:	f002 faa8 	bl	8003bf4 <HAL_I2C_Mem_Read>
    return value;
 80016a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80016a6:	4618      	mov	r0, r3
 80016a8:	3710      	adds	r7, #16
 80016aa:	46bd      	mov	sp, r7
 80016ac:	bd80      	pop	{r7, pc}
 80016ae:	bf00      	nop
 80016b0:	20000258 	.word	0x20000258

080016b4 <ISM330_I2C_Write>:

void ISM330_I2C_Write(uint8_t reg, uint8_t value)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b086      	sub	sp, #24
 80016b8:	af04      	add	r7, sp, #16
 80016ba:	4603      	mov	r3, r0
 80016bc:	460a      	mov	r2, r1
 80016be:	71fb      	strb	r3, [r7, #7]
 80016c0:	4613      	mov	r3, r2
 80016c2:	71bb      	strb	r3, [r7, #6]
    HAL_I2C_Mem_Write(&hi2c1, ISM330_ADDR, reg, I2C_MEMADD_SIZE_8BIT, &value, 1, HAL_MAX_DELAY);
 80016c4:	79fb      	ldrb	r3, [r7, #7]
 80016c6:	b29a      	uxth	r2, r3
 80016c8:	f04f 33ff 	mov.w	r3, #4294967295
 80016cc:	9302      	str	r3, [sp, #8]
 80016ce:	2301      	movs	r3, #1
 80016d0:	9301      	str	r3, [sp, #4]
 80016d2:	1dbb      	adds	r3, r7, #6
 80016d4:	9300      	str	r3, [sp, #0]
 80016d6:	2301      	movs	r3, #1
 80016d8:	21d4      	movs	r1, #212	@ 0xd4
 80016da:	4803      	ldr	r0, [pc, #12]	@ (80016e8 <ISM330_I2C_Write+0x34>)
 80016dc:	f002 f990 	bl	8003a00 <HAL_I2C_Mem_Write>
}
 80016e0:	bf00      	nop
 80016e2:	3708      	adds	r7, #8
 80016e4:	46bd      	mov	sp, r7
 80016e6:	bd80      	pop	{r7, pc}
 80016e8:	20000258 	.word	0x20000258

080016ec <ISM330_Init>:

// ---------- Init Sensor ----------
void ISM330_Init(void)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b082      	sub	sp, #8
 80016f0:	af00      	add	r7, sp, #0
    uint8_t whoami = ISM330_I2C_Read(ISM330_WHO_AM_I);
 80016f2:	200f      	movs	r0, #15
 80016f4:	f7ff ffc2 	bl	800167c <ISM330_I2C_Read>
 80016f8:	4603      	mov	r3, r0
 80016fa:	71fb      	strb	r3, [r7, #7]
    if (whoami != ISM330_WHO_AM_I_VAL) while(1); // error
 80016fc:	79fb      	ldrb	r3, [r7, #7]
 80016fe:	2b6b      	cmp	r3, #107	@ 0x6b
 8001700:	d001      	beq.n	8001706 <ISM330_Init+0x1a>
 8001702:	bf00      	nop
 8001704:	e7fd      	b.n	8001702 <ISM330_Init+0x16>

    // Accelerometer: 104 Hz, ±2g
    ISM330_I2C_Write(ISM330_CTRL1_XL, 0x40);
 8001706:	2140      	movs	r1, #64	@ 0x40
 8001708:	2010      	movs	r0, #16
 800170a:	f7ff ffd3 	bl	80016b4 <ISM330_I2C_Write>

    // Gyroscope: 104 Hz, 250 dps
    ISM330_I2C_Write(ISM330_CTRL2_G, 0x40);
 800170e:	2140      	movs	r1, #64	@ 0x40
 8001710:	2011      	movs	r0, #17
 8001712:	f7ff ffcf 	bl	80016b4 <ISM330_I2C_Write>
}
 8001716:	bf00      	nop
 8001718:	3708      	adds	r7, #8
 800171a:	46bd      	mov	sp, r7
 800171c:	bd80      	pop	{r7, pc}
	...

08001720 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001720:	b5b0      	push	{r4, r5, r7, lr}
 8001722:	b098      	sub	sp, #96	@ 0x60
 8001724:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001726:	f000 fe87 	bl	8002438 <HAL_Init>
  /* USER CODE BEGIN Init */
  MotionRaw_T motion;
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800172a:	f000 fb6d 	bl	8001e08 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  Init_All_Peripherals();
 800172e:	f000 f931 	bl	8001994 <Init_All_Peripherals>
  /* USER CODE BEGIN 2 */
  //Start UART peripheral
  uart_send_string("Start Debug: reached point X\r\n");
 8001732:	4881      	ldr	r0, [pc, #516]	@ (8001938 <main+0x218>)
 8001734:	f000 fbfe 	bl	8001f34 <uart_send_string>
  // Start CAN peripheral
  if (HAL_CAN_Start(&hcan) != HAL_OK)
 8001738:	4880      	ldr	r0, [pc, #512]	@ (800193c <main+0x21c>)
 800173a:	f001 f8c7 	bl	80028cc <HAL_CAN_Start>
 800173e:	4603      	mov	r3, r0
 8001740:	2b00      	cmp	r3, #0
 8001742:	d001      	beq.n	8001748 <main+0x28>
  {
    Error_Handler();
 8001744:	f000 f920 	bl	8001988 <Error_Handler>
  }

  // Enable CAN RX interrupt
  if (HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK)
 8001748:	2102      	movs	r1, #2
 800174a:	487c      	ldr	r0, [pc, #496]	@ (800193c <main+0x21c>)
 800174c:	f001 faf2 	bl	8002d34 <HAL_CAN_ActivateNotification>
 8001750:	4603      	mov	r3, r0
 8001752:	2b00      	cmp	r3, #0
 8001754:	d001      	beq.n	800175a <main+0x3a>
  {
    Error_Handler();
 8001756:	f000 f917 	bl	8001988 <Error_Handler>
  }

  // Configure CAN TX Header
  TxHeader.DLC = 8;
 800175a:	4b79      	ldr	r3, [pc, #484]	@ (8001940 <main+0x220>)
 800175c:	2208      	movs	r2, #8
 800175e:	611a      	str	r2, [r3, #16]
  TxHeader.IDE = CAN_ID_STD;
 8001760:	4b77      	ldr	r3, [pc, #476]	@ (8001940 <main+0x220>)
 8001762:	2200      	movs	r2, #0
 8001764:	609a      	str	r2, [r3, #8]
  TxHeader.RTR = CAN_RTR_DATA;
 8001766:	4b76      	ldr	r3, [pc, #472]	@ (8001940 <main+0x220>)
 8001768:	2200      	movs	r2, #0
 800176a:	60da      	str	r2, [r3, #12]
  TxHeader.StdId = 0x321;
 800176c:	4b74      	ldr	r3, [pc, #464]	@ (8001940 <main+0x220>)
 800176e:	f240 3221 	movw	r2, #801	@ 0x321
 8001772:	601a      	str	r2, [r3, #0]

  // Load sample data
  TxData[0] = 0x11;
 8001774:	4b73      	ldr	r3, [pc, #460]	@ (8001944 <main+0x224>)
 8001776:	2211      	movs	r2, #17
 8001778:	701a      	strb	r2, [r3, #0]
  TxData[1] = 0x22;
 800177a:	4b72      	ldr	r3, [pc, #456]	@ (8001944 <main+0x224>)
 800177c:	2222      	movs	r2, #34	@ 0x22
 800177e:	705a      	strb	r2, [r3, #1]
  TxData[2] = 0x33;
 8001780:	4b70      	ldr	r3, [pc, #448]	@ (8001944 <main+0x224>)
 8001782:	2233      	movs	r2, #51	@ 0x33
 8001784:	709a      	strb	r2, [r3, #2]
  TxData[3] = 0x44;
 8001786:	4b6f      	ldr	r3, [pc, #444]	@ (8001944 <main+0x224>)
 8001788:	2244      	movs	r2, #68	@ 0x44
 800178a:	70da      	strb	r2, [r3, #3]
  TxData[4] = 0x55;
 800178c:	4b6d      	ldr	r3, [pc, #436]	@ (8001944 <main+0x224>)
 800178e:	2255      	movs	r2, #85	@ 0x55
 8001790:	711a      	strb	r2, [r3, #4]
  TxData[5] = 0x66;
 8001792:	4b6c      	ldr	r3, [pc, #432]	@ (8001944 <main+0x224>)
 8001794:	2266      	movs	r2, #102	@ 0x66
 8001796:	715a      	strb	r2, [r3, #5]
  TxData[6] = 0x77;
 8001798:	4b6a      	ldr	r3, [pc, #424]	@ (8001944 <main+0x224>)
 800179a:	2277      	movs	r2, #119	@ 0x77
 800179c:	719a      	strb	r2, [r3, #6]
  TxData[7] = 0x88;
 800179e:	4b69      	ldr	r3, [pc, #420]	@ (8001944 <main+0x224>)
 80017a0:	2288      	movs	r2, #136	@ 0x88
 80017a2:	71da      	strb	r2, [r3, #7]
  // Init I2C1 via CubeMX or manually
  ISM330_Init();
 80017a4:	f7ff ffa2 	bl	80016ec <ISM330_Init>
  HAL_TIM_Base_Start(&htim1);
 80017a8:	4867      	ldr	r0, [pc, #412]	@ (8001948 <main+0x228>)
 80017aa:	f003 fcab 	bl	8005104 <HAL_TIM_Base_Start>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    if(DHT11_Start())
 80017ae:	f7ff fdf1 	bl	8001394 <DHT11_Start>
 80017b2:	4603      	mov	r3, r0
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	f000 80a2 	beq.w	80018fe <main+0x1de>
	     {
	       RHI = DHT11_Read(); // Relative humidity integral
 80017ba:	f7ff fd6f 	bl	800129c <DHT11_Read>
 80017be:	4603      	mov	r3, r0
 80017c0:	461a      	mov	r2, r3
 80017c2:	4b62      	ldr	r3, [pc, #392]	@ (800194c <main+0x22c>)
 80017c4:	701a      	strb	r2, [r3, #0]
	       RHD = DHT11_Read(); // Relative humidity decimal
 80017c6:	f7ff fd69 	bl	800129c <DHT11_Read>
 80017ca:	4603      	mov	r3, r0
 80017cc:	461a      	mov	r2, r3
 80017ce:	4b60      	ldr	r3, [pc, #384]	@ (8001950 <main+0x230>)
 80017d0:	701a      	strb	r2, [r3, #0]
	       TCI = DHT11_Read(); // Celsius integral
 80017d2:	f7ff fd63 	bl	800129c <DHT11_Read>
 80017d6:	4603      	mov	r3, r0
 80017d8:	461a      	mov	r2, r3
 80017da:	4b5e      	ldr	r3, [pc, #376]	@ (8001954 <main+0x234>)
 80017dc:	701a      	strb	r2, [r3, #0]
	       TCD = DHT11_Read(); // Celsius decimal
 80017de:	f7ff fd5d 	bl	800129c <DHT11_Read>
 80017e2:	4603      	mov	r3, r0
 80017e4:	461a      	mov	r2, r3
 80017e6:	4b5c      	ldr	r3, [pc, #368]	@ (8001958 <main+0x238>)
 80017e8:	701a      	strb	r2, [r3, #0]
	       SUM = DHT11_Read(); // Check sum
 80017ea:	f7ff fd57 	bl	800129c <DHT11_Read>
 80017ee:	4603      	mov	r3, r0
 80017f0:	461a      	mov	r2, r3
 80017f2:	4b5a      	ldr	r3, [pc, #360]	@ (800195c <main+0x23c>)
 80017f4:	701a      	strb	r2, [r3, #0]
	       if (RHI + RHD + TCI + TCD == SUM)
 80017f6:	4b55      	ldr	r3, [pc, #340]	@ (800194c <main+0x22c>)
 80017f8:	781b      	ldrb	r3, [r3, #0]
 80017fa:	461a      	mov	r2, r3
 80017fc:	4b54      	ldr	r3, [pc, #336]	@ (8001950 <main+0x230>)
 80017fe:	781b      	ldrb	r3, [r3, #0]
 8001800:	4413      	add	r3, r2
 8001802:	4a54      	ldr	r2, [pc, #336]	@ (8001954 <main+0x234>)
 8001804:	7812      	ldrb	r2, [r2, #0]
 8001806:	4413      	add	r3, r2
 8001808:	4a53      	ldr	r2, [pc, #332]	@ (8001958 <main+0x238>)
 800180a:	7812      	ldrb	r2, [r2, #0]
 800180c:	4413      	add	r3, r2
 800180e:	4a53      	ldr	r2, [pc, #332]	@ (800195c <main+0x23c>)
 8001810:	7812      	ldrb	r2, [r2, #0]
 8001812:	4293      	cmp	r3, r2
 8001814:	d16e      	bne.n	80018f4 <main+0x1d4>
	       {
	         // Can use RHI and TCI for any purposes if whole number only needed
	         tCelsius = (float)TCI + (float)(TCD/10.0);
 8001816:	4b4f      	ldr	r3, [pc, #316]	@ (8001954 <main+0x234>)
 8001818:	781b      	ldrb	r3, [r3, #0]
 800181a:	4618      	mov	r0, r3
 800181c:	f7ff fa3a 	bl	8000c94 <__aeabi_ui2f>
 8001820:	4604      	mov	r4, r0
 8001822:	4b4d      	ldr	r3, [pc, #308]	@ (8001958 <main+0x238>)
 8001824:	781b      	ldrb	r3, [r3, #0]
 8001826:	4618      	mov	r0, r3
 8001828:	f7fe fdec 	bl	8000404 <__aeabi_i2d>
 800182c:	f04f 0200 	mov.w	r2, #0
 8001830:	4b4b      	ldr	r3, [pc, #300]	@ (8001960 <main+0x240>)
 8001832:	f7fe ff7b 	bl	800072c <__aeabi_ddiv>
 8001836:	4602      	mov	r2, r0
 8001838:	460b      	mov	r3, r1
 800183a:	4610      	mov	r0, r2
 800183c:	4619      	mov	r1, r3
 800183e:	f7ff f923 	bl	8000a88 <__aeabi_d2f>
 8001842:	4603      	mov	r3, r0
 8001844:	4619      	mov	r1, r3
 8001846:	4620      	mov	r0, r4
 8001848:	f7ff f974 	bl	8000b34 <__addsf3>
 800184c:	4603      	mov	r3, r0
 800184e:	461a      	mov	r2, r3
 8001850:	4b44      	ldr	r3, [pc, #272]	@ (8001964 <main+0x244>)
 8001852:	601a      	str	r2, [r3, #0]
	         tFahrenheit = tCelsius * 9/5 + 32;
 8001854:	4b43      	ldr	r3, [pc, #268]	@ (8001964 <main+0x244>)
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	4943      	ldr	r1, [pc, #268]	@ (8001968 <main+0x248>)
 800185a:	4618      	mov	r0, r3
 800185c:	f7ff fa72 	bl	8000d44 <__aeabi_fmul>
 8001860:	4603      	mov	r3, r0
 8001862:	4942      	ldr	r1, [pc, #264]	@ (800196c <main+0x24c>)
 8001864:	4618      	mov	r0, r3
 8001866:	f7ff fb21 	bl	8000eac <__aeabi_fdiv>
 800186a:	4603      	mov	r3, r0
 800186c:	f04f 4184 	mov.w	r1, #1107296256	@ 0x42000000
 8001870:	4618      	mov	r0, r3
 8001872:	f7ff f95f 	bl	8000b34 <__addsf3>
 8001876:	4603      	mov	r3, r0
 8001878:	461a      	mov	r2, r3
 800187a:	4b3d      	ldr	r3, [pc, #244]	@ (8001970 <main+0x250>)
 800187c:	601a      	str	r2, [r3, #0]
	         RH = (float)RHI + (float)(RHD/10.0);
 800187e:	4b33      	ldr	r3, [pc, #204]	@ (800194c <main+0x22c>)
 8001880:	781b      	ldrb	r3, [r3, #0]
 8001882:	4618      	mov	r0, r3
 8001884:	f7ff fa06 	bl	8000c94 <__aeabi_ui2f>
 8001888:	4604      	mov	r4, r0
 800188a:	4b31      	ldr	r3, [pc, #196]	@ (8001950 <main+0x230>)
 800188c:	781b      	ldrb	r3, [r3, #0]
 800188e:	4618      	mov	r0, r3
 8001890:	f7fe fdb8 	bl	8000404 <__aeabi_i2d>
 8001894:	f04f 0200 	mov.w	r2, #0
 8001898:	4b31      	ldr	r3, [pc, #196]	@ (8001960 <main+0x240>)
 800189a:	f7fe ff47 	bl	800072c <__aeabi_ddiv>
 800189e:	4602      	mov	r2, r0
 80018a0:	460b      	mov	r3, r1
 80018a2:	4610      	mov	r0, r2
 80018a4:	4619      	mov	r1, r3
 80018a6:	f7ff f8ef 	bl	8000a88 <__aeabi_d2f>
 80018aa:	4603      	mov	r3, r0
 80018ac:	4619      	mov	r1, r3
 80018ae:	4620      	mov	r0, r4
 80018b0:	f7ff f940 	bl	8000b34 <__addsf3>
 80018b4:	4603      	mov	r3, r0
 80018b6:	461a      	mov	r2, r3
 80018b8:	4b2e      	ldr	r3, [pc, #184]	@ (8001974 <main+0x254>)
 80018ba:	601a      	str	r2, [r3, #0]
	         // Can use tCelsius, tFahrenheit and RH for any purposes
	         char msg[64];
	         snprintf(msg,sizeof(msg),"Temp:%.1f°C, Humidity: %.1f%%\r\n",tCelsius,RH);
 80018bc:	4b29      	ldr	r3, [pc, #164]	@ (8001964 <main+0x244>)
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	4618      	mov	r0, r3
 80018c2:	f7fe fdb1 	bl	8000428 <__aeabi_f2d>
 80018c6:	4604      	mov	r4, r0
 80018c8:	460d      	mov	r5, r1
 80018ca:	4b2a      	ldr	r3, [pc, #168]	@ (8001974 <main+0x254>)
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	4618      	mov	r0, r3
 80018d0:	f7fe fdaa 	bl	8000428 <__aeabi_f2d>
 80018d4:	4602      	mov	r2, r0
 80018d6:	460b      	mov	r3, r1
 80018d8:	1d38      	adds	r0, r7, #4
 80018da:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80018de:	e9cd 4500 	strd	r4, r5, [sp]
 80018e2:	4a25      	ldr	r2, [pc, #148]	@ (8001978 <main+0x258>)
 80018e4:	2140      	movs	r1, #64	@ 0x40
 80018e6:	f004 fdd3 	bl	8006490 <sniprintf>
	         uart_send_string(msg);
 80018ea:	1d3b      	adds	r3, r7, #4
 80018ec:	4618      	mov	r0, r3
 80018ee:	f000 fb21 	bl	8001f34 <uart_send_string>
 80018f2:	e002      	b.n	80018fa <main+0x1da>
	       }
	       else
	       {
	    	   uart_send_string("DHT11 checksum error \r\n");
 80018f4:	4821      	ldr	r0, [pc, #132]	@ (800197c <main+0x25c>)
 80018f6:	f000 fb1d 	bl	8001f34 <uart_send_string>
	       }
	       sendTemperatureHumidityMessage();
 80018fa:	f000 fb6d 	bl	8001fd8 <sendTemperatureHumidityMessage>
	     }
	    // Send CAN message
	    if (HAL_CAN_AddTxMessage(&hcan, &TxHeader, TxData, &TxMailbox) != HAL_OK)
 80018fe:	4b20      	ldr	r3, [pc, #128]	@ (8001980 <main+0x260>)
 8001900:	4a10      	ldr	r2, [pc, #64]	@ (8001944 <main+0x224>)
 8001902:	490f      	ldr	r1, [pc, #60]	@ (8001940 <main+0x220>)
 8001904:	480d      	ldr	r0, [pc, #52]	@ (800193c <main+0x21c>)
 8001906:	f001 f825 	bl	8002954 <HAL_CAN_AddTxMessage>
 800190a:	4603      	mov	r3, r0
 800190c:	2b00      	cmp	r3, #0
 800190e:	d001      	beq.n	8001914 <main+0x1f4>
	    {
	      Error_Handler();
 8001910:	f000 f83a 	bl	8001988 <Error_Handler>
	    }
	    uart_send_string("Debug: reached point X\r\n");
 8001914:	481b      	ldr	r0, [pc, #108]	@ (8001984 <main+0x264>)
 8001916:	f000 fb0d 	bl	8001f34 <uart_send_string>
	    ISM330DHCX_ReadRaw(&motion);
 800191a:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 800191e:	4618      	mov	r0, r3
 8001920:	f7ff fe48 	bl	80015b4 <ISM330DHCX_ReadRaw>
	    sendMotionStatusToNodeA(&motion);
 8001924:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8001928:	4618      	mov	r0, r3
 800192a:	f7ff fc5f 	bl	80011ec <sendMotionStatusToNodeA>
	    HAL_Delay(1000); // just idle loop
 800192e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001932:	f000 fde3 	bl	80024fc <HAL_Delay>
    if(DHT11_Start())
 8001936:	e73a      	b.n	80017ae <main+0x8e>
 8001938:	080087b0 	.word	0x080087b0
 800193c:	20000230 	.word	0x20000230
 8001940:	200001f0 	.word	0x200001f0
 8001944:	20000208 	.word	0x20000208
 8001948:	200002ac 	.word	0x200002ac
 800194c:	20000214 	.word	0x20000214
 8001950:	20000215 	.word	0x20000215
 8001954:	20000216 	.word	0x20000216
 8001958:	20000217 	.word	0x20000217
 800195c:	20000218 	.word	0x20000218
 8001960:	40240000 	.word	0x40240000
 8001964:	20000224 	.word	0x20000224
 8001968:	41100000 	.word	0x41100000
 800196c:	40a00000 	.word	0x40a00000
 8001970:	20000228 	.word	0x20000228
 8001974:	2000022c 	.word	0x2000022c
 8001978:	080087d0 	.word	0x080087d0
 800197c:	080087f4 	.word	0x080087f4
 8001980:	20000210 	.word	0x20000210
 8001984:	0800880c 	.word	0x0800880c

08001988 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001988:	b480      	push	{r7}
 800198a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800198c:	b672      	cpsid	i
}
 800198e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001990:	bf00      	nop
 8001992:	e7fd      	b.n	8001990 <Error_Handler+0x8>

08001994 <Init_All_Peripherals>:
 *      Author: Geek
 */

#include "peripherals_init.h"

void Init_All_Peripherals(void) {
 8001994:	b580      	push	{r7, lr}
 8001996:	af00      	add	r7, sp, #0
    MX_GPIO_Init();
 8001998:	f7ff fd72 	bl	8001480 <MX_GPIO_Init>
    MX_CAN_Init();
 800199c:	f7ff fbb8 	bl	8001110 <MX_CAN_Init>
    MX_I2C1_Init();
 80019a0:	f7ff fdda 	bl	8001558 <MX_I2C1_Init>
    MX_USART2_UART_Init();
 80019a4:	f000 fadc 	bl	8001f60 <MX_USART2_UART_Init>
    MX_TIM1_Init();
 80019a8:	f000 fa74 	bl	8001e94 <MX_TIM1_Init>
    SystemClock_Config();
 80019ac:	f000 fa2c 	bl	8001e08 <SystemClock_Config>
}
 80019b0:	bf00      	nop
 80019b2:	bd80      	pop	{r7, pc}

080019b4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80019b4:	b480      	push	{r7}
 80019b6:	b085      	sub	sp, #20
 80019b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80019ba:	4b15      	ldr	r3, [pc, #84]	@ (8001a10 <HAL_MspInit+0x5c>)
 80019bc:	699b      	ldr	r3, [r3, #24]
 80019be:	4a14      	ldr	r2, [pc, #80]	@ (8001a10 <HAL_MspInit+0x5c>)
 80019c0:	f043 0301 	orr.w	r3, r3, #1
 80019c4:	6193      	str	r3, [r2, #24]
 80019c6:	4b12      	ldr	r3, [pc, #72]	@ (8001a10 <HAL_MspInit+0x5c>)
 80019c8:	699b      	ldr	r3, [r3, #24]
 80019ca:	f003 0301 	and.w	r3, r3, #1
 80019ce:	60bb      	str	r3, [r7, #8]
 80019d0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80019d2:	4b0f      	ldr	r3, [pc, #60]	@ (8001a10 <HAL_MspInit+0x5c>)
 80019d4:	69db      	ldr	r3, [r3, #28]
 80019d6:	4a0e      	ldr	r2, [pc, #56]	@ (8001a10 <HAL_MspInit+0x5c>)
 80019d8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80019dc:	61d3      	str	r3, [r2, #28]
 80019de:	4b0c      	ldr	r3, [pc, #48]	@ (8001a10 <HAL_MspInit+0x5c>)
 80019e0:	69db      	ldr	r3, [r3, #28]
 80019e2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80019e6:	607b      	str	r3, [r7, #4]
 80019e8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80019ea:	4b0a      	ldr	r3, [pc, #40]	@ (8001a14 <HAL_MspInit+0x60>)
 80019ec:	685b      	ldr	r3, [r3, #4]
 80019ee:	60fb      	str	r3, [r7, #12]
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80019f6:	60fb      	str	r3, [r7, #12]
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80019fe:	60fb      	str	r3, [r7, #12]
 8001a00:	4a04      	ldr	r2, [pc, #16]	@ (8001a14 <HAL_MspInit+0x60>)
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a06:	bf00      	nop
 8001a08:	3714      	adds	r7, #20
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	bc80      	pop	{r7}
 8001a0e:	4770      	bx	lr
 8001a10:	40021000 	.word	0x40021000
 8001a14:	40010000 	.word	0x40010000

08001a18 <HAL_CAN_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hcan: CAN handle pointer
  * @retval None
  */
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	b088      	sub	sp, #32
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a20:	f107 0310 	add.w	r3, r7, #16
 8001a24:	2200      	movs	r2, #0
 8001a26:	601a      	str	r2, [r3, #0]
 8001a28:	605a      	str	r2, [r3, #4]
 8001a2a:	609a      	str	r2, [r3, #8]
 8001a2c:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	4a20      	ldr	r2, [pc, #128]	@ (8001ab4 <HAL_CAN_MspInit+0x9c>)
 8001a34:	4293      	cmp	r3, r2
 8001a36:	d139      	bne.n	8001aac <HAL_CAN_MspInit+0x94>
  {
    /* USER CODE BEGIN CAN1_MspInit 0 */

    /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001a38:	4b1f      	ldr	r3, [pc, #124]	@ (8001ab8 <HAL_CAN_MspInit+0xa0>)
 8001a3a:	69db      	ldr	r3, [r3, #28]
 8001a3c:	4a1e      	ldr	r2, [pc, #120]	@ (8001ab8 <HAL_CAN_MspInit+0xa0>)
 8001a3e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001a42:	61d3      	str	r3, [r2, #28]
 8001a44:	4b1c      	ldr	r3, [pc, #112]	@ (8001ab8 <HAL_CAN_MspInit+0xa0>)
 8001a46:	69db      	ldr	r3, [r3, #28]
 8001a48:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a4c:	60fb      	str	r3, [r7, #12]
 8001a4e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a50:	4b19      	ldr	r3, [pc, #100]	@ (8001ab8 <HAL_CAN_MspInit+0xa0>)
 8001a52:	699b      	ldr	r3, [r3, #24]
 8001a54:	4a18      	ldr	r2, [pc, #96]	@ (8001ab8 <HAL_CAN_MspInit+0xa0>)
 8001a56:	f043 0304 	orr.w	r3, r3, #4
 8001a5a:	6193      	str	r3, [r2, #24]
 8001a5c:	4b16      	ldr	r3, [pc, #88]	@ (8001ab8 <HAL_CAN_MspInit+0xa0>)
 8001a5e:	699b      	ldr	r3, [r3, #24]
 8001a60:	f003 0304 	and.w	r3, r3, #4
 8001a64:	60bb      	str	r3, [r7, #8]
 8001a66:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001a68:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001a6c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a6e:	2300      	movs	r3, #0
 8001a70:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a72:	2300      	movs	r3, #0
 8001a74:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a76:	f107 0310 	add.w	r3, r7, #16
 8001a7a:	4619      	mov	r1, r3
 8001a7c:	480f      	ldr	r0, [pc, #60]	@ (8001abc <HAL_CAN_MspInit+0xa4>)
 8001a7e:	f001 fcaf 	bl	80033e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001a82:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001a86:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a88:	2302      	movs	r3, #2
 8001a8a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001a8c:	2303      	movs	r3, #3
 8001a8e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a90:	f107 0310 	add.w	r3, r7, #16
 8001a94:	4619      	mov	r1, r3
 8001a96:	4809      	ldr	r0, [pc, #36]	@ (8001abc <HAL_CAN_MspInit+0xa4>)
 8001a98:	f001 fca2 	bl	80033e0 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	2100      	movs	r1, #0
 8001aa0:	2014      	movs	r0, #20
 8001aa2:	f001 fc66 	bl	8003372 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8001aa6:	2014      	movs	r0, #20
 8001aa8:	f001 fc7f 	bl	80033aa <HAL_NVIC_EnableIRQ>

    /* USER CODE END CAN1_MspInit 1 */

  }

}
 8001aac:	bf00      	nop
 8001aae:	3720      	adds	r7, #32
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	bd80      	pop	{r7, pc}
 8001ab4:	40006400 	.word	0x40006400
 8001ab8:	40021000 	.word	0x40021000
 8001abc:	40010800 	.word	0x40010800

08001ac0 <HAL_I2C_MspInit>:
    /* USER CODE END CAN1_MspDeInit 1 */
  }

}
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	b088      	sub	sp, #32
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ac8:	f107 0310 	add.w	r3, r7, #16
 8001acc:	2200      	movs	r2, #0
 8001ace:	601a      	str	r2, [r3, #0]
 8001ad0:	605a      	str	r2, [r3, #4]
 8001ad2:	609a      	str	r2, [r3, #8]
 8001ad4:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	4a15      	ldr	r2, [pc, #84]	@ (8001b30 <HAL_I2C_MspInit+0x70>)
 8001adc:	4293      	cmp	r3, r2
 8001ade:	d123      	bne.n	8001b28 <HAL_I2C_MspInit+0x68>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ae0:	4b14      	ldr	r3, [pc, #80]	@ (8001b34 <HAL_I2C_MspInit+0x74>)
 8001ae2:	699b      	ldr	r3, [r3, #24]
 8001ae4:	4a13      	ldr	r2, [pc, #76]	@ (8001b34 <HAL_I2C_MspInit+0x74>)
 8001ae6:	f043 0308 	orr.w	r3, r3, #8
 8001aea:	6193      	str	r3, [r2, #24]
 8001aec:	4b11      	ldr	r3, [pc, #68]	@ (8001b34 <HAL_I2C_MspInit+0x74>)
 8001aee:	699b      	ldr	r3, [r3, #24]
 8001af0:	f003 0308 	and.w	r3, r3, #8
 8001af4:	60fb      	str	r3, [r7, #12]
 8001af6:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001af8:	23c0      	movs	r3, #192	@ 0xc0
 8001afa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001afc:	2312      	movs	r3, #18
 8001afe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001b00:	2303      	movs	r3, #3
 8001b02:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b04:	f107 0310 	add.w	r3, r7, #16
 8001b08:	4619      	mov	r1, r3
 8001b0a:	480b      	ldr	r0, [pc, #44]	@ (8001b38 <HAL_I2C_MspInit+0x78>)
 8001b0c:	f001 fc68 	bl	80033e0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001b10:	4b08      	ldr	r3, [pc, #32]	@ (8001b34 <HAL_I2C_MspInit+0x74>)
 8001b12:	69db      	ldr	r3, [r3, #28]
 8001b14:	4a07      	ldr	r2, [pc, #28]	@ (8001b34 <HAL_I2C_MspInit+0x74>)
 8001b16:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001b1a:	61d3      	str	r3, [r2, #28]
 8001b1c:	4b05      	ldr	r3, [pc, #20]	@ (8001b34 <HAL_I2C_MspInit+0x74>)
 8001b1e:	69db      	ldr	r3, [r3, #28]
 8001b20:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001b24:	60bb      	str	r3, [r7, #8]
 8001b26:	68bb      	ldr	r3, [r7, #8]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001b28:	bf00      	nop
 8001b2a:	3720      	adds	r7, #32
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	bd80      	pop	{r7, pc}
 8001b30:	40005400 	.word	0x40005400
 8001b34:	40021000 	.word	0x40021000
 8001b38:	40010c00 	.word	0x40010c00

08001b3c <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	b088      	sub	sp, #32
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b44:	f107 0310 	add.w	r3, r7, #16
 8001b48:	2200      	movs	r2, #0
 8001b4a:	601a      	str	r2, [r3, #0]
 8001b4c:	605a      	str	r2, [r3, #4]
 8001b4e:	609a      	str	r2, [r3, #8]
 8001b50:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	4a1b      	ldr	r2, [pc, #108]	@ (8001bc4 <HAL_UART_MspInit+0x88>)
 8001b58:	4293      	cmp	r3, r2
 8001b5a:	d12f      	bne.n	8001bbc <HAL_UART_MspInit+0x80>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001b5c:	4b1a      	ldr	r3, [pc, #104]	@ (8001bc8 <HAL_UART_MspInit+0x8c>)
 8001b5e:	69db      	ldr	r3, [r3, #28]
 8001b60:	4a19      	ldr	r2, [pc, #100]	@ (8001bc8 <HAL_UART_MspInit+0x8c>)
 8001b62:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001b66:	61d3      	str	r3, [r2, #28]
 8001b68:	4b17      	ldr	r3, [pc, #92]	@ (8001bc8 <HAL_UART_MspInit+0x8c>)
 8001b6a:	69db      	ldr	r3, [r3, #28]
 8001b6c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b70:	60fb      	str	r3, [r7, #12]
 8001b72:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b74:	4b14      	ldr	r3, [pc, #80]	@ (8001bc8 <HAL_UART_MspInit+0x8c>)
 8001b76:	699b      	ldr	r3, [r3, #24]
 8001b78:	4a13      	ldr	r2, [pc, #76]	@ (8001bc8 <HAL_UART_MspInit+0x8c>)
 8001b7a:	f043 0304 	orr.w	r3, r3, #4
 8001b7e:	6193      	str	r3, [r2, #24]
 8001b80:	4b11      	ldr	r3, [pc, #68]	@ (8001bc8 <HAL_UART_MspInit+0x8c>)
 8001b82:	699b      	ldr	r3, [r3, #24]
 8001b84:	f003 0304 	and.w	r3, r3, #4
 8001b88:	60bb      	str	r3, [r7, #8]
 8001b8a:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001b8c:	2304      	movs	r3, #4
 8001b8e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b90:	2302      	movs	r3, #2
 8001b92:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001b94:	2303      	movs	r3, #3
 8001b96:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b98:	f107 0310 	add.w	r3, r7, #16
 8001b9c:	4619      	mov	r1, r3
 8001b9e:	480b      	ldr	r0, [pc, #44]	@ (8001bcc <HAL_UART_MspInit+0x90>)
 8001ba0:	f001 fc1e 	bl	80033e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001ba4:	2308      	movs	r3, #8
 8001ba6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ba8:	2300      	movs	r3, #0
 8001baa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bac:	2300      	movs	r3, #0
 8001bae:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bb0:	f107 0310 	add.w	r3, r7, #16
 8001bb4:	4619      	mov	r1, r3
 8001bb6:	4805      	ldr	r0, [pc, #20]	@ (8001bcc <HAL_UART_MspInit+0x90>)
 8001bb8:	f001 fc12 	bl	80033e0 <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8001bbc:	bf00      	nop
 8001bbe:	3720      	adds	r7, #32
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	bd80      	pop	{r7, pc}
 8001bc4:	40004400 	.word	0x40004400
 8001bc8:	40021000 	.word	0x40021000
 8001bcc:	40010800 	.word	0x40010800

08001bd0 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001bd0:	b480      	push	{r7}
 8001bd2:	b085      	sub	sp, #20
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	4a09      	ldr	r2, [pc, #36]	@ (8001c04 <HAL_TIM_Base_MspInit+0x34>)
 8001bde:	4293      	cmp	r3, r2
 8001be0:	d10b      	bne.n	8001bfa <HAL_TIM_Base_MspInit+0x2a>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001be2:	4b09      	ldr	r3, [pc, #36]	@ (8001c08 <HAL_TIM_Base_MspInit+0x38>)
 8001be4:	699b      	ldr	r3, [r3, #24]
 8001be6:	4a08      	ldr	r2, [pc, #32]	@ (8001c08 <HAL_TIM_Base_MspInit+0x38>)
 8001be8:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001bec:	6193      	str	r3, [r2, #24]
 8001bee:	4b06      	ldr	r3, [pc, #24]	@ (8001c08 <HAL_TIM_Base_MspInit+0x38>)
 8001bf0:	699b      	ldr	r3, [r3, #24]
 8001bf2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001bf6:	60fb      	str	r3, [r7, #12]
 8001bf8:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM1_MspInit 1 */

  }

}
 8001bfa:	bf00      	nop
 8001bfc:	3714      	adds	r7, #20
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	bc80      	pop	{r7}
 8001c02:	4770      	bx	lr
 8001c04:	40012c00 	.word	0x40012c00
 8001c08:	40021000 	.word	0x40021000

08001c0c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c0c:	b480      	push	{r7}
 8001c0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001c10:	bf00      	nop
 8001c12:	e7fd      	b.n	8001c10 <NMI_Handler+0x4>

08001c14 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c14:	b480      	push	{r7}
 8001c16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c18:	bf00      	nop
 8001c1a:	e7fd      	b.n	8001c18 <HardFault_Handler+0x4>

08001c1c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c1c:	b480      	push	{r7}
 8001c1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c20:	bf00      	nop
 8001c22:	e7fd      	b.n	8001c20 <MemManage_Handler+0x4>

08001c24 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c24:	b480      	push	{r7}
 8001c26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c28:	bf00      	nop
 8001c2a:	e7fd      	b.n	8001c28 <BusFault_Handler+0x4>

08001c2c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c2c:	b480      	push	{r7}
 8001c2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c30:	bf00      	nop
 8001c32:	e7fd      	b.n	8001c30 <UsageFault_Handler+0x4>

08001c34 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001c34:	b480      	push	{r7}
 8001c36:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001c38:	bf00      	nop
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	bc80      	pop	{r7}
 8001c3e:	4770      	bx	lr

08001c40 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c40:	b480      	push	{r7}
 8001c42:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c44:	bf00      	nop
 8001c46:	46bd      	mov	sp, r7
 8001c48:	bc80      	pop	{r7}
 8001c4a:	4770      	bx	lr

08001c4c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001c4c:	b480      	push	{r7}
 8001c4e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001c50:	bf00      	nop
 8001c52:	46bd      	mov	sp, r7
 8001c54:	bc80      	pop	{r7}
 8001c56:	4770      	bx	lr

08001c58 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001c5c:	f000 fc32 	bl	80024c4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001c60:	bf00      	nop
 8001c62:	bd80      	pop	{r7, pc}

08001c64 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8001c68:	4802      	ldr	r0, [pc, #8]	@ (8001c74 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8001c6a:	f001 f888 	bl	8002d7e <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8001c6e:	bf00      	nop
 8001c70:	bd80      	pop	{r7, pc}
 8001c72:	bf00      	nop
 8001c74:	20000230 	.word	0x20000230

08001c78 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001c78:	b480      	push	{r7}
 8001c7a:	af00      	add	r7, sp, #0
  return 1;
 8001c7c:	2301      	movs	r3, #1
}
 8001c7e:	4618      	mov	r0, r3
 8001c80:	46bd      	mov	sp, r7
 8001c82:	bc80      	pop	{r7}
 8001c84:	4770      	bx	lr

08001c86 <_kill>:

int _kill(int pid, int sig)
{
 8001c86:	b580      	push	{r7, lr}
 8001c88:	b082      	sub	sp, #8
 8001c8a:	af00      	add	r7, sp, #0
 8001c8c:	6078      	str	r0, [r7, #4]
 8001c8e:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001c90:	f004 fcca 	bl	8006628 <__errno>
 8001c94:	4603      	mov	r3, r0
 8001c96:	2216      	movs	r2, #22
 8001c98:	601a      	str	r2, [r3, #0]
  return -1;
 8001c9a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	3708      	adds	r7, #8
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	bd80      	pop	{r7, pc}

08001ca6 <_exit>:

void _exit (int status)
{
 8001ca6:	b580      	push	{r7, lr}
 8001ca8:	b082      	sub	sp, #8
 8001caa:	af00      	add	r7, sp, #0
 8001cac:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001cae:	f04f 31ff 	mov.w	r1, #4294967295
 8001cb2:	6878      	ldr	r0, [r7, #4]
 8001cb4:	f7ff ffe7 	bl	8001c86 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001cb8:	bf00      	nop
 8001cba:	e7fd      	b.n	8001cb8 <_exit+0x12>

08001cbc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	b086      	sub	sp, #24
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	60f8      	str	r0, [r7, #12]
 8001cc4:	60b9      	str	r1, [r7, #8]
 8001cc6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001cc8:	2300      	movs	r3, #0
 8001cca:	617b      	str	r3, [r7, #20]
 8001ccc:	e00a      	b.n	8001ce4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001cce:	f3af 8000 	nop.w
 8001cd2:	4601      	mov	r1, r0
 8001cd4:	68bb      	ldr	r3, [r7, #8]
 8001cd6:	1c5a      	adds	r2, r3, #1
 8001cd8:	60ba      	str	r2, [r7, #8]
 8001cda:	b2ca      	uxtb	r2, r1
 8001cdc:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001cde:	697b      	ldr	r3, [r7, #20]
 8001ce0:	3301      	adds	r3, #1
 8001ce2:	617b      	str	r3, [r7, #20]
 8001ce4:	697a      	ldr	r2, [r7, #20]
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	429a      	cmp	r2, r3
 8001cea:	dbf0      	blt.n	8001cce <_read+0x12>
  }

  return len;
 8001cec:	687b      	ldr	r3, [r7, #4]
}
 8001cee:	4618      	mov	r0, r3
 8001cf0:	3718      	adds	r7, #24
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	bd80      	pop	{r7, pc}

08001cf6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001cf6:	b580      	push	{r7, lr}
 8001cf8:	b086      	sub	sp, #24
 8001cfa:	af00      	add	r7, sp, #0
 8001cfc:	60f8      	str	r0, [r7, #12]
 8001cfe:	60b9      	str	r1, [r7, #8]
 8001d00:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d02:	2300      	movs	r3, #0
 8001d04:	617b      	str	r3, [r7, #20]
 8001d06:	e009      	b.n	8001d1c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001d08:	68bb      	ldr	r3, [r7, #8]
 8001d0a:	1c5a      	adds	r2, r3, #1
 8001d0c:	60ba      	str	r2, [r7, #8]
 8001d0e:	781b      	ldrb	r3, [r3, #0]
 8001d10:	4618      	mov	r0, r3
 8001d12:	f000 f94f 	bl	8001fb4 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d16:	697b      	ldr	r3, [r7, #20]
 8001d18:	3301      	adds	r3, #1
 8001d1a:	617b      	str	r3, [r7, #20]
 8001d1c:	697a      	ldr	r2, [r7, #20]
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	429a      	cmp	r2, r3
 8001d22:	dbf1      	blt.n	8001d08 <_write+0x12>
  }
  return len;
 8001d24:	687b      	ldr	r3, [r7, #4]
}
 8001d26:	4618      	mov	r0, r3
 8001d28:	3718      	adds	r7, #24
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	bd80      	pop	{r7, pc}

08001d2e <_close>:

int _close(int file)
{
 8001d2e:	b480      	push	{r7}
 8001d30:	b083      	sub	sp, #12
 8001d32:	af00      	add	r7, sp, #0
 8001d34:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001d36:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	370c      	adds	r7, #12
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	bc80      	pop	{r7}
 8001d42:	4770      	bx	lr

08001d44 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001d44:	b480      	push	{r7}
 8001d46:	b083      	sub	sp, #12
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]
 8001d4c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001d4e:	683b      	ldr	r3, [r7, #0]
 8001d50:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001d54:	605a      	str	r2, [r3, #4]
  return 0;
 8001d56:	2300      	movs	r3, #0
}
 8001d58:	4618      	mov	r0, r3
 8001d5a:	370c      	adds	r7, #12
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	bc80      	pop	{r7}
 8001d60:	4770      	bx	lr

08001d62 <_isatty>:

int _isatty(int file)
{
 8001d62:	b480      	push	{r7}
 8001d64:	b083      	sub	sp, #12
 8001d66:	af00      	add	r7, sp, #0
 8001d68:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001d6a:	2301      	movs	r3, #1
}
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	370c      	adds	r7, #12
 8001d70:	46bd      	mov	sp, r7
 8001d72:	bc80      	pop	{r7}
 8001d74:	4770      	bx	lr

08001d76 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001d76:	b480      	push	{r7}
 8001d78:	b085      	sub	sp, #20
 8001d7a:	af00      	add	r7, sp, #0
 8001d7c:	60f8      	str	r0, [r7, #12]
 8001d7e:	60b9      	str	r1, [r7, #8]
 8001d80:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001d82:	2300      	movs	r3, #0
}
 8001d84:	4618      	mov	r0, r3
 8001d86:	3714      	adds	r7, #20
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	bc80      	pop	{r7}
 8001d8c:	4770      	bx	lr
	...

08001d90 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	b086      	sub	sp, #24
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001d98:	4a14      	ldr	r2, [pc, #80]	@ (8001dec <_sbrk+0x5c>)
 8001d9a:	4b15      	ldr	r3, [pc, #84]	@ (8001df0 <_sbrk+0x60>)
 8001d9c:	1ad3      	subs	r3, r2, r3
 8001d9e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001da0:	697b      	ldr	r3, [r7, #20]
 8001da2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001da4:	4b13      	ldr	r3, [pc, #76]	@ (8001df4 <_sbrk+0x64>)
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d102      	bne.n	8001db2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001dac:	4b11      	ldr	r3, [pc, #68]	@ (8001df4 <_sbrk+0x64>)
 8001dae:	4a12      	ldr	r2, [pc, #72]	@ (8001df8 <_sbrk+0x68>)
 8001db0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001db2:	4b10      	ldr	r3, [pc, #64]	@ (8001df4 <_sbrk+0x64>)
 8001db4:	681a      	ldr	r2, [r3, #0]
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	4413      	add	r3, r2
 8001dba:	693a      	ldr	r2, [r7, #16]
 8001dbc:	429a      	cmp	r2, r3
 8001dbe:	d207      	bcs.n	8001dd0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001dc0:	f004 fc32 	bl	8006628 <__errno>
 8001dc4:	4603      	mov	r3, r0
 8001dc6:	220c      	movs	r2, #12
 8001dc8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001dca:	f04f 33ff 	mov.w	r3, #4294967295
 8001dce:	e009      	b.n	8001de4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001dd0:	4b08      	ldr	r3, [pc, #32]	@ (8001df4 <_sbrk+0x64>)
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001dd6:	4b07      	ldr	r3, [pc, #28]	@ (8001df4 <_sbrk+0x64>)
 8001dd8:	681a      	ldr	r2, [r3, #0]
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	4413      	add	r3, r2
 8001dde:	4a05      	ldr	r2, [pc, #20]	@ (8001df4 <_sbrk+0x64>)
 8001de0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001de2:	68fb      	ldr	r3, [r7, #12]
}
 8001de4:	4618      	mov	r0, r3
 8001de6:	3718      	adds	r7, #24
 8001de8:	46bd      	mov	sp, r7
 8001dea:	bd80      	pop	{r7, pc}
 8001dec:	20005000 	.word	0x20005000
 8001df0:	00000400 	.word	0x00000400
 8001df4:	2000033c 	.word	0x2000033c
 8001df8:	200004a0 	.word	0x200004a0

08001dfc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001dfc:	b480      	push	{r7}
 8001dfe:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001e00:	bf00      	nop
 8001e02:	46bd      	mov	sp, r7
 8001e04:	bc80      	pop	{r7}
 8001e06:	4770      	bx	lr

08001e08 <SystemClock_Config>:
  */
#include "main.h"
#include "systemclock.h"
#include "stm32f1xx_hal.h"
void SystemClock_Config(void)
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	b090      	sub	sp, #64	@ 0x40
 8001e0c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001e0e:	f107 0318 	add.w	r3, r7, #24
 8001e12:	2228      	movs	r2, #40	@ 0x28
 8001e14:	2100      	movs	r1, #0
 8001e16:	4618      	mov	r0, r3
 8001e18:	f004 fbb3 	bl	8006582 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001e1c:	1d3b      	adds	r3, r7, #4
 8001e1e:	2200      	movs	r2, #0
 8001e20:	601a      	str	r2, [r3, #0]
 8001e22:	605a      	str	r2, [r3, #4]
 8001e24:	609a      	str	r2, [r3, #8]
 8001e26:	60da      	str	r2, [r3, #12]
 8001e28:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001e2a:	2301      	movs	r3, #1
 8001e2c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001e2e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001e32:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001e34:	2300      	movs	r3, #0
 8001e36:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001e38:	2301      	movs	r3, #1
 8001e3a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001e3c:	2302      	movs	r3, #2
 8001e3e:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001e40:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001e44:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001e46:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8001e4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001e4c:	f107 0318 	add.w	r3, r7, #24
 8001e50:	4618      	mov	r0, r3
 8001e52:	f002 fcf7 	bl	8004844 <HAL_RCC_OscConfig>
 8001e56:	4603      	mov	r3, r0
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d001      	beq.n	8001e60 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8001e5c:	f7ff fd94 	bl	8001988 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001e60:	230f      	movs	r3, #15
 8001e62:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001e64:	2302      	movs	r3, #2
 8001e66:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001e68:	2300      	movs	r3, #0
 8001e6a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001e6c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001e70:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001e72:	2300      	movs	r3, #0
 8001e74:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001e76:	1d3b      	adds	r3, r7, #4
 8001e78:	2102      	movs	r1, #2
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	f002 ff64 	bl	8004d48 <HAL_RCC_ClockConfig>
 8001e80:	4603      	mov	r3, r0
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d001      	beq.n	8001e8a <SystemClock_Config+0x82>
  {
    Error_Handler();
 8001e86:	f7ff fd7f 	bl	8001988 <Error_Handler>
  }
}
 8001e8a:	bf00      	nop
 8001e8c:	3740      	adds	r7, #64	@ 0x40
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	bd80      	pop	{r7, pc}
	...

08001e94 <MX_TIM1_Init>:
#include "stm32f1xx_hal.h"

extern TIM_HandleTypeDef htim1;

void MX_TIM1_Init(void)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	b086      	sub	sp, #24
 8001e98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001e9a:	f107 0308 	add.w	r3, r7, #8
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	601a      	str	r2, [r3, #0]
 8001ea2:	605a      	str	r2, [r3, #4]
 8001ea4:	609a      	str	r2, [r3, #8]
 8001ea6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ea8:	463b      	mov	r3, r7
 8001eaa:	2200      	movs	r2, #0
 8001eac:	601a      	str	r2, [r3, #0]
 8001eae:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001eb0:	4b1e      	ldr	r3, [pc, #120]	@ (8001f2c <MX_TIM1_Init+0x98>)
 8001eb2:	4a1f      	ldr	r2, [pc, #124]	@ (8001f30 <MX_TIM1_Init+0x9c>)
 8001eb4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 71;
 8001eb6:	4b1d      	ldr	r3, [pc, #116]	@ (8001f2c <MX_TIM1_Init+0x98>)
 8001eb8:	2247      	movs	r2, #71	@ 0x47
 8001eba:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ebc:	4b1b      	ldr	r3, [pc, #108]	@ (8001f2c <MX_TIM1_Init+0x98>)
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001ec2:	4b1a      	ldr	r3, [pc, #104]	@ (8001f2c <MX_TIM1_Init+0x98>)
 8001ec4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001ec8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001eca:	4b18      	ldr	r3, [pc, #96]	@ (8001f2c <MX_TIM1_Init+0x98>)
 8001ecc:	2200      	movs	r2, #0
 8001ece:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001ed0:	4b16      	ldr	r3, [pc, #88]	@ (8001f2c <MX_TIM1_Init+0x98>)
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ed6:	4b15      	ldr	r3, [pc, #84]	@ (8001f2c <MX_TIM1_Init+0x98>)
 8001ed8:	2200      	movs	r2, #0
 8001eda:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001edc:	4813      	ldr	r0, [pc, #76]	@ (8001f2c <MX_TIM1_Init+0x98>)
 8001ede:	f003 f8c1 	bl	8005064 <HAL_TIM_Base_Init>
 8001ee2:	4603      	mov	r3, r0
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d001      	beq.n	8001eec <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8001ee8:	f7ff fd4e 	bl	8001988 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001eec:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001ef0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001ef2:	f107 0308 	add.w	r3, r7, #8
 8001ef6:	4619      	mov	r1, r3
 8001ef8:	480c      	ldr	r0, [pc, #48]	@ (8001f2c <MX_TIM1_Init+0x98>)
 8001efa:	f003 f94d 	bl	8005198 <HAL_TIM_ConfigClockSource>
 8001efe:	4603      	mov	r3, r0
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d001      	beq.n	8001f08 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8001f04:	f7ff fd40 	bl	8001988 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f08:	2300      	movs	r3, #0
 8001f0a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f0c:	2300      	movs	r3, #0
 8001f0e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001f10:	463b      	mov	r3, r7
 8001f12:	4619      	mov	r1, r3
 8001f14:	4805      	ldr	r0, [pc, #20]	@ (8001f2c <MX_TIM1_Init+0x98>)
 8001f16:	f003 fb0b 	bl	8005530 <HAL_TIMEx_MasterConfigSynchronization>
 8001f1a:	4603      	mov	r3, r0
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d001      	beq.n	8001f24 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001f20:	f7ff fd32 	bl	8001988 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001f24:	bf00      	nop
 8001f26:	3718      	adds	r7, #24
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	bd80      	pop	{r7, pc}
 8001f2c:	200002ac 	.word	0x200002ac
 8001f30:	40012c00 	.word	0x40012c00

08001f34 <uart_send_string>:

void uart_send_char(char c) {
    while (!(USART2->SR & USART_SR_TXE)); // Wait until TX buffer is empty
    USART2->DR = c;
}
void uart_send_string(const char *str) {
 8001f34:	b580      	push	{r7, lr}
 8001f36:	b082      	sub	sp, #8
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart2, (uint8_t *)str, strlen(str), HAL_MAX_DELAY);
 8001f3c:	6878      	ldr	r0, [r7, #4]
 8001f3e:	f7fe f907 	bl	8000150 <strlen>
 8001f42:	4603      	mov	r3, r0
 8001f44:	b29a      	uxth	r2, r3
 8001f46:	f04f 33ff 	mov.w	r3, #4294967295
 8001f4a:	6879      	ldr	r1, [r7, #4]
 8001f4c:	4803      	ldr	r0, [pc, #12]	@ (8001f5c <uart_send_string+0x28>)
 8001f4e:	f003 fb9d 	bl	800568c <HAL_UART_Transmit>
}
 8001f52:	bf00      	nop
 8001f54:	3708      	adds	r7, #8
 8001f56:	46bd      	mov	sp, r7
 8001f58:	bd80      	pop	{r7, pc}
 8001f5a:	bf00      	nop
 8001f5c:	200002f4 	.word	0x200002f4

08001f60 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
void MX_USART2_UART_Init(void)
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001f64:	4b11      	ldr	r3, [pc, #68]	@ (8001fac <MX_USART2_UART_Init+0x4c>)
 8001f66:	4a12      	ldr	r2, [pc, #72]	@ (8001fb0 <MX_USART2_UART_Init+0x50>)
 8001f68:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001f6a:	4b10      	ldr	r3, [pc, #64]	@ (8001fac <MX_USART2_UART_Init+0x4c>)
 8001f6c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001f70:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001f72:	4b0e      	ldr	r3, [pc, #56]	@ (8001fac <MX_USART2_UART_Init+0x4c>)
 8001f74:	2200      	movs	r2, #0
 8001f76:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001f78:	4b0c      	ldr	r3, [pc, #48]	@ (8001fac <MX_USART2_UART_Init+0x4c>)
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001f7e:	4b0b      	ldr	r3, [pc, #44]	@ (8001fac <MX_USART2_UART_Init+0x4c>)
 8001f80:	2200      	movs	r2, #0
 8001f82:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001f84:	4b09      	ldr	r3, [pc, #36]	@ (8001fac <MX_USART2_UART_Init+0x4c>)
 8001f86:	220c      	movs	r2, #12
 8001f88:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001f8a:	4b08      	ldr	r3, [pc, #32]	@ (8001fac <MX_USART2_UART_Init+0x4c>)
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001f90:	4b06      	ldr	r3, [pc, #24]	@ (8001fac <MX_USART2_UART_Init+0x4c>)
 8001f92:	2200      	movs	r2, #0
 8001f94:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001f96:	4805      	ldr	r0, [pc, #20]	@ (8001fac <MX_USART2_UART_Init+0x4c>)
 8001f98:	f003 fb28 	bl	80055ec <HAL_UART_Init>
 8001f9c:	4603      	mov	r3, r0
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d001      	beq.n	8001fa6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001fa2:	f7ff fcf1 	bl	8001988 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001fa6:	bf00      	nop
 8001fa8:	bd80      	pop	{r7, pc}
 8001faa:	bf00      	nop
 8001fac:	200002f4 	.word	0x200002f4
 8001fb0:	40004400 	.word	0x40004400

08001fb4 <__io_putchar>:

int __io_putchar(int ch)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	b082      	sub	sp, #8
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8001fbc:	1d39      	adds	r1, r7, #4
 8001fbe:	f04f 33ff 	mov.w	r3, #4294967295
 8001fc2:	2201      	movs	r2, #1
 8001fc4:	4803      	ldr	r0, [pc, #12]	@ (8001fd4 <__io_putchar+0x20>)
 8001fc6:	f003 fb61 	bl	800568c <HAL_UART_Transmit>
    return ch;
 8001fca:	687b      	ldr	r3, [r7, #4]
}
 8001fcc:	4618      	mov	r0, r3
 8001fce:	3708      	adds	r7, #8
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	bd80      	pop	{r7, pc}
 8001fd4:	200002f4 	.word	0x200002f4

08001fd8 <sendTemperatureHumidityMessage>:
MotionStatus_T systemMotionState = MOTION_NORMAL;
extern CAN_HandleTypeDef hcan;

//Send Temperature and Humidity via DHT11
void sendTemperatureHumidityMessage(void)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	b08a      	sub	sp, #40	@ 0x28
 8001fdc:	af00      	add	r7, sp, #0
   CAN_TxHeaderTypeDef txHeader;
   uint8_t txData[2];
   uint32_t txMailbox;

   txHeader.StdId=0x6FD;//Example ID for DHT11 status
 8001fde:	f240 63fd 	movw	r3, #1789	@ 0x6fd
 8001fe2:	60fb      	str	r3, [r7, #12]
   txHeader.IDE=CAN_ID_STD;
 8001fe4:	2300      	movs	r3, #0
 8001fe6:	617b      	str	r3, [r7, #20]
   txHeader.RTR=CAN_RTR_DATA;
 8001fe8:	2300      	movs	r3, #0
 8001fea:	61bb      	str	r3, [r7, #24]
   txHeader.DLC=2;
 8001fec:	2302      	movs	r3, #2
 8001fee:	61fb      	str	r3, [r7, #28]

   uint8_t temp = (uint8_t)(fminf(tCelsius * 10, 255));// scaled to 0.1°C
 8001ff0:	4b1a      	ldr	r3, [pc, #104]	@ (800205c <sendTemperatureHumidityMessage+0x84>)
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	491a      	ldr	r1, [pc, #104]	@ (8002060 <sendTemperatureHumidityMessage+0x88>)
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	f7fe fea4 	bl	8000d44 <__aeabi_fmul>
 8001ffc:	4603      	mov	r3, r0
 8001ffe:	4919      	ldr	r1, [pc, #100]	@ (8002064 <sendTemperatureHumidityMessage+0x8c>)
 8002000:	4618      	mov	r0, r3
 8002002:	f006 fb99 	bl	8008738 <fminf>
 8002006:	4603      	mov	r3, r0
 8002008:	4618      	mov	r0, r3
 800200a:	f7ff f861 	bl	80010d0 <__aeabi_f2uiz>
 800200e:	4603      	mov	r3, r0
 8002010:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
   uint8_t hum  = (uint8_t)(fminf(RH * 10, 255));// scaled to 0.1%
 8002014:	4b14      	ldr	r3, [pc, #80]	@ (8002068 <sendTemperatureHumidityMessage+0x90>)
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	4911      	ldr	r1, [pc, #68]	@ (8002060 <sendTemperatureHumidityMessage+0x88>)
 800201a:	4618      	mov	r0, r3
 800201c:	f7fe fe92 	bl	8000d44 <__aeabi_fmul>
 8002020:	4603      	mov	r3, r0
 8002022:	4910      	ldr	r1, [pc, #64]	@ (8002064 <sendTemperatureHumidityMessage+0x8c>)
 8002024:	4618      	mov	r0, r3
 8002026:	f006 fb87 	bl	8008738 <fminf>
 800202a:	4603      	mov	r3, r0
 800202c:	4618      	mov	r0, r3
 800202e:	f7ff f84f 	bl	80010d0 <__aeabi_f2uiz>
 8002032:	4603      	mov	r3, r0
 8002034:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
   txData[0] = temp;
 8002038:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800203c:	723b      	strb	r3, [r7, #8]
   txData[1] = hum;
 800203e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8002042:	727b      	strb	r3, [r7, #9]


   HAL_CAN_AddTxMessage(&hcan, &txHeader, txData, &txMailbox);
 8002044:	1d3b      	adds	r3, r7, #4
 8002046:	f107 0208 	add.w	r2, r7, #8
 800204a:	f107 010c 	add.w	r1, r7, #12
 800204e:	4807      	ldr	r0, [pc, #28]	@ (800206c <sendTemperatureHumidityMessage+0x94>)
 8002050:	f000 fc80 	bl	8002954 <HAL_CAN_AddTxMessage>
}
 8002054:	bf00      	nop
 8002056:	3728      	adds	r7, #40	@ 0x28
 8002058:	46bd      	mov	sp, r7
 800205a:	bd80      	pop	{r7, pc}
 800205c:	20000224 	.word	0x20000224
 8002060:	41200000 	.word	0x41200000
 8002064:	437f0000 	.word	0x437f0000
 8002068:	2000022c 	.word	0x2000022c
 800206c:	20000230 	.word	0x20000230

08002070 <sendFuelEconomyMessage>:


// Send fuel economy status
void sendFuelEconomyMessage(uint8_t status) {
 8002070:	b580      	push	{r7, lr}
 8002072:	b08c      	sub	sp, #48	@ 0x30
 8002074:	af00      	add	r7, sp, #0
 8002076:	4603      	mov	r3, r0
 8002078:	71fb      	strb	r3, [r7, #7]
    CAN_TxHeaderTypeDef TxHeader;
    uint8_t txData[8] = {0};
 800207a:	f107 0310 	add.w	r3, r7, #16
 800207e:	2200      	movs	r2, #0
 8002080:	601a      	str	r2, [r3, #0]
 8002082:	605a      	str	r2, [r3, #4]
    uint32_t txMailbox;

    TxHeader.StdId = 0x500;
 8002084:	f44f 63a0 	mov.w	r3, #1280	@ 0x500
 8002088:	61bb      	str	r3, [r7, #24]
    TxHeader.IDE = CAN_ID_STD;
 800208a:	2300      	movs	r3, #0
 800208c:	623b      	str	r3, [r7, #32]
    TxHeader.RTR = CAN_RTR_DATA;
 800208e:	2300      	movs	r3, #0
 8002090:	627b      	str	r3, [r7, #36]	@ 0x24
    TxHeader.DLC = 1;
 8002092:	2301      	movs	r3, #1
 8002094:	62bb      	str	r3, [r7, #40]	@ 0x28

    txData[0] = status;
 8002096:	79fb      	ldrb	r3, [r7, #7]
 8002098:	743b      	strb	r3, [r7, #16]

    HAL_CAN_AddTxMessage(&hcan, &TxHeader, txData, &txMailbox);
 800209a:	f107 030c 	add.w	r3, r7, #12
 800209e:	f107 0210 	add.w	r2, r7, #16
 80020a2:	f107 0118 	add.w	r1, r7, #24
 80020a6:	4803      	ldr	r0, [pc, #12]	@ (80020b4 <sendFuelEconomyMessage+0x44>)
 80020a8:	f000 fc54 	bl	8002954 <HAL_CAN_AddTxMessage>
}
 80020ac:	bf00      	nop
 80020ae:	3730      	adds	r7, #48	@ 0x30
 80020b0:	46bd      	mov	sp, r7
 80020b2:	bd80      	pop	{r7, pc}
 80020b4:	20000230 	.word	0x20000230

080020b8 <FuelEconomy_Ctrl>:

// Decision logic
void FuelEconomy_Ctrl(void) {
 80020b8:	b580      	push	{r7, lr}
 80020ba:	b082      	sub	sp, #8
 80020bc:	af00      	add	r7, sp, #0
    uint8_t fuelEconomyStatus = 0;
 80020be:	2300      	movs	r3, #0
 80020c0:	71fb      	strb	r3, [r7, #7]

    uint8_t EngineSpeed = engineData.EngineeRPM;
 80020c2:	4b23      	ldr	r3, [pc, #140]	@ (8002150 <FuelEconomy_Ctrl+0x98>)
 80020c4:	781b      	ldrb	r3, [r3, #0]
 80020c6:	71bb      	strb	r3, [r7, #6]
    uint8_t VehicleSpeed = vehicleData.vehicleSpeed;
 80020c8:	4b22      	ldr	r3, [pc, #136]	@ (8002154 <FuelEconomy_Ctrl+0x9c>)
 80020ca:	781b      	ldrb	r3, [r3, #0]
 80020cc:	717b      	strb	r3, [r7, #5]

    if (EngineSpeed > 100) {
 80020ce:	79bb      	ldrb	r3, [r7, #6]
 80020d0:	2b64      	cmp	r3, #100	@ 0x64
 80020d2:	d938      	bls.n	8002146 <FuelEconomy_Ctrl+0x8e>
        if (VehicleSpeed > 0 && VehicleSpeed < 30)
 80020d4:	797b      	ldrb	r3, [r7, #5]
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d005      	beq.n	80020e6 <FuelEconomy_Ctrl+0x2e>
 80020da:	797b      	ldrb	r3, [r7, #5]
 80020dc:	2b1d      	cmp	r3, #29
 80020de:	d802      	bhi.n	80020e6 <FuelEconomy_Ctrl+0x2e>
            fuelEconomyStatus = 0; //0x14
 80020e0:	2300      	movs	r3, #0
 80020e2:	71fb      	strb	r3, [r7, #7]
 80020e4:	e02b      	b.n	800213e <FuelEconomy_Ctrl+0x86>
        else if (VehicleSpeed >= 30 && VehicleSpeed < 60)
 80020e6:	797b      	ldrb	r3, [r7, #5]
 80020e8:	2b1d      	cmp	r3, #29
 80020ea:	d905      	bls.n	80020f8 <FuelEconomy_Ctrl+0x40>
 80020ec:	797b      	ldrb	r3, [r7, #5]
 80020ee:	2b3b      	cmp	r3, #59	@ 0x3b
 80020f0:	d802      	bhi.n	80020f8 <FuelEconomy_Ctrl+0x40>
            fuelEconomyStatus = 1; //0x32
 80020f2:	2301      	movs	r3, #1
 80020f4:	71fb      	strb	r3, [r7, #7]
 80020f6:	e022      	b.n	800213e <FuelEconomy_Ctrl+0x86>
        else if (VehicleSpeed >= 60 && VehicleSpeed < 90)
 80020f8:	797b      	ldrb	r3, [r7, #5]
 80020fa:	2b3b      	cmp	r3, #59	@ 0x3b
 80020fc:	d905      	bls.n	800210a <FuelEconomy_Ctrl+0x52>
 80020fe:	797b      	ldrb	r3, [r7, #5]
 8002100:	2b59      	cmp	r3, #89	@ 0x59
 8002102:	d802      	bhi.n	800210a <FuelEconomy_Ctrl+0x52>
            fuelEconomyStatus = 2; //0x50
 8002104:	2302      	movs	r3, #2
 8002106:	71fb      	strb	r3, [r7, #7]
 8002108:	e019      	b.n	800213e <FuelEconomy_Ctrl+0x86>
        else if (VehicleSpeed >= 90 && VehicleSpeed < 120)
 800210a:	797b      	ldrb	r3, [r7, #5]
 800210c:	2b59      	cmp	r3, #89	@ 0x59
 800210e:	d905      	bls.n	800211c <FuelEconomy_Ctrl+0x64>
 8002110:	797b      	ldrb	r3, [r7, #5]
 8002112:	2b77      	cmp	r3, #119	@ 0x77
 8002114:	d802      	bhi.n	800211c <FuelEconomy_Ctrl+0x64>
           fuelEconomyStatus = 3; //0x64
 8002116:	2303      	movs	r3, #3
 8002118:	71fb      	strb	r3, [r7, #7]
 800211a:	e010      	b.n	800213e <FuelEconomy_Ctrl+0x86>
        else if (VehicleSpeed >= 120 && VehicleSpeed < 160)
 800211c:	797b      	ldrb	r3, [r7, #5]
 800211e:	2b77      	cmp	r3, #119	@ 0x77
 8002120:	d905      	bls.n	800212e <FuelEconomy_Ctrl+0x76>
 8002122:	797b      	ldrb	r3, [r7, #5]
 8002124:	2b9f      	cmp	r3, #159	@ 0x9f
 8002126:	d802      	bhi.n	800212e <FuelEconomy_Ctrl+0x76>
            fuelEconomyStatus = 4;//0x82
 8002128:	2304      	movs	r3, #4
 800212a:	71fb      	strb	r3, [r7, #7]
 800212c:	e007      	b.n	800213e <FuelEconomy_Ctrl+0x86>
        else if (VehicleSpeed >= 160 && VehicleSpeed < 200)
 800212e:	797b      	ldrb	r3, [r7, #5]
 8002130:	2b9f      	cmp	r3, #159	@ 0x9f
 8002132:	d904      	bls.n	800213e <FuelEconomy_Ctrl+0x86>
 8002134:	797b      	ldrb	r3, [r7, #5]
 8002136:	2bc7      	cmp	r3, #199	@ 0xc7
 8002138:	d801      	bhi.n	800213e <FuelEconomy_Ctrl+0x86>
            fuelEconomyStatus = 5;//0xB4
 800213a:	2305      	movs	r3, #5
 800213c:	71fb      	strb	r3, [r7, #7]

        sendFuelEconomyMessage(fuelEconomyStatus);
 800213e:	79fb      	ldrb	r3, [r7, #7]
 8002140:	4618      	mov	r0, r3
 8002142:	f7ff ff95 	bl	8002070 <sendFuelEconomyMessage>
    }
}
 8002146:	bf00      	nop
 8002148:	3708      	adds	r7, #8
 800214a:	46bd      	mov	sp, r7
 800214c:	bd80      	pop	{r7, pc}
 800214e:	bf00      	nop
 8002150:	20000344 	.word	0x20000344
 8002154:	20000340 	.word	0x20000340

08002158 <handleCANRxMessage>:
void handleCANRxMessage(uint32_t id, uint8_t* data, uint8_t dlc)
{
 8002158:	b580      	push	{r7, lr}
 800215a:	b098      	sub	sp, #96	@ 0x60
 800215c:	af02      	add	r7, sp, #8
 800215e:	60f8      	str	r0, [r7, #12]
 8002160:	60b9      	str	r1, [r7, #8]
 8002162:	4613      	mov	r3, r2
 8002164:	71fb      	strb	r3, [r7, #7]
   	char msg[64];
    if (id == 0x402 && dlc == 1)
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	f240 4202 	movw	r2, #1026	@ 0x402
 800216c:	4293      	cmp	r3, r2
 800216e:	d125      	bne.n	80021bc <handleCANRxMessage+0x64>
 8002170:	79fb      	ldrb	r3, [r7, #7]
 8002172:	2b01      	cmp	r3, #1
 8002174:	d122      	bne.n	80021bc <handleCANRxMessage+0x64>
    {
        uint8_t status = data[0];
 8002176:	68bb      	ldr	r3, [r7, #8]
 8002178:	781b      	ldrb	r3, [r3, #0]
 800217a:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

        switch (status)
 800217e:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8002182:	2b02      	cmp	r3, #2
 8002184:	d00c      	beq.n	80021a0 <handleCANRxMessage+0x48>
 8002186:	2b02      	cmp	r3, #2
 8002188:	dc0d      	bgt.n	80021a6 <handleCANRxMessage+0x4e>
 800218a:	2b00      	cmp	r3, #0
 800218c:	d002      	beq.n	8002194 <handleCANRxMessage+0x3c>
 800218e:	2b01      	cmp	r3, #1
 8002190:	d003      	beq.n	800219a <handleCANRxMessage+0x42>
 8002192:	e008      	b.n	80021a6 <handleCANRxMessage+0x4e>
        {
            case 0: // Normal
                processMotionStatusNormal();
 8002194:	f000 f884 	bl	80022a0 <processMotionStatusNormal>
                break;
 8002198:	e00b      	b.n	80021b2 <handleCANRxMessage+0x5a>
            case 1: // Warning
                handleMotionWarning();
 800219a:	f000 f8a1 	bl	80022e0 <handleMotionWarning>
                break;
 800219e:	e008      	b.n	80021b2 <handleCANRxMessage+0x5a>
            case 2: // Critical
                handleMotionCritical();
 80021a0:	f000 f8ba 	bl	8002318 <handleMotionCritical>
                break;
 80021a4:	e005      	b.n	80021b2 <handleCANRxMessage+0x5a>
            default: // Unknown
                handleUnknownMotionStatus(status);
 80021a6:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80021aa:	4618      	mov	r0, r3
 80021ac:	f000 f8d2 	bl	8002354 <handleUnknownMotionStatus>
                break;
 80021b0:	bf00      	nop
        }

        HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5); // Blink on feedback
 80021b2:	2120      	movs	r1, #32
 80021b4:	4832      	ldr	r0, [pc, #200]	@ (8002280 <handleCANRxMessage+0x128>)
 80021b6:	f001 fac6 	bl	8003746 <HAL_GPIO_TogglePin>
    {
 80021ba:	e01c      	b.n	80021f6 <handleCANRxMessage+0x9e>
    }
    else if (id == 0x200 && dlc >= sizeof(vehicleInfo_T))
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80021c2:	d10a      	bne.n	80021da <handleCANRxMessage+0x82>
 80021c4:	79fb      	ldrb	r3, [r7, #7]
 80021c6:	2b03      	cmp	r3, #3
 80021c8:	d907      	bls.n	80021da <handleCANRxMessage+0x82>
    {
        memcpy(&vehicleData, data, sizeof(vehicleInfo_T));
 80021ca:	68bb      	ldr	r3, [r7, #8]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	461a      	mov	r2, r3
 80021d0:	4b2c      	ldr	r3, [pc, #176]	@ (8002284 <handleCANRxMessage+0x12c>)
 80021d2:	601a      	str	r2, [r3, #0]
        FuelEconomy_Ctrl(); // Trigger update after new vehicle data
 80021d4:	f7ff ff70 	bl	80020b8 <FuelEconomy_Ctrl>
 80021d8:	e00d      	b.n	80021f6 <handleCANRxMessage+0x9e>
    }
    else if (id == 0x300 && dlc >= sizeof(EngineeInfo_T))
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80021e0:	d109      	bne.n	80021f6 <handleCANRxMessage+0x9e>
 80021e2:	79fb      	ldrb	r3, [r7, #7]
 80021e4:	2b03      	cmp	r3, #3
 80021e6:	d906      	bls.n	80021f6 <handleCANRxMessage+0x9e>
    {
        memcpy(&engineData, data, sizeof(EngineeInfo_T));
 80021e8:	68bb      	ldr	r3, [r7, #8]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	461a      	mov	r2, r3
 80021ee:	4b26      	ldr	r3, [pc, #152]	@ (8002288 <handleCANRxMessage+0x130>)
 80021f0:	601a      	str	r2, [r3, #0]
        FuelEconomy_Ctrl(); // Trigger update after new engine data
 80021f2:	f7ff ff61 	bl	80020b8 <FuelEconomy_Ctrl>
    }
    if (id == 0x6FE && dlc == 1)
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	f240 62fe 	movw	r2, #1790	@ 0x6fe
 80021fc:	4293      	cmp	r3, r2
 80021fe:	d13b      	bne.n	8002278 <handleCANRxMessage+0x120>
 8002200:	79fb      	ldrb	r3, [r7, #7]
 8002202:	2b01      	cmp	r3, #1
 8002204:	d138      	bne.n	8002278 <handleCANRxMessage+0x120>
    {

    	//snprintf(msg, sizeof(msg), "Received CAN ID: 0x%03X, DLC: %d\r\n", id, dlc);
    	snprintf(msg, sizeof(msg), "Received CAN ID: 0x%03lX, DLC: %d\r\n", id, dlc);
 8002206:	79fb      	ldrb	r3, [r7, #7]
 8002208:	f107 0014 	add.w	r0, r7, #20
 800220c:	9300      	str	r3, [sp, #0]
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	4a1e      	ldr	r2, [pc, #120]	@ (800228c <handleCANRxMessage+0x134>)
 8002212:	2140      	movs	r1, #64	@ 0x40
 8002214:	f004 f93c 	bl	8006490 <sniprintf>

    	uart_send_string(msg);
 8002218:	f107 0314 	add.w	r3, r7, #20
 800221c:	4618      	mov	r0, r3
 800221e:	f7ff fe89 	bl	8001f34 <uart_send_string>

    	uint8_t status = data[0];
 8002222:	68bb      	ldr	r3, [r7, #8]
 8002224:	781b      	ldrb	r3, [r3, #0]
 8002226:	f887 3056 	strb.w	r3, [r7, #86]	@ 0x56

    	switch (status)
 800222a:	f897 3056 	ldrb.w	r3, [r7, #86]	@ 0x56
 800222e:	2b02      	cmp	r3, #2
 8002230:	d00e      	beq.n	8002250 <handleCANRxMessage+0xf8>
 8002232:	2b02      	cmp	r3, #2
 8002234:	dc10      	bgt.n	8002258 <handleCANRxMessage+0x100>
 8002236:	2b00      	cmp	r3, #0
 8002238:	d002      	beq.n	8002240 <handleCANRxMessage+0xe8>
 800223a:	2b01      	cmp	r3, #1
 800223c:	d004      	beq.n	8002248 <handleCANRxMessage+0xf0>
 800223e:	e00b      	b.n	8002258 <handleCANRxMessage+0x100>
    	    {
    	        case 0: uart_send_string("System Status: NORMAL\r\n"); break;
 8002240:	4813      	ldr	r0, [pc, #76]	@ (8002290 <handleCANRxMessage+0x138>)
 8002242:	f7ff fe77 	bl	8001f34 <uart_send_string>
 8002246:	e00b      	b.n	8002260 <handleCANRxMessage+0x108>
    	        case 1: uart_send_string("System Status: WARNING\r\n"); break;
 8002248:	4812      	ldr	r0, [pc, #72]	@ (8002294 <handleCANRxMessage+0x13c>)
 800224a:	f7ff fe73 	bl	8001f34 <uart_send_string>
 800224e:	e007      	b.n	8002260 <handleCANRxMessage+0x108>
    	        case 2: uart_send_string("System Status: CRITICAL\r\n"); break;
 8002250:	4811      	ldr	r0, [pc, #68]	@ (8002298 <handleCANRxMessage+0x140>)
 8002252:	f7ff fe6f 	bl	8001f34 <uart_send_string>
 8002256:	e003      	b.n	8002260 <handleCANRxMessage+0x108>
    	        default: uart_send_string("System Status: UNKNOWN\r\n"); break;
 8002258:	4810      	ldr	r0, [pc, #64]	@ (800229c <handleCANRxMessage+0x144>)
 800225a:	f7ff fe6b 	bl	8001f34 <uart_send_string>
 800225e:	bf00      	nop
    	    }

    	    // Optional: LED feedback
    	    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, status == 2 ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8002260:	f897 3056 	ldrb.w	r3, [r7, #86]	@ 0x56
 8002264:	2b02      	cmp	r3, #2
 8002266:	bf0c      	ite	eq
 8002268:	2301      	moveq	r3, #1
 800226a:	2300      	movne	r3, #0
 800226c:	b2db      	uxtb	r3, r3
 800226e:	461a      	mov	r2, r3
 8002270:	2120      	movs	r1, #32
 8002272:	4803      	ldr	r0, [pc, #12]	@ (8002280 <handleCANRxMessage+0x128>)
 8002274:	f001 fa4f 	bl	8003716 <HAL_GPIO_WritePin>
        // 0 = Normal, 1 = Warning, 2 = Critical
       // TBD handleSystemStatus(status);
    }

}
 8002278:	bf00      	nop
 800227a:	3758      	adds	r7, #88	@ 0x58
 800227c:	46bd      	mov	sp, r7
 800227e:	bd80      	pop	{r7, pc}
 8002280:	40010800 	.word	0x40010800
 8002284:	20000340 	.word	0x20000340
 8002288:	20000344 	.word	0x20000344
 800228c:	08008828 	.word	0x08008828
 8002290:	0800884c 	.word	0x0800884c
 8002294:	08008864 	.word	0x08008864
 8002298:	08008880 	.word	0x08008880
 800229c:	0800889c 	.word	0x0800889c

080022a0 <processMotionStatusNormal>:

void processMotionStatusNormal(void)
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	af00      	add	r7, sp, #0
    // Example: reset flags or continue normal operation
	motionWarningFlag = 0;
 80022a4:	4b09      	ldr	r3, [pc, #36]	@ (80022cc <processMotionStatusNormal+0x2c>)
 80022a6:	2200      	movs	r2, #0
 80022a8:	701a      	strb	r2, [r3, #0]
	motionCriticalFlag = 0;
 80022aa:	4b09      	ldr	r3, [pc, #36]	@ (80022d0 <processMotionStatusNormal+0x30>)
 80022ac:	2200      	movs	r2, #0
 80022ae:	701a      	strb	r2, [r3, #0]
	motionFaultCounter = 0;
 80022b0:	4b08      	ldr	r3, [pc, #32]	@ (80022d4 <processMotionStatusNormal+0x34>)
 80022b2:	2200      	movs	r2, #0
 80022b4:	701a      	strb	r2, [r3, #0]
	systemMotionState = MOTION_NORMAL;
 80022b6:	4b08      	ldr	r3, [pc, #32]	@ (80022d8 <processMotionStatusNormal+0x38>)
 80022b8:	2200      	movs	r2, #0
 80022ba:	701a      	strb	r2, [r3, #0]
    uart_send_string("Normal: elevated motion detected\r\n");
 80022bc:	4807      	ldr	r0, [pc, #28]	@ (80022dc <processMotionStatusNormal+0x3c>)
 80022be:	f7ff fe39 	bl	8001f34 <uart_send_string>
	logMotionEvent("Normal: elevated motion detected\r\n");
 80022c2:	4806      	ldr	r0, [pc, #24]	@ (80022dc <processMotionStatusNormal+0x3c>)
 80022c4:	f000 f878 	bl	80023b8 <logMotionEvent>
}
 80022c8:	bf00      	nop
 80022ca:	bd80      	pop	{r7, pc}
 80022cc:	20000348 	.word	0x20000348
 80022d0:	20000349 	.word	0x20000349
 80022d4:	2000034a 	.word	0x2000034a
 80022d8:	2000034e 	.word	0x2000034e
 80022dc:	080088b8 	.word	0x080088b8

080022e0 <handleMotionWarning>:
void handleMotionWarning(void)
{
 80022e0:	b580      	push	{r7, lr}
 80022e2:	af00      	add	r7, sp, #0
    // Example: reduce throttle, log warning, or trigger soft alert
    // You can set a flag or call a control function
	motionWarningFlag = 1;
 80022e4:	4b08      	ldr	r3, [pc, #32]	@ (8002308 <handleMotionWarning+0x28>)
 80022e6:	2201      	movs	r2, #1
 80022e8:	701a      	strb	r2, [r3, #0]
	motionCriticalFlag = 0;
 80022ea:	4b08      	ldr	r3, [pc, #32]	@ (800230c <handleMotionWarning+0x2c>)
 80022ec:	2200      	movs	r2, #0
 80022ee:	701a      	strb	r2, [r3, #0]
	systemMotionState = MOTION_WARNING;
 80022f0:	4b07      	ldr	r3, [pc, #28]	@ (8002310 <handleMotionWarning+0x30>)
 80022f2:	2201      	movs	r2, #1
 80022f4:	701a      	strb	r2, [r3, #0]
    uart_send_string("Warning: elevated motion detected\r\n");
 80022f6:	4807      	ldr	r0, [pc, #28]	@ (8002314 <handleMotionWarning+0x34>)
 80022f8:	f7ff fe1c 	bl	8001f34 <uart_send_string>
    logMotionEvent("Warning: elevated motion detected\r\n");
 80022fc:	4805      	ldr	r0, [pc, #20]	@ (8002314 <handleMotionWarning+0x34>)
 80022fe:	f000 f85b 	bl	80023b8 <logMotionEvent>
}
 8002302:	bf00      	nop
 8002304:	bd80      	pop	{r7, pc}
 8002306:	bf00      	nop
 8002308:	20000348 	.word	0x20000348
 800230c:	20000349 	.word	0x20000349
 8002310:	2000034e 	.word	0x2000034e
 8002314:	080088dc 	.word	0x080088dc

08002318 <handleMotionCritical>:

void handleMotionCritical(void)
{
 8002318:	b580      	push	{r7, lr}
 800231a:	af00      	add	r7, sp, #0
    // Example: trigger emergency stop, log fault, or send diagnostic frame
	motionCriticalFlag = 1;
 800231c:	4b09      	ldr	r3, [pc, #36]	@ (8002344 <handleMotionCritical+0x2c>)
 800231e:	2201      	movs	r2, #1
 8002320:	701a      	strb	r2, [r3, #0]
	motionWarningFlag = 0;
 8002322:	4b09      	ldr	r3, [pc, #36]	@ (8002348 <handleMotionCritical+0x30>)
 8002324:	2200      	movs	r2, #0
 8002326:	701a      	strb	r2, [r3, #0]
	systemMotionState = MOTION_CRITICAL;
 8002328:	4b08      	ldr	r3, [pc, #32]	@ (800234c <handleMotionCritical+0x34>)
 800232a:	2202      	movs	r2, #2
 800232c:	701a      	strb	r2, [r3, #0]
    uart_send_string("Critical: unsafe motion detected\r\n");
 800232e:	4808      	ldr	r0, [pc, #32]	@ (8002350 <handleMotionCritical+0x38>)
 8002330:	f7ff fe00 	bl	8001f34 <uart_send_string>
	logMotionEvent("Critical: unsafe motion detected\r\n");
 8002334:	4806      	ldr	r0, [pc, #24]	@ (8002350 <handleMotionCritical+0x38>)
 8002336:	f000 f83f 	bl	80023b8 <logMotionEvent>
	triggerSafetyProtocol();
 800233a:	f000 f82d 	bl	8002398 <triggerSafetyProtocol>
}
 800233e:	bf00      	nop
 8002340:	bd80      	pop	{r7, pc}
 8002342:	bf00      	nop
 8002344:	20000349 	.word	0x20000349
 8002348:	20000348 	.word	0x20000348
 800234c:	2000034e 	.word	0x2000034e
 8002350:	08008900 	.word	0x08008900

08002354 <handleUnknownMotionStatus>:

void handleUnknownMotionStatus(uint8_t status)
{
 8002354:	b580      	push	{r7, lr}
 8002356:	b092      	sub	sp, #72	@ 0x48
 8002358:	af00      	add	r7, sp, #0
 800235a:	4603      	mov	r3, r0
 800235c:	71fb      	strb	r3, [r7, #7]
    char buffer[64];
    // Log or ignore unknown status codes
    systemMotionState = MOTION_UNKNOWN;
 800235e:	4b0b      	ldr	r3, [pc, #44]	@ (800238c <handleUnknownMotionStatus+0x38>)
 8002360:	22ff      	movs	r2, #255	@ 0xff
 8002362:	701a      	strb	r2, [r3, #0]
    lastUnknownStatus = status;
 8002364:	4a0a      	ldr	r2, [pc, #40]	@ (8002390 <handleUnknownMotionStatus+0x3c>)
 8002366:	79fb      	ldrb	r3, [r7, #7]
 8002368:	7013      	strb	r3, [r2, #0]
    snprintf(buffer, sizeof(buffer), "Unknown motion status received: 0x%02X\r\n", status);
 800236a:	79fb      	ldrb	r3, [r7, #7]
 800236c:	f107 0008 	add.w	r0, r7, #8
 8002370:	4a08      	ldr	r2, [pc, #32]	@ (8002394 <handleUnknownMotionStatus+0x40>)
 8002372:	2140      	movs	r1, #64	@ 0x40
 8002374:	f004 f88c 	bl	8006490 <sniprintf>
    logMotionEvent(buffer);
 8002378:	f107 0308 	add.w	r3, r7, #8
 800237c:	4618      	mov	r0, r3
 800237e:	f000 f81b 	bl	80023b8 <logMotionEvent>
}
 8002382:	bf00      	nop
 8002384:	3748      	adds	r7, #72	@ 0x48
 8002386:	46bd      	mov	sp, r7
 8002388:	bd80      	pop	{r7, pc}
 800238a:	bf00      	nop
 800238c:	2000034e 	.word	0x2000034e
 8002390:	2000034b 	.word	0x2000034b
 8002394:	08008924 	.word	0x08008924

08002398 <triggerSafetyProtocol>:
void triggerSafetyProtocol(void)
{
 8002398:	b480      	push	{r7}
 800239a:	af00      	add	r7, sp, #0
    // Example: set a flag or disable actuators
    safetyTriggered = 1;
 800239c:	4b04      	ldr	r3, [pc, #16]	@ (80023b0 <triggerSafetyProtocol+0x18>)
 800239e:	2201      	movs	r2, #1
 80023a0:	701a      	strb	r2, [r3, #0]

    // Optional: stop motors or enter safe mode
     motorControlEnabled = 0;
 80023a2:	4b04      	ldr	r3, [pc, #16]	@ (80023b4 <triggerSafetyProtocol+0x1c>)
 80023a4:	2200      	movs	r2, #0
 80023a6:	701a      	strb	r2, [r3, #0]
}
 80023a8:	bf00      	nop
 80023aa:	46bd      	mov	sp, r7
 80023ac:	bc80      	pop	{r7}
 80023ae:	4770      	bx	lr
 80023b0:	2000034c 	.word	0x2000034c
 80023b4:	2000034d 	.word	0x2000034d

080023b8 <logMotionEvent>:
void logMotionEvent(const char* message)
{
 80023b8:	b580      	push	{r7, lr}
 80023ba:	b082      	sub	sp, #8
 80023bc:	af00      	add	r7, sp, #0
 80023be:	6078      	str	r0, [r7, #4]
	if(motorControlEnabled)
 80023c0:	4b07      	ldr	r3, [pc, #28]	@ (80023e0 <logMotionEvent+0x28>)
 80023c2:	781b      	ldrb	r3, [r3, #0]
 80023c4:	b2db      	uxtb	r3, r3
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d002      	beq.n	80023d0 <logMotionEvent+0x18>
	   uart_send_string("log Motion Event\r\n");
 80023ca:	4806      	ldr	r0, [pc, #24]	@ (80023e4 <logMotionEvent+0x2c>)
 80023cc:	f7ff fdb2 	bl	8001f34 <uart_send_string>

       printf("Motion Event: %s\r\n", message);
 80023d0:	6879      	ldr	r1, [r7, #4]
 80023d2:	4805      	ldr	r0, [pc, #20]	@ (80023e8 <logMotionEvent+0x30>)
 80023d4:	f004 f84a 	bl	800646c <iprintf>
}
 80023d8:	bf00      	nop
 80023da:	3708      	adds	r7, #8
 80023dc:	46bd      	mov	sp, r7
 80023de:	bd80      	pop	{r7, pc}
 80023e0:	2000034d 	.word	0x2000034d
 80023e4:	08008950 	.word	0x08008950
 80023e8:	08008964 	.word	0x08008964

080023ec <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80023ec:	f7ff fd06 	bl	8001dfc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80023f0:	480b      	ldr	r0, [pc, #44]	@ (8002420 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80023f2:	490c      	ldr	r1, [pc, #48]	@ (8002424 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80023f4:	4a0c      	ldr	r2, [pc, #48]	@ (8002428 <LoopFillZerobss+0x16>)
  movs r3, #0
 80023f6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80023f8:	e002      	b.n	8002400 <LoopCopyDataInit>

080023fa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80023fa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80023fc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80023fe:	3304      	adds	r3, #4

08002400 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002400:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002402:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002404:	d3f9      	bcc.n	80023fa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002406:	4a09      	ldr	r2, [pc, #36]	@ (800242c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8002408:	4c09      	ldr	r4, [pc, #36]	@ (8002430 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800240a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800240c:	e001      	b.n	8002412 <LoopFillZerobss>

0800240e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800240e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002410:	3204      	adds	r2, #4

08002412 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002412:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002414:	d3fb      	bcc.n	800240e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002416:	f004 f90d 	bl	8006634 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800241a:	f7ff f981 	bl	8001720 <main>
  bx lr
 800241e:	4770      	bx	lr
  ldr r0, =_sdata
 8002420:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002424:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8002428:	08008d24 	.word	0x08008d24
  ldr r2, =_sbss
 800242c:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8002430:	200004a0 	.word	0x200004a0

08002434 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002434:	e7fe      	b.n	8002434 <ADC1_2_IRQHandler>
	...

08002438 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002438:	b580      	push	{r7, lr}
 800243a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800243c:	4b08      	ldr	r3, [pc, #32]	@ (8002460 <HAL_Init+0x28>)
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	4a07      	ldr	r2, [pc, #28]	@ (8002460 <HAL_Init+0x28>)
 8002442:	f043 0310 	orr.w	r3, r3, #16
 8002446:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002448:	2003      	movs	r0, #3
 800244a:	f000 ff87 	bl	800335c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800244e:	2000      	movs	r0, #0
 8002450:	f000 f808 	bl	8002464 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002454:	f7ff faae 	bl	80019b4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002458:	2300      	movs	r3, #0
}
 800245a:	4618      	mov	r0, r3
 800245c:	bd80      	pop	{r7, pc}
 800245e:	bf00      	nop
 8002460:	40022000 	.word	0x40022000

08002464 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002464:	b580      	push	{r7, lr}
 8002466:	b082      	sub	sp, #8
 8002468:	af00      	add	r7, sp, #0
 800246a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800246c:	4b12      	ldr	r3, [pc, #72]	@ (80024b8 <HAL_InitTick+0x54>)
 800246e:	681a      	ldr	r2, [r3, #0]
 8002470:	4b12      	ldr	r3, [pc, #72]	@ (80024bc <HAL_InitTick+0x58>)
 8002472:	781b      	ldrb	r3, [r3, #0]
 8002474:	4619      	mov	r1, r3
 8002476:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800247a:	fbb3 f3f1 	udiv	r3, r3, r1
 800247e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002482:	4618      	mov	r0, r3
 8002484:	f000 ff9f 	bl	80033c6 <HAL_SYSTICK_Config>
 8002488:	4603      	mov	r3, r0
 800248a:	2b00      	cmp	r3, #0
 800248c:	d001      	beq.n	8002492 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800248e:	2301      	movs	r3, #1
 8002490:	e00e      	b.n	80024b0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	2b0f      	cmp	r3, #15
 8002496:	d80a      	bhi.n	80024ae <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002498:	2200      	movs	r2, #0
 800249a:	6879      	ldr	r1, [r7, #4]
 800249c:	f04f 30ff 	mov.w	r0, #4294967295
 80024a0:	f000 ff67 	bl	8003372 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80024a4:	4a06      	ldr	r2, [pc, #24]	@ (80024c0 <HAL_InitTick+0x5c>)
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80024aa:	2300      	movs	r3, #0
 80024ac:	e000      	b.n	80024b0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80024ae:	2301      	movs	r3, #1
}
 80024b0:	4618      	mov	r0, r3
 80024b2:	3708      	adds	r7, #8
 80024b4:	46bd      	mov	sp, r7
 80024b6:	bd80      	pop	{r7, pc}
 80024b8:	20000000 	.word	0x20000000
 80024bc:	20000008 	.word	0x20000008
 80024c0:	20000004 	.word	0x20000004

080024c4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80024c4:	b480      	push	{r7}
 80024c6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80024c8:	4b05      	ldr	r3, [pc, #20]	@ (80024e0 <HAL_IncTick+0x1c>)
 80024ca:	781b      	ldrb	r3, [r3, #0]
 80024cc:	461a      	mov	r2, r3
 80024ce:	4b05      	ldr	r3, [pc, #20]	@ (80024e4 <HAL_IncTick+0x20>)
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	4413      	add	r3, r2
 80024d4:	4a03      	ldr	r2, [pc, #12]	@ (80024e4 <HAL_IncTick+0x20>)
 80024d6:	6013      	str	r3, [r2, #0]
}
 80024d8:	bf00      	nop
 80024da:	46bd      	mov	sp, r7
 80024dc:	bc80      	pop	{r7}
 80024de:	4770      	bx	lr
 80024e0:	20000008 	.word	0x20000008
 80024e4:	20000350 	.word	0x20000350

080024e8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80024e8:	b480      	push	{r7}
 80024ea:	af00      	add	r7, sp, #0
  return uwTick;
 80024ec:	4b02      	ldr	r3, [pc, #8]	@ (80024f8 <HAL_GetTick+0x10>)
 80024ee:	681b      	ldr	r3, [r3, #0]
}
 80024f0:	4618      	mov	r0, r3
 80024f2:	46bd      	mov	sp, r7
 80024f4:	bc80      	pop	{r7}
 80024f6:	4770      	bx	lr
 80024f8:	20000350 	.word	0x20000350

080024fc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80024fc:	b580      	push	{r7, lr}
 80024fe:	b084      	sub	sp, #16
 8002500:	af00      	add	r7, sp, #0
 8002502:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002504:	f7ff fff0 	bl	80024e8 <HAL_GetTick>
 8002508:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002514:	d005      	beq.n	8002522 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002516:	4b0a      	ldr	r3, [pc, #40]	@ (8002540 <HAL_Delay+0x44>)
 8002518:	781b      	ldrb	r3, [r3, #0]
 800251a:	461a      	mov	r2, r3
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	4413      	add	r3, r2
 8002520:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002522:	bf00      	nop
 8002524:	f7ff ffe0 	bl	80024e8 <HAL_GetTick>
 8002528:	4602      	mov	r2, r0
 800252a:	68bb      	ldr	r3, [r7, #8]
 800252c:	1ad3      	subs	r3, r2, r3
 800252e:	68fa      	ldr	r2, [r7, #12]
 8002530:	429a      	cmp	r2, r3
 8002532:	d8f7      	bhi.n	8002524 <HAL_Delay+0x28>
  {
  }
}
 8002534:	bf00      	nop
 8002536:	bf00      	nop
 8002538:	3710      	adds	r7, #16
 800253a:	46bd      	mov	sp, r7
 800253c:	bd80      	pop	{r7, pc}
 800253e:	bf00      	nop
 8002540:	20000008 	.word	0x20000008

08002544 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8002544:	b580      	push	{r7, lr}
 8002546:	b084      	sub	sp, #16
 8002548:	af00      	add	r7, sp, #0
 800254a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	2b00      	cmp	r3, #0
 8002550:	d101      	bne.n	8002556 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8002552:	2301      	movs	r3, #1
 8002554:	e0ed      	b.n	8002732 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	f893 3020 	ldrb.w	r3, [r3, #32]
 800255c:	b2db      	uxtb	r3, r3
 800255e:	2b00      	cmp	r3, #0
 8002560:	d102      	bne.n	8002568 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8002562:	6878      	ldr	r0, [r7, #4]
 8002564:	f7ff fa58 	bl	8001a18 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	681a      	ldr	r2, [r3, #0]
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f042 0201 	orr.w	r2, r2, #1
 8002576:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002578:	f7ff ffb6 	bl	80024e8 <HAL_GetTick>
 800257c:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800257e:	e012      	b.n	80025a6 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002580:	f7ff ffb2 	bl	80024e8 <HAL_GetTick>
 8002584:	4602      	mov	r2, r0
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	1ad3      	subs	r3, r2, r3
 800258a:	2b0a      	cmp	r3, #10
 800258c:	d90b      	bls.n	80025a6 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002592:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	2205      	movs	r2, #5
 800259e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80025a2:	2301      	movs	r3, #1
 80025a4:	e0c5      	b.n	8002732 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	685b      	ldr	r3, [r3, #4]
 80025ac:	f003 0301 	and.w	r3, r3, #1
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d0e5      	beq.n	8002580 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	681a      	ldr	r2, [r3, #0]
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f022 0202 	bic.w	r2, r2, #2
 80025c2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80025c4:	f7ff ff90 	bl	80024e8 <HAL_GetTick>
 80025c8:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80025ca:	e012      	b.n	80025f2 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80025cc:	f7ff ff8c 	bl	80024e8 <HAL_GetTick>
 80025d0:	4602      	mov	r2, r0
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	1ad3      	subs	r3, r2, r3
 80025d6:	2b0a      	cmp	r3, #10
 80025d8:	d90b      	bls.n	80025f2 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025de:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	2205      	movs	r2, #5
 80025ea:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80025ee:	2301      	movs	r3, #1
 80025f0:	e09f      	b.n	8002732 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	685b      	ldr	r3, [r3, #4]
 80025f8:	f003 0302 	and.w	r3, r3, #2
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d1e5      	bne.n	80025cc <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	7e1b      	ldrb	r3, [r3, #24]
 8002604:	2b01      	cmp	r3, #1
 8002606:	d108      	bne.n	800261a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	681a      	ldr	r2, [r3, #0]
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8002616:	601a      	str	r2, [r3, #0]
 8002618:	e007      	b.n	800262a <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	681a      	ldr	r2, [r3, #0]
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002628:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	7e5b      	ldrb	r3, [r3, #25]
 800262e:	2b01      	cmp	r3, #1
 8002630:	d108      	bne.n	8002644 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	681a      	ldr	r2, [r3, #0]
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002640:	601a      	str	r2, [r3, #0]
 8002642:	e007      	b.n	8002654 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	681a      	ldr	r2, [r3, #0]
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002652:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	7e9b      	ldrb	r3, [r3, #26]
 8002658:	2b01      	cmp	r3, #1
 800265a:	d108      	bne.n	800266e <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	681a      	ldr	r2, [r3, #0]
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f042 0220 	orr.w	r2, r2, #32
 800266a:	601a      	str	r2, [r3, #0]
 800266c:	e007      	b.n	800267e <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	681a      	ldr	r2, [r3, #0]
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f022 0220 	bic.w	r2, r2, #32
 800267c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	7edb      	ldrb	r3, [r3, #27]
 8002682:	2b01      	cmp	r3, #1
 8002684:	d108      	bne.n	8002698 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	681a      	ldr	r2, [r3, #0]
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	f022 0210 	bic.w	r2, r2, #16
 8002694:	601a      	str	r2, [r3, #0]
 8002696:	e007      	b.n	80026a8 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	681a      	ldr	r2, [r3, #0]
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f042 0210 	orr.w	r2, r2, #16
 80026a6:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	7f1b      	ldrb	r3, [r3, #28]
 80026ac:	2b01      	cmp	r3, #1
 80026ae:	d108      	bne.n	80026c2 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	681a      	ldr	r2, [r3, #0]
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f042 0208 	orr.w	r2, r2, #8
 80026be:	601a      	str	r2, [r3, #0]
 80026c0:	e007      	b.n	80026d2 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	681a      	ldr	r2, [r3, #0]
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f022 0208 	bic.w	r2, r2, #8
 80026d0:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	7f5b      	ldrb	r3, [r3, #29]
 80026d6:	2b01      	cmp	r3, #1
 80026d8:	d108      	bne.n	80026ec <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	681a      	ldr	r2, [r3, #0]
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f042 0204 	orr.w	r2, r2, #4
 80026e8:	601a      	str	r2, [r3, #0]
 80026ea:	e007      	b.n	80026fc <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	681a      	ldr	r2, [r3, #0]
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f022 0204 	bic.w	r2, r2, #4
 80026fa:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	689a      	ldr	r2, [r3, #8]
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	68db      	ldr	r3, [r3, #12]
 8002704:	431a      	orrs	r2, r3
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	691b      	ldr	r3, [r3, #16]
 800270a:	431a      	orrs	r2, r3
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	695b      	ldr	r3, [r3, #20]
 8002710:	ea42 0103 	orr.w	r1, r2, r3
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	685b      	ldr	r3, [r3, #4]
 8002718:	1e5a      	subs	r2, r3, #1
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	430a      	orrs	r2, r1
 8002720:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	2200      	movs	r2, #0
 8002726:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	2201      	movs	r2, #1
 800272c:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8002730:	2300      	movs	r3, #0
}
 8002732:	4618      	mov	r0, r3
 8002734:	3710      	adds	r7, #16
 8002736:	46bd      	mov	sp, r7
 8002738:	bd80      	pop	{r7, pc}

0800273a <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 800273a:	b480      	push	{r7}
 800273c:	b087      	sub	sp, #28
 800273e:	af00      	add	r7, sp, #0
 8002740:	6078      	str	r0, [r7, #4]
 8002742:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002750:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8002752:	7cfb      	ldrb	r3, [r7, #19]
 8002754:	2b01      	cmp	r3, #1
 8002756:	d003      	beq.n	8002760 <HAL_CAN_ConfigFilter+0x26>
 8002758:	7cfb      	ldrb	r3, [r7, #19]
 800275a:	2b02      	cmp	r3, #2
 800275c:	f040 80aa 	bne.w	80028b4 <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002760:	697b      	ldr	r3, [r7, #20]
 8002762:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8002766:	f043 0201 	orr.w	r2, r3, #1
 800276a:	697b      	ldr	r3, [r7, #20]
 800276c:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8002770:	683b      	ldr	r3, [r7, #0]
 8002772:	695b      	ldr	r3, [r3, #20]
 8002774:	f003 031f 	and.w	r3, r3, #31
 8002778:	2201      	movs	r2, #1
 800277a:	fa02 f303 	lsl.w	r3, r2, r3
 800277e:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8002780:	697b      	ldr	r3, [r7, #20]
 8002782:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	43db      	mvns	r3, r3
 800278a:	401a      	ands	r2, r3
 800278c:	697b      	ldr	r3, [r7, #20]
 800278e:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8002792:	683b      	ldr	r3, [r7, #0]
 8002794:	69db      	ldr	r3, [r3, #28]
 8002796:	2b00      	cmp	r3, #0
 8002798:	d123      	bne.n	80027e2 <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 800279a:	697b      	ldr	r3, [r7, #20]
 800279c:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	43db      	mvns	r3, r3
 80027a4:	401a      	ands	r2, r3
 80027a6:	697b      	ldr	r3, [r7, #20]
 80027a8:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80027ac:	683b      	ldr	r3, [r7, #0]
 80027ae:	68db      	ldr	r3, [r3, #12]
 80027b0:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80027b2:	683b      	ldr	r3, [r7, #0]
 80027b4:	685b      	ldr	r3, [r3, #4]
 80027b6:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80027b8:	683a      	ldr	r2, [r7, #0]
 80027ba:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80027bc:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80027be:	697b      	ldr	r3, [r7, #20]
 80027c0:	3248      	adds	r2, #72	@ 0x48
 80027c2:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80027c6:	683b      	ldr	r3, [r7, #0]
 80027c8:	689b      	ldr	r3, [r3, #8]
 80027ca:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80027cc:	683b      	ldr	r3, [r7, #0]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80027d2:	683b      	ldr	r3, [r7, #0]
 80027d4:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80027d6:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80027d8:	6979      	ldr	r1, [r7, #20]
 80027da:	3348      	adds	r3, #72	@ 0x48
 80027dc:	00db      	lsls	r3, r3, #3
 80027de:	440b      	add	r3, r1
 80027e0:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80027e2:	683b      	ldr	r3, [r7, #0]
 80027e4:	69db      	ldr	r3, [r3, #28]
 80027e6:	2b01      	cmp	r3, #1
 80027e8:	d122      	bne.n	8002830 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80027ea:	697b      	ldr	r3, [r7, #20]
 80027ec:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	431a      	orrs	r2, r3
 80027f4:	697b      	ldr	r3, [r7, #20]
 80027f6:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80027fa:	683b      	ldr	r3, [r7, #0]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002800:	683b      	ldr	r3, [r7, #0]
 8002802:	685b      	ldr	r3, [r3, #4]
 8002804:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002806:	683a      	ldr	r2, [r7, #0]
 8002808:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800280a:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800280c:	697b      	ldr	r3, [r7, #20]
 800280e:	3248      	adds	r2, #72	@ 0x48
 8002810:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002814:	683b      	ldr	r3, [r7, #0]
 8002816:	689b      	ldr	r3, [r3, #8]
 8002818:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 800281a:	683b      	ldr	r3, [r7, #0]
 800281c:	68db      	ldr	r3, [r3, #12]
 800281e:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002820:	683b      	ldr	r3, [r7, #0]
 8002822:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002824:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002826:	6979      	ldr	r1, [r7, #20]
 8002828:	3348      	adds	r3, #72	@ 0x48
 800282a:	00db      	lsls	r3, r3, #3
 800282c:	440b      	add	r3, r1
 800282e:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8002830:	683b      	ldr	r3, [r7, #0]
 8002832:	699b      	ldr	r3, [r3, #24]
 8002834:	2b00      	cmp	r3, #0
 8002836:	d109      	bne.n	800284c <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8002838:	697b      	ldr	r3, [r7, #20]
 800283a:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	43db      	mvns	r3, r3
 8002842:	401a      	ands	r2, r3
 8002844:	697b      	ldr	r3, [r7, #20]
 8002846:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 800284a:	e007      	b.n	800285c <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 800284c:	697b      	ldr	r3, [r7, #20]
 800284e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	431a      	orrs	r2, r3
 8002856:	697b      	ldr	r3, [r7, #20]
 8002858:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 800285c:	683b      	ldr	r3, [r7, #0]
 800285e:	691b      	ldr	r3, [r3, #16]
 8002860:	2b00      	cmp	r3, #0
 8002862:	d109      	bne.n	8002878 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8002864:	697b      	ldr	r3, [r7, #20]
 8002866:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	43db      	mvns	r3, r3
 800286e:	401a      	ands	r2, r3
 8002870:	697b      	ldr	r3, [r7, #20]
 8002872:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 8002876:	e007      	b.n	8002888 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8002878:	697b      	ldr	r3, [r7, #20]
 800287a:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	431a      	orrs	r2, r3
 8002882:	697b      	ldr	r3, [r7, #20]
 8002884:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8002888:	683b      	ldr	r3, [r7, #0]
 800288a:	6a1b      	ldr	r3, [r3, #32]
 800288c:	2b01      	cmp	r3, #1
 800288e:	d107      	bne.n	80028a0 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8002890:	697b      	ldr	r3, [r7, #20]
 8002892:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	431a      	orrs	r2, r3
 800289a:	697b      	ldr	r3, [r7, #20]
 800289c:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80028a0:	697b      	ldr	r3, [r7, #20]
 80028a2:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80028a6:	f023 0201 	bic.w	r2, r3, #1
 80028aa:	697b      	ldr	r3, [r7, #20]
 80028ac:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 80028b0:	2300      	movs	r3, #0
 80028b2:	e006      	b.n	80028c2 <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028b8:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80028c0:	2301      	movs	r3, #1
  }
}
 80028c2:	4618      	mov	r0, r3
 80028c4:	371c      	adds	r7, #28
 80028c6:	46bd      	mov	sp, r7
 80028c8:	bc80      	pop	{r7}
 80028ca:	4770      	bx	lr

080028cc <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80028cc:	b580      	push	{r7, lr}
 80028ce:	b084      	sub	sp, #16
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80028da:	b2db      	uxtb	r3, r3
 80028dc:	2b01      	cmp	r3, #1
 80028de:	d12e      	bne.n	800293e <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	2202      	movs	r2, #2
 80028e4:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	681a      	ldr	r2, [r3, #0]
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f022 0201 	bic.w	r2, r2, #1
 80028f6:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80028f8:	f7ff fdf6 	bl	80024e8 <HAL_GetTick>
 80028fc:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80028fe:	e012      	b.n	8002926 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002900:	f7ff fdf2 	bl	80024e8 <HAL_GetTick>
 8002904:	4602      	mov	r2, r0
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	1ad3      	subs	r3, r2, r3
 800290a:	2b0a      	cmp	r3, #10
 800290c:	d90b      	bls.n	8002926 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002912:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	2205      	movs	r2, #5
 800291e:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8002922:	2301      	movs	r3, #1
 8002924:	e012      	b.n	800294c <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	685b      	ldr	r3, [r3, #4]
 800292c:	f003 0301 	and.w	r3, r3, #1
 8002930:	2b00      	cmp	r3, #0
 8002932:	d1e5      	bne.n	8002900 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	2200      	movs	r2, #0
 8002938:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 800293a:	2300      	movs	r3, #0
 800293c:	e006      	b.n	800294c <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002942:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800294a:	2301      	movs	r3, #1
  }
}
 800294c:	4618      	mov	r0, r3
 800294e:	3710      	adds	r7, #16
 8002950:	46bd      	mov	sp, r7
 8002952:	bd80      	pop	{r7, pc}

08002954 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8002954:	b480      	push	{r7}
 8002956:	b089      	sub	sp, #36	@ 0x24
 8002958:	af00      	add	r7, sp, #0
 800295a:	60f8      	str	r0, [r7, #12]
 800295c:	60b9      	str	r1, [r7, #8]
 800295e:	607a      	str	r2, [r7, #4]
 8002960:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002968:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	689b      	ldr	r3, [r3, #8]
 8002970:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8002972:	7ffb      	ldrb	r3, [r7, #31]
 8002974:	2b01      	cmp	r3, #1
 8002976:	d003      	beq.n	8002980 <HAL_CAN_AddTxMessage+0x2c>
 8002978:	7ffb      	ldrb	r3, [r7, #31]
 800297a:	2b02      	cmp	r3, #2
 800297c:	f040 80ad 	bne.w	8002ada <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002980:	69bb      	ldr	r3, [r7, #24]
 8002982:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002986:	2b00      	cmp	r3, #0
 8002988:	d10a      	bne.n	80029a0 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800298a:	69bb      	ldr	r3, [r7, #24]
 800298c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002990:	2b00      	cmp	r3, #0
 8002992:	d105      	bne.n	80029a0 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8002994:	69bb      	ldr	r3, [r7, #24]
 8002996:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800299a:	2b00      	cmp	r3, #0
 800299c:	f000 8095 	beq.w	8002aca <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80029a0:	69bb      	ldr	r3, [r7, #24]
 80029a2:	0e1b      	lsrs	r3, r3, #24
 80029a4:	f003 0303 	and.w	r3, r3, #3
 80029a8:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80029aa:	2201      	movs	r2, #1
 80029ac:	697b      	ldr	r3, [r7, #20]
 80029ae:	409a      	lsls	r2, r3
 80029b0:	683b      	ldr	r3, [r7, #0]
 80029b2:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 80029b4:	68bb      	ldr	r3, [r7, #8]
 80029b6:	689b      	ldr	r3, [r3, #8]
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d10d      	bne.n	80029d8 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80029bc:	68bb      	ldr	r3, [r7, #8]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 80029c2:	68bb      	ldr	r3, [r7, #8]
 80029c4:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80029c6:	68f9      	ldr	r1, [r7, #12]
 80029c8:	6809      	ldr	r1, [r1, #0]
 80029ca:	431a      	orrs	r2, r3
 80029cc:	697b      	ldr	r3, [r7, #20]
 80029ce:	3318      	adds	r3, #24
 80029d0:	011b      	lsls	r3, r3, #4
 80029d2:	440b      	add	r3, r1
 80029d4:	601a      	str	r2, [r3, #0]
 80029d6:	e00f      	b.n	80029f8 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80029d8:	68bb      	ldr	r3, [r7, #8]
 80029da:	685b      	ldr	r3, [r3, #4]
 80029dc:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 80029de:	68bb      	ldr	r3, [r7, #8]
 80029e0:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80029e2:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 80029e4:	68bb      	ldr	r3, [r7, #8]
 80029e6:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80029e8:	68f9      	ldr	r1, [r7, #12]
 80029ea:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 80029ec:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80029ee:	697b      	ldr	r3, [r7, #20]
 80029f0:	3318      	adds	r3, #24
 80029f2:	011b      	lsls	r3, r3, #4
 80029f4:	440b      	add	r3, r1
 80029f6:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	6819      	ldr	r1, [r3, #0]
 80029fc:	68bb      	ldr	r3, [r7, #8]
 80029fe:	691a      	ldr	r2, [r3, #16]
 8002a00:	697b      	ldr	r3, [r7, #20]
 8002a02:	3318      	adds	r3, #24
 8002a04:	011b      	lsls	r3, r3, #4
 8002a06:	440b      	add	r3, r1
 8002a08:	3304      	adds	r3, #4
 8002a0a:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8002a0c:	68bb      	ldr	r3, [r7, #8]
 8002a0e:	7d1b      	ldrb	r3, [r3, #20]
 8002a10:	2b01      	cmp	r3, #1
 8002a12:	d111      	bne.n	8002a38 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	681a      	ldr	r2, [r3, #0]
 8002a18:	697b      	ldr	r3, [r7, #20]
 8002a1a:	3318      	adds	r3, #24
 8002a1c:	011b      	lsls	r3, r3, #4
 8002a1e:	4413      	add	r3, r2
 8002a20:	3304      	adds	r3, #4
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	68fa      	ldr	r2, [r7, #12]
 8002a26:	6811      	ldr	r1, [r2, #0]
 8002a28:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002a2c:	697b      	ldr	r3, [r7, #20]
 8002a2e:	3318      	adds	r3, #24
 8002a30:	011b      	lsls	r3, r3, #4
 8002a32:	440b      	add	r3, r1
 8002a34:	3304      	adds	r3, #4
 8002a36:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	3307      	adds	r3, #7
 8002a3c:	781b      	ldrb	r3, [r3, #0]
 8002a3e:	061a      	lsls	r2, r3, #24
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	3306      	adds	r3, #6
 8002a44:	781b      	ldrb	r3, [r3, #0]
 8002a46:	041b      	lsls	r3, r3, #16
 8002a48:	431a      	orrs	r2, r3
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	3305      	adds	r3, #5
 8002a4e:	781b      	ldrb	r3, [r3, #0]
 8002a50:	021b      	lsls	r3, r3, #8
 8002a52:	4313      	orrs	r3, r2
 8002a54:	687a      	ldr	r2, [r7, #4]
 8002a56:	3204      	adds	r2, #4
 8002a58:	7812      	ldrb	r2, [r2, #0]
 8002a5a:	4610      	mov	r0, r2
 8002a5c:	68fa      	ldr	r2, [r7, #12]
 8002a5e:	6811      	ldr	r1, [r2, #0]
 8002a60:	ea43 0200 	orr.w	r2, r3, r0
 8002a64:	697b      	ldr	r3, [r7, #20]
 8002a66:	011b      	lsls	r3, r3, #4
 8002a68:	440b      	add	r3, r1
 8002a6a:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 8002a6e:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	3303      	adds	r3, #3
 8002a74:	781b      	ldrb	r3, [r3, #0]
 8002a76:	061a      	lsls	r2, r3, #24
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	3302      	adds	r3, #2
 8002a7c:	781b      	ldrb	r3, [r3, #0]
 8002a7e:	041b      	lsls	r3, r3, #16
 8002a80:	431a      	orrs	r2, r3
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	3301      	adds	r3, #1
 8002a86:	781b      	ldrb	r3, [r3, #0]
 8002a88:	021b      	lsls	r3, r3, #8
 8002a8a:	4313      	orrs	r3, r2
 8002a8c:	687a      	ldr	r2, [r7, #4]
 8002a8e:	7812      	ldrb	r2, [r2, #0]
 8002a90:	4610      	mov	r0, r2
 8002a92:	68fa      	ldr	r2, [r7, #12]
 8002a94:	6811      	ldr	r1, [r2, #0]
 8002a96:	ea43 0200 	orr.w	r2, r3, r0
 8002a9a:	697b      	ldr	r3, [r7, #20]
 8002a9c:	011b      	lsls	r3, r3, #4
 8002a9e:	440b      	add	r3, r1
 8002aa0:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 8002aa4:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	681a      	ldr	r2, [r3, #0]
 8002aaa:	697b      	ldr	r3, [r7, #20]
 8002aac:	3318      	adds	r3, #24
 8002aae:	011b      	lsls	r3, r3, #4
 8002ab0:	4413      	add	r3, r2
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	68fa      	ldr	r2, [r7, #12]
 8002ab6:	6811      	ldr	r1, [r2, #0]
 8002ab8:	f043 0201 	orr.w	r2, r3, #1
 8002abc:	697b      	ldr	r3, [r7, #20]
 8002abe:	3318      	adds	r3, #24
 8002ac0:	011b      	lsls	r3, r3, #4
 8002ac2:	440b      	add	r3, r1
 8002ac4:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8002ac6:	2300      	movs	r3, #0
 8002ac8:	e00e      	b.n	8002ae8 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ace:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 8002ad6:	2301      	movs	r3, #1
 8002ad8:	e006      	b.n	8002ae8 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ade:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002ae6:	2301      	movs	r3, #1
  }
}
 8002ae8:	4618      	mov	r0, r3
 8002aea:	3724      	adds	r7, #36	@ 0x24
 8002aec:	46bd      	mov	sp, r7
 8002aee:	bc80      	pop	{r7}
 8002af0:	4770      	bx	lr

08002af2 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8002af2:	b480      	push	{r7}
 8002af4:	b087      	sub	sp, #28
 8002af6:	af00      	add	r7, sp, #0
 8002af8:	60f8      	str	r0, [r7, #12]
 8002afa:	60b9      	str	r1, [r7, #8]
 8002afc:	607a      	str	r2, [r7, #4]
 8002afe:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002b06:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8002b08:	7dfb      	ldrb	r3, [r7, #23]
 8002b0a:	2b01      	cmp	r3, #1
 8002b0c:	d003      	beq.n	8002b16 <HAL_CAN_GetRxMessage+0x24>
 8002b0e:	7dfb      	ldrb	r3, [r7, #23]
 8002b10:	2b02      	cmp	r3, #2
 8002b12:	f040 8103 	bne.w	8002d1c <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002b16:	68bb      	ldr	r3, [r7, #8]
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d10e      	bne.n	8002b3a <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	68db      	ldr	r3, [r3, #12]
 8002b22:	f003 0303 	and.w	r3, r3, #3
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d116      	bne.n	8002b58 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b2e:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8002b36:	2301      	movs	r3, #1
 8002b38:	e0f7      	b.n	8002d2a <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	691b      	ldr	r3, [r3, #16]
 8002b40:	f003 0303 	and.w	r3, r3, #3
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d107      	bne.n	8002b58 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b4c:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8002b54:	2301      	movs	r3, #1
 8002b56:	e0e8      	b.n	8002d2a <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	681a      	ldr	r2, [r3, #0]
 8002b5c:	68bb      	ldr	r3, [r7, #8]
 8002b5e:	331b      	adds	r3, #27
 8002b60:	011b      	lsls	r3, r3, #4
 8002b62:	4413      	add	r3, r2
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	f003 0204 	and.w	r2, r3, #4
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	689b      	ldr	r3, [r3, #8]
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d10c      	bne.n	8002b90 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	681a      	ldr	r2, [r3, #0]
 8002b7a:	68bb      	ldr	r3, [r7, #8]
 8002b7c:	331b      	adds	r3, #27
 8002b7e:	011b      	lsls	r3, r3, #4
 8002b80:	4413      	add	r3, r2
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	0d5b      	lsrs	r3, r3, #21
 8002b86:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	601a      	str	r2, [r3, #0]
 8002b8e:	e00b      	b.n	8002ba8 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	681a      	ldr	r2, [r3, #0]
 8002b94:	68bb      	ldr	r3, [r7, #8]
 8002b96:	331b      	adds	r3, #27
 8002b98:	011b      	lsls	r3, r3, #4
 8002b9a:	4413      	add	r3, r2
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	08db      	lsrs	r3, r3, #3
 8002ba0:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	681a      	ldr	r2, [r3, #0]
 8002bac:	68bb      	ldr	r3, [r7, #8]
 8002bae:	331b      	adds	r3, #27
 8002bb0:	011b      	lsls	r3, r3, #4
 8002bb2:	4413      	add	r3, r2
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f003 0202 	and.w	r2, r3, #2
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	681a      	ldr	r2, [r3, #0]
 8002bc2:	68bb      	ldr	r3, [r7, #8]
 8002bc4:	331b      	adds	r3, #27
 8002bc6:	011b      	lsls	r3, r3, #4
 8002bc8:	4413      	add	r3, r2
 8002bca:	3304      	adds	r3, #4
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f003 0308 	and.w	r3, r3, #8
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d003      	beq.n	8002bde <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	2208      	movs	r2, #8
 8002bda:	611a      	str	r2, [r3, #16]
 8002bdc:	e00b      	b.n	8002bf6 <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	681a      	ldr	r2, [r3, #0]
 8002be2:	68bb      	ldr	r3, [r7, #8]
 8002be4:	331b      	adds	r3, #27
 8002be6:	011b      	lsls	r3, r3, #4
 8002be8:	4413      	add	r3, r2
 8002bea:	3304      	adds	r3, #4
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f003 020f 	and.w	r2, r3, #15
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	681a      	ldr	r2, [r3, #0]
 8002bfa:	68bb      	ldr	r3, [r7, #8]
 8002bfc:	331b      	adds	r3, #27
 8002bfe:	011b      	lsls	r3, r3, #4
 8002c00:	4413      	add	r3, r2
 8002c02:	3304      	adds	r3, #4
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	0a1b      	lsrs	r3, r3, #8
 8002c08:	b2da      	uxtb	r2, r3
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	681a      	ldr	r2, [r3, #0]
 8002c12:	68bb      	ldr	r3, [r7, #8]
 8002c14:	331b      	adds	r3, #27
 8002c16:	011b      	lsls	r3, r3, #4
 8002c18:	4413      	add	r3, r2
 8002c1a:	3304      	adds	r3, #4
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	0c1b      	lsrs	r3, r3, #16
 8002c20:	b29a      	uxth	r2, r3
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	681a      	ldr	r2, [r3, #0]
 8002c2a:	68bb      	ldr	r3, [r7, #8]
 8002c2c:	011b      	lsls	r3, r3, #4
 8002c2e:	4413      	add	r3, r2
 8002c30:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	b2da      	uxtb	r2, r3
 8002c38:	683b      	ldr	r3, [r7, #0]
 8002c3a:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	681a      	ldr	r2, [r3, #0]
 8002c40:	68bb      	ldr	r3, [r7, #8]
 8002c42:	011b      	lsls	r3, r3, #4
 8002c44:	4413      	add	r3, r2
 8002c46:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	0a1a      	lsrs	r2, r3, #8
 8002c4e:	683b      	ldr	r3, [r7, #0]
 8002c50:	3301      	adds	r3, #1
 8002c52:	b2d2      	uxtb	r2, r2
 8002c54:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	681a      	ldr	r2, [r3, #0]
 8002c5a:	68bb      	ldr	r3, [r7, #8]
 8002c5c:	011b      	lsls	r3, r3, #4
 8002c5e:	4413      	add	r3, r2
 8002c60:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	0c1a      	lsrs	r2, r3, #16
 8002c68:	683b      	ldr	r3, [r7, #0]
 8002c6a:	3302      	adds	r3, #2
 8002c6c:	b2d2      	uxtb	r2, r2
 8002c6e:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	681a      	ldr	r2, [r3, #0]
 8002c74:	68bb      	ldr	r3, [r7, #8]
 8002c76:	011b      	lsls	r3, r3, #4
 8002c78:	4413      	add	r3, r2
 8002c7a:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	0e1a      	lsrs	r2, r3, #24
 8002c82:	683b      	ldr	r3, [r7, #0]
 8002c84:	3303      	adds	r3, #3
 8002c86:	b2d2      	uxtb	r2, r2
 8002c88:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	681a      	ldr	r2, [r3, #0]
 8002c8e:	68bb      	ldr	r3, [r7, #8]
 8002c90:	011b      	lsls	r3, r3, #4
 8002c92:	4413      	add	r3, r2
 8002c94:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8002c98:	681a      	ldr	r2, [r3, #0]
 8002c9a:	683b      	ldr	r3, [r7, #0]
 8002c9c:	3304      	adds	r3, #4
 8002c9e:	b2d2      	uxtb	r2, r2
 8002ca0:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	681a      	ldr	r2, [r3, #0]
 8002ca6:	68bb      	ldr	r3, [r7, #8]
 8002ca8:	011b      	lsls	r3, r3, #4
 8002caa:	4413      	add	r3, r2
 8002cac:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	0a1a      	lsrs	r2, r3, #8
 8002cb4:	683b      	ldr	r3, [r7, #0]
 8002cb6:	3305      	adds	r3, #5
 8002cb8:	b2d2      	uxtb	r2, r2
 8002cba:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	681a      	ldr	r2, [r3, #0]
 8002cc0:	68bb      	ldr	r3, [r7, #8]
 8002cc2:	011b      	lsls	r3, r3, #4
 8002cc4:	4413      	add	r3, r2
 8002cc6:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	0c1a      	lsrs	r2, r3, #16
 8002cce:	683b      	ldr	r3, [r7, #0]
 8002cd0:	3306      	adds	r3, #6
 8002cd2:	b2d2      	uxtb	r2, r2
 8002cd4:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	681a      	ldr	r2, [r3, #0]
 8002cda:	68bb      	ldr	r3, [r7, #8]
 8002cdc:	011b      	lsls	r3, r3, #4
 8002cde:	4413      	add	r3, r2
 8002ce0:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	0e1a      	lsrs	r2, r3, #24
 8002ce8:	683b      	ldr	r3, [r7, #0]
 8002cea:	3307      	adds	r3, #7
 8002cec:	b2d2      	uxtb	r2, r2
 8002cee:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002cf0:	68bb      	ldr	r3, [r7, #8]
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d108      	bne.n	8002d08 <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	68da      	ldr	r2, [r3, #12]
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f042 0220 	orr.w	r2, r2, #32
 8002d04:	60da      	str	r2, [r3, #12]
 8002d06:	e007      	b.n	8002d18 <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	691a      	ldr	r2, [r3, #16]
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f042 0220 	orr.w	r2, r2, #32
 8002d16:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8002d18:	2300      	movs	r3, #0
 8002d1a:	e006      	b.n	8002d2a <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d20:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002d28:	2301      	movs	r3, #1
  }
}
 8002d2a:	4618      	mov	r0, r3
 8002d2c:	371c      	adds	r7, #28
 8002d2e:	46bd      	mov	sp, r7
 8002d30:	bc80      	pop	{r7}
 8002d32:	4770      	bx	lr

08002d34 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8002d34:	b480      	push	{r7}
 8002d36:	b085      	sub	sp, #20
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	6078      	str	r0, [r7, #4]
 8002d3c:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002d44:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8002d46:	7bfb      	ldrb	r3, [r7, #15]
 8002d48:	2b01      	cmp	r3, #1
 8002d4a:	d002      	beq.n	8002d52 <HAL_CAN_ActivateNotification+0x1e>
 8002d4c:	7bfb      	ldrb	r3, [r7, #15]
 8002d4e:	2b02      	cmp	r3, #2
 8002d50:	d109      	bne.n	8002d66 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	6959      	ldr	r1, [r3, #20]
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	683a      	ldr	r2, [r7, #0]
 8002d5e:	430a      	orrs	r2, r1
 8002d60:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8002d62:	2300      	movs	r3, #0
 8002d64:	e006      	b.n	8002d74 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d6a:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002d72:	2301      	movs	r3, #1
  }
}
 8002d74:	4618      	mov	r0, r3
 8002d76:	3714      	adds	r7, #20
 8002d78:	46bd      	mov	sp, r7
 8002d7a:	bc80      	pop	{r7}
 8002d7c:	4770      	bx	lr

08002d7e <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8002d7e:	b580      	push	{r7, lr}
 8002d80:	b08a      	sub	sp, #40	@ 0x28
 8002d82:	af00      	add	r7, sp, #0
 8002d84:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8002d86:	2300      	movs	r3, #0
 8002d88:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	695b      	ldr	r3, [r3, #20]
 8002d90:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	685b      	ldr	r3, [r3, #4]
 8002d98:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	689b      	ldr	r3, [r3, #8]
 8002da0:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	68db      	ldr	r3, [r3, #12]
 8002da8:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	691b      	ldr	r3, [r3, #16]
 8002db0:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	699b      	ldr	r3, [r3, #24]
 8002db8:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8002dba:	6a3b      	ldr	r3, [r7, #32]
 8002dbc:	f003 0301 	and.w	r3, r3, #1
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d07c      	beq.n	8002ebe <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8002dc4:	69bb      	ldr	r3, [r7, #24]
 8002dc6:	f003 0301 	and.w	r3, r3, #1
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d023      	beq.n	8002e16 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	2201      	movs	r2, #1
 8002dd4:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8002dd6:	69bb      	ldr	r3, [r7, #24]
 8002dd8:	f003 0302 	and.w	r3, r3, #2
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d003      	beq.n	8002de8 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8002de0:	6878      	ldr	r0, [r7, #4]
 8002de2:	f000 f983 	bl	80030ec <HAL_CAN_TxMailbox0CompleteCallback>
 8002de6:	e016      	b.n	8002e16 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8002de8:	69bb      	ldr	r3, [r7, #24]
 8002dea:	f003 0304 	and.w	r3, r3, #4
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d004      	beq.n	8002dfc <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8002df2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002df4:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002df8:	627b      	str	r3, [r7, #36]	@ 0x24
 8002dfa:	e00c      	b.n	8002e16 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8002dfc:	69bb      	ldr	r3, [r7, #24]
 8002dfe:	f003 0308 	and.w	r3, r3, #8
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d004      	beq.n	8002e10 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8002e06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e08:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002e0c:	627b      	str	r3, [r7, #36]	@ 0x24
 8002e0e:	e002      	b.n	8002e16 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8002e10:	6878      	ldr	r0, [r7, #4]
 8002e12:	f000 f986 	bl	8003122 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8002e16:	69bb      	ldr	r3, [r7, #24]
 8002e18:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d024      	beq.n	8002e6a <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002e28:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8002e2a:	69bb      	ldr	r3, [r7, #24]
 8002e2c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d003      	beq.n	8002e3c <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8002e34:	6878      	ldr	r0, [r7, #4]
 8002e36:	f000 f962 	bl	80030fe <HAL_CAN_TxMailbox1CompleteCallback>
 8002e3a:	e016      	b.n	8002e6a <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8002e3c:	69bb      	ldr	r3, [r7, #24]
 8002e3e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d004      	beq.n	8002e50 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8002e46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e48:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002e4c:	627b      	str	r3, [r7, #36]	@ 0x24
 8002e4e:	e00c      	b.n	8002e6a <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8002e50:	69bb      	ldr	r3, [r7, #24]
 8002e52:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d004      	beq.n	8002e64 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8002e5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e5c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002e60:	627b      	str	r3, [r7, #36]	@ 0x24
 8002e62:	e002      	b.n	8002e6a <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8002e64:	6878      	ldr	r0, [r7, #4]
 8002e66:	f000 f965 	bl	8003134 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8002e6a:	69bb      	ldr	r3, [r7, #24]
 8002e6c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d024      	beq.n	8002ebe <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8002e7c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8002e7e:	69bb      	ldr	r3, [r7, #24]
 8002e80:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d003      	beq.n	8002e90 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8002e88:	6878      	ldr	r0, [r7, #4]
 8002e8a:	f000 f941 	bl	8003110 <HAL_CAN_TxMailbox2CompleteCallback>
 8002e8e:	e016      	b.n	8002ebe <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8002e90:	69bb      	ldr	r3, [r7, #24]
 8002e92:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d004      	beq.n	8002ea4 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8002e9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e9c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002ea0:	627b      	str	r3, [r7, #36]	@ 0x24
 8002ea2:	e00c      	b.n	8002ebe <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8002ea4:	69bb      	ldr	r3, [r7, #24]
 8002ea6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d004      	beq.n	8002eb8 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8002eae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002eb0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002eb4:	627b      	str	r3, [r7, #36]	@ 0x24
 8002eb6:	e002      	b.n	8002ebe <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8002eb8:	6878      	ldr	r0, [r7, #4]
 8002eba:	f000 f944 	bl	8003146 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8002ebe:	6a3b      	ldr	r3, [r7, #32]
 8002ec0:	f003 0308 	and.w	r3, r3, #8
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d00c      	beq.n	8002ee2 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8002ec8:	697b      	ldr	r3, [r7, #20]
 8002eca:	f003 0310 	and.w	r3, r3, #16
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d007      	beq.n	8002ee2 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8002ed2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ed4:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002ed8:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	2210      	movs	r2, #16
 8002ee0:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8002ee2:	6a3b      	ldr	r3, [r7, #32]
 8002ee4:	f003 0304 	and.w	r3, r3, #4
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d00b      	beq.n	8002f04 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8002eec:	697b      	ldr	r3, [r7, #20]
 8002eee:	f003 0308 	and.w	r3, r3, #8
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d006      	beq.n	8002f04 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	2208      	movs	r2, #8
 8002efc:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8002efe:	6878      	ldr	r0, [r7, #4]
 8002f00:	f000 f92a 	bl	8003158 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8002f04:	6a3b      	ldr	r3, [r7, #32]
 8002f06:	f003 0302 	and.w	r3, r3, #2
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d009      	beq.n	8002f22 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	68db      	ldr	r3, [r3, #12]
 8002f14:	f003 0303 	and.w	r3, r3, #3
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d002      	beq.n	8002f22 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8002f1c:	6878      	ldr	r0, [r7, #4]
 8002f1e:	f7fe f947 	bl	80011b0 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8002f22:	6a3b      	ldr	r3, [r7, #32]
 8002f24:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d00c      	beq.n	8002f46 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8002f2c:	693b      	ldr	r3, [r7, #16]
 8002f2e:	f003 0310 	and.w	r3, r3, #16
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d007      	beq.n	8002f46 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8002f36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f38:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002f3c:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	2210      	movs	r2, #16
 8002f44:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8002f46:	6a3b      	ldr	r3, [r7, #32]
 8002f48:	f003 0320 	and.w	r3, r3, #32
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d00b      	beq.n	8002f68 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8002f50:	693b      	ldr	r3, [r7, #16]
 8002f52:	f003 0308 	and.w	r3, r3, #8
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d006      	beq.n	8002f68 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	2208      	movs	r2, #8
 8002f60:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8002f62:	6878      	ldr	r0, [r7, #4]
 8002f64:	f000 f90a 	bl	800317c <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8002f68:	6a3b      	ldr	r3, [r7, #32]
 8002f6a:	f003 0310 	and.w	r3, r3, #16
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d009      	beq.n	8002f86 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	691b      	ldr	r3, [r3, #16]
 8002f78:	f003 0303 	and.w	r3, r3, #3
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d002      	beq.n	8002f86 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8002f80:	6878      	ldr	r0, [r7, #4]
 8002f82:	f000 f8f2 	bl	800316a <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8002f86:	6a3b      	ldr	r3, [r7, #32]
 8002f88:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d00b      	beq.n	8002fa8 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8002f90:	69fb      	ldr	r3, [r7, #28]
 8002f92:	f003 0310 	and.w	r3, r3, #16
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d006      	beq.n	8002fa8 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	2210      	movs	r2, #16
 8002fa0:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8002fa2:	6878      	ldr	r0, [r7, #4]
 8002fa4:	f000 f8f3 	bl	800318e <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8002fa8:	6a3b      	ldr	r3, [r7, #32]
 8002faa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d00b      	beq.n	8002fca <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8002fb2:	69fb      	ldr	r3, [r7, #28]
 8002fb4:	f003 0308 	and.w	r3, r3, #8
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d006      	beq.n	8002fca <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	2208      	movs	r2, #8
 8002fc2:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8002fc4:	6878      	ldr	r0, [r7, #4]
 8002fc6:	f000 f8eb 	bl	80031a0 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8002fca:	6a3b      	ldr	r3, [r7, #32]
 8002fcc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d07b      	beq.n	80030cc <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8002fd4:	69fb      	ldr	r3, [r7, #28]
 8002fd6:	f003 0304 	and.w	r3, r3, #4
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d072      	beq.n	80030c4 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002fde:	6a3b      	ldr	r3, [r7, #32]
 8002fe0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d008      	beq.n	8002ffa <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d003      	beq.n	8002ffa <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8002ff2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ff4:	f043 0301 	orr.w	r3, r3, #1
 8002ff8:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002ffa:	6a3b      	ldr	r3, [r7, #32]
 8002ffc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003000:	2b00      	cmp	r3, #0
 8003002:	d008      	beq.n	8003016 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800300a:	2b00      	cmp	r3, #0
 800300c:	d003      	beq.n	8003016 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 800300e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003010:	f043 0302 	orr.w	r3, r3, #2
 8003014:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8003016:	6a3b      	ldr	r3, [r7, #32]
 8003018:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800301c:	2b00      	cmp	r3, #0
 800301e:	d008      	beq.n	8003032 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8003026:	2b00      	cmp	r3, #0
 8003028:	d003      	beq.n	8003032 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 800302a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800302c:	f043 0304 	orr.w	r3, r3, #4
 8003030:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8003032:	6a3b      	ldr	r3, [r7, #32]
 8003034:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003038:	2b00      	cmp	r3, #0
 800303a:	d043      	beq.n	80030c4 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8003042:	2b00      	cmp	r3, #0
 8003044:	d03e      	beq.n	80030c4 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800304c:	2b60      	cmp	r3, #96	@ 0x60
 800304e:	d02b      	beq.n	80030a8 <HAL_CAN_IRQHandler+0x32a>
 8003050:	2b60      	cmp	r3, #96	@ 0x60
 8003052:	d82e      	bhi.n	80030b2 <HAL_CAN_IRQHandler+0x334>
 8003054:	2b50      	cmp	r3, #80	@ 0x50
 8003056:	d022      	beq.n	800309e <HAL_CAN_IRQHandler+0x320>
 8003058:	2b50      	cmp	r3, #80	@ 0x50
 800305a:	d82a      	bhi.n	80030b2 <HAL_CAN_IRQHandler+0x334>
 800305c:	2b40      	cmp	r3, #64	@ 0x40
 800305e:	d019      	beq.n	8003094 <HAL_CAN_IRQHandler+0x316>
 8003060:	2b40      	cmp	r3, #64	@ 0x40
 8003062:	d826      	bhi.n	80030b2 <HAL_CAN_IRQHandler+0x334>
 8003064:	2b30      	cmp	r3, #48	@ 0x30
 8003066:	d010      	beq.n	800308a <HAL_CAN_IRQHandler+0x30c>
 8003068:	2b30      	cmp	r3, #48	@ 0x30
 800306a:	d822      	bhi.n	80030b2 <HAL_CAN_IRQHandler+0x334>
 800306c:	2b10      	cmp	r3, #16
 800306e:	d002      	beq.n	8003076 <HAL_CAN_IRQHandler+0x2f8>
 8003070:	2b20      	cmp	r3, #32
 8003072:	d005      	beq.n	8003080 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8003074:	e01d      	b.n	80030b2 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8003076:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003078:	f043 0308 	orr.w	r3, r3, #8
 800307c:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800307e:	e019      	b.n	80030b4 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8003080:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003082:	f043 0310 	orr.w	r3, r3, #16
 8003086:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8003088:	e014      	b.n	80030b4 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 800308a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800308c:	f043 0320 	orr.w	r3, r3, #32
 8003090:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8003092:	e00f      	b.n	80030b4 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8003094:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003096:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800309a:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800309c:	e00a      	b.n	80030b4 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 800309e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030a0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80030a4:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80030a6:	e005      	b.n	80030b4 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 80030a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030aa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80030ae:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80030b0:	e000      	b.n	80030b4 <HAL_CAN_IRQHandler+0x336>
            break;
 80030b2:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	699a      	ldr	r2, [r3, #24]
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 80030c2:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	2204      	movs	r2, #4
 80030ca:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80030cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d008      	beq.n	80030e4 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80030d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030d8:	431a      	orrs	r2, r3
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80030de:	6878      	ldr	r0, [r7, #4]
 80030e0:	f000 f867 	bl	80031b2 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80030e4:	bf00      	nop
 80030e6:	3728      	adds	r7, #40	@ 0x28
 80030e8:	46bd      	mov	sp, r7
 80030ea:	bd80      	pop	{r7, pc}

080030ec <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80030ec:	b480      	push	{r7}
 80030ee:	b083      	sub	sp, #12
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 80030f4:	bf00      	nop
 80030f6:	370c      	adds	r7, #12
 80030f8:	46bd      	mov	sp, r7
 80030fa:	bc80      	pop	{r7}
 80030fc:	4770      	bx	lr

080030fe <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80030fe:	b480      	push	{r7}
 8003100:	b083      	sub	sp, #12
 8003102:	af00      	add	r7, sp, #0
 8003104:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8003106:	bf00      	nop
 8003108:	370c      	adds	r7, #12
 800310a:	46bd      	mov	sp, r7
 800310c:	bc80      	pop	{r7}
 800310e:	4770      	bx	lr

08003110 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003110:	b480      	push	{r7}
 8003112:	b083      	sub	sp, #12
 8003114:	af00      	add	r7, sp, #0
 8003116:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8003118:	bf00      	nop
 800311a:	370c      	adds	r7, #12
 800311c:	46bd      	mov	sp, r7
 800311e:	bc80      	pop	{r7}
 8003120:	4770      	bx	lr

08003122 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003122:	b480      	push	{r7}
 8003124:	b083      	sub	sp, #12
 8003126:	af00      	add	r7, sp, #0
 8003128:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 800312a:	bf00      	nop
 800312c:	370c      	adds	r7, #12
 800312e:	46bd      	mov	sp, r7
 8003130:	bc80      	pop	{r7}
 8003132:	4770      	bx	lr

08003134 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003134:	b480      	push	{r7}
 8003136:	b083      	sub	sp, #12
 8003138:	af00      	add	r7, sp, #0
 800313a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 800313c:	bf00      	nop
 800313e:	370c      	adds	r7, #12
 8003140:	46bd      	mov	sp, r7
 8003142:	bc80      	pop	{r7}
 8003144:	4770      	bx	lr

08003146 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003146:	b480      	push	{r7}
 8003148:	b083      	sub	sp, #12
 800314a:	af00      	add	r7, sp, #0
 800314c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 800314e:	bf00      	nop
 8003150:	370c      	adds	r7, #12
 8003152:	46bd      	mov	sp, r7
 8003154:	bc80      	pop	{r7}
 8003156:	4770      	bx	lr

08003158 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8003158:	b480      	push	{r7}
 800315a:	b083      	sub	sp, #12
 800315c:	af00      	add	r7, sp, #0
 800315e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8003160:	bf00      	nop
 8003162:	370c      	adds	r7, #12
 8003164:	46bd      	mov	sp, r7
 8003166:	bc80      	pop	{r7}
 8003168:	4770      	bx	lr

0800316a <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800316a:	b480      	push	{r7}
 800316c:	b083      	sub	sp, #12
 800316e:	af00      	add	r7, sp, #0
 8003170:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8003172:	bf00      	nop
 8003174:	370c      	adds	r7, #12
 8003176:	46bd      	mov	sp, r7
 8003178:	bc80      	pop	{r7}
 800317a:	4770      	bx	lr

0800317c <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 800317c:	b480      	push	{r7}
 800317e:	b083      	sub	sp, #12
 8003180:	af00      	add	r7, sp, #0
 8003182:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8003184:	bf00      	nop
 8003186:	370c      	adds	r7, #12
 8003188:	46bd      	mov	sp, r7
 800318a:	bc80      	pop	{r7}
 800318c:	4770      	bx	lr

0800318e <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 800318e:	b480      	push	{r7}
 8003190:	b083      	sub	sp, #12
 8003192:	af00      	add	r7, sp, #0
 8003194:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8003196:	bf00      	nop
 8003198:	370c      	adds	r7, #12
 800319a:	46bd      	mov	sp, r7
 800319c:	bc80      	pop	{r7}
 800319e:	4770      	bx	lr

080031a0 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80031a0:	b480      	push	{r7}
 80031a2:	b083      	sub	sp, #12
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80031a8:	bf00      	nop
 80031aa:	370c      	adds	r7, #12
 80031ac:	46bd      	mov	sp, r7
 80031ae:	bc80      	pop	{r7}
 80031b0:	4770      	bx	lr

080031b2 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80031b2:	b480      	push	{r7}
 80031b4:	b083      	sub	sp, #12
 80031b6:	af00      	add	r7, sp, #0
 80031b8:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80031ba:	bf00      	nop
 80031bc:	370c      	adds	r7, #12
 80031be:	46bd      	mov	sp, r7
 80031c0:	bc80      	pop	{r7}
 80031c2:	4770      	bx	lr

080031c4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80031c4:	b480      	push	{r7}
 80031c6:	b085      	sub	sp, #20
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	f003 0307 	and.w	r3, r3, #7
 80031d2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80031d4:	4b0c      	ldr	r3, [pc, #48]	@ (8003208 <__NVIC_SetPriorityGrouping+0x44>)
 80031d6:	68db      	ldr	r3, [r3, #12]
 80031d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80031da:	68ba      	ldr	r2, [r7, #8]
 80031dc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80031e0:	4013      	ands	r3, r2
 80031e2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80031e8:	68bb      	ldr	r3, [r7, #8]
 80031ea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80031ec:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80031f0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80031f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80031f6:	4a04      	ldr	r2, [pc, #16]	@ (8003208 <__NVIC_SetPriorityGrouping+0x44>)
 80031f8:	68bb      	ldr	r3, [r7, #8]
 80031fa:	60d3      	str	r3, [r2, #12]
}
 80031fc:	bf00      	nop
 80031fe:	3714      	adds	r7, #20
 8003200:	46bd      	mov	sp, r7
 8003202:	bc80      	pop	{r7}
 8003204:	4770      	bx	lr
 8003206:	bf00      	nop
 8003208:	e000ed00 	.word	0xe000ed00

0800320c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800320c:	b480      	push	{r7}
 800320e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003210:	4b04      	ldr	r3, [pc, #16]	@ (8003224 <__NVIC_GetPriorityGrouping+0x18>)
 8003212:	68db      	ldr	r3, [r3, #12]
 8003214:	0a1b      	lsrs	r3, r3, #8
 8003216:	f003 0307 	and.w	r3, r3, #7
}
 800321a:	4618      	mov	r0, r3
 800321c:	46bd      	mov	sp, r7
 800321e:	bc80      	pop	{r7}
 8003220:	4770      	bx	lr
 8003222:	bf00      	nop
 8003224:	e000ed00 	.word	0xe000ed00

08003228 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003228:	b480      	push	{r7}
 800322a:	b083      	sub	sp, #12
 800322c:	af00      	add	r7, sp, #0
 800322e:	4603      	mov	r3, r0
 8003230:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003232:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003236:	2b00      	cmp	r3, #0
 8003238:	db0b      	blt.n	8003252 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800323a:	79fb      	ldrb	r3, [r7, #7]
 800323c:	f003 021f 	and.w	r2, r3, #31
 8003240:	4906      	ldr	r1, [pc, #24]	@ (800325c <__NVIC_EnableIRQ+0x34>)
 8003242:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003246:	095b      	lsrs	r3, r3, #5
 8003248:	2001      	movs	r0, #1
 800324a:	fa00 f202 	lsl.w	r2, r0, r2
 800324e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003252:	bf00      	nop
 8003254:	370c      	adds	r7, #12
 8003256:	46bd      	mov	sp, r7
 8003258:	bc80      	pop	{r7}
 800325a:	4770      	bx	lr
 800325c:	e000e100 	.word	0xe000e100

08003260 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003260:	b480      	push	{r7}
 8003262:	b083      	sub	sp, #12
 8003264:	af00      	add	r7, sp, #0
 8003266:	4603      	mov	r3, r0
 8003268:	6039      	str	r1, [r7, #0]
 800326a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800326c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003270:	2b00      	cmp	r3, #0
 8003272:	db0a      	blt.n	800328a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003274:	683b      	ldr	r3, [r7, #0]
 8003276:	b2da      	uxtb	r2, r3
 8003278:	490c      	ldr	r1, [pc, #48]	@ (80032ac <__NVIC_SetPriority+0x4c>)
 800327a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800327e:	0112      	lsls	r2, r2, #4
 8003280:	b2d2      	uxtb	r2, r2
 8003282:	440b      	add	r3, r1
 8003284:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003288:	e00a      	b.n	80032a0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800328a:	683b      	ldr	r3, [r7, #0]
 800328c:	b2da      	uxtb	r2, r3
 800328e:	4908      	ldr	r1, [pc, #32]	@ (80032b0 <__NVIC_SetPriority+0x50>)
 8003290:	79fb      	ldrb	r3, [r7, #7]
 8003292:	f003 030f 	and.w	r3, r3, #15
 8003296:	3b04      	subs	r3, #4
 8003298:	0112      	lsls	r2, r2, #4
 800329a:	b2d2      	uxtb	r2, r2
 800329c:	440b      	add	r3, r1
 800329e:	761a      	strb	r2, [r3, #24]
}
 80032a0:	bf00      	nop
 80032a2:	370c      	adds	r7, #12
 80032a4:	46bd      	mov	sp, r7
 80032a6:	bc80      	pop	{r7}
 80032a8:	4770      	bx	lr
 80032aa:	bf00      	nop
 80032ac:	e000e100 	.word	0xe000e100
 80032b0:	e000ed00 	.word	0xe000ed00

080032b4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80032b4:	b480      	push	{r7}
 80032b6:	b089      	sub	sp, #36	@ 0x24
 80032b8:	af00      	add	r7, sp, #0
 80032ba:	60f8      	str	r0, [r7, #12]
 80032bc:	60b9      	str	r1, [r7, #8]
 80032be:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	f003 0307 	and.w	r3, r3, #7
 80032c6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80032c8:	69fb      	ldr	r3, [r7, #28]
 80032ca:	f1c3 0307 	rsb	r3, r3, #7
 80032ce:	2b04      	cmp	r3, #4
 80032d0:	bf28      	it	cs
 80032d2:	2304      	movcs	r3, #4
 80032d4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80032d6:	69fb      	ldr	r3, [r7, #28]
 80032d8:	3304      	adds	r3, #4
 80032da:	2b06      	cmp	r3, #6
 80032dc:	d902      	bls.n	80032e4 <NVIC_EncodePriority+0x30>
 80032de:	69fb      	ldr	r3, [r7, #28]
 80032e0:	3b03      	subs	r3, #3
 80032e2:	e000      	b.n	80032e6 <NVIC_EncodePriority+0x32>
 80032e4:	2300      	movs	r3, #0
 80032e6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80032e8:	f04f 32ff 	mov.w	r2, #4294967295
 80032ec:	69bb      	ldr	r3, [r7, #24]
 80032ee:	fa02 f303 	lsl.w	r3, r2, r3
 80032f2:	43da      	mvns	r2, r3
 80032f4:	68bb      	ldr	r3, [r7, #8]
 80032f6:	401a      	ands	r2, r3
 80032f8:	697b      	ldr	r3, [r7, #20]
 80032fa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80032fc:	f04f 31ff 	mov.w	r1, #4294967295
 8003300:	697b      	ldr	r3, [r7, #20]
 8003302:	fa01 f303 	lsl.w	r3, r1, r3
 8003306:	43d9      	mvns	r1, r3
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800330c:	4313      	orrs	r3, r2
         );
}
 800330e:	4618      	mov	r0, r3
 8003310:	3724      	adds	r7, #36	@ 0x24
 8003312:	46bd      	mov	sp, r7
 8003314:	bc80      	pop	{r7}
 8003316:	4770      	bx	lr

08003318 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003318:	b580      	push	{r7, lr}
 800331a:	b082      	sub	sp, #8
 800331c:	af00      	add	r7, sp, #0
 800331e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	3b01      	subs	r3, #1
 8003324:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003328:	d301      	bcc.n	800332e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800332a:	2301      	movs	r3, #1
 800332c:	e00f      	b.n	800334e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800332e:	4a0a      	ldr	r2, [pc, #40]	@ (8003358 <SysTick_Config+0x40>)
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	3b01      	subs	r3, #1
 8003334:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003336:	210f      	movs	r1, #15
 8003338:	f04f 30ff 	mov.w	r0, #4294967295
 800333c:	f7ff ff90 	bl	8003260 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003340:	4b05      	ldr	r3, [pc, #20]	@ (8003358 <SysTick_Config+0x40>)
 8003342:	2200      	movs	r2, #0
 8003344:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003346:	4b04      	ldr	r3, [pc, #16]	@ (8003358 <SysTick_Config+0x40>)
 8003348:	2207      	movs	r2, #7
 800334a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800334c:	2300      	movs	r3, #0
}
 800334e:	4618      	mov	r0, r3
 8003350:	3708      	adds	r7, #8
 8003352:	46bd      	mov	sp, r7
 8003354:	bd80      	pop	{r7, pc}
 8003356:	bf00      	nop
 8003358:	e000e010 	.word	0xe000e010

0800335c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800335c:	b580      	push	{r7, lr}
 800335e:	b082      	sub	sp, #8
 8003360:	af00      	add	r7, sp, #0
 8003362:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003364:	6878      	ldr	r0, [r7, #4]
 8003366:	f7ff ff2d 	bl	80031c4 <__NVIC_SetPriorityGrouping>
}
 800336a:	bf00      	nop
 800336c:	3708      	adds	r7, #8
 800336e:	46bd      	mov	sp, r7
 8003370:	bd80      	pop	{r7, pc}

08003372 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003372:	b580      	push	{r7, lr}
 8003374:	b086      	sub	sp, #24
 8003376:	af00      	add	r7, sp, #0
 8003378:	4603      	mov	r3, r0
 800337a:	60b9      	str	r1, [r7, #8]
 800337c:	607a      	str	r2, [r7, #4]
 800337e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003380:	2300      	movs	r3, #0
 8003382:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003384:	f7ff ff42 	bl	800320c <__NVIC_GetPriorityGrouping>
 8003388:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800338a:	687a      	ldr	r2, [r7, #4]
 800338c:	68b9      	ldr	r1, [r7, #8]
 800338e:	6978      	ldr	r0, [r7, #20]
 8003390:	f7ff ff90 	bl	80032b4 <NVIC_EncodePriority>
 8003394:	4602      	mov	r2, r0
 8003396:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800339a:	4611      	mov	r1, r2
 800339c:	4618      	mov	r0, r3
 800339e:	f7ff ff5f 	bl	8003260 <__NVIC_SetPriority>
}
 80033a2:	bf00      	nop
 80033a4:	3718      	adds	r7, #24
 80033a6:	46bd      	mov	sp, r7
 80033a8:	bd80      	pop	{r7, pc}

080033aa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80033aa:	b580      	push	{r7, lr}
 80033ac:	b082      	sub	sp, #8
 80033ae:	af00      	add	r7, sp, #0
 80033b0:	4603      	mov	r3, r0
 80033b2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80033b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033b8:	4618      	mov	r0, r3
 80033ba:	f7ff ff35 	bl	8003228 <__NVIC_EnableIRQ>
}
 80033be:	bf00      	nop
 80033c0:	3708      	adds	r7, #8
 80033c2:	46bd      	mov	sp, r7
 80033c4:	bd80      	pop	{r7, pc}

080033c6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80033c6:	b580      	push	{r7, lr}
 80033c8:	b082      	sub	sp, #8
 80033ca:	af00      	add	r7, sp, #0
 80033cc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80033ce:	6878      	ldr	r0, [r7, #4]
 80033d0:	f7ff ffa2 	bl	8003318 <SysTick_Config>
 80033d4:	4603      	mov	r3, r0
}
 80033d6:	4618      	mov	r0, r3
 80033d8:	3708      	adds	r7, #8
 80033da:	46bd      	mov	sp, r7
 80033dc:	bd80      	pop	{r7, pc}
	...

080033e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80033e0:	b480      	push	{r7}
 80033e2:	b08b      	sub	sp, #44	@ 0x2c
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	6078      	str	r0, [r7, #4]
 80033e8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80033ea:	2300      	movs	r3, #0
 80033ec:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80033ee:	2300      	movs	r3, #0
 80033f0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80033f2:	e169      	b.n	80036c8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80033f4:	2201      	movs	r2, #1
 80033f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033f8:	fa02 f303 	lsl.w	r3, r2, r3
 80033fc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80033fe:	683b      	ldr	r3, [r7, #0]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	69fa      	ldr	r2, [r7, #28]
 8003404:	4013      	ands	r3, r2
 8003406:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003408:	69ba      	ldr	r2, [r7, #24]
 800340a:	69fb      	ldr	r3, [r7, #28]
 800340c:	429a      	cmp	r2, r3
 800340e:	f040 8158 	bne.w	80036c2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8003412:	683b      	ldr	r3, [r7, #0]
 8003414:	685b      	ldr	r3, [r3, #4]
 8003416:	4a9a      	ldr	r2, [pc, #616]	@ (8003680 <HAL_GPIO_Init+0x2a0>)
 8003418:	4293      	cmp	r3, r2
 800341a:	d05e      	beq.n	80034da <HAL_GPIO_Init+0xfa>
 800341c:	4a98      	ldr	r2, [pc, #608]	@ (8003680 <HAL_GPIO_Init+0x2a0>)
 800341e:	4293      	cmp	r3, r2
 8003420:	d875      	bhi.n	800350e <HAL_GPIO_Init+0x12e>
 8003422:	4a98      	ldr	r2, [pc, #608]	@ (8003684 <HAL_GPIO_Init+0x2a4>)
 8003424:	4293      	cmp	r3, r2
 8003426:	d058      	beq.n	80034da <HAL_GPIO_Init+0xfa>
 8003428:	4a96      	ldr	r2, [pc, #600]	@ (8003684 <HAL_GPIO_Init+0x2a4>)
 800342a:	4293      	cmp	r3, r2
 800342c:	d86f      	bhi.n	800350e <HAL_GPIO_Init+0x12e>
 800342e:	4a96      	ldr	r2, [pc, #600]	@ (8003688 <HAL_GPIO_Init+0x2a8>)
 8003430:	4293      	cmp	r3, r2
 8003432:	d052      	beq.n	80034da <HAL_GPIO_Init+0xfa>
 8003434:	4a94      	ldr	r2, [pc, #592]	@ (8003688 <HAL_GPIO_Init+0x2a8>)
 8003436:	4293      	cmp	r3, r2
 8003438:	d869      	bhi.n	800350e <HAL_GPIO_Init+0x12e>
 800343a:	4a94      	ldr	r2, [pc, #592]	@ (800368c <HAL_GPIO_Init+0x2ac>)
 800343c:	4293      	cmp	r3, r2
 800343e:	d04c      	beq.n	80034da <HAL_GPIO_Init+0xfa>
 8003440:	4a92      	ldr	r2, [pc, #584]	@ (800368c <HAL_GPIO_Init+0x2ac>)
 8003442:	4293      	cmp	r3, r2
 8003444:	d863      	bhi.n	800350e <HAL_GPIO_Init+0x12e>
 8003446:	4a92      	ldr	r2, [pc, #584]	@ (8003690 <HAL_GPIO_Init+0x2b0>)
 8003448:	4293      	cmp	r3, r2
 800344a:	d046      	beq.n	80034da <HAL_GPIO_Init+0xfa>
 800344c:	4a90      	ldr	r2, [pc, #576]	@ (8003690 <HAL_GPIO_Init+0x2b0>)
 800344e:	4293      	cmp	r3, r2
 8003450:	d85d      	bhi.n	800350e <HAL_GPIO_Init+0x12e>
 8003452:	2b12      	cmp	r3, #18
 8003454:	d82a      	bhi.n	80034ac <HAL_GPIO_Init+0xcc>
 8003456:	2b12      	cmp	r3, #18
 8003458:	d859      	bhi.n	800350e <HAL_GPIO_Init+0x12e>
 800345a:	a201      	add	r2, pc, #4	@ (adr r2, 8003460 <HAL_GPIO_Init+0x80>)
 800345c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003460:	080034db 	.word	0x080034db
 8003464:	080034b5 	.word	0x080034b5
 8003468:	080034c7 	.word	0x080034c7
 800346c:	08003509 	.word	0x08003509
 8003470:	0800350f 	.word	0x0800350f
 8003474:	0800350f 	.word	0x0800350f
 8003478:	0800350f 	.word	0x0800350f
 800347c:	0800350f 	.word	0x0800350f
 8003480:	0800350f 	.word	0x0800350f
 8003484:	0800350f 	.word	0x0800350f
 8003488:	0800350f 	.word	0x0800350f
 800348c:	0800350f 	.word	0x0800350f
 8003490:	0800350f 	.word	0x0800350f
 8003494:	0800350f 	.word	0x0800350f
 8003498:	0800350f 	.word	0x0800350f
 800349c:	0800350f 	.word	0x0800350f
 80034a0:	0800350f 	.word	0x0800350f
 80034a4:	080034bd 	.word	0x080034bd
 80034a8:	080034d1 	.word	0x080034d1
 80034ac:	4a79      	ldr	r2, [pc, #484]	@ (8003694 <HAL_GPIO_Init+0x2b4>)
 80034ae:	4293      	cmp	r3, r2
 80034b0:	d013      	beq.n	80034da <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80034b2:	e02c      	b.n	800350e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80034b4:	683b      	ldr	r3, [r7, #0]
 80034b6:	68db      	ldr	r3, [r3, #12]
 80034b8:	623b      	str	r3, [r7, #32]
          break;
 80034ba:	e029      	b.n	8003510 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80034bc:	683b      	ldr	r3, [r7, #0]
 80034be:	68db      	ldr	r3, [r3, #12]
 80034c0:	3304      	adds	r3, #4
 80034c2:	623b      	str	r3, [r7, #32]
          break;
 80034c4:	e024      	b.n	8003510 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80034c6:	683b      	ldr	r3, [r7, #0]
 80034c8:	68db      	ldr	r3, [r3, #12]
 80034ca:	3308      	adds	r3, #8
 80034cc:	623b      	str	r3, [r7, #32]
          break;
 80034ce:	e01f      	b.n	8003510 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80034d0:	683b      	ldr	r3, [r7, #0]
 80034d2:	68db      	ldr	r3, [r3, #12]
 80034d4:	330c      	adds	r3, #12
 80034d6:	623b      	str	r3, [r7, #32]
          break;
 80034d8:	e01a      	b.n	8003510 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80034da:	683b      	ldr	r3, [r7, #0]
 80034dc:	689b      	ldr	r3, [r3, #8]
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d102      	bne.n	80034e8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80034e2:	2304      	movs	r3, #4
 80034e4:	623b      	str	r3, [r7, #32]
          break;
 80034e6:	e013      	b.n	8003510 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80034e8:	683b      	ldr	r3, [r7, #0]
 80034ea:	689b      	ldr	r3, [r3, #8]
 80034ec:	2b01      	cmp	r3, #1
 80034ee:	d105      	bne.n	80034fc <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80034f0:	2308      	movs	r3, #8
 80034f2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	69fa      	ldr	r2, [r7, #28]
 80034f8:	611a      	str	r2, [r3, #16]
          break;
 80034fa:	e009      	b.n	8003510 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80034fc:	2308      	movs	r3, #8
 80034fe:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	69fa      	ldr	r2, [r7, #28]
 8003504:	615a      	str	r2, [r3, #20]
          break;
 8003506:	e003      	b.n	8003510 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003508:	2300      	movs	r3, #0
 800350a:	623b      	str	r3, [r7, #32]
          break;
 800350c:	e000      	b.n	8003510 <HAL_GPIO_Init+0x130>
          break;
 800350e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003510:	69bb      	ldr	r3, [r7, #24]
 8003512:	2bff      	cmp	r3, #255	@ 0xff
 8003514:	d801      	bhi.n	800351a <HAL_GPIO_Init+0x13a>
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	e001      	b.n	800351e <HAL_GPIO_Init+0x13e>
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	3304      	adds	r3, #4
 800351e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003520:	69bb      	ldr	r3, [r7, #24]
 8003522:	2bff      	cmp	r3, #255	@ 0xff
 8003524:	d802      	bhi.n	800352c <HAL_GPIO_Init+0x14c>
 8003526:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003528:	009b      	lsls	r3, r3, #2
 800352a:	e002      	b.n	8003532 <HAL_GPIO_Init+0x152>
 800352c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800352e:	3b08      	subs	r3, #8
 8003530:	009b      	lsls	r3, r3, #2
 8003532:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003534:	697b      	ldr	r3, [r7, #20]
 8003536:	681a      	ldr	r2, [r3, #0]
 8003538:	210f      	movs	r1, #15
 800353a:	693b      	ldr	r3, [r7, #16]
 800353c:	fa01 f303 	lsl.w	r3, r1, r3
 8003540:	43db      	mvns	r3, r3
 8003542:	401a      	ands	r2, r3
 8003544:	6a39      	ldr	r1, [r7, #32]
 8003546:	693b      	ldr	r3, [r7, #16]
 8003548:	fa01 f303 	lsl.w	r3, r1, r3
 800354c:	431a      	orrs	r2, r3
 800354e:	697b      	ldr	r3, [r7, #20]
 8003550:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003552:	683b      	ldr	r3, [r7, #0]
 8003554:	685b      	ldr	r3, [r3, #4]
 8003556:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800355a:	2b00      	cmp	r3, #0
 800355c:	f000 80b1 	beq.w	80036c2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003560:	4b4d      	ldr	r3, [pc, #308]	@ (8003698 <HAL_GPIO_Init+0x2b8>)
 8003562:	699b      	ldr	r3, [r3, #24]
 8003564:	4a4c      	ldr	r2, [pc, #304]	@ (8003698 <HAL_GPIO_Init+0x2b8>)
 8003566:	f043 0301 	orr.w	r3, r3, #1
 800356a:	6193      	str	r3, [r2, #24]
 800356c:	4b4a      	ldr	r3, [pc, #296]	@ (8003698 <HAL_GPIO_Init+0x2b8>)
 800356e:	699b      	ldr	r3, [r3, #24]
 8003570:	f003 0301 	and.w	r3, r3, #1
 8003574:	60bb      	str	r3, [r7, #8]
 8003576:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003578:	4a48      	ldr	r2, [pc, #288]	@ (800369c <HAL_GPIO_Init+0x2bc>)
 800357a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800357c:	089b      	lsrs	r3, r3, #2
 800357e:	3302      	adds	r3, #2
 8003580:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003584:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003586:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003588:	f003 0303 	and.w	r3, r3, #3
 800358c:	009b      	lsls	r3, r3, #2
 800358e:	220f      	movs	r2, #15
 8003590:	fa02 f303 	lsl.w	r3, r2, r3
 8003594:	43db      	mvns	r3, r3
 8003596:	68fa      	ldr	r2, [r7, #12]
 8003598:	4013      	ands	r3, r2
 800359a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	4a40      	ldr	r2, [pc, #256]	@ (80036a0 <HAL_GPIO_Init+0x2c0>)
 80035a0:	4293      	cmp	r3, r2
 80035a2:	d013      	beq.n	80035cc <HAL_GPIO_Init+0x1ec>
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	4a3f      	ldr	r2, [pc, #252]	@ (80036a4 <HAL_GPIO_Init+0x2c4>)
 80035a8:	4293      	cmp	r3, r2
 80035aa:	d00d      	beq.n	80035c8 <HAL_GPIO_Init+0x1e8>
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	4a3e      	ldr	r2, [pc, #248]	@ (80036a8 <HAL_GPIO_Init+0x2c8>)
 80035b0:	4293      	cmp	r3, r2
 80035b2:	d007      	beq.n	80035c4 <HAL_GPIO_Init+0x1e4>
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	4a3d      	ldr	r2, [pc, #244]	@ (80036ac <HAL_GPIO_Init+0x2cc>)
 80035b8:	4293      	cmp	r3, r2
 80035ba:	d101      	bne.n	80035c0 <HAL_GPIO_Init+0x1e0>
 80035bc:	2303      	movs	r3, #3
 80035be:	e006      	b.n	80035ce <HAL_GPIO_Init+0x1ee>
 80035c0:	2304      	movs	r3, #4
 80035c2:	e004      	b.n	80035ce <HAL_GPIO_Init+0x1ee>
 80035c4:	2302      	movs	r3, #2
 80035c6:	e002      	b.n	80035ce <HAL_GPIO_Init+0x1ee>
 80035c8:	2301      	movs	r3, #1
 80035ca:	e000      	b.n	80035ce <HAL_GPIO_Init+0x1ee>
 80035cc:	2300      	movs	r3, #0
 80035ce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80035d0:	f002 0203 	and.w	r2, r2, #3
 80035d4:	0092      	lsls	r2, r2, #2
 80035d6:	4093      	lsls	r3, r2
 80035d8:	68fa      	ldr	r2, [r7, #12]
 80035da:	4313      	orrs	r3, r2
 80035dc:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80035de:	492f      	ldr	r1, [pc, #188]	@ (800369c <HAL_GPIO_Init+0x2bc>)
 80035e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035e2:	089b      	lsrs	r3, r3, #2
 80035e4:	3302      	adds	r3, #2
 80035e6:	68fa      	ldr	r2, [r7, #12]
 80035e8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80035ec:	683b      	ldr	r3, [r7, #0]
 80035ee:	685b      	ldr	r3, [r3, #4]
 80035f0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d006      	beq.n	8003606 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80035f8:	4b2d      	ldr	r3, [pc, #180]	@ (80036b0 <HAL_GPIO_Init+0x2d0>)
 80035fa:	689a      	ldr	r2, [r3, #8]
 80035fc:	492c      	ldr	r1, [pc, #176]	@ (80036b0 <HAL_GPIO_Init+0x2d0>)
 80035fe:	69bb      	ldr	r3, [r7, #24]
 8003600:	4313      	orrs	r3, r2
 8003602:	608b      	str	r3, [r1, #8]
 8003604:	e006      	b.n	8003614 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003606:	4b2a      	ldr	r3, [pc, #168]	@ (80036b0 <HAL_GPIO_Init+0x2d0>)
 8003608:	689a      	ldr	r2, [r3, #8]
 800360a:	69bb      	ldr	r3, [r7, #24]
 800360c:	43db      	mvns	r3, r3
 800360e:	4928      	ldr	r1, [pc, #160]	@ (80036b0 <HAL_GPIO_Init+0x2d0>)
 8003610:	4013      	ands	r3, r2
 8003612:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003614:	683b      	ldr	r3, [r7, #0]
 8003616:	685b      	ldr	r3, [r3, #4]
 8003618:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800361c:	2b00      	cmp	r3, #0
 800361e:	d006      	beq.n	800362e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003620:	4b23      	ldr	r3, [pc, #140]	@ (80036b0 <HAL_GPIO_Init+0x2d0>)
 8003622:	68da      	ldr	r2, [r3, #12]
 8003624:	4922      	ldr	r1, [pc, #136]	@ (80036b0 <HAL_GPIO_Init+0x2d0>)
 8003626:	69bb      	ldr	r3, [r7, #24]
 8003628:	4313      	orrs	r3, r2
 800362a:	60cb      	str	r3, [r1, #12]
 800362c:	e006      	b.n	800363c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800362e:	4b20      	ldr	r3, [pc, #128]	@ (80036b0 <HAL_GPIO_Init+0x2d0>)
 8003630:	68da      	ldr	r2, [r3, #12]
 8003632:	69bb      	ldr	r3, [r7, #24]
 8003634:	43db      	mvns	r3, r3
 8003636:	491e      	ldr	r1, [pc, #120]	@ (80036b0 <HAL_GPIO_Init+0x2d0>)
 8003638:	4013      	ands	r3, r2
 800363a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800363c:	683b      	ldr	r3, [r7, #0]
 800363e:	685b      	ldr	r3, [r3, #4]
 8003640:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003644:	2b00      	cmp	r3, #0
 8003646:	d006      	beq.n	8003656 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003648:	4b19      	ldr	r3, [pc, #100]	@ (80036b0 <HAL_GPIO_Init+0x2d0>)
 800364a:	685a      	ldr	r2, [r3, #4]
 800364c:	4918      	ldr	r1, [pc, #96]	@ (80036b0 <HAL_GPIO_Init+0x2d0>)
 800364e:	69bb      	ldr	r3, [r7, #24]
 8003650:	4313      	orrs	r3, r2
 8003652:	604b      	str	r3, [r1, #4]
 8003654:	e006      	b.n	8003664 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003656:	4b16      	ldr	r3, [pc, #88]	@ (80036b0 <HAL_GPIO_Init+0x2d0>)
 8003658:	685a      	ldr	r2, [r3, #4]
 800365a:	69bb      	ldr	r3, [r7, #24]
 800365c:	43db      	mvns	r3, r3
 800365e:	4914      	ldr	r1, [pc, #80]	@ (80036b0 <HAL_GPIO_Init+0x2d0>)
 8003660:	4013      	ands	r3, r2
 8003662:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003664:	683b      	ldr	r3, [r7, #0]
 8003666:	685b      	ldr	r3, [r3, #4]
 8003668:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800366c:	2b00      	cmp	r3, #0
 800366e:	d021      	beq.n	80036b4 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003670:	4b0f      	ldr	r3, [pc, #60]	@ (80036b0 <HAL_GPIO_Init+0x2d0>)
 8003672:	681a      	ldr	r2, [r3, #0]
 8003674:	490e      	ldr	r1, [pc, #56]	@ (80036b0 <HAL_GPIO_Init+0x2d0>)
 8003676:	69bb      	ldr	r3, [r7, #24]
 8003678:	4313      	orrs	r3, r2
 800367a:	600b      	str	r3, [r1, #0]
 800367c:	e021      	b.n	80036c2 <HAL_GPIO_Init+0x2e2>
 800367e:	bf00      	nop
 8003680:	10320000 	.word	0x10320000
 8003684:	10310000 	.word	0x10310000
 8003688:	10220000 	.word	0x10220000
 800368c:	10210000 	.word	0x10210000
 8003690:	10120000 	.word	0x10120000
 8003694:	10110000 	.word	0x10110000
 8003698:	40021000 	.word	0x40021000
 800369c:	40010000 	.word	0x40010000
 80036a0:	40010800 	.word	0x40010800
 80036a4:	40010c00 	.word	0x40010c00
 80036a8:	40011000 	.word	0x40011000
 80036ac:	40011400 	.word	0x40011400
 80036b0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80036b4:	4b0b      	ldr	r3, [pc, #44]	@ (80036e4 <HAL_GPIO_Init+0x304>)
 80036b6:	681a      	ldr	r2, [r3, #0]
 80036b8:	69bb      	ldr	r3, [r7, #24]
 80036ba:	43db      	mvns	r3, r3
 80036bc:	4909      	ldr	r1, [pc, #36]	@ (80036e4 <HAL_GPIO_Init+0x304>)
 80036be:	4013      	ands	r3, r2
 80036c0:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80036c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036c4:	3301      	adds	r3, #1
 80036c6:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80036c8:	683b      	ldr	r3, [r7, #0]
 80036ca:	681a      	ldr	r2, [r3, #0]
 80036cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036ce:	fa22 f303 	lsr.w	r3, r2, r3
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	f47f ae8e 	bne.w	80033f4 <HAL_GPIO_Init+0x14>
  }
}
 80036d8:	bf00      	nop
 80036da:	bf00      	nop
 80036dc:	372c      	adds	r7, #44	@ 0x2c
 80036de:	46bd      	mov	sp, r7
 80036e0:	bc80      	pop	{r7}
 80036e2:	4770      	bx	lr
 80036e4:	40010400 	.word	0x40010400

080036e8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80036e8:	b480      	push	{r7}
 80036ea:	b085      	sub	sp, #20
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	6078      	str	r0, [r7, #4]
 80036f0:	460b      	mov	r3, r1
 80036f2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	689a      	ldr	r2, [r3, #8]
 80036f8:	887b      	ldrh	r3, [r7, #2]
 80036fa:	4013      	ands	r3, r2
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d002      	beq.n	8003706 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003700:	2301      	movs	r3, #1
 8003702:	73fb      	strb	r3, [r7, #15]
 8003704:	e001      	b.n	800370a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003706:	2300      	movs	r3, #0
 8003708:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800370a:	7bfb      	ldrb	r3, [r7, #15]
}
 800370c:	4618      	mov	r0, r3
 800370e:	3714      	adds	r7, #20
 8003710:	46bd      	mov	sp, r7
 8003712:	bc80      	pop	{r7}
 8003714:	4770      	bx	lr

08003716 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003716:	b480      	push	{r7}
 8003718:	b083      	sub	sp, #12
 800371a:	af00      	add	r7, sp, #0
 800371c:	6078      	str	r0, [r7, #4]
 800371e:	460b      	mov	r3, r1
 8003720:	807b      	strh	r3, [r7, #2]
 8003722:	4613      	mov	r3, r2
 8003724:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003726:	787b      	ldrb	r3, [r7, #1]
 8003728:	2b00      	cmp	r3, #0
 800372a:	d003      	beq.n	8003734 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800372c:	887a      	ldrh	r2, [r7, #2]
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003732:	e003      	b.n	800373c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003734:	887b      	ldrh	r3, [r7, #2]
 8003736:	041a      	lsls	r2, r3, #16
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	611a      	str	r2, [r3, #16]
}
 800373c:	bf00      	nop
 800373e:	370c      	adds	r7, #12
 8003740:	46bd      	mov	sp, r7
 8003742:	bc80      	pop	{r7}
 8003744:	4770      	bx	lr

08003746 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003746:	b480      	push	{r7}
 8003748:	b085      	sub	sp, #20
 800374a:	af00      	add	r7, sp, #0
 800374c:	6078      	str	r0, [r7, #4]
 800374e:	460b      	mov	r3, r1
 8003750:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	68db      	ldr	r3, [r3, #12]
 8003756:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003758:	887a      	ldrh	r2, [r7, #2]
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	4013      	ands	r3, r2
 800375e:	041a      	lsls	r2, r3, #16
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	43d9      	mvns	r1, r3
 8003764:	887b      	ldrh	r3, [r7, #2]
 8003766:	400b      	ands	r3, r1
 8003768:	431a      	orrs	r2, r3
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	611a      	str	r2, [r3, #16]
}
 800376e:	bf00      	nop
 8003770:	3714      	adds	r7, #20
 8003772:	46bd      	mov	sp, r7
 8003774:	bc80      	pop	{r7}
 8003776:	4770      	bx	lr

08003778 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003778:	b580      	push	{r7, lr}
 800377a:	b084      	sub	sp, #16
 800377c:	af00      	add	r7, sp, #0
 800377e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	2b00      	cmp	r3, #0
 8003784:	d101      	bne.n	800378a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003786:	2301      	movs	r3, #1
 8003788:	e12b      	b.n	80039e2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003790:	b2db      	uxtb	r3, r3
 8003792:	2b00      	cmp	r3, #0
 8003794:	d106      	bne.n	80037a4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	2200      	movs	r2, #0
 800379a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800379e:	6878      	ldr	r0, [r7, #4]
 80037a0:	f7fe f98e 	bl	8001ac0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	2224      	movs	r2, #36	@ 0x24
 80037a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	681a      	ldr	r2, [r3, #0]
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f022 0201 	bic.w	r2, r2, #1
 80037ba:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	681a      	ldr	r2, [r3, #0]
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80037ca:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	681a      	ldr	r2, [r3, #0]
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80037da:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80037dc:	f001 fbfc 	bl	8004fd8 <HAL_RCC_GetPCLK1Freq>
 80037e0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	685b      	ldr	r3, [r3, #4]
 80037e6:	4a81      	ldr	r2, [pc, #516]	@ (80039ec <HAL_I2C_Init+0x274>)
 80037e8:	4293      	cmp	r3, r2
 80037ea:	d807      	bhi.n	80037fc <HAL_I2C_Init+0x84>
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	4a80      	ldr	r2, [pc, #512]	@ (80039f0 <HAL_I2C_Init+0x278>)
 80037f0:	4293      	cmp	r3, r2
 80037f2:	bf94      	ite	ls
 80037f4:	2301      	movls	r3, #1
 80037f6:	2300      	movhi	r3, #0
 80037f8:	b2db      	uxtb	r3, r3
 80037fa:	e006      	b.n	800380a <HAL_I2C_Init+0x92>
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	4a7d      	ldr	r2, [pc, #500]	@ (80039f4 <HAL_I2C_Init+0x27c>)
 8003800:	4293      	cmp	r3, r2
 8003802:	bf94      	ite	ls
 8003804:	2301      	movls	r3, #1
 8003806:	2300      	movhi	r3, #0
 8003808:	b2db      	uxtb	r3, r3
 800380a:	2b00      	cmp	r3, #0
 800380c:	d001      	beq.n	8003812 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800380e:	2301      	movs	r3, #1
 8003810:	e0e7      	b.n	80039e2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	4a78      	ldr	r2, [pc, #480]	@ (80039f8 <HAL_I2C_Init+0x280>)
 8003816:	fba2 2303 	umull	r2, r3, r2, r3
 800381a:	0c9b      	lsrs	r3, r3, #18
 800381c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	685b      	ldr	r3, [r3, #4]
 8003824:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	68ba      	ldr	r2, [r7, #8]
 800382e:	430a      	orrs	r2, r1
 8003830:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	6a1b      	ldr	r3, [r3, #32]
 8003838:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	685b      	ldr	r3, [r3, #4]
 8003840:	4a6a      	ldr	r2, [pc, #424]	@ (80039ec <HAL_I2C_Init+0x274>)
 8003842:	4293      	cmp	r3, r2
 8003844:	d802      	bhi.n	800384c <HAL_I2C_Init+0xd4>
 8003846:	68bb      	ldr	r3, [r7, #8]
 8003848:	3301      	adds	r3, #1
 800384a:	e009      	b.n	8003860 <HAL_I2C_Init+0xe8>
 800384c:	68bb      	ldr	r3, [r7, #8]
 800384e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8003852:	fb02 f303 	mul.w	r3, r2, r3
 8003856:	4a69      	ldr	r2, [pc, #420]	@ (80039fc <HAL_I2C_Init+0x284>)
 8003858:	fba2 2303 	umull	r2, r3, r2, r3
 800385c:	099b      	lsrs	r3, r3, #6
 800385e:	3301      	adds	r3, #1
 8003860:	687a      	ldr	r2, [r7, #4]
 8003862:	6812      	ldr	r2, [r2, #0]
 8003864:	430b      	orrs	r3, r1
 8003866:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	69db      	ldr	r3, [r3, #28]
 800386e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8003872:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	685b      	ldr	r3, [r3, #4]
 800387a:	495c      	ldr	r1, [pc, #368]	@ (80039ec <HAL_I2C_Init+0x274>)
 800387c:	428b      	cmp	r3, r1
 800387e:	d819      	bhi.n	80038b4 <HAL_I2C_Init+0x13c>
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	1e59      	subs	r1, r3, #1
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	685b      	ldr	r3, [r3, #4]
 8003888:	005b      	lsls	r3, r3, #1
 800388a:	fbb1 f3f3 	udiv	r3, r1, r3
 800388e:	1c59      	adds	r1, r3, #1
 8003890:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003894:	400b      	ands	r3, r1
 8003896:	2b00      	cmp	r3, #0
 8003898:	d00a      	beq.n	80038b0 <HAL_I2C_Init+0x138>
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	1e59      	subs	r1, r3, #1
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	685b      	ldr	r3, [r3, #4]
 80038a2:	005b      	lsls	r3, r3, #1
 80038a4:	fbb1 f3f3 	udiv	r3, r1, r3
 80038a8:	3301      	adds	r3, #1
 80038aa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80038ae:	e051      	b.n	8003954 <HAL_I2C_Init+0x1dc>
 80038b0:	2304      	movs	r3, #4
 80038b2:	e04f      	b.n	8003954 <HAL_I2C_Init+0x1dc>
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	689b      	ldr	r3, [r3, #8]
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d111      	bne.n	80038e0 <HAL_I2C_Init+0x168>
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	1e58      	subs	r0, r3, #1
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	6859      	ldr	r1, [r3, #4]
 80038c4:	460b      	mov	r3, r1
 80038c6:	005b      	lsls	r3, r3, #1
 80038c8:	440b      	add	r3, r1
 80038ca:	fbb0 f3f3 	udiv	r3, r0, r3
 80038ce:	3301      	adds	r3, #1
 80038d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	bf0c      	ite	eq
 80038d8:	2301      	moveq	r3, #1
 80038da:	2300      	movne	r3, #0
 80038dc:	b2db      	uxtb	r3, r3
 80038de:	e012      	b.n	8003906 <HAL_I2C_Init+0x18e>
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	1e58      	subs	r0, r3, #1
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	6859      	ldr	r1, [r3, #4]
 80038e8:	460b      	mov	r3, r1
 80038ea:	009b      	lsls	r3, r3, #2
 80038ec:	440b      	add	r3, r1
 80038ee:	0099      	lsls	r1, r3, #2
 80038f0:	440b      	add	r3, r1
 80038f2:	fbb0 f3f3 	udiv	r3, r0, r3
 80038f6:	3301      	adds	r3, #1
 80038f8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	bf0c      	ite	eq
 8003900:	2301      	moveq	r3, #1
 8003902:	2300      	movne	r3, #0
 8003904:	b2db      	uxtb	r3, r3
 8003906:	2b00      	cmp	r3, #0
 8003908:	d001      	beq.n	800390e <HAL_I2C_Init+0x196>
 800390a:	2301      	movs	r3, #1
 800390c:	e022      	b.n	8003954 <HAL_I2C_Init+0x1dc>
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	689b      	ldr	r3, [r3, #8]
 8003912:	2b00      	cmp	r3, #0
 8003914:	d10e      	bne.n	8003934 <HAL_I2C_Init+0x1bc>
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	1e58      	subs	r0, r3, #1
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	6859      	ldr	r1, [r3, #4]
 800391e:	460b      	mov	r3, r1
 8003920:	005b      	lsls	r3, r3, #1
 8003922:	440b      	add	r3, r1
 8003924:	fbb0 f3f3 	udiv	r3, r0, r3
 8003928:	3301      	adds	r3, #1
 800392a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800392e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003932:	e00f      	b.n	8003954 <HAL_I2C_Init+0x1dc>
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	1e58      	subs	r0, r3, #1
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	6859      	ldr	r1, [r3, #4]
 800393c:	460b      	mov	r3, r1
 800393e:	009b      	lsls	r3, r3, #2
 8003940:	440b      	add	r3, r1
 8003942:	0099      	lsls	r1, r3, #2
 8003944:	440b      	add	r3, r1
 8003946:	fbb0 f3f3 	udiv	r3, r0, r3
 800394a:	3301      	adds	r3, #1
 800394c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003950:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003954:	6879      	ldr	r1, [r7, #4]
 8003956:	6809      	ldr	r1, [r1, #0]
 8003958:	4313      	orrs	r3, r2
 800395a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	69da      	ldr	r2, [r3, #28]
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	6a1b      	ldr	r3, [r3, #32]
 800396e:	431a      	orrs	r2, r3
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	430a      	orrs	r2, r1
 8003976:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	689b      	ldr	r3, [r3, #8]
 800397e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8003982:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003986:	687a      	ldr	r2, [r7, #4]
 8003988:	6911      	ldr	r1, [r2, #16]
 800398a:	687a      	ldr	r2, [r7, #4]
 800398c:	68d2      	ldr	r2, [r2, #12]
 800398e:	4311      	orrs	r1, r2
 8003990:	687a      	ldr	r2, [r7, #4]
 8003992:	6812      	ldr	r2, [r2, #0]
 8003994:	430b      	orrs	r3, r1
 8003996:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	68db      	ldr	r3, [r3, #12]
 800399e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	695a      	ldr	r2, [r3, #20]
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	699b      	ldr	r3, [r3, #24]
 80039aa:	431a      	orrs	r2, r3
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	430a      	orrs	r2, r1
 80039b2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	681a      	ldr	r2, [r3, #0]
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	f042 0201 	orr.w	r2, r2, #1
 80039c2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	2200      	movs	r2, #0
 80039c8:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	2220      	movs	r2, #32
 80039ce:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	2200      	movs	r2, #0
 80039d6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	2200      	movs	r2, #0
 80039dc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80039e0:	2300      	movs	r3, #0
}
 80039e2:	4618      	mov	r0, r3
 80039e4:	3710      	adds	r7, #16
 80039e6:	46bd      	mov	sp, r7
 80039e8:	bd80      	pop	{r7, pc}
 80039ea:	bf00      	nop
 80039ec:	000186a0 	.word	0x000186a0
 80039f0:	001e847f 	.word	0x001e847f
 80039f4:	003d08ff 	.word	0x003d08ff
 80039f8:	431bde83 	.word	0x431bde83
 80039fc:	10624dd3 	.word	0x10624dd3

08003a00 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003a00:	b580      	push	{r7, lr}
 8003a02:	b088      	sub	sp, #32
 8003a04:	af02      	add	r7, sp, #8
 8003a06:	60f8      	str	r0, [r7, #12]
 8003a08:	4608      	mov	r0, r1
 8003a0a:	4611      	mov	r1, r2
 8003a0c:	461a      	mov	r2, r3
 8003a0e:	4603      	mov	r3, r0
 8003a10:	817b      	strh	r3, [r7, #10]
 8003a12:	460b      	mov	r3, r1
 8003a14:	813b      	strh	r3, [r7, #8]
 8003a16:	4613      	mov	r3, r2
 8003a18:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003a1a:	f7fe fd65 	bl	80024e8 <HAL_GetTick>
 8003a1e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003a26:	b2db      	uxtb	r3, r3
 8003a28:	2b20      	cmp	r3, #32
 8003a2a:	f040 80d9 	bne.w	8003be0 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003a2e:	697b      	ldr	r3, [r7, #20]
 8003a30:	9300      	str	r3, [sp, #0]
 8003a32:	2319      	movs	r3, #25
 8003a34:	2201      	movs	r2, #1
 8003a36:	496d      	ldr	r1, [pc, #436]	@ (8003bec <HAL_I2C_Mem_Write+0x1ec>)
 8003a38:	68f8      	ldr	r0, [r7, #12]
 8003a3a:	f000 fccd 	bl	80043d8 <I2C_WaitOnFlagUntilTimeout>
 8003a3e:	4603      	mov	r3, r0
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d001      	beq.n	8003a48 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003a44:	2302      	movs	r3, #2
 8003a46:	e0cc      	b.n	8003be2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003a4e:	2b01      	cmp	r3, #1
 8003a50:	d101      	bne.n	8003a56 <HAL_I2C_Mem_Write+0x56>
 8003a52:	2302      	movs	r3, #2
 8003a54:	e0c5      	b.n	8003be2 <HAL_I2C_Mem_Write+0x1e2>
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	2201      	movs	r2, #1
 8003a5a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	f003 0301 	and.w	r3, r3, #1
 8003a68:	2b01      	cmp	r3, #1
 8003a6a:	d007      	beq.n	8003a7c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	681a      	ldr	r2, [r3, #0]
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	f042 0201 	orr.w	r2, r2, #1
 8003a7a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	681a      	ldr	r2, [r3, #0]
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003a8a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	2221      	movs	r2, #33	@ 0x21
 8003a90:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	2240      	movs	r2, #64	@ 0x40
 8003a98:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	2200      	movs	r2, #0
 8003aa0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	6a3a      	ldr	r2, [r7, #32]
 8003aa6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8003aac:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ab2:	b29a      	uxth	r2, r3
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	4a4d      	ldr	r2, [pc, #308]	@ (8003bf0 <HAL_I2C_Mem_Write+0x1f0>)
 8003abc:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003abe:	88f8      	ldrh	r0, [r7, #6]
 8003ac0:	893a      	ldrh	r2, [r7, #8]
 8003ac2:	8979      	ldrh	r1, [r7, #10]
 8003ac4:	697b      	ldr	r3, [r7, #20]
 8003ac6:	9301      	str	r3, [sp, #4]
 8003ac8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003aca:	9300      	str	r3, [sp, #0]
 8003acc:	4603      	mov	r3, r0
 8003ace:	68f8      	ldr	r0, [r7, #12]
 8003ad0:	f000 fb04 	bl	80040dc <I2C_RequestMemoryWrite>
 8003ad4:	4603      	mov	r3, r0
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d052      	beq.n	8003b80 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003ada:	2301      	movs	r3, #1
 8003adc:	e081      	b.n	8003be2 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003ade:	697a      	ldr	r2, [r7, #20]
 8003ae0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003ae2:	68f8      	ldr	r0, [r7, #12]
 8003ae4:	f000 fd92 	bl	800460c <I2C_WaitOnTXEFlagUntilTimeout>
 8003ae8:	4603      	mov	r3, r0
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d00d      	beq.n	8003b0a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003af2:	2b04      	cmp	r3, #4
 8003af4:	d107      	bne.n	8003b06 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	681a      	ldr	r2, [r3, #0]
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003b04:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003b06:	2301      	movs	r3, #1
 8003b08:	e06b      	b.n	8003be2 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b0e:	781a      	ldrb	r2, [r3, #0]
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b1a:	1c5a      	adds	r2, r3, #1
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b24:	3b01      	subs	r3, #1
 8003b26:	b29a      	uxth	r2, r3
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b30:	b29b      	uxth	r3, r3
 8003b32:	3b01      	subs	r3, #1
 8003b34:	b29a      	uxth	r2, r3
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	695b      	ldr	r3, [r3, #20]
 8003b40:	f003 0304 	and.w	r3, r3, #4
 8003b44:	2b04      	cmp	r3, #4
 8003b46:	d11b      	bne.n	8003b80 <HAL_I2C_Mem_Write+0x180>
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d017      	beq.n	8003b80 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b54:	781a      	ldrb	r2, [r3, #0]
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b60:	1c5a      	adds	r2, r3, #1
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b6a:	3b01      	subs	r3, #1
 8003b6c:	b29a      	uxth	r2, r3
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b76:	b29b      	uxth	r3, r3
 8003b78:	3b01      	subs	r3, #1
 8003b7a:	b29a      	uxth	r2, r3
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d1aa      	bne.n	8003ade <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003b88:	697a      	ldr	r2, [r7, #20]
 8003b8a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003b8c:	68f8      	ldr	r0, [r7, #12]
 8003b8e:	f000 fd85 	bl	800469c <I2C_WaitOnBTFFlagUntilTimeout>
 8003b92:	4603      	mov	r3, r0
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d00d      	beq.n	8003bb4 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b9c:	2b04      	cmp	r3, #4
 8003b9e:	d107      	bne.n	8003bb0 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	681a      	ldr	r2, [r3, #0]
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003bae:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003bb0:	2301      	movs	r3, #1
 8003bb2:	e016      	b.n	8003be2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	681a      	ldr	r2, [r3, #0]
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003bc2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	2220      	movs	r2, #32
 8003bc8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	2200      	movs	r2, #0
 8003bd0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	2200      	movs	r2, #0
 8003bd8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003bdc:	2300      	movs	r3, #0
 8003bde:	e000      	b.n	8003be2 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003be0:	2302      	movs	r3, #2
  }
}
 8003be2:	4618      	mov	r0, r3
 8003be4:	3718      	adds	r7, #24
 8003be6:	46bd      	mov	sp, r7
 8003be8:	bd80      	pop	{r7, pc}
 8003bea:	bf00      	nop
 8003bec:	00100002 	.word	0x00100002
 8003bf0:	ffff0000 	.word	0xffff0000

08003bf4 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003bf4:	b580      	push	{r7, lr}
 8003bf6:	b08c      	sub	sp, #48	@ 0x30
 8003bf8:	af02      	add	r7, sp, #8
 8003bfa:	60f8      	str	r0, [r7, #12]
 8003bfc:	4608      	mov	r0, r1
 8003bfe:	4611      	mov	r1, r2
 8003c00:	461a      	mov	r2, r3
 8003c02:	4603      	mov	r3, r0
 8003c04:	817b      	strh	r3, [r7, #10]
 8003c06:	460b      	mov	r3, r1
 8003c08:	813b      	strh	r3, [r7, #8]
 8003c0a:	4613      	mov	r3, r2
 8003c0c:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8003c0e:	2300      	movs	r3, #0
 8003c10:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003c12:	f7fe fc69 	bl	80024e8 <HAL_GetTick>
 8003c16:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003c1e:	b2db      	uxtb	r3, r3
 8003c20:	2b20      	cmp	r3, #32
 8003c22:	f040 8250 	bne.w	80040c6 <HAL_I2C_Mem_Read+0x4d2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003c26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c28:	9300      	str	r3, [sp, #0]
 8003c2a:	2319      	movs	r3, #25
 8003c2c:	2201      	movs	r2, #1
 8003c2e:	4982      	ldr	r1, [pc, #520]	@ (8003e38 <HAL_I2C_Mem_Read+0x244>)
 8003c30:	68f8      	ldr	r0, [r7, #12]
 8003c32:	f000 fbd1 	bl	80043d8 <I2C_WaitOnFlagUntilTimeout>
 8003c36:	4603      	mov	r3, r0
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d001      	beq.n	8003c40 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8003c3c:	2302      	movs	r3, #2
 8003c3e:	e243      	b.n	80040c8 <HAL_I2C_Mem_Read+0x4d4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003c46:	2b01      	cmp	r3, #1
 8003c48:	d101      	bne.n	8003c4e <HAL_I2C_Mem_Read+0x5a>
 8003c4a:	2302      	movs	r3, #2
 8003c4c:	e23c      	b.n	80040c8 <HAL_I2C_Mem_Read+0x4d4>
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	2201      	movs	r2, #1
 8003c52:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	f003 0301 	and.w	r3, r3, #1
 8003c60:	2b01      	cmp	r3, #1
 8003c62:	d007      	beq.n	8003c74 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	681a      	ldr	r2, [r3, #0]
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	f042 0201 	orr.w	r2, r2, #1
 8003c72:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	681a      	ldr	r2, [r3, #0]
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003c82:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	2222      	movs	r2, #34	@ 0x22
 8003c88:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	2240      	movs	r2, #64	@ 0x40
 8003c90:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	2200      	movs	r2, #0
 8003c98:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003c9e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8003ca4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003caa:	b29a      	uxth	r2, r3
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	4a62      	ldr	r2, [pc, #392]	@ (8003e3c <HAL_I2C_Mem_Read+0x248>)
 8003cb4:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003cb6:	88f8      	ldrh	r0, [r7, #6]
 8003cb8:	893a      	ldrh	r2, [r7, #8]
 8003cba:	8979      	ldrh	r1, [r7, #10]
 8003cbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cbe:	9301      	str	r3, [sp, #4]
 8003cc0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003cc2:	9300      	str	r3, [sp, #0]
 8003cc4:	4603      	mov	r3, r0
 8003cc6:	68f8      	ldr	r0, [r7, #12]
 8003cc8:	f000 fa9e 	bl	8004208 <I2C_RequestMemoryRead>
 8003ccc:	4603      	mov	r3, r0
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d001      	beq.n	8003cd6 <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8003cd2:	2301      	movs	r3, #1
 8003cd4:	e1f8      	b.n	80040c8 <HAL_I2C_Mem_Read+0x4d4>
    }

    if (hi2c->XferSize == 0U)
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d113      	bne.n	8003d06 <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003cde:	2300      	movs	r3, #0
 8003ce0:	61fb      	str	r3, [r7, #28]
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	695b      	ldr	r3, [r3, #20]
 8003ce8:	61fb      	str	r3, [r7, #28]
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	699b      	ldr	r3, [r3, #24]
 8003cf0:	61fb      	str	r3, [r7, #28]
 8003cf2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	681a      	ldr	r2, [r3, #0]
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003d02:	601a      	str	r2, [r3, #0]
 8003d04:	e1cc      	b.n	80040a0 <HAL_I2C_Mem_Read+0x4ac>
    }
    else if (hi2c->XferSize == 1U)
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d0a:	2b01      	cmp	r3, #1
 8003d0c:	d11e      	bne.n	8003d4c <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	681a      	ldr	r2, [r3, #0]
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003d1c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003d1e:	b672      	cpsid	i
}
 8003d20:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d22:	2300      	movs	r3, #0
 8003d24:	61bb      	str	r3, [r7, #24]
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	695b      	ldr	r3, [r3, #20]
 8003d2c:	61bb      	str	r3, [r7, #24]
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	699b      	ldr	r3, [r3, #24]
 8003d34:	61bb      	str	r3, [r7, #24]
 8003d36:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	681a      	ldr	r2, [r3, #0]
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003d46:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003d48:	b662      	cpsie	i
}
 8003d4a:	e035      	b.n	8003db8 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d50:	2b02      	cmp	r3, #2
 8003d52:	d11e      	bne.n	8003d92 <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	681a      	ldr	r2, [r3, #0]
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003d62:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003d64:	b672      	cpsid	i
}
 8003d66:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d68:	2300      	movs	r3, #0
 8003d6a:	617b      	str	r3, [r7, #20]
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	695b      	ldr	r3, [r3, #20]
 8003d72:	617b      	str	r3, [r7, #20]
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	699b      	ldr	r3, [r3, #24]
 8003d7a:	617b      	str	r3, [r7, #20]
 8003d7c:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	681a      	ldr	r2, [r3, #0]
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003d8c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003d8e:	b662      	cpsie	i
}
 8003d90:	e012      	b.n	8003db8 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	681a      	ldr	r2, [r3, #0]
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003da0:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003da2:	2300      	movs	r3, #0
 8003da4:	613b      	str	r3, [r7, #16]
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	695b      	ldr	r3, [r3, #20]
 8003dac:	613b      	str	r3, [r7, #16]
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	699b      	ldr	r3, [r3, #24]
 8003db4:	613b      	str	r3, [r7, #16]
 8003db6:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8003db8:	e172      	b.n	80040a0 <HAL_I2C_Mem_Read+0x4ac>
    {
      if (hi2c->XferSize <= 3U)
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003dbe:	2b03      	cmp	r3, #3
 8003dc0:	f200 811f 	bhi.w	8004002 <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003dc8:	2b01      	cmp	r3, #1
 8003dca:	d123      	bne.n	8003e14 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003dcc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003dce:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8003dd0:	68f8      	ldr	r0, [r7, #12]
 8003dd2:	f000 fcab 	bl	800472c <I2C_WaitOnRXNEFlagUntilTimeout>
 8003dd6:	4603      	mov	r3, r0
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d001      	beq.n	8003de0 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8003ddc:	2301      	movs	r3, #1
 8003dde:	e173      	b.n	80040c8 <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	691a      	ldr	r2, [r3, #16]
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003dea:	b2d2      	uxtb	r2, r2
 8003dec:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003df2:	1c5a      	adds	r2, r3, #1
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003dfc:	3b01      	subs	r3, #1
 8003dfe:	b29a      	uxth	r2, r3
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e08:	b29b      	uxth	r3, r3
 8003e0a:	3b01      	subs	r3, #1
 8003e0c:	b29a      	uxth	r2, r3
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003e12:	e145      	b.n	80040a0 <HAL_I2C_Mem_Read+0x4ac>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e18:	2b02      	cmp	r3, #2
 8003e1a:	d152      	bne.n	8003ec2 <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003e1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e1e:	9300      	str	r3, [sp, #0]
 8003e20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003e22:	2200      	movs	r2, #0
 8003e24:	4906      	ldr	r1, [pc, #24]	@ (8003e40 <HAL_I2C_Mem_Read+0x24c>)
 8003e26:	68f8      	ldr	r0, [r7, #12]
 8003e28:	f000 fad6 	bl	80043d8 <I2C_WaitOnFlagUntilTimeout>
 8003e2c:	4603      	mov	r3, r0
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d008      	beq.n	8003e44 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 8003e32:	2301      	movs	r3, #1
 8003e34:	e148      	b.n	80040c8 <HAL_I2C_Mem_Read+0x4d4>
 8003e36:	bf00      	nop
 8003e38:	00100002 	.word	0x00100002
 8003e3c:	ffff0000 	.word	0xffff0000
 8003e40:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8003e44:	b672      	cpsid	i
}
 8003e46:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	681a      	ldr	r2, [r3, #0]
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003e56:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	691a      	ldr	r2, [r3, #16]
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e62:	b2d2      	uxtb	r2, r2
 8003e64:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e6a:	1c5a      	adds	r2, r3, #1
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e74:	3b01      	subs	r3, #1
 8003e76:	b29a      	uxth	r2, r3
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e80:	b29b      	uxth	r3, r3
 8003e82:	3b01      	subs	r3, #1
 8003e84:	b29a      	uxth	r2, r3
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8003e8a:	b662      	cpsie	i
}
 8003e8c:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	691a      	ldr	r2, [r3, #16]
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e98:	b2d2      	uxtb	r2, r2
 8003e9a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ea0:	1c5a      	adds	r2, r3, #1
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003eaa:	3b01      	subs	r3, #1
 8003eac:	b29a      	uxth	r2, r3
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003eb6:	b29b      	uxth	r3, r3
 8003eb8:	3b01      	subs	r3, #1
 8003eba:	b29a      	uxth	r2, r3
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003ec0:	e0ee      	b.n	80040a0 <HAL_I2C_Mem_Read+0x4ac>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003ec2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ec4:	9300      	str	r3, [sp, #0]
 8003ec6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ec8:	2200      	movs	r2, #0
 8003eca:	4981      	ldr	r1, [pc, #516]	@ (80040d0 <HAL_I2C_Mem_Read+0x4dc>)
 8003ecc:	68f8      	ldr	r0, [r7, #12]
 8003ece:	f000 fa83 	bl	80043d8 <I2C_WaitOnFlagUntilTimeout>
 8003ed2:	4603      	mov	r3, r0
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d001      	beq.n	8003edc <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8003ed8:	2301      	movs	r3, #1
 8003eda:	e0f5      	b.n	80040c8 <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	681a      	ldr	r2, [r3, #0]
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003eea:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003eec:	b672      	cpsid	i
}
 8003eee:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	691a      	ldr	r2, [r3, #16]
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003efa:	b2d2      	uxtb	r2, r2
 8003efc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f02:	1c5a      	adds	r2, r3, #1
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f0c:	3b01      	subs	r3, #1
 8003f0e:	b29a      	uxth	r2, r3
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f18:	b29b      	uxth	r3, r3
 8003f1a:	3b01      	subs	r3, #1
 8003f1c:	b29a      	uxth	r2, r3
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8003f22:	4b6c      	ldr	r3, [pc, #432]	@ (80040d4 <HAL_I2C_Mem_Read+0x4e0>)
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	08db      	lsrs	r3, r3, #3
 8003f28:	4a6b      	ldr	r2, [pc, #428]	@ (80040d8 <HAL_I2C_Mem_Read+0x4e4>)
 8003f2a:	fba2 2303 	umull	r2, r3, r2, r3
 8003f2e:	0a1a      	lsrs	r2, r3, #8
 8003f30:	4613      	mov	r3, r2
 8003f32:	009b      	lsls	r3, r3, #2
 8003f34:	4413      	add	r3, r2
 8003f36:	00da      	lsls	r2, r3, #3
 8003f38:	1ad3      	subs	r3, r2, r3
 8003f3a:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8003f3c:	6a3b      	ldr	r3, [r7, #32]
 8003f3e:	3b01      	subs	r3, #1
 8003f40:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8003f42:	6a3b      	ldr	r3, [r7, #32]
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d118      	bne.n	8003f7a <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	2200      	movs	r2, #0
 8003f4c:	631a      	str	r2, [r3, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	2220      	movs	r2, #32
 8003f52:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	2200      	movs	r2, #0
 8003f5a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f62:	f043 0220 	orr.w	r2, r3, #32
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	641a      	str	r2, [r3, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8003f6a:	b662      	cpsie	i
}
 8003f6c:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	2200      	movs	r2, #0
 8003f72:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

              return HAL_ERROR;
 8003f76:	2301      	movs	r3, #1
 8003f78:	e0a6      	b.n	80040c8 <HAL_I2C_Mem_Read+0x4d4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	695b      	ldr	r3, [r3, #20]
 8003f80:	f003 0304 	and.w	r3, r3, #4
 8003f84:	2b04      	cmp	r3, #4
 8003f86:	d1d9      	bne.n	8003f3c <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	681a      	ldr	r2, [r3, #0]
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003f96:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	691a      	ldr	r2, [r3, #16]
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fa2:	b2d2      	uxtb	r2, r2
 8003fa4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003faa:	1c5a      	adds	r2, r3, #1
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003fb4:	3b01      	subs	r3, #1
 8003fb6:	b29a      	uxth	r2, r3
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003fc0:	b29b      	uxth	r3, r3
 8003fc2:	3b01      	subs	r3, #1
 8003fc4:	b29a      	uxth	r2, r3
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8003fca:	b662      	cpsie	i
}
 8003fcc:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	691a      	ldr	r2, [r3, #16]
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fd8:	b2d2      	uxtb	r2, r2
 8003fda:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fe0:	1c5a      	adds	r2, r3, #1
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003fea:	3b01      	subs	r3, #1
 8003fec:	b29a      	uxth	r2, r3
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ff6:	b29b      	uxth	r3, r3
 8003ff8:	3b01      	subs	r3, #1
 8003ffa:	b29a      	uxth	r2, r3
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004000:	e04e      	b.n	80040a0 <HAL_I2C_Mem_Read+0x4ac>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004002:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004004:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8004006:	68f8      	ldr	r0, [r7, #12]
 8004008:	f000 fb90 	bl	800472c <I2C_WaitOnRXNEFlagUntilTimeout>
 800400c:	4603      	mov	r3, r0
 800400e:	2b00      	cmp	r3, #0
 8004010:	d001      	beq.n	8004016 <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 8004012:	2301      	movs	r3, #1
 8004014:	e058      	b.n	80040c8 <HAL_I2C_Mem_Read+0x4d4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	691a      	ldr	r2, [r3, #16]
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004020:	b2d2      	uxtb	r2, r2
 8004022:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004028:	1c5a      	adds	r2, r3, #1
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004032:	3b01      	subs	r3, #1
 8004034:	b29a      	uxth	r2, r3
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800403e:	b29b      	uxth	r3, r3
 8004040:	3b01      	subs	r3, #1
 8004042:	b29a      	uxth	r2, r3
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	695b      	ldr	r3, [r3, #20]
 800404e:	f003 0304 	and.w	r3, r3, #4
 8004052:	2b04      	cmp	r3, #4
 8004054:	d124      	bne.n	80040a0 <HAL_I2C_Mem_Read+0x4ac>
        {
          if (hi2c->XferSize == 3U)
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800405a:	2b03      	cmp	r3, #3
 800405c:	d107      	bne.n	800406e <HAL_I2C_Mem_Read+0x47a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	681a      	ldr	r2, [r3, #0]
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800406c:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	691a      	ldr	r2, [r3, #16]
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004078:	b2d2      	uxtb	r2, r2
 800407a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004080:	1c5a      	adds	r2, r3, #1
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800408a:	3b01      	subs	r3, #1
 800408c:	b29a      	uxth	r2, r3
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004096:	b29b      	uxth	r3, r3
 8004098:	3b01      	subs	r3, #1
 800409a:	b29a      	uxth	r2, r3
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	f47f ae88 	bne.w	8003dba <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	2220      	movs	r2, #32
 80040ae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	2200      	movs	r2, #0
 80040b6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	2200      	movs	r2, #0
 80040be:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80040c2:	2300      	movs	r3, #0
 80040c4:	e000      	b.n	80040c8 <HAL_I2C_Mem_Read+0x4d4>
  }
  else
  {
    return HAL_BUSY;
 80040c6:	2302      	movs	r3, #2
  }
}
 80040c8:	4618      	mov	r0, r3
 80040ca:	3728      	adds	r7, #40	@ 0x28
 80040cc:	46bd      	mov	sp, r7
 80040ce:	bd80      	pop	{r7, pc}
 80040d0:	00010004 	.word	0x00010004
 80040d4:	20000000 	.word	0x20000000
 80040d8:	14f8b589 	.word	0x14f8b589

080040dc <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80040dc:	b580      	push	{r7, lr}
 80040de:	b088      	sub	sp, #32
 80040e0:	af02      	add	r7, sp, #8
 80040e2:	60f8      	str	r0, [r7, #12]
 80040e4:	4608      	mov	r0, r1
 80040e6:	4611      	mov	r1, r2
 80040e8:	461a      	mov	r2, r3
 80040ea:	4603      	mov	r3, r0
 80040ec:	817b      	strh	r3, [r7, #10]
 80040ee:	460b      	mov	r3, r1
 80040f0:	813b      	strh	r3, [r7, #8]
 80040f2:	4613      	mov	r3, r2
 80040f4:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	681a      	ldr	r2, [r3, #0]
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004104:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004106:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004108:	9300      	str	r3, [sp, #0]
 800410a:	6a3b      	ldr	r3, [r7, #32]
 800410c:	2200      	movs	r2, #0
 800410e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004112:	68f8      	ldr	r0, [r7, #12]
 8004114:	f000 f960 	bl	80043d8 <I2C_WaitOnFlagUntilTimeout>
 8004118:	4603      	mov	r3, r0
 800411a:	2b00      	cmp	r3, #0
 800411c:	d00d      	beq.n	800413a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004128:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800412c:	d103      	bne.n	8004136 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004134:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004136:	2303      	movs	r3, #3
 8004138:	e05f      	b.n	80041fa <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800413a:	897b      	ldrh	r3, [r7, #10]
 800413c:	b2db      	uxtb	r3, r3
 800413e:	461a      	mov	r2, r3
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004148:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800414a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800414c:	6a3a      	ldr	r2, [r7, #32]
 800414e:	492d      	ldr	r1, [pc, #180]	@ (8004204 <I2C_RequestMemoryWrite+0x128>)
 8004150:	68f8      	ldr	r0, [r7, #12]
 8004152:	f000 f9bb 	bl	80044cc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004156:	4603      	mov	r3, r0
 8004158:	2b00      	cmp	r3, #0
 800415a:	d001      	beq.n	8004160 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800415c:	2301      	movs	r3, #1
 800415e:	e04c      	b.n	80041fa <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004160:	2300      	movs	r3, #0
 8004162:	617b      	str	r3, [r7, #20]
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	695b      	ldr	r3, [r3, #20]
 800416a:	617b      	str	r3, [r7, #20]
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	699b      	ldr	r3, [r3, #24]
 8004172:	617b      	str	r3, [r7, #20]
 8004174:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004176:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004178:	6a39      	ldr	r1, [r7, #32]
 800417a:	68f8      	ldr	r0, [r7, #12]
 800417c:	f000 fa46 	bl	800460c <I2C_WaitOnTXEFlagUntilTimeout>
 8004180:	4603      	mov	r3, r0
 8004182:	2b00      	cmp	r3, #0
 8004184:	d00d      	beq.n	80041a2 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800418a:	2b04      	cmp	r3, #4
 800418c:	d107      	bne.n	800419e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	681a      	ldr	r2, [r3, #0]
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800419c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800419e:	2301      	movs	r3, #1
 80041a0:	e02b      	b.n	80041fa <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80041a2:	88fb      	ldrh	r3, [r7, #6]
 80041a4:	2b01      	cmp	r3, #1
 80041a6:	d105      	bne.n	80041b4 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80041a8:	893b      	ldrh	r3, [r7, #8]
 80041aa:	b2da      	uxtb	r2, r3
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	611a      	str	r2, [r3, #16]
 80041b2:	e021      	b.n	80041f8 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80041b4:	893b      	ldrh	r3, [r7, #8]
 80041b6:	0a1b      	lsrs	r3, r3, #8
 80041b8:	b29b      	uxth	r3, r3
 80041ba:	b2da      	uxtb	r2, r3
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80041c2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80041c4:	6a39      	ldr	r1, [r7, #32]
 80041c6:	68f8      	ldr	r0, [r7, #12]
 80041c8:	f000 fa20 	bl	800460c <I2C_WaitOnTXEFlagUntilTimeout>
 80041cc:	4603      	mov	r3, r0
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d00d      	beq.n	80041ee <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041d6:	2b04      	cmp	r3, #4
 80041d8:	d107      	bne.n	80041ea <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	681a      	ldr	r2, [r3, #0]
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80041e8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80041ea:	2301      	movs	r3, #1
 80041ec:	e005      	b.n	80041fa <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80041ee:	893b      	ldrh	r3, [r7, #8]
 80041f0:	b2da      	uxtb	r2, r3
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80041f8:	2300      	movs	r3, #0
}
 80041fa:	4618      	mov	r0, r3
 80041fc:	3718      	adds	r7, #24
 80041fe:	46bd      	mov	sp, r7
 8004200:	bd80      	pop	{r7, pc}
 8004202:	bf00      	nop
 8004204:	00010002 	.word	0x00010002

08004208 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004208:	b580      	push	{r7, lr}
 800420a:	b088      	sub	sp, #32
 800420c:	af02      	add	r7, sp, #8
 800420e:	60f8      	str	r0, [r7, #12]
 8004210:	4608      	mov	r0, r1
 8004212:	4611      	mov	r1, r2
 8004214:	461a      	mov	r2, r3
 8004216:	4603      	mov	r3, r0
 8004218:	817b      	strh	r3, [r7, #10]
 800421a:	460b      	mov	r3, r1
 800421c:	813b      	strh	r3, [r7, #8]
 800421e:	4613      	mov	r3, r2
 8004220:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	681a      	ldr	r2, [r3, #0]
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004230:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	681a      	ldr	r2, [r3, #0]
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004240:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004242:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004244:	9300      	str	r3, [sp, #0]
 8004246:	6a3b      	ldr	r3, [r7, #32]
 8004248:	2200      	movs	r2, #0
 800424a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800424e:	68f8      	ldr	r0, [r7, #12]
 8004250:	f000 f8c2 	bl	80043d8 <I2C_WaitOnFlagUntilTimeout>
 8004254:	4603      	mov	r3, r0
 8004256:	2b00      	cmp	r3, #0
 8004258:	d00d      	beq.n	8004276 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004264:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004268:	d103      	bne.n	8004272 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004270:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004272:	2303      	movs	r3, #3
 8004274:	e0aa      	b.n	80043cc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004276:	897b      	ldrh	r3, [r7, #10]
 8004278:	b2db      	uxtb	r3, r3
 800427a:	461a      	mov	r2, r3
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004284:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004286:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004288:	6a3a      	ldr	r2, [r7, #32]
 800428a:	4952      	ldr	r1, [pc, #328]	@ (80043d4 <I2C_RequestMemoryRead+0x1cc>)
 800428c:	68f8      	ldr	r0, [r7, #12]
 800428e:	f000 f91d 	bl	80044cc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004292:	4603      	mov	r3, r0
 8004294:	2b00      	cmp	r3, #0
 8004296:	d001      	beq.n	800429c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8004298:	2301      	movs	r3, #1
 800429a:	e097      	b.n	80043cc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800429c:	2300      	movs	r3, #0
 800429e:	617b      	str	r3, [r7, #20]
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	695b      	ldr	r3, [r3, #20]
 80042a6:	617b      	str	r3, [r7, #20]
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	699b      	ldr	r3, [r3, #24]
 80042ae:	617b      	str	r3, [r7, #20]
 80042b0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80042b2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80042b4:	6a39      	ldr	r1, [r7, #32]
 80042b6:	68f8      	ldr	r0, [r7, #12]
 80042b8:	f000 f9a8 	bl	800460c <I2C_WaitOnTXEFlagUntilTimeout>
 80042bc:	4603      	mov	r3, r0
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d00d      	beq.n	80042de <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042c6:	2b04      	cmp	r3, #4
 80042c8:	d107      	bne.n	80042da <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	681a      	ldr	r2, [r3, #0]
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80042d8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80042da:	2301      	movs	r3, #1
 80042dc:	e076      	b.n	80043cc <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80042de:	88fb      	ldrh	r3, [r7, #6]
 80042e0:	2b01      	cmp	r3, #1
 80042e2:	d105      	bne.n	80042f0 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80042e4:	893b      	ldrh	r3, [r7, #8]
 80042e6:	b2da      	uxtb	r2, r3
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	611a      	str	r2, [r3, #16]
 80042ee:	e021      	b.n	8004334 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80042f0:	893b      	ldrh	r3, [r7, #8]
 80042f2:	0a1b      	lsrs	r3, r3, #8
 80042f4:	b29b      	uxth	r3, r3
 80042f6:	b2da      	uxtb	r2, r3
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80042fe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004300:	6a39      	ldr	r1, [r7, #32]
 8004302:	68f8      	ldr	r0, [r7, #12]
 8004304:	f000 f982 	bl	800460c <I2C_WaitOnTXEFlagUntilTimeout>
 8004308:	4603      	mov	r3, r0
 800430a:	2b00      	cmp	r3, #0
 800430c:	d00d      	beq.n	800432a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004312:	2b04      	cmp	r3, #4
 8004314:	d107      	bne.n	8004326 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	681a      	ldr	r2, [r3, #0]
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004324:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004326:	2301      	movs	r3, #1
 8004328:	e050      	b.n	80043cc <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800432a:	893b      	ldrh	r3, [r7, #8]
 800432c:	b2da      	uxtb	r2, r3
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004334:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004336:	6a39      	ldr	r1, [r7, #32]
 8004338:	68f8      	ldr	r0, [r7, #12]
 800433a:	f000 f967 	bl	800460c <I2C_WaitOnTXEFlagUntilTimeout>
 800433e:	4603      	mov	r3, r0
 8004340:	2b00      	cmp	r3, #0
 8004342:	d00d      	beq.n	8004360 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004348:	2b04      	cmp	r3, #4
 800434a:	d107      	bne.n	800435c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	681a      	ldr	r2, [r3, #0]
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800435a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800435c:	2301      	movs	r3, #1
 800435e:	e035      	b.n	80043cc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	681a      	ldr	r2, [r3, #0]
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800436e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004370:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004372:	9300      	str	r3, [sp, #0]
 8004374:	6a3b      	ldr	r3, [r7, #32]
 8004376:	2200      	movs	r2, #0
 8004378:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800437c:	68f8      	ldr	r0, [r7, #12]
 800437e:	f000 f82b 	bl	80043d8 <I2C_WaitOnFlagUntilTimeout>
 8004382:	4603      	mov	r3, r0
 8004384:	2b00      	cmp	r3, #0
 8004386:	d00d      	beq.n	80043a4 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004392:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004396:	d103      	bne.n	80043a0 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800439e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80043a0:	2303      	movs	r3, #3
 80043a2:	e013      	b.n	80043cc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80043a4:	897b      	ldrh	r3, [r7, #10]
 80043a6:	b2db      	uxtb	r3, r3
 80043a8:	f043 0301 	orr.w	r3, r3, #1
 80043ac:	b2da      	uxtb	r2, r3
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80043b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043b6:	6a3a      	ldr	r2, [r7, #32]
 80043b8:	4906      	ldr	r1, [pc, #24]	@ (80043d4 <I2C_RequestMemoryRead+0x1cc>)
 80043ba:	68f8      	ldr	r0, [r7, #12]
 80043bc:	f000 f886 	bl	80044cc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80043c0:	4603      	mov	r3, r0
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d001      	beq.n	80043ca <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80043c6:	2301      	movs	r3, #1
 80043c8:	e000      	b.n	80043cc <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80043ca:	2300      	movs	r3, #0
}
 80043cc:	4618      	mov	r0, r3
 80043ce:	3718      	adds	r7, #24
 80043d0:	46bd      	mov	sp, r7
 80043d2:	bd80      	pop	{r7, pc}
 80043d4:	00010002 	.word	0x00010002

080043d8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80043d8:	b580      	push	{r7, lr}
 80043da:	b084      	sub	sp, #16
 80043dc:	af00      	add	r7, sp, #0
 80043de:	60f8      	str	r0, [r7, #12]
 80043e0:	60b9      	str	r1, [r7, #8]
 80043e2:	603b      	str	r3, [r7, #0]
 80043e4:	4613      	mov	r3, r2
 80043e6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80043e8:	e048      	b.n	800447c <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80043ea:	683b      	ldr	r3, [r7, #0]
 80043ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043f0:	d044      	beq.n	800447c <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80043f2:	f7fe f879 	bl	80024e8 <HAL_GetTick>
 80043f6:	4602      	mov	r2, r0
 80043f8:	69bb      	ldr	r3, [r7, #24]
 80043fa:	1ad3      	subs	r3, r2, r3
 80043fc:	683a      	ldr	r2, [r7, #0]
 80043fe:	429a      	cmp	r2, r3
 8004400:	d302      	bcc.n	8004408 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004402:	683b      	ldr	r3, [r7, #0]
 8004404:	2b00      	cmp	r3, #0
 8004406:	d139      	bne.n	800447c <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004408:	68bb      	ldr	r3, [r7, #8]
 800440a:	0c1b      	lsrs	r3, r3, #16
 800440c:	b2db      	uxtb	r3, r3
 800440e:	2b01      	cmp	r3, #1
 8004410:	d10d      	bne.n	800442e <I2C_WaitOnFlagUntilTimeout+0x56>
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	695b      	ldr	r3, [r3, #20]
 8004418:	43da      	mvns	r2, r3
 800441a:	68bb      	ldr	r3, [r7, #8]
 800441c:	4013      	ands	r3, r2
 800441e:	b29b      	uxth	r3, r3
 8004420:	2b00      	cmp	r3, #0
 8004422:	bf0c      	ite	eq
 8004424:	2301      	moveq	r3, #1
 8004426:	2300      	movne	r3, #0
 8004428:	b2db      	uxtb	r3, r3
 800442a:	461a      	mov	r2, r3
 800442c:	e00c      	b.n	8004448 <I2C_WaitOnFlagUntilTimeout+0x70>
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	699b      	ldr	r3, [r3, #24]
 8004434:	43da      	mvns	r2, r3
 8004436:	68bb      	ldr	r3, [r7, #8]
 8004438:	4013      	ands	r3, r2
 800443a:	b29b      	uxth	r3, r3
 800443c:	2b00      	cmp	r3, #0
 800443e:	bf0c      	ite	eq
 8004440:	2301      	moveq	r3, #1
 8004442:	2300      	movne	r3, #0
 8004444:	b2db      	uxtb	r3, r3
 8004446:	461a      	mov	r2, r3
 8004448:	79fb      	ldrb	r3, [r7, #7]
 800444a:	429a      	cmp	r2, r3
 800444c:	d116      	bne.n	800447c <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	2200      	movs	r2, #0
 8004452:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	2220      	movs	r2, #32
 8004458:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	2200      	movs	r2, #0
 8004460:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004468:	f043 0220 	orr.w	r2, r3, #32
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	2200      	movs	r2, #0
 8004474:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004478:	2301      	movs	r3, #1
 800447a:	e023      	b.n	80044c4 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800447c:	68bb      	ldr	r3, [r7, #8]
 800447e:	0c1b      	lsrs	r3, r3, #16
 8004480:	b2db      	uxtb	r3, r3
 8004482:	2b01      	cmp	r3, #1
 8004484:	d10d      	bne.n	80044a2 <I2C_WaitOnFlagUntilTimeout+0xca>
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	695b      	ldr	r3, [r3, #20]
 800448c:	43da      	mvns	r2, r3
 800448e:	68bb      	ldr	r3, [r7, #8]
 8004490:	4013      	ands	r3, r2
 8004492:	b29b      	uxth	r3, r3
 8004494:	2b00      	cmp	r3, #0
 8004496:	bf0c      	ite	eq
 8004498:	2301      	moveq	r3, #1
 800449a:	2300      	movne	r3, #0
 800449c:	b2db      	uxtb	r3, r3
 800449e:	461a      	mov	r2, r3
 80044a0:	e00c      	b.n	80044bc <I2C_WaitOnFlagUntilTimeout+0xe4>
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	699b      	ldr	r3, [r3, #24]
 80044a8:	43da      	mvns	r2, r3
 80044aa:	68bb      	ldr	r3, [r7, #8]
 80044ac:	4013      	ands	r3, r2
 80044ae:	b29b      	uxth	r3, r3
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	bf0c      	ite	eq
 80044b4:	2301      	moveq	r3, #1
 80044b6:	2300      	movne	r3, #0
 80044b8:	b2db      	uxtb	r3, r3
 80044ba:	461a      	mov	r2, r3
 80044bc:	79fb      	ldrb	r3, [r7, #7]
 80044be:	429a      	cmp	r2, r3
 80044c0:	d093      	beq.n	80043ea <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80044c2:	2300      	movs	r3, #0
}
 80044c4:	4618      	mov	r0, r3
 80044c6:	3710      	adds	r7, #16
 80044c8:	46bd      	mov	sp, r7
 80044ca:	bd80      	pop	{r7, pc}

080044cc <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80044cc:	b580      	push	{r7, lr}
 80044ce:	b084      	sub	sp, #16
 80044d0:	af00      	add	r7, sp, #0
 80044d2:	60f8      	str	r0, [r7, #12]
 80044d4:	60b9      	str	r1, [r7, #8]
 80044d6:	607a      	str	r2, [r7, #4]
 80044d8:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80044da:	e071      	b.n	80045c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	695b      	ldr	r3, [r3, #20]
 80044e2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80044e6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80044ea:	d123      	bne.n	8004534 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	681a      	ldr	r2, [r3, #0]
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80044fa:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004504:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	2200      	movs	r2, #0
 800450a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	2220      	movs	r2, #32
 8004510:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	2200      	movs	r2, #0
 8004518:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004520:	f043 0204 	orr.w	r2, r3, #4
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	2200      	movs	r2, #0
 800452c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004530:	2301      	movs	r3, #1
 8004532:	e067      	b.n	8004604 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	f1b3 3fff 	cmp.w	r3, #4294967295
 800453a:	d041      	beq.n	80045c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800453c:	f7fd ffd4 	bl	80024e8 <HAL_GetTick>
 8004540:	4602      	mov	r2, r0
 8004542:	683b      	ldr	r3, [r7, #0]
 8004544:	1ad3      	subs	r3, r2, r3
 8004546:	687a      	ldr	r2, [r7, #4]
 8004548:	429a      	cmp	r2, r3
 800454a:	d302      	bcc.n	8004552 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	2b00      	cmp	r3, #0
 8004550:	d136      	bne.n	80045c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8004552:	68bb      	ldr	r3, [r7, #8]
 8004554:	0c1b      	lsrs	r3, r3, #16
 8004556:	b2db      	uxtb	r3, r3
 8004558:	2b01      	cmp	r3, #1
 800455a:	d10c      	bne.n	8004576 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	695b      	ldr	r3, [r3, #20]
 8004562:	43da      	mvns	r2, r3
 8004564:	68bb      	ldr	r3, [r7, #8]
 8004566:	4013      	ands	r3, r2
 8004568:	b29b      	uxth	r3, r3
 800456a:	2b00      	cmp	r3, #0
 800456c:	bf14      	ite	ne
 800456e:	2301      	movne	r3, #1
 8004570:	2300      	moveq	r3, #0
 8004572:	b2db      	uxtb	r3, r3
 8004574:	e00b      	b.n	800458e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	699b      	ldr	r3, [r3, #24]
 800457c:	43da      	mvns	r2, r3
 800457e:	68bb      	ldr	r3, [r7, #8]
 8004580:	4013      	ands	r3, r2
 8004582:	b29b      	uxth	r3, r3
 8004584:	2b00      	cmp	r3, #0
 8004586:	bf14      	ite	ne
 8004588:	2301      	movne	r3, #1
 800458a:	2300      	moveq	r3, #0
 800458c:	b2db      	uxtb	r3, r3
 800458e:	2b00      	cmp	r3, #0
 8004590:	d016      	beq.n	80045c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	2200      	movs	r2, #0
 8004596:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	2220      	movs	r2, #32
 800459c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	2200      	movs	r2, #0
 80045a4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045ac:	f043 0220 	orr.w	r2, r3, #32
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	2200      	movs	r2, #0
 80045b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80045bc:	2301      	movs	r3, #1
 80045be:	e021      	b.n	8004604 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80045c0:	68bb      	ldr	r3, [r7, #8]
 80045c2:	0c1b      	lsrs	r3, r3, #16
 80045c4:	b2db      	uxtb	r3, r3
 80045c6:	2b01      	cmp	r3, #1
 80045c8:	d10c      	bne.n	80045e4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	695b      	ldr	r3, [r3, #20]
 80045d0:	43da      	mvns	r2, r3
 80045d2:	68bb      	ldr	r3, [r7, #8]
 80045d4:	4013      	ands	r3, r2
 80045d6:	b29b      	uxth	r3, r3
 80045d8:	2b00      	cmp	r3, #0
 80045da:	bf14      	ite	ne
 80045dc:	2301      	movne	r3, #1
 80045de:	2300      	moveq	r3, #0
 80045e0:	b2db      	uxtb	r3, r3
 80045e2:	e00b      	b.n	80045fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	699b      	ldr	r3, [r3, #24]
 80045ea:	43da      	mvns	r2, r3
 80045ec:	68bb      	ldr	r3, [r7, #8]
 80045ee:	4013      	ands	r3, r2
 80045f0:	b29b      	uxth	r3, r3
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	bf14      	ite	ne
 80045f6:	2301      	movne	r3, #1
 80045f8:	2300      	moveq	r3, #0
 80045fa:	b2db      	uxtb	r3, r3
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	f47f af6d 	bne.w	80044dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8004602:	2300      	movs	r3, #0
}
 8004604:	4618      	mov	r0, r3
 8004606:	3710      	adds	r7, #16
 8004608:	46bd      	mov	sp, r7
 800460a:	bd80      	pop	{r7, pc}

0800460c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800460c:	b580      	push	{r7, lr}
 800460e:	b084      	sub	sp, #16
 8004610:	af00      	add	r7, sp, #0
 8004612:	60f8      	str	r0, [r7, #12]
 8004614:	60b9      	str	r1, [r7, #8]
 8004616:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004618:	e034      	b.n	8004684 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800461a:	68f8      	ldr	r0, [r7, #12]
 800461c:	f000 f8e3 	bl	80047e6 <I2C_IsAcknowledgeFailed>
 8004620:	4603      	mov	r3, r0
 8004622:	2b00      	cmp	r3, #0
 8004624:	d001      	beq.n	800462a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004626:	2301      	movs	r3, #1
 8004628:	e034      	b.n	8004694 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800462a:	68bb      	ldr	r3, [r7, #8]
 800462c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004630:	d028      	beq.n	8004684 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004632:	f7fd ff59 	bl	80024e8 <HAL_GetTick>
 8004636:	4602      	mov	r2, r0
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	1ad3      	subs	r3, r2, r3
 800463c:	68ba      	ldr	r2, [r7, #8]
 800463e:	429a      	cmp	r2, r3
 8004640:	d302      	bcc.n	8004648 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004642:	68bb      	ldr	r3, [r7, #8]
 8004644:	2b00      	cmp	r3, #0
 8004646:	d11d      	bne.n	8004684 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	695b      	ldr	r3, [r3, #20]
 800464e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004652:	2b80      	cmp	r3, #128	@ 0x80
 8004654:	d016      	beq.n	8004684 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	2200      	movs	r2, #0
 800465a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	2220      	movs	r2, #32
 8004660:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	2200      	movs	r2, #0
 8004668:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004670:	f043 0220 	orr.w	r2, r3, #32
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	2200      	movs	r2, #0
 800467c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004680:	2301      	movs	r3, #1
 8004682:	e007      	b.n	8004694 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	695b      	ldr	r3, [r3, #20]
 800468a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800468e:	2b80      	cmp	r3, #128	@ 0x80
 8004690:	d1c3      	bne.n	800461a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004692:	2300      	movs	r3, #0
}
 8004694:	4618      	mov	r0, r3
 8004696:	3710      	adds	r7, #16
 8004698:	46bd      	mov	sp, r7
 800469a:	bd80      	pop	{r7, pc}

0800469c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800469c:	b580      	push	{r7, lr}
 800469e:	b084      	sub	sp, #16
 80046a0:	af00      	add	r7, sp, #0
 80046a2:	60f8      	str	r0, [r7, #12]
 80046a4:	60b9      	str	r1, [r7, #8]
 80046a6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80046a8:	e034      	b.n	8004714 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80046aa:	68f8      	ldr	r0, [r7, #12]
 80046ac:	f000 f89b 	bl	80047e6 <I2C_IsAcknowledgeFailed>
 80046b0:	4603      	mov	r3, r0
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d001      	beq.n	80046ba <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80046b6:	2301      	movs	r3, #1
 80046b8:	e034      	b.n	8004724 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80046ba:	68bb      	ldr	r3, [r7, #8]
 80046bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046c0:	d028      	beq.n	8004714 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80046c2:	f7fd ff11 	bl	80024e8 <HAL_GetTick>
 80046c6:	4602      	mov	r2, r0
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	1ad3      	subs	r3, r2, r3
 80046cc:	68ba      	ldr	r2, [r7, #8]
 80046ce:	429a      	cmp	r2, r3
 80046d0:	d302      	bcc.n	80046d8 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80046d2:	68bb      	ldr	r3, [r7, #8]
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d11d      	bne.n	8004714 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	695b      	ldr	r3, [r3, #20]
 80046de:	f003 0304 	and.w	r3, r3, #4
 80046e2:	2b04      	cmp	r3, #4
 80046e4:	d016      	beq.n	8004714 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	2200      	movs	r2, #0
 80046ea:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	2220      	movs	r2, #32
 80046f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	2200      	movs	r2, #0
 80046f8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004700:	f043 0220 	orr.w	r2, r3, #32
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	2200      	movs	r2, #0
 800470c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004710:	2301      	movs	r3, #1
 8004712:	e007      	b.n	8004724 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	695b      	ldr	r3, [r3, #20]
 800471a:	f003 0304 	and.w	r3, r3, #4
 800471e:	2b04      	cmp	r3, #4
 8004720:	d1c3      	bne.n	80046aa <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004722:	2300      	movs	r3, #0
}
 8004724:	4618      	mov	r0, r3
 8004726:	3710      	adds	r7, #16
 8004728:	46bd      	mov	sp, r7
 800472a:	bd80      	pop	{r7, pc}

0800472c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800472c:	b580      	push	{r7, lr}
 800472e:	b084      	sub	sp, #16
 8004730:	af00      	add	r7, sp, #0
 8004732:	60f8      	str	r0, [r7, #12]
 8004734:	60b9      	str	r1, [r7, #8]
 8004736:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004738:	e049      	b.n	80047ce <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	695b      	ldr	r3, [r3, #20]
 8004740:	f003 0310 	and.w	r3, r3, #16
 8004744:	2b10      	cmp	r3, #16
 8004746:	d119      	bne.n	800477c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	f06f 0210 	mvn.w	r2, #16
 8004750:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	2200      	movs	r2, #0
 8004756:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	2220      	movs	r2, #32
 800475c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	2200      	movs	r2, #0
 8004764:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	2200      	movs	r2, #0
 8004774:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004778:	2301      	movs	r3, #1
 800477a:	e030      	b.n	80047de <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800477c:	f7fd feb4 	bl	80024e8 <HAL_GetTick>
 8004780:	4602      	mov	r2, r0
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	1ad3      	subs	r3, r2, r3
 8004786:	68ba      	ldr	r2, [r7, #8]
 8004788:	429a      	cmp	r2, r3
 800478a:	d302      	bcc.n	8004792 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800478c:	68bb      	ldr	r3, [r7, #8]
 800478e:	2b00      	cmp	r3, #0
 8004790:	d11d      	bne.n	80047ce <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	695b      	ldr	r3, [r3, #20]
 8004798:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800479c:	2b40      	cmp	r3, #64	@ 0x40
 800479e:	d016      	beq.n	80047ce <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	2200      	movs	r2, #0
 80047a4:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	2220      	movs	r2, #32
 80047aa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	2200      	movs	r2, #0
 80047b2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047ba:	f043 0220 	orr.w	r2, r3, #32
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	2200      	movs	r2, #0
 80047c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80047ca:	2301      	movs	r3, #1
 80047cc:	e007      	b.n	80047de <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	695b      	ldr	r3, [r3, #20]
 80047d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80047d8:	2b40      	cmp	r3, #64	@ 0x40
 80047da:	d1ae      	bne.n	800473a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80047dc:	2300      	movs	r3, #0
}
 80047de:	4618      	mov	r0, r3
 80047e0:	3710      	adds	r7, #16
 80047e2:	46bd      	mov	sp, r7
 80047e4:	bd80      	pop	{r7, pc}

080047e6 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80047e6:	b480      	push	{r7}
 80047e8:	b083      	sub	sp, #12
 80047ea:	af00      	add	r7, sp, #0
 80047ec:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	695b      	ldr	r3, [r3, #20]
 80047f4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80047f8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80047fc:	d11b      	bne.n	8004836 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004806:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	2200      	movs	r2, #0
 800480c:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	2220      	movs	r2, #32
 8004812:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	2200      	movs	r2, #0
 800481a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004822:	f043 0204 	orr.w	r2, r3, #4
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	2200      	movs	r2, #0
 800482e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8004832:	2301      	movs	r3, #1
 8004834:	e000      	b.n	8004838 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004836:	2300      	movs	r3, #0
}
 8004838:	4618      	mov	r0, r3
 800483a:	370c      	adds	r7, #12
 800483c:	46bd      	mov	sp, r7
 800483e:	bc80      	pop	{r7}
 8004840:	4770      	bx	lr
	...

08004844 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004844:	b580      	push	{r7, lr}
 8004846:	b086      	sub	sp, #24
 8004848:	af00      	add	r7, sp, #0
 800484a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	2b00      	cmp	r3, #0
 8004850:	d101      	bne.n	8004856 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004852:	2301      	movs	r3, #1
 8004854:	e272      	b.n	8004d3c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	f003 0301 	and.w	r3, r3, #1
 800485e:	2b00      	cmp	r3, #0
 8004860:	f000 8087 	beq.w	8004972 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004864:	4b92      	ldr	r3, [pc, #584]	@ (8004ab0 <HAL_RCC_OscConfig+0x26c>)
 8004866:	685b      	ldr	r3, [r3, #4]
 8004868:	f003 030c 	and.w	r3, r3, #12
 800486c:	2b04      	cmp	r3, #4
 800486e:	d00c      	beq.n	800488a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004870:	4b8f      	ldr	r3, [pc, #572]	@ (8004ab0 <HAL_RCC_OscConfig+0x26c>)
 8004872:	685b      	ldr	r3, [r3, #4]
 8004874:	f003 030c 	and.w	r3, r3, #12
 8004878:	2b08      	cmp	r3, #8
 800487a:	d112      	bne.n	80048a2 <HAL_RCC_OscConfig+0x5e>
 800487c:	4b8c      	ldr	r3, [pc, #560]	@ (8004ab0 <HAL_RCC_OscConfig+0x26c>)
 800487e:	685b      	ldr	r3, [r3, #4]
 8004880:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004884:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004888:	d10b      	bne.n	80048a2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800488a:	4b89      	ldr	r3, [pc, #548]	@ (8004ab0 <HAL_RCC_OscConfig+0x26c>)
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004892:	2b00      	cmp	r3, #0
 8004894:	d06c      	beq.n	8004970 <HAL_RCC_OscConfig+0x12c>
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	685b      	ldr	r3, [r3, #4]
 800489a:	2b00      	cmp	r3, #0
 800489c:	d168      	bne.n	8004970 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800489e:	2301      	movs	r3, #1
 80048a0:	e24c      	b.n	8004d3c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	685b      	ldr	r3, [r3, #4]
 80048a6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80048aa:	d106      	bne.n	80048ba <HAL_RCC_OscConfig+0x76>
 80048ac:	4b80      	ldr	r3, [pc, #512]	@ (8004ab0 <HAL_RCC_OscConfig+0x26c>)
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	4a7f      	ldr	r2, [pc, #508]	@ (8004ab0 <HAL_RCC_OscConfig+0x26c>)
 80048b2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80048b6:	6013      	str	r3, [r2, #0]
 80048b8:	e02e      	b.n	8004918 <HAL_RCC_OscConfig+0xd4>
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	685b      	ldr	r3, [r3, #4]
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d10c      	bne.n	80048dc <HAL_RCC_OscConfig+0x98>
 80048c2:	4b7b      	ldr	r3, [pc, #492]	@ (8004ab0 <HAL_RCC_OscConfig+0x26c>)
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	4a7a      	ldr	r2, [pc, #488]	@ (8004ab0 <HAL_RCC_OscConfig+0x26c>)
 80048c8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80048cc:	6013      	str	r3, [r2, #0]
 80048ce:	4b78      	ldr	r3, [pc, #480]	@ (8004ab0 <HAL_RCC_OscConfig+0x26c>)
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	4a77      	ldr	r2, [pc, #476]	@ (8004ab0 <HAL_RCC_OscConfig+0x26c>)
 80048d4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80048d8:	6013      	str	r3, [r2, #0]
 80048da:	e01d      	b.n	8004918 <HAL_RCC_OscConfig+0xd4>
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	685b      	ldr	r3, [r3, #4]
 80048e0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80048e4:	d10c      	bne.n	8004900 <HAL_RCC_OscConfig+0xbc>
 80048e6:	4b72      	ldr	r3, [pc, #456]	@ (8004ab0 <HAL_RCC_OscConfig+0x26c>)
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	4a71      	ldr	r2, [pc, #452]	@ (8004ab0 <HAL_RCC_OscConfig+0x26c>)
 80048ec:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80048f0:	6013      	str	r3, [r2, #0]
 80048f2:	4b6f      	ldr	r3, [pc, #444]	@ (8004ab0 <HAL_RCC_OscConfig+0x26c>)
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	4a6e      	ldr	r2, [pc, #440]	@ (8004ab0 <HAL_RCC_OscConfig+0x26c>)
 80048f8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80048fc:	6013      	str	r3, [r2, #0]
 80048fe:	e00b      	b.n	8004918 <HAL_RCC_OscConfig+0xd4>
 8004900:	4b6b      	ldr	r3, [pc, #428]	@ (8004ab0 <HAL_RCC_OscConfig+0x26c>)
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	4a6a      	ldr	r2, [pc, #424]	@ (8004ab0 <HAL_RCC_OscConfig+0x26c>)
 8004906:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800490a:	6013      	str	r3, [r2, #0]
 800490c:	4b68      	ldr	r3, [pc, #416]	@ (8004ab0 <HAL_RCC_OscConfig+0x26c>)
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	4a67      	ldr	r2, [pc, #412]	@ (8004ab0 <HAL_RCC_OscConfig+0x26c>)
 8004912:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004916:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	685b      	ldr	r3, [r3, #4]
 800491c:	2b00      	cmp	r3, #0
 800491e:	d013      	beq.n	8004948 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004920:	f7fd fde2 	bl	80024e8 <HAL_GetTick>
 8004924:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004926:	e008      	b.n	800493a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004928:	f7fd fdde 	bl	80024e8 <HAL_GetTick>
 800492c:	4602      	mov	r2, r0
 800492e:	693b      	ldr	r3, [r7, #16]
 8004930:	1ad3      	subs	r3, r2, r3
 8004932:	2b64      	cmp	r3, #100	@ 0x64
 8004934:	d901      	bls.n	800493a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004936:	2303      	movs	r3, #3
 8004938:	e200      	b.n	8004d3c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800493a:	4b5d      	ldr	r3, [pc, #372]	@ (8004ab0 <HAL_RCC_OscConfig+0x26c>)
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004942:	2b00      	cmp	r3, #0
 8004944:	d0f0      	beq.n	8004928 <HAL_RCC_OscConfig+0xe4>
 8004946:	e014      	b.n	8004972 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004948:	f7fd fdce 	bl	80024e8 <HAL_GetTick>
 800494c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800494e:	e008      	b.n	8004962 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004950:	f7fd fdca 	bl	80024e8 <HAL_GetTick>
 8004954:	4602      	mov	r2, r0
 8004956:	693b      	ldr	r3, [r7, #16]
 8004958:	1ad3      	subs	r3, r2, r3
 800495a:	2b64      	cmp	r3, #100	@ 0x64
 800495c:	d901      	bls.n	8004962 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800495e:	2303      	movs	r3, #3
 8004960:	e1ec      	b.n	8004d3c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004962:	4b53      	ldr	r3, [pc, #332]	@ (8004ab0 <HAL_RCC_OscConfig+0x26c>)
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800496a:	2b00      	cmp	r3, #0
 800496c:	d1f0      	bne.n	8004950 <HAL_RCC_OscConfig+0x10c>
 800496e:	e000      	b.n	8004972 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004970:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	f003 0302 	and.w	r3, r3, #2
 800497a:	2b00      	cmp	r3, #0
 800497c:	d063      	beq.n	8004a46 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800497e:	4b4c      	ldr	r3, [pc, #304]	@ (8004ab0 <HAL_RCC_OscConfig+0x26c>)
 8004980:	685b      	ldr	r3, [r3, #4]
 8004982:	f003 030c 	and.w	r3, r3, #12
 8004986:	2b00      	cmp	r3, #0
 8004988:	d00b      	beq.n	80049a2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800498a:	4b49      	ldr	r3, [pc, #292]	@ (8004ab0 <HAL_RCC_OscConfig+0x26c>)
 800498c:	685b      	ldr	r3, [r3, #4]
 800498e:	f003 030c 	and.w	r3, r3, #12
 8004992:	2b08      	cmp	r3, #8
 8004994:	d11c      	bne.n	80049d0 <HAL_RCC_OscConfig+0x18c>
 8004996:	4b46      	ldr	r3, [pc, #280]	@ (8004ab0 <HAL_RCC_OscConfig+0x26c>)
 8004998:	685b      	ldr	r3, [r3, #4]
 800499a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d116      	bne.n	80049d0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80049a2:	4b43      	ldr	r3, [pc, #268]	@ (8004ab0 <HAL_RCC_OscConfig+0x26c>)
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	f003 0302 	and.w	r3, r3, #2
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d005      	beq.n	80049ba <HAL_RCC_OscConfig+0x176>
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	691b      	ldr	r3, [r3, #16]
 80049b2:	2b01      	cmp	r3, #1
 80049b4:	d001      	beq.n	80049ba <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80049b6:	2301      	movs	r3, #1
 80049b8:	e1c0      	b.n	8004d3c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80049ba:	4b3d      	ldr	r3, [pc, #244]	@ (8004ab0 <HAL_RCC_OscConfig+0x26c>)
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	695b      	ldr	r3, [r3, #20]
 80049c6:	00db      	lsls	r3, r3, #3
 80049c8:	4939      	ldr	r1, [pc, #228]	@ (8004ab0 <HAL_RCC_OscConfig+0x26c>)
 80049ca:	4313      	orrs	r3, r2
 80049cc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80049ce:	e03a      	b.n	8004a46 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	691b      	ldr	r3, [r3, #16]
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d020      	beq.n	8004a1a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80049d8:	4b36      	ldr	r3, [pc, #216]	@ (8004ab4 <HAL_RCC_OscConfig+0x270>)
 80049da:	2201      	movs	r2, #1
 80049dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80049de:	f7fd fd83 	bl	80024e8 <HAL_GetTick>
 80049e2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80049e4:	e008      	b.n	80049f8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80049e6:	f7fd fd7f 	bl	80024e8 <HAL_GetTick>
 80049ea:	4602      	mov	r2, r0
 80049ec:	693b      	ldr	r3, [r7, #16]
 80049ee:	1ad3      	subs	r3, r2, r3
 80049f0:	2b02      	cmp	r3, #2
 80049f2:	d901      	bls.n	80049f8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80049f4:	2303      	movs	r3, #3
 80049f6:	e1a1      	b.n	8004d3c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80049f8:	4b2d      	ldr	r3, [pc, #180]	@ (8004ab0 <HAL_RCC_OscConfig+0x26c>)
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	f003 0302 	and.w	r3, r3, #2
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d0f0      	beq.n	80049e6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a04:	4b2a      	ldr	r3, [pc, #168]	@ (8004ab0 <HAL_RCC_OscConfig+0x26c>)
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	695b      	ldr	r3, [r3, #20]
 8004a10:	00db      	lsls	r3, r3, #3
 8004a12:	4927      	ldr	r1, [pc, #156]	@ (8004ab0 <HAL_RCC_OscConfig+0x26c>)
 8004a14:	4313      	orrs	r3, r2
 8004a16:	600b      	str	r3, [r1, #0]
 8004a18:	e015      	b.n	8004a46 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004a1a:	4b26      	ldr	r3, [pc, #152]	@ (8004ab4 <HAL_RCC_OscConfig+0x270>)
 8004a1c:	2200      	movs	r2, #0
 8004a1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a20:	f7fd fd62 	bl	80024e8 <HAL_GetTick>
 8004a24:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004a26:	e008      	b.n	8004a3a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004a28:	f7fd fd5e 	bl	80024e8 <HAL_GetTick>
 8004a2c:	4602      	mov	r2, r0
 8004a2e:	693b      	ldr	r3, [r7, #16]
 8004a30:	1ad3      	subs	r3, r2, r3
 8004a32:	2b02      	cmp	r3, #2
 8004a34:	d901      	bls.n	8004a3a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8004a36:	2303      	movs	r3, #3
 8004a38:	e180      	b.n	8004d3c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004a3a:	4b1d      	ldr	r3, [pc, #116]	@ (8004ab0 <HAL_RCC_OscConfig+0x26c>)
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	f003 0302 	and.w	r3, r3, #2
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d1f0      	bne.n	8004a28 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	f003 0308 	and.w	r3, r3, #8
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d03a      	beq.n	8004ac8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	699b      	ldr	r3, [r3, #24]
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d019      	beq.n	8004a8e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004a5a:	4b17      	ldr	r3, [pc, #92]	@ (8004ab8 <HAL_RCC_OscConfig+0x274>)
 8004a5c:	2201      	movs	r2, #1
 8004a5e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004a60:	f7fd fd42 	bl	80024e8 <HAL_GetTick>
 8004a64:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004a66:	e008      	b.n	8004a7a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004a68:	f7fd fd3e 	bl	80024e8 <HAL_GetTick>
 8004a6c:	4602      	mov	r2, r0
 8004a6e:	693b      	ldr	r3, [r7, #16]
 8004a70:	1ad3      	subs	r3, r2, r3
 8004a72:	2b02      	cmp	r3, #2
 8004a74:	d901      	bls.n	8004a7a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8004a76:	2303      	movs	r3, #3
 8004a78:	e160      	b.n	8004d3c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004a7a:	4b0d      	ldr	r3, [pc, #52]	@ (8004ab0 <HAL_RCC_OscConfig+0x26c>)
 8004a7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a7e:	f003 0302 	and.w	r3, r3, #2
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d0f0      	beq.n	8004a68 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8004a86:	2001      	movs	r0, #1
 8004a88:	f000 face 	bl	8005028 <RCC_Delay>
 8004a8c:	e01c      	b.n	8004ac8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004a8e:	4b0a      	ldr	r3, [pc, #40]	@ (8004ab8 <HAL_RCC_OscConfig+0x274>)
 8004a90:	2200      	movs	r2, #0
 8004a92:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004a94:	f7fd fd28 	bl	80024e8 <HAL_GetTick>
 8004a98:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004a9a:	e00f      	b.n	8004abc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004a9c:	f7fd fd24 	bl	80024e8 <HAL_GetTick>
 8004aa0:	4602      	mov	r2, r0
 8004aa2:	693b      	ldr	r3, [r7, #16]
 8004aa4:	1ad3      	subs	r3, r2, r3
 8004aa6:	2b02      	cmp	r3, #2
 8004aa8:	d908      	bls.n	8004abc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8004aaa:	2303      	movs	r3, #3
 8004aac:	e146      	b.n	8004d3c <HAL_RCC_OscConfig+0x4f8>
 8004aae:	bf00      	nop
 8004ab0:	40021000 	.word	0x40021000
 8004ab4:	42420000 	.word	0x42420000
 8004ab8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004abc:	4b92      	ldr	r3, [pc, #584]	@ (8004d08 <HAL_RCC_OscConfig+0x4c4>)
 8004abe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ac0:	f003 0302 	and.w	r3, r3, #2
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d1e9      	bne.n	8004a9c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	f003 0304 	and.w	r3, r3, #4
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	f000 80a6 	beq.w	8004c22 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004ad6:	2300      	movs	r3, #0
 8004ad8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004ada:	4b8b      	ldr	r3, [pc, #556]	@ (8004d08 <HAL_RCC_OscConfig+0x4c4>)
 8004adc:	69db      	ldr	r3, [r3, #28]
 8004ade:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d10d      	bne.n	8004b02 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004ae6:	4b88      	ldr	r3, [pc, #544]	@ (8004d08 <HAL_RCC_OscConfig+0x4c4>)
 8004ae8:	69db      	ldr	r3, [r3, #28]
 8004aea:	4a87      	ldr	r2, [pc, #540]	@ (8004d08 <HAL_RCC_OscConfig+0x4c4>)
 8004aec:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004af0:	61d3      	str	r3, [r2, #28]
 8004af2:	4b85      	ldr	r3, [pc, #532]	@ (8004d08 <HAL_RCC_OscConfig+0x4c4>)
 8004af4:	69db      	ldr	r3, [r3, #28]
 8004af6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004afa:	60bb      	str	r3, [r7, #8]
 8004afc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004afe:	2301      	movs	r3, #1
 8004b00:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b02:	4b82      	ldr	r3, [pc, #520]	@ (8004d0c <HAL_RCC_OscConfig+0x4c8>)
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d118      	bne.n	8004b40 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004b0e:	4b7f      	ldr	r3, [pc, #508]	@ (8004d0c <HAL_RCC_OscConfig+0x4c8>)
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	4a7e      	ldr	r2, [pc, #504]	@ (8004d0c <HAL_RCC_OscConfig+0x4c8>)
 8004b14:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004b18:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004b1a:	f7fd fce5 	bl	80024e8 <HAL_GetTick>
 8004b1e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b20:	e008      	b.n	8004b34 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004b22:	f7fd fce1 	bl	80024e8 <HAL_GetTick>
 8004b26:	4602      	mov	r2, r0
 8004b28:	693b      	ldr	r3, [r7, #16]
 8004b2a:	1ad3      	subs	r3, r2, r3
 8004b2c:	2b64      	cmp	r3, #100	@ 0x64
 8004b2e:	d901      	bls.n	8004b34 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004b30:	2303      	movs	r3, #3
 8004b32:	e103      	b.n	8004d3c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b34:	4b75      	ldr	r3, [pc, #468]	@ (8004d0c <HAL_RCC_OscConfig+0x4c8>)
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d0f0      	beq.n	8004b22 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	68db      	ldr	r3, [r3, #12]
 8004b44:	2b01      	cmp	r3, #1
 8004b46:	d106      	bne.n	8004b56 <HAL_RCC_OscConfig+0x312>
 8004b48:	4b6f      	ldr	r3, [pc, #444]	@ (8004d08 <HAL_RCC_OscConfig+0x4c4>)
 8004b4a:	6a1b      	ldr	r3, [r3, #32]
 8004b4c:	4a6e      	ldr	r2, [pc, #440]	@ (8004d08 <HAL_RCC_OscConfig+0x4c4>)
 8004b4e:	f043 0301 	orr.w	r3, r3, #1
 8004b52:	6213      	str	r3, [r2, #32]
 8004b54:	e02d      	b.n	8004bb2 <HAL_RCC_OscConfig+0x36e>
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	68db      	ldr	r3, [r3, #12]
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d10c      	bne.n	8004b78 <HAL_RCC_OscConfig+0x334>
 8004b5e:	4b6a      	ldr	r3, [pc, #424]	@ (8004d08 <HAL_RCC_OscConfig+0x4c4>)
 8004b60:	6a1b      	ldr	r3, [r3, #32]
 8004b62:	4a69      	ldr	r2, [pc, #420]	@ (8004d08 <HAL_RCC_OscConfig+0x4c4>)
 8004b64:	f023 0301 	bic.w	r3, r3, #1
 8004b68:	6213      	str	r3, [r2, #32]
 8004b6a:	4b67      	ldr	r3, [pc, #412]	@ (8004d08 <HAL_RCC_OscConfig+0x4c4>)
 8004b6c:	6a1b      	ldr	r3, [r3, #32]
 8004b6e:	4a66      	ldr	r2, [pc, #408]	@ (8004d08 <HAL_RCC_OscConfig+0x4c4>)
 8004b70:	f023 0304 	bic.w	r3, r3, #4
 8004b74:	6213      	str	r3, [r2, #32]
 8004b76:	e01c      	b.n	8004bb2 <HAL_RCC_OscConfig+0x36e>
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	68db      	ldr	r3, [r3, #12]
 8004b7c:	2b05      	cmp	r3, #5
 8004b7e:	d10c      	bne.n	8004b9a <HAL_RCC_OscConfig+0x356>
 8004b80:	4b61      	ldr	r3, [pc, #388]	@ (8004d08 <HAL_RCC_OscConfig+0x4c4>)
 8004b82:	6a1b      	ldr	r3, [r3, #32]
 8004b84:	4a60      	ldr	r2, [pc, #384]	@ (8004d08 <HAL_RCC_OscConfig+0x4c4>)
 8004b86:	f043 0304 	orr.w	r3, r3, #4
 8004b8a:	6213      	str	r3, [r2, #32]
 8004b8c:	4b5e      	ldr	r3, [pc, #376]	@ (8004d08 <HAL_RCC_OscConfig+0x4c4>)
 8004b8e:	6a1b      	ldr	r3, [r3, #32]
 8004b90:	4a5d      	ldr	r2, [pc, #372]	@ (8004d08 <HAL_RCC_OscConfig+0x4c4>)
 8004b92:	f043 0301 	orr.w	r3, r3, #1
 8004b96:	6213      	str	r3, [r2, #32]
 8004b98:	e00b      	b.n	8004bb2 <HAL_RCC_OscConfig+0x36e>
 8004b9a:	4b5b      	ldr	r3, [pc, #364]	@ (8004d08 <HAL_RCC_OscConfig+0x4c4>)
 8004b9c:	6a1b      	ldr	r3, [r3, #32]
 8004b9e:	4a5a      	ldr	r2, [pc, #360]	@ (8004d08 <HAL_RCC_OscConfig+0x4c4>)
 8004ba0:	f023 0301 	bic.w	r3, r3, #1
 8004ba4:	6213      	str	r3, [r2, #32]
 8004ba6:	4b58      	ldr	r3, [pc, #352]	@ (8004d08 <HAL_RCC_OscConfig+0x4c4>)
 8004ba8:	6a1b      	ldr	r3, [r3, #32]
 8004baa:	4a57      	ldr	r2, [pc, #348]	@ (8004d08 <HAL_RCC_OscConfig+0x4c4>)
 8004bac:	f023 0304 	bic.w	r3, r3, #4
 8004bb0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	68db      	ldr	r3, [r3, #12]
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d015      	beq.n	8004be6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004bba:	f7fd fc95 	bl	80024e8 <HAL_GetTick>
 8004bbe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004bc0:	e00a      	b.n	8004bd8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004bc2:	f7fd fc91 	bl	80024e8 <HAL_GetTick>
 8004bc6:	4602      	mov	r2, r0
 8004bc8:	693b      	ldr	r3, [r7, #16]
 8004bca:	1ad3      	subs	r3, r2, r3
 8004bcc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004bd0:	4293      	cmp	r3, r2
 8004bd2:	d901      	bls.n	8004bd8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004bd4:	2303      	movs	r3, #3
 8004bd6:	e0b1      	b.n	8004d3c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004bd8:	4b4b      	ldr	r3, [pc, #300]	@ (8004d08 <HAL_RCC_OscConfig+0x4c4>)
 8004bda:	6a1b      	ldr	r3, [r3, #32]
 8004bdc:	f003 0302 	and.w	r3, r3, #2
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d0ee      	beq.n	8004bc2 <HAL_RCC_OscConfig+0x37e>
 8004be4:	e014      	b.n	8004c10 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004be6:	f7fd fc7f 	bl	80024e8 <HAL_GetTick>
 8004bea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004bec:	e00a      	b.n	8004c04 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004bee:	f7fd fc7b 	bl	80024e8 <HAL_GetTick>
 8004bf2:	4602      	mov	r2, r0
 8004bf4:	693b      	ldr	r3, [r7, #16]
 8004bf6:	1ad3      	subs	r3, r2, r3
 8004bf8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004bfc:	4293      	cmp	r3, r2
 8004bfe:	d901      	bls.n	8004c04 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004c00:	2303      	movs	r3, #3
 8004c02:	e09b      	b.n	8004d3c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004c04:	4b40      	ldr	r3, [pc, #256]	@ (8004d08 <HAL_RCC_OscConfig+0x4c4>)
 8004c06:	6a1b      	ldr	r3, [r3, #32]
 8004c08:	f003 0302 	and.w	r3, r3, #2
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d1ee      	bne.n	8004bee <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004c10:	7dfb      	ldrb	r3, [r7, #23]
 8004c12:	2b01      	cmp	r3, #1
 8004c14:	d105      	bne.n	8004c22 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004c16:	4b3c      	ldr	r3, [pc, #240]	@ (8004d08 <HAL_RCC_OscConfig+0x4c4>)
 8004c18:	69db      	ldr	r3, [r3, #28]
 8004c1a:	4a3b      	ldr	r2, [pc, #236]	@ (8004d08 <HAL_RCC_OscConfig+0x4c4>)
 8004c1c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004c20:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	69db      	ldr	r3, [r3, #28]
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	f000 8087 	beq.w	8004d3a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004c2c:	4b36      	ldr	r3, [pc, #216]	@ (8004d08 <HAL_RCC_OscConfig+0x4c4>)
 8004c2e:	685b      	ldr	r3, [r3, #4]
 8004c30:	f003 030c 	and.w	r3, r3, #12
 8004c34:	2b08      	cmp	r3, #8
 8004c36:	d061      	beq.n	8004cfc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	69db      	ldr	r3, [r3, #28]
 8004c3c:	2b02      	cmp	r3, #2
 8004c3e:	d146      	bne.n	8004cce <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004c40:	4b33      	ldr	r3, [pc, #204]	@ (8004d10 <HAL_RCC_OscConfig+0x4cc>)
 8004c42:	2200      	movs	r2, #0
 8004c44:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c46:	f7fd fc4f 	bl	80024e8 <HAL_GetTick>
 8004c4a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004c4c:	e008      	b.n	8004c60 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004c4e:	f7fd fc4b 	bl	80024e8 <HAL_GetTick>
 8004c52:	4602      	mov	r2, r0
 8004c54:	693b      	ldr	r3, [r7, #16]
 8004c56:	1ad3      	subs	r3, r2, r3
 8004c58:	2b02      	cmp	r3, #2
 8004c5a:	d901      	bls.n	8004c60 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004c5c:	2303      	movs	r3, #3
 8004c5e:	e06d      	b.n	8004d3c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004c60:	4b29      	ldr	r3, [pc, #164]	@ (8004d08 <HAL_RCC_OscConfig+0x4c4>)
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d1f0      	bne.n	8004c4e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	6a1b      	ldr	r3, [r3, #32]
 8004c70:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004c74:	d108      	bne.n	8004c88 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004c76:	4b24      	ldr	r3, [pc, #144]	@ (8004d08 <HAL_RCC_OscConfig+0x4c4>)
 8004c78:	685b      	ldr	r3, [r3, #4]
 8004c7a:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	689b      	ldr	r3, [r3, #8]
 8004c82:	4921      	ldr	r1, [pc, #132]	@ (8004d08 <HAL_RCC_OscConfig+0x4c4>)
 8004c84:	4313      	orrs	r3, r2
 8004c86:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004c88:	4b1f      	ldr	r3, [pc, #124]	@ (8004d08 <HAL_RCC_OscConfig+0x4c4>)
 8004c8a:	685b      	ldr	r3, [r3, #4]
 8004c8c:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	6a19      	ldr	r1, [r3, #32]
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c98:	430b      	orrs	r3, r1
 8004c9a:	491b      	ldr	r1, [pc, #108]	@ (8004d08 <HAL_RCC_OscConfig+0x4c4>)
 8004c9c:	4313      	orrs	r3, r2
 8004c9e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004ca0:	4b1b      	ldr	r3, [pc, #108]	@ (8004d10 <HAL_RCC_OscConfig+0x4cc>)
 8004ca2:	2201      	movs	r2, #1
 8004ca4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ca6:	f7fd fc1f 	bl	80024e8 <HAL_GetTick>
 8004caa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004cac:	e008      	b.n	8004cc0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004cae:	f7fd fc1b 	bl	80024e8 <HAL_GetTick>
 8004cb2:	4602      	mov	r2, r0
 8004cb4:	693b      	ldr	r3, [r7, #16]
 8004cb6:	1ad3      	subs	r3, r2, r3
 8004cb8:	2b02      	cmp	r3, #2
 8004cba:	d901      	bls.n	8004cc0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004cbc:	2303      	movs	r3, #3
 8004cbe:	e03d      	b.n	8004d3c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004cc0:	4b11      	ldr	r3, [pc, #68]	@ (8004d08 <HAL_RCC_OscConfig+0x4c4>)
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d0f0      	beq.n	8004cae <HAL_RCC_OscConfig+0x46a>
 8004ccc:	e035      	b.n	8004d3a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004cce:	4b10      	ldr	r3, [pc, #64]	@ (8004d10 <HAL_RCC_OscConfig+0x4cc>)
 8004cd0:	2200      	movs	r2, #0
 8004cd2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004cd4:	f7fd fc08 	bl	80024e8 <HAL_GetTick>
 8004cd8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004cda:	e008      	b.n	8004cee <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004cdc:	f7fd fc04 	bl	80024e8 <HAL_GetTick>
 8004ce0:	4602      	mov	r2, r0
 8004ce2:	693b      	ldr	r3, [r7, #16]
 8004ce4:	1ad3      	subs	r3, r2, r3
 8004ce6:	2b02      	cmp	r3, #2
 8004ce8:	d901      	bls.n	8004cee <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8004cea:	2303      	movs	r3, #3
 8004cec:	e026      	b.n	8004d3c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004cee:	4b06      	ldr	r3, [pc, #24]	@ (8004d08 <HAL_RCC_OscConfig+0x4c4>)
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d1f0      	bne.n	8004cdc <HAL_RCC_OscConfig+0x498>
 8004cfa:	e01e      	b.n	8004d3a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	69db      	ldr	r3, [r3, #28]
 8004d00:	2b01      	cmp	r3, #1
 8004d02:	d107      	bne.n	8004d14 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8004d04:	2301      	movs	r3, #1
 8004d06:	e019      	b.n	8004d3c <HAL_RCC_OscConfig+0x4f8>
 8004d08:	40021000 	.word	0x40021000
 8004d0c:	40007000 	.word	0x40007000
 8004d10:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004d14:	4b0b      	ldr	r3, [pc, #44]	@ (8004d44 <HAL_RCC_OscConfig+0x500>)
 8004d16:	685b      	ldr	r3, [r3, #4]
 8004d18:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	6a1b      	ldr	r3, [r3, #32]
 8004d24:	429a      	cmp	r2, r3
 8004d26:	d106      	bne.n	8004d36 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004d32:	429a      	cmp	r2, r3
 8004d34:	d001      	beq.n	8004d3a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8004d36:	2301      	movs	r3, #1
 8004d38:	e000      	b.n	8004d3c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8004d3a:	2300      	movs	r3, #0
}
 8004d3c:	4618      	mov	r0, r3
 8004d3e:	3718      	adds	r7, #24
 8004d40:	46bd      	mov	sp, r7
 8004d42:	bd80      	pop	{r7, pc}
 8004d44:	40021000 	.word	0x40021000

08004d48 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004d48:	b580      	push	{r7, lr}
 8004d4a:	b084      	sub	sp, #16
 8004d4c:	af00      	add	r7, sp, #0
 8004d4e:	6078      	str	r0, [r7, #4]
 8004d50:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d101      	bne.n	8004d5c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004d58:	2301      	movs	r3, #1
 8004d5a:	e0d0      	b.n	8004efe <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004d5c:	4b6a      	ldr	r3, [pc, #424]	@ (8004f08 <HAL_RCC_ClockConfig+0x1c0>)
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	f003 0307 	and.w	r3, r3, #7
 8004d64:	683a      	ldr	r2, [r7, #0]
 8004d66:	429a      	cmp	r2, r3
 8004d68:	d910      	bls.n	8004d8c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004d6a:	4b67      	ldr	r3, [pc, #412]	@ (8004f08 <HAL_RCC_ClockConfig+0x1c0>)
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	f023 0207 	bic.w	r2, r3, #7
 8004d72:	4965      	ldr	r1, [pc, #404]	@ (8004f08 <HAL_RCC_ClockConfig+0x1c0>)
 8004d74:	683b      	ldr	r3, [r7, #0]
 8004d76:	4313      	orrs	r3, r2
 8004d78:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d7a:	4b63      	ldr	r3, [pc, #396]	@ (8004f08 <HAL_RCC_ClockConfig+0x1c0>)
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	f003 0307 	and.w	r3, r3, #7
 8004d82:	683a      	ldr	r2, [r7, #0]
 8004d84:	429a      	cmp	r2, r3
 8004d86:	d001      	beq.n	8004d8c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004d88:	2301      	movs	r3, #1
 8004d8a:	e0b8      	b.n	8004efe <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	f003 0302 	and.w	r3, r3, #2
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d020      	beq.n	8004dda <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	f003 0304 	and.w	r3, r3, #4
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d005      	beq.n	8004db0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004da4:	4b59      	ldr	r3, [pc, #356]	@ (8004f0c <HAL_RCC_ClockConfig+0x1c4>)
 8004da6:	685b      	ldr	r3, [r3, #4]
 8004da8:	4a58      	ldr	r2, [pc, #352]	@ (8004f0c <HAL_RCC_ClockConfig+0x1c4>)
 8004daa:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8004dae:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	f003 0308 	and.w	r3, r3, #8
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d005      	beq.n	8004dc8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004dbc:	4b53      	ldr	r3, [pc, #332]	@ (8004f0c <HAL_RCC_ClockConfig+0x1c4>)
 8004dbe:	685b      	ldr	r3, [r3, #4]
 8004dc0:	4a52      	ldr	r2, [pc, #328]	@ (8004f0c <HAL_RCC_ClockConfig+0x1c4>)
 8004dc2:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8004dc6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004dc8:	4b50      	ldr	r3, [pc, #320]	@ (8004f0c <HAL_RCC_ClockConfig+0x1c4>)
 8004dca:	685b      	ldr	r3, [r3, #4]
 8004dcc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	689b      	ldr	r3, [r3, #8]
 8004dd4:	494d      	ldr	r1, [pc, #308]	@ (8004f0c <HAL_RCC_ClockConfig+0x1c4>)
 8004dd6:	4313      	orrs	r3, r2
 8004dd8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	f003 0301 	and.w	r3, r3, #1
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d040      	beq.n	8004e68 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	685b      	ldr	r3, [r3, #4]
 8004dea:	2b01      	cmp	r3, #1
 8004dec:	d107      	bne.n	8004dfe <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004dee:	4b47      	ldr	r3, [pc, #284]	@ (8004f0c <HAL_RCC_ClockConfig+0x1c4>)
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d115      	bne.n	8004e26 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004dfa:	2301      	movs	r3, #1
 8004dfc:	e07f      	b.n	8004efe <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	685b      	ldr	r3, [r3, #4]
 8004e02:	2b02      	cmp	r3, #2
 8004e04:	d107      	bne.n	8004e16 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004e06:	4b41      	ldr	r3, [pc, #260]	@ (8004f0c <HAL_RCC_ClockConfig+0x1c4>)
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d109      	bne.n	8004e26 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004e12:	2301      	movs	r3, #1
 8004e14:	e073      	b.n	8004efe <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004e16:	4b3d      	ldr	r3, [pc, #244]	@ (8004f0c <HAL_RCC_ClockConfig+0x1c4>)
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	f003 0302 	and.w	r3, r3, #2
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d101      	bne.n	8004e26 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004e22:	2301      	movs	r3, #1
 8004e24:	e06b      	b.n	8004efe <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004e26:	4b39      	ldr	r3, [pc, #228]	@ (8004f0c <HAL_RCC_ClockConfig+0x1c4>)
 8004e28:	685b      	ldr	r3, [r3, #4]
 8004e2a:	f023 0203 	bic.w	r2, r3, #3
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	685b      	ldr	r3, [r3, #4]
 8004e32:	4936      	ldr	r1, [pc, #216]	@ (8004f0c <HAL_RCC_ClockConfig+0x1c4>)
 8004e34:	4313      	orrs	r3, r2
 8004e36:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004e38:	f7fd fb56 	bl	80024e8 <HAL_GetTick>
 8004e3c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004e3e:	e00a      	b.n	8004e56 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004e40:	f7fd fb52 	bl	80024e8 <HAL_GetTick>
 8004e44:	4602      	mov	r2, r0
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	1ad3      	subs	r3, r2, r3
 8004e4a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004e4e:	4293      	cmp	r3, r2
 8004e50:	d901      	bls.n	8004e56 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004e52:	2303      	movs	r3, #3
 8004e54:	e053      	b.n	8004efe <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004e56:	4b2d      	ldr	r3, [pc, #180]	@ (8004f0c <HAL_RCC_ClockConfig+0x1c4>)
 8004e58:	685b      	ldr	r3, [r3, #4]
 8004e5a:	f003 020c 	and.w	r2, r3, #12
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	685b      	ldr	r3, [r3, #4]
 8004e62:	009b      	lsls	r3, r3, #2
 8004e64:	429a      	cmp	r2, r3
 8004e66:	d1eb      	bne.n	8004e40 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004e68:	4b27      	ldr	r3, [pc, #156]	@ (8004f08 <HAL_RCC_ClockConfig+0x1c0>)
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	f003 0307 	and.w	r3, r3, #7
 8004e70:	683a      	ldr	r2, [r7, #0]
 8004e72:	429a      	cmp	r2, r3
 8004e74:	d210      	bcs.n	8004e98 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004e76:	4b24      	ldr	r3, [pc, #144]	@ (8004f08 <HAL_RCC_ClockConfig+0x1c0>)
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	f023 0207 	bic.w	r2, r3, #7
 8004e7e:	4922      	ldr	r1, [pc, #136]	@ (8004f08 <HAL_RCC_ClockConfig+0x1c0>)
 8004e80:	683b      	ldr	r3, [r7, #0]
 8004e82:	4313      	orrs	r3, r2
 8004e84:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004e86:	4b20      	ldr	r3, [pc, #128]	@ (8004f08 <HAL_RCC_ClockConfig+0x1c0>)
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	f003 0307 	and.w	r3, r3, #7
 8004e8e:	683a      	ldr	r2, [r7, #0]
 8004e90:	429a      	cmp	r2, r3
 8004e92:	d001      	beq.n	8004e98 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004e94:	2301      	movs	r3, #1
 8004e96:	e032      	b.n	8004efe <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	f003 0304 	and.w	r3, r3, #4
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d008      	beq.n	8004eb6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004ea4:	4b19      	ldr	r3, [pc, #100]	@ (8004f0c <HAL_RCC_ClockConfig+0x1c4>)
 8004ea6:	685b      	ldr	r3, [r3, #4]
 8004ea8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	68db      	ldr	r3, [r3, #12]
 8004eb0:	4916      	ldr	r1, [pc, #88]	@ (8004f0c <HAL_RCC_ClockConfig+0x1c4>)
 8004eb2:	4313      	orrs	r3, r2
 8004eb4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	f003 0308 	and.w	r3, r3, #8
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d009      	beq.n	8004ed6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004ec2:	4b12      	ldr	r3, [pc, #72]	@ (8004f0c <HAL_RCC_ClockConfig+0x1c4>)
 8004ec4:	685b      	ldr	r3, [r3, #4]
 8004ec6:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	691b      	ldr	r3, [r3, #16]
 8004ece:	00db      	lsls	r3, r3, #3
 8004ed0:	490e      	ldr	r1, [pc, #56]	@ (8004f0c <HAL_RCC_ClockConfig+0x1c4>)
 8004ed2:	4313      	orrs	r3, r2
 8004ed4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004ed6:	f000 f821 	bl	8004f1c <HAL_RCC_GetSysClockFreq>
 8004eda:	4602      	mov	r2, r0
 8004edc:	4b0b      	ldr	r3, [pc, #44]	@ (8004f0c <HAL_RCC_ClockConfig+0x1c4>)
 8004ede:	685b      	ldr	r3, [r3, #4]
 8004ee0:	091b      	lsrs	r3, r3, #4
 8004ee2:	f003 030f 	and.w	r3, r3, #15
 8004ee6:	490a      	ldr	r1, [pc, #40]	@ (8004f10 <HAL_RCC_ClockConfig+0x1c8>)
 8004ee8:	5ccb      	ldrb	r3, [r1, r3]
 8004eea:	fa22 f303 	lsr.w	r3, r2, r3
 8004eee:	4a09      	ldr	r2, [pc, #36]	@ (8004f14 <HAL_RCC_ClockConfig+0x1cc>)
 8004ef0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004ef2:	4b09      	ldr	r3, [pc, #36]	@ (8004f18 <HAL_RCC_ClockConfig+0x1d0>)
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	4618      	mov	r0, r3
 8004ef8:	f7fd fab4 	bl	8002464 <HAL_InitTick>

  return HAL_OK;
 8004efc:	2300      	movs	r3, #0
}
 8004efe:	4618      	mov	r0, r3
 8004f00:	3710      	adds	r7, #16
 8004f02:	46bd      	mov	sp, r7
 8004f04:	bd80      	pop	{r7, pc}
 8004f06:	bf00      	nop
 8004f08:	40022000 	.word	0x40022000
 8004f0c:	40021000 	.word	0x40021000
 8004f10:	08008978 	.word	0x08008978
 8004f14:	20000000 	.word	0x20000000
 8004f18:	20000004 	.word	0x20000004

08004f1c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004f1c:	b480      	push	{r7}
 8004f1e:	b087      	sub	sp, #28
 8004f20:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004f22:	2300      	movs	r3, #0
 8004f24:	60fb      	str	r3, [r7, #12]
 8004f26:	2300      	movs	r3, #0
 8004f28:	60bb      	str	r3, [r7, #8]
 8004f2a:	2300      	movs	r3, #0
 8004f2c:	617b      	str	r3, [r7, #20]
 8004f2e:	2300      	movs	r3, #0
 8004f30:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8004f32:	2300      	movs	r3, #0
 8004f34:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004f36:	4b1e      	ldr	r3, [pc, #120]	@ (8004fb0 <HAL_RCC_GetSysClockFreq+0x94>)
 8004f38:	685b      	ldr	r3, [r3, #4]
 8004f3a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	f003 030c 	and.w	r3, r3, #12
 8004f42:	2b04      	cmp	r3, #4
 8004f44:	d002      	beq.n	8004f4c <HAL_RCC_GetSysClockFreq+0x30>
 8004f46:	2b08      	cmp	r3, #8
 8004f48:	d003      	beq.n	8004f52 <HAL_RCC_GetSysClockFreq+0x36>
 8004f4a:	e027      	b.n	8004f9c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004f4c:	4b19      	ldr	r3, [pc, #100]	@ (8004fb4 <HAL_RCC_GetSysClockFreq+0x98>)
 8004f4e:	613b      	str	r3, [r7, #16]
      break;
 8004f50:	e027      	b.n	8004fa2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	0c9b      	lsrs	r3, r3, #18
 8004f56:	f003 030f 	and.w	r3, r3, #15
 8004f5a:	4a17      	ldr	r2, [pc, #92]	@ (8004fb8 <HAL_RCC_GetSysClockFreq+0x9c>)
 8004f5c:	5cd3      	ldrb	r3, [r2, r3]
 8004f5e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d010      	beq.n	8004f8c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004f6a:	4b11      	ldr	r3, [pc, #68]	@ (8004fb0 <HAL_RCC_GetSysClockFreq+0x94>)
 8004f6c:	685b      	ldr	r3, [r3, #4]
 8004f6e:	0c5b      	lsrs	r3, r3, #17
 8004f70:	f003 0301 	and.w	r3, r3, #1
 8004f74:	4a11      	ldr	r2, [pc, #68]	@ (8004fbc <HAL_RCC_GetSysClockFreq+0xa0>)
 8004f76:	5cd3      	ldrb	r3, [r2, r3]
 8004f78:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	4a0d      	ldr	r2, [pc, #52]	@ (8004fb4 <HAL_RCC_GetSysClockFreq+0x98>)
 8004f7e:	fb03 f202 	mul.w	r2, r3, r2
 8004f82:	68bb      	ldr	r3, [r7, #8]
 8004f84:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f88:	617b      	str	r3, [r7, #20]
 8004f8a:	e004      	b.n	8004f96 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	4a0c      	ldr	r2, [pc, #48]	@ (8004fc0 <HAL_RCC_GetSysClockFreq+0xa4>)
 8004f90:	fb02 f303 	mul.w	r3, r2, r3
 8004f94:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8004f96:	697b      	ldr	r3, [r7, #20]
 8004f98:	613b      	str	r3, [r7, #16]
      break;
 8004f9a:	e002      	b.n	8004fa2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004f9c:	4b05      	ldr	r3, [pc, #20]	@ (8004fb4 <HAL_RCC_GetSysClockFreq+0x98>)
 8004f9e:	613b      	str	r3, [r7, #16]
      break;
 8004fa0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004fa2:	693b      	ldr	r3, [r7, #16]
}
 8004fa4:	4618      	mov	r0, r3
 8004fa6:	371c      	adds	r7, #28
 8004fa8:	46bd      	mov	sp, r7
 8004faa:	bc80      	pop	{r7}
 8004fac:	4770      	bx	lr
 8004fae:	bf00      	nop
 8004fb0:	40021000 	.word	0x40021000
 8004fb4:	007a1200 	.word	0x007a1200
 8004fb8:	08008990 	.word	0x08008990
 8004fbc:	080089a0 	.word	0x080089a0
 8004fc0:	003d0900 	.word	0x003d0900

08004fc4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004fc4:	b480      	push	{r7}
 8004fc6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004fc8:	4b02      	ldr	r3, [pc, #8]	@ (8004fd4 <HAL_RCC_GetHCLKFreq+0x10>)
 8004fca:	681b      	ldr	r3, [r3, #0]
}
 8004fcc:	4618      	mov	r0, r3
 8004fce:	46bd      	mov	sp, r7
 8004fd0:	bc80      	pop	{r7}
 8004fd2:	4770      	bx	lr
 8004fd4:	20000000 	.word	0x20000000

08004fd8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004fd8:	b580      	push	{r7, lr}
 8004fda:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004fdc:	f7ff fff2 	bl	8004fc4 <HAL_RCC_GetHCLKFreq>
 8004fe0:	4602      	mov	r2, r0
 8004fe2:	4b05      	ldr	r3, [pc, #20]	@ (8004ff8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004fe4:	685b      	ldr	r3, [r3, #4]
 8004fe6:	0a1b      	lsrs	r3, r3, #8
 8004fe8:	f003 0307 	and.w	r3, r3, #7
 8004fec:	4903      	ldr	r1, [pc, #12]	@ (8004ffc <HAL_RCC_GetPCLK1Freq+0x24>)
 8004fee:	5ccb      	ldrb	r3, [r1, r3]
 8004ff0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004ff4:	4618      	mov	r0, r3
 8004ff6:	bd80      	pop	{r7, pc}
 8004ff8:	40021000 	.word	0x40021000
 8004ffc:	08008988 	.word	0x08008988

08005000 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005000:	b580      	push	{r7, lr}
 8005002:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005004:	f7ff ffde 	bl	8004fc4 <HAL_RCC_GetHCLKFreq>
 8005008:	4602      	mov	r2, r0
 800500a:	4b05      	ldr	r3, [pc, #20]	@ (8005020 <HAL_RCC_GetPCLK2Freq+0x20>)
 800500c:	685b      	ldr	r3, [r3, #4]
 800500e:	0adb      	lsrs	r3, r3, #11
 8005010:	f003 0307 	and.w	r3, r3, #7
 8005014:	4903      	ldr	r1, [pc, #12]	@ (8005024 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005016:	5ccb      	ldrb	r3, [r1, r3]
 8005018:	fa22 f303 	lsr.w	r3, r2, r3
}
 800501c:	4618      	mov	r0, r3
 800501e:	bd80      	pop	{r7, pc}
 8005020:	40021000 	.word	0x40021000
 8005024:	08008988 	.word	0x08008988

08005028 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8005028:	b480      	push	{r7}
 800502a:	b085      	sub	sp, #20
 800502c:	af00      	add	r7, sp, #0
 800502e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8005030:	4b0a      	ldr	r3, [pc, #40]	@ (800505c <RCC_Delay+0x34>)
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	4a0a      	ldr	r2, [pc, #40]	@ (8005060 <RCC_Delay+0x38>)
 8005036:	fba2 2303 	umull	r2, r3, r2, r3
 800503a:	0a5b      	lsrs	r3, r3, #9
 800503c:	687a      	ldr	r2, [r7, #4]
 800503e:	fb02 f303 	mul.w	r3, r2, r3
 8005042:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8005044:	bf00      	nop
  }
  while (Delay --);
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	1e5a      	subs	r2, r3, #1
 800504a:	60fa      	str	r2, [r7, #12]
 800504c:	2b00      	cmp	r3, #0
 800504e:	d1f9      	bne.n	8005044 <RCC_Delay+0x1c>
}
 8005050:	bf00      	nop
 8005052:	bf00      	nop
 8005054:	3714      	adds	r7, #20
 8005056:	46bd      	mov	sp, r7
 8005058:	bc80      	pop	{r7}
 800505a:	4770      	bx	lr
 800505c:	20000000 	.word	0x20000000
 8005060:	10624dd3 	.word	0x10624dd3

08005064 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005064:	b580      	push	{r7, lr}
 8005066:	b082      	sub	sp, #8
 8005068:	af00      	add	r7, sp, #0
 800506a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	2b00      	cmp	r3, #0
 8005070:	d101      	bne.n	8005076 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005072:	2301      	movs	r3, #1
 8005074:	e041      	b.n	80050fa <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800507c:	b2db      	uxtb	r3, r3
 800507e:	2b00      	cmp	r3, #0
 8005080:	d106      	bne.n	8005090 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	2200      	movs	r2, #0
 8005086:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800508a:	6878      	ldr	r0, [r7, #4]
 800508c:	f7fc fda0 	bl	8001bd0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	2202      	movs	r2, #2
 8005094:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681a      	ldr	r2, [r3, #0]
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	3304      	adds	r3, #4
 80050a0:	4619      	mov	r1, r3
 80050a2:	4610      	mov	r0, r2
 80050a4:	f000 f940 	bl	8005328 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	2201      	movs	r2, #1
 80050ac:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	2201      	movs	r2, #1
 80050b4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	2201      	movs	r2, #1
 80050bc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	2201      	movs	r2, #1
 80050c4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	2201      	movs	r2, #1
 80050cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	2201      	movs	r2, #1
 80050d4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	2201      	movs	r2, #1
 80050dc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	2201      	movs	r2, #1
 80050e4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	2201      	movs	r2, #1
 80050ec:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	2201      	movs	r2, #1
 80050f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80050f8:	2300      	movs	r3, #0
}
 80050fa:	4618      	mov	r0, r3
 80050fc:	3708      	adds	r7, #8
 80050fe:	46bd      	mov	sp, r7
 8005100:	bd80      	pop	{r7, pc}
	...

08005104 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005104:	b480      	push	{r7}
 8005106:	b085      	sub	sp, #20
 8005108:	af00      	add	r7, sp, #0
 800510a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005112:	b2db      	uxtb	r3, r3
 8005114:	2b01      	cmp	r3, #1
 8005116:	d001      	beq.n	800511c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8005118:	2301      	movs	r3, #1
 800511a:	e032      	b.n	8005182 <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	2202      	movs	r2, #2
 8005120:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	4a18      	ldr	r2, [pc, #96]	@ (800518c <HAL_TIM_Base_Start+0x88>)
 800512a:	4293      	cmp	r3, r2
 800512c:	d00e      	beq.n	800514c <HAL_TIM_Base_Start+0x48>
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005136:	d009      	beq.n	800514c <HAL_TIM_Base_Start+0x48>
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	4a14      	ldr	r2, [pc, #80]	@ (8005190 <HAL_TIM_Base_Start+0x8c>)
 800513e:	4293      	cmp	r3, r2
 8005140:	d004      	beq.n	800514c <HAL_TIM_Base_Start+0x48>
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	4a13      	ldr	r2, [pc, #76]	@ (8005194 <HAL_TIM_Base_Start+0x90>)
 8005148:	4293      	cmp	r3, r2
 800514a:	d111      	bne.n	8005170 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	689b      	ldr	r3, [r3, #8]
 8005152:	f003 0307 	and.w	r3, r3, #7
 8005156:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	2b06      	cmp	r3, #6
 800515c:	d010      	beq.n	8005180 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	681a      	ldr	r2, [r3, #0]
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	f042 0201 	orr.w	r2, r2, #1
 800516c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800516e:	e007      	b.n	8005180 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	681a      	ldr	r2, [r3, #0]
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	f042 0201 	orr.w	r2, r2, #1
 800517e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005180:	2300      	movs	r3, #0
}
 8005182:	4618      	mov	r0, r3
 8005184:	3714      	adds	r7, #20
 8005186:	46bd      	mov	sp, r7
 8005188:	bc80      	pop	{r7}
 800518a:	4770      	bx	lr
 800518c:	40012c00 	.word	0x40012c00
 8005190:	40000400 	.word	0x40000400
 8005194:	40000800 	.word	0x40000800

08005198 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005198:	b580      	push	{r7, lr}
 800519a:	b084      	sub	sp, #16
 800519c:	af00      	add	r7, sp, #0
 800519e:	6078      	str	r0, [r7, #4]
 80051a0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80051a2:	2300      	movs	r3, #0
 80051a4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80051ac:	2b01      	cmp	r3, #1
 80051ae:	d101      	bne.n	80051b4 <HAL_TIM_ConfigClockSource+0x1c>
 80051b0:	2302      	movs	r3, #2
 80051b2:	e0b4      	b.n	800531e <HAL_TIM_ConfigClockSource+0x186>
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	2201      	movs	r2, #1
 80051b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	2202      	movs	r2, #2
 80051c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	689b      	ldr	r3, [r3, #8]
 80051ca:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80051cc:	68bb      	ldr	r3, [r7, #8]
 80051ce:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80051d2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80051d4:	68bb      	ldr	r3, [r7, #8]
 80051d6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80051da:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	68ba      	ldr	r2, [r7, #8]
 80051e2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80051e4:	683b      	ldr	r3, [r7, #0]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80051ec:	d03e      	beq.n	800526c <HAL_TIM_ConfigClockSource+0xd4>
 80051ee:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80051f2:	f200 8087 	bhi.w	8005304 <HAL_TIM_ConfigClockSource+0x16c>
 80051f6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80051fa:	f000 8086 	beq.w	800530a <HAL_TIM_ConfigClockSource+0x172>
 80051fe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005202:	d87f      	bhi.n	8005304 <HAL_TIM_ConfigClockSource+0x16c>
 8005204:	2b70      	cmp	r3, #112	@ 0x70
 8005206:	d01a      	beq.n	800523e <HAL_TIM_ConfigClockSource+0xa6>
 8005208:	2b70      	cmp	r3, #112	@ 0x70
 800520a:	d87b      	bhi.n	8005304 <HAL_TIM_ConfigClockSource+0x16c>
 800520c:	2b60      	cmp	r3, #96	@ 0x60
 800520e:	d050      	beq.n	80052b2 <HAL_TIM_ConfigClockSource+0x11a>
 8005210:	2b60      	cmp	r3, #96	@ 0x60
 8005212:	d877      	bhi.n	8005304 <HAL_TIM_ConfigClockSource+0x16c>
 8005214:	2b50      	cmp	r3, #80	@ 0x50
 8005216:	d03c      	beq.n	8005292 <HAL_TIM_ConfigClockSource+0xfa>
 8005218:	2b50      	cmp	r3, #80	@ 0x50
 800521a:	d873      	bhi.n	8005304 <HAL_TIM_ConfigClockSource+0x16c>
 800521c:	2b40      	cmp	r3, #64	@ 0x40
 800521e:	d058      	beq.n	80052d2 <HAL_TIM_ConfigClockSource+0x13a>
 8005220:	2b40      	cmp	r3, #64	@ 0x40
 8005222:	d86f      	bhi.n	8005304 <HAL_TIM_ConfigClockSource+0x16c>
 8005224:	2b30      	cmp	r3, #48	@ 0x30
 8005226:	d064      	beq.n	80052f2 <HAL_TIM_ConfigClockSource+0x15a>
 8005228:	2b30      	cmp	r3, #48	@ 0x30
 800522a:	d86b      	bhi.n	8005304 <HAL_TIM_ConfigClockSource+0x16c>
 800522c:	2b20      	cmp	r3, #32
 800522e:	d060      	beq.n	80052f2 <HAL_TIM_ConfigClockSource+0x15a>
 8005230:	2b20      	cmp	r3, #32
 8005232:	d867      	bhi.n	8005304 <HAL_TIM_ConfigClockSource+0x16c>
 8005234:	2b00      	cmp	r3, #0
 8005236:	d05c      	beq.n	80052f2 <HAL_TIM_ConfigClockSource+0x15a>
 8005238:	2b10      	cmp	r3, #16
 800523a:	d05a      	beq.n	80052f2 <HAL_TIM_ConfigClockSource+0x15a>
 800523c:	e062      	b.n	8005304 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005242:	683b      	ldr	r3, [r7, #0]
 8005244:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005246:	683b      	ldr	r3, [r7, #0]
 8005248:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800524a:	683b      	ldr	r3, [r7, #0]
 800524c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800524e:	f000 f950 	bl	80054f2 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	689b      	ldr	r3, [r3, #8]
 8005258:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800525a:	68bb      	ldr	r3, [r7, #8]
 800525c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005260:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	68ba      	ldr	r2, [r7, #8]
 8005268:	609a      	str	r2, [r3, #8]
      break;
 800526a:	e04f      	b.n	800530c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005270:	683b      	ldr	r3, [r7, #0]
 8005272:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005274:	683b      	ldr	r3, [r7, #0]
 8005276:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005278:	683b      	ldr	r3, [r7, #0]
 800527a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800527c:	f000 f939 	bl	80054f2 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	689a      	ldr	r2, [r3, #8]
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800528e:	609a      	str	r2, [r3, #8]
      break;
 8005290:	e03c      	b.n	800530c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005296:	683b      	ldr	r3, [r7, #0]
 8005298:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800529a:	683b      	ldr	r3, [r7, #0]
 800529c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800529e:	461a      	mov	r2, r3
 80052a0:	f000 f8b0 	bl	8005404 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	2150      	movs	r1, #80	@ 0x50
 80052aa:	4618      	mov	r0, r3
 80052ac:	f000 f907 	bl	80054be <TIM_ITRx_SetConfig>
      break;
 80052b0:	e02c      	b.n	800530c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80052b6:	683b      	ldr	r3, [r7, #0]
 80052b8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80052ba:	683b      	ldr	r3, [r7, #0]
 80052bc:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80052be:	461a      	mov	r2, r3
 80052c0:	f000 f8ce 	bl	8005460 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	2160      	movs	r1, #96	@ 0x60
 80052ca:	4618      	mov	r0, r3
 80052cc:	f000 f8f7 	bl	80054be <TIM_ITRx_SetConfig>
      break;
 80052d0:	e01c      	b.n	800530c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80052d6:	683b      	ldr	r3, [r7, #0]
 80052d8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80052da:	683b      	ldr	r3, [r7, #0]
 80052dc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80052de:	461a      	mov	r2, r3
 80052e0:	f000 f890 	bl	8005404 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	2140      	movs	r1, #64	@ 0x40
 80052ea:	4618      	mov	r0, r3
 80052ec:	f000 f8e7 	bl	80054be <TIM_ITRx_SetConfig>
      break;
 80052f0:	e00c      	b.n	800530c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681a      	ldr	r2, [r3, #0]
 80052f6:	683b      	ldr	r3, [r7, #0]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	4619      	mov	r1, r3
 80052fc:	4610      	mov	r0, r2
 80052fe:	f000 f8de 	bl	80054be <TIM_ITRx_SetConfig>
      break;
 8005302:	e003      	b.n	800530c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005304:	2301      	movs	r3, #1
 8005306:	73fb      	strb	r3, [r7, #15]
      break;
 8005308:	e000      	b.n	800530c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800530a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	2201      	movs	r2, #1
 8005310:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	2200      	movs	r2, #0
 8005318:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800531c:	7bfb      	ldrb	r3, [r7, #15]
}
 800531e:	4618      	mov	r0, r3
 8005320:	3710      	adds	r7, #16
 8005322:	46bd      	mov	sp, r7
 8005324:	bd80      	pop	{r7, pc}
	...

08005328 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005328:	b480      	push	{r7}
 800532a:	b085      	sub	sp, #20
 800532c:	af00      	add	r7, sp, #0
 800532e:	6078      	str	r0, [r7, #4]
 8005330:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	4a2f      	ldr	r2, [pc, #188]	@ (80053f8 <TIM_Base_SetConfig+0xd0>)
 800533c:	4293      	cmp	r3, r2
 800533e:	d00b      	beq.n	8005358 <TIM_Base_SetConfig+0x30>
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005346:	d007      	beq.n	8005358 <TIM_Base_SetConfig+0x30>
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	4a2c      	ldr	r2, [pc, #176]	@ (80053fc <TIM_Base_SetConfig+0xd4>)
 800534c:	4293      	cmp	r3, r2
 800534e:	d003      	beq.n	8005358 <TIM_Base_SetConfig+0x30>
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	4a2b      	ldr	r2, [pc, #172]	@ (8005400 <TIM_Base_SetConfig+0xd8>)
 8005354:	4293      	cmp	r3, r2
 8005356:	d108      	bne.n	800536a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800535e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005360:	683b      	ldr	r3, [r7, #0]
 8005362:	685b      	ldr	r3, [r3, #4]
 8005364:	68fa      	ldr	r2, [r7, #12]
 8005366:	4313      	orrs	r3, r2
 8005368:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	4a22      	ldr	r2, [pc, #136]	@ (80053f8 <TIM_Base_SetConfig+0xd0>)
 800536e:	4293      	cmp	r3, r2
 8005370:	d00b      	beq.n	800538a <TIM_Base_SetConfig+0x62>
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005378:	d007      	beq.n	800538a <TIM_Base_SetConfig+0x62>
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	4a1f      	ldr	r2, [pc, #124]	@ (80053fc <TIM_Base_SetConfig+0xd4>)
 800537e:	4293      	cmp	r3, r2
 8005380:	d003      	beq.n	800538a <TIM_Base_SetConfig+0x62>
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	4a1e      	ldr	r2, [pc, #120]	@ (8005400 <TIM_Base_SetConfig+0xd8>)
 8005386:	4293      	cmp	r3, r2
 8005388:	d108      	bne.n	800539c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005390:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005392:	683b      	ldr	r3, [r7, #0]
 8005394:	68db      	ldr	r3, [r3, #12]
 8005396:	68fa      	ldr	r2, [r7, #12]
 8005398:	4313      	orrs	r3, r2
 800539a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80053a2:	683b      	ldr	r3, [r7, #0]
 80053a4:	695b      	ldr	r3, [r3, #20]
 80053a6:	4313      	orrs	r3, r2
 80053a8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	68fa      	ldr	r2, [r7, #12]
 80053ae:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80053b0:	683b      	ldr	r3, [r7, #0]
 80053b2:	689a      	ldr	r2, [r3, #8]
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80053b8:	683b      	ldr	r3, [r7, #0]
 80053ba:	681a      	ldr	r2, [r3, #0]
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	4a0d      	ldr	r2, [pc, #52]	@ (80053f8 <TIM_Base_SetConfig+0xd0>)
 80053c4:	4293      	cmp	r3, r2
 80053c6:	d103      	bne.n	80053d0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80053c8:	683b      	ldr	r3, [r7, #0]
 80053ca:	691a      	ldr	r2, [r3, #16]
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	2201      	movs	r2, #1
 80053d4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	691b      	ldr	r3, [r3, #16]
 80053da:	f003 0301 	and.w	r3, r3, #1
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d005      	beq.n	80053ee <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	691b      	ldr	r3, [r3, #16]
 80053e6:	f023 0201 	bic.w	r2, r3, #1
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	611a      	str	r2, [r3, #16]
  }
}
 80053ee:	bf00      	nop
 80053f0:	3714      	adds	r7, #20
 80053f2:	46bd      	mov	sp, r7
 80053f4:	bc80      	pop	{r7}
 80053f6:	4770      	bx	lr
 80053f8:	40012c00 	.word	0x40012c00
 80053fc:	40000400 	.word	0x40000400
 8005400:	40000800 	.word	0x40000800

08005404 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005404:	b480      	push	{r7}
 8005406:	b087      	sub	sp, #28
 8005408:	af00      	add	r7, sp, #0
 800540a:	60f8      	str	r0, [r7, #12]
 800540c:	60b9      	str	r1, [r7, #8]
 800540e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	6a1b      	ldr	r3, [r3, #32]
 8005414:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	6a1b      	ldr	r3, [r3, #32]
 800541a:	f023 0201 	bic.w	r2, r3, #1
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	699b      	ldr	r3, [r3, #24]
 8005426:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005428:	693b      	ldr	r3, [r7, #16]
 800542a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800542e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	011b      	lsls	r3, r3, #4
 8005434:	693a      	ldr	r2, [r7, #16]
 8005436:	4313      	orrs	r3, r2
 8005438:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800543a:	697b      	ldr	r3, [r7, #20]
 800543c:	f023 030a 	bic.w	r3, r3, #10
 8005440:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005442:	697a      	ldr	r2, [r7, #20]
 8005444:	68bb      	ldr	r3, [r7, #8]
 8005446:	4313      	orrs	r3, r2
 8005448:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	693a      	ldr	r2, [r7, #16]
 800544e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	697a      	ldr	r2, [r7, #20]
 8005454:	621a      	str	r2, [r3, #32]
}
 8005456:	bf00      	nop
 8005458:	371c      	adds	r7, #28
 800545a:	46bd      	mov	sp, r7
 800545c:	bc80      	pop	{r7}
 800545e:	4770      	bx	lr

08005460 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005460:	b480      	push	{r7}
 8005462:	b087      	sub	sp, #28
 8005464:	af00      	add	r7, sp, #0
 8005466:	60f8      	str	r0, [r7, #12]
 8005468:	60b9      	str	r1, [r7, #8]
 800546a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	6a1b      	ldr	r3, [r3, #32]
 8005470:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	6a1b      	ldr	r3, [r3, #32]
 8005476:	f023 0210 	bic.w	r2, r3, #16
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	699b      	ldr	r3, [r3, #24]
 8005482:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005484:	693b      	ldr	r3, [r7, #16]
 8005486:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800548a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	031b      	lsls	r3, r3, #12
 8005490:	693a      	ldr	r2, [r7, #16]
 8005492:	4313      	orrs	r3, r2
 8005494:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005496:	697b      	ldr	r3, [r7, #20]
 8005498:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800549c:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800549e:	68bb      	ldr	r3, [r7, #8]
 80054a0:	011b      	lsls	r3, r3, #4
 80054a2:	697a      	ldr	r2, [r7, #20]
 80054a4:	4313      	orrs	r3, r2
 80054a6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	693a      	ldr	r2, [r7, #16]
 80054ac:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	697a      	ldr	r2, [r7, #20]
 80054b2:	621a      	str	r2, [r3, #32]
}
 80054b4:	bf00      	nop
 80054b6:	371c      	adds	r7, #28
 80054b8:	46bd      	mov	sp, r7
 80054ba:	bc80      	pop	{r7}
 80054bc:	4770      	bx	lr

080054be <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80054be:	b480      	push	{r7}
 80054c0:	b085      	sub	sp, #20
 80054c2:	af00      	add	r7, sp, #0
 80054c4:	6078      	str	r0, [r7, #4]
 80054c6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	689b      	ldr	r3, [r3, #8]
 80054cc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80054d4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80054d6:	683a      	ldr	r2, [r7, #0]
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	4313      	orrs	r3, r2
 80054dc:	f043 0307 	orr.w	r3, r3, #7
 80054e0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	68fa      	ldr	r2, [r7, #12]
 80054e6:	609a      	str	r2, [r3, #8]
}
 80054e8:	bf00      	nop
 80054ea:	3714      	adds	r7, #20
 80054ec:	46bd      	mov	sp, r7
 80054ee:	bc80      	pop	{r7}
 80054f0:	4770      	bx	lr

080054f2 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80054f2:	b480      	push	{r7}
 80054f4:	b087      	sub	sp, #28
 80054f6:	af00      	add	r7, sp, #0
 80054f8:	60f8      	str	r0, [r7, #12]
 80054fa:	60b9      	str	r1, [r7, #8]
 80054fc:	607a      	str	r2, [r7, #4]
 80054fe:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	689b      	ldr	r3, [r3, #8]
 8005504:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005506:	697b      	ldr	r3, [r7, #20]
 8005508:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800550c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800550e:	683b      	ldr	r3, [r7, #0]
 8005510:	021a      	lsls	r2, r3, #8
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	431a      	orrs	r2, r3
 8005516:	68bb      	ldr	r3, [r7, #8]
 8005518:	4313      	orrs	r3, r2
 800551a:	697a      	ldr	r2, [r7, #20]
 800551c:	4313      	orrs	r3, r2
 800551e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	697a      	ldr	r2, [r7, #20]
 8005524:	609a      	str	r2, [r3, #8]
}
 8005526:	bf00      	nop
 8005528:	371c      	adds	r7, #28
 800552a:	46bd      	mov	sp, r7
 800552c:	bc80      	pop	{r7}
 800552e:	4770      	bx	lr

08005530 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005530:	b480      	push	{r7}
 8005532:	b085      	sub	sp, #20
 8005534:	af00      	add	r7, sp, #0
 8005536:	6078      	str	r0, [r7, #4]
 8005538:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005540:	2b01      	cmp	r3, #1
 8005542:	d101      	bne.n	8005548 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005544:	2302      	movs	r3, #2
 8005546:	e046      	b.n	80055d6 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	2201      	movs	r2, #1
 800554c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	2202      	movs	r2, #2
 8005554:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	685b      	ldr	r3, [r3, #4]
 800555e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	689b      	ldr	r3, [r3, #8]
 8005566:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800556e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005570:	683b      	ldr	r3, [r7, #0]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	68fa      	ldr	r2, [r7, #12]
 8005576:	4313      	orrs	r3, r2
 8005578:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	68fa      	ldr	r2, [r7, #12]
 8005580:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	4a16      	ldr	r2, [pc, #88]	@ (80055e0 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8005588:	4293      	cmp	r3, r2
 800558a:	d00e      	beq.n	80055aa <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005594:	d009      	beq.n	80055aa <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	4a12      	ldr	r2, [pc, #72]	@ (80055e4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800559c:	4293      	cmp	r3, r2
 800559e:	d004      	beq.n	80055aa <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	4a10      	ldr	r2, [pc, #64]	@ (80055e8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80055a6:	4293      	cmp	r3, r2
 80055a8:	d10c      	bne.n	80055c4 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80055aa:	68bb      	ldr	r3, [r7, #8]
 80055ac:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80055b0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80055b2:	683b      	ldr	r3, [r7, #0]
 80055b4:	685b      	ldr	r3, [r3, #4]
 80055b6:	68ba      	ldr	r2, [r7, #8]
 80055b8:	4313      	orrs	r3, r2
 80055ba:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	68ba      	ldr	r2, [r7, #8]
 80055c2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	2201      	movs	r2, #1
 80055c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	2200      	movs	r2, #0
 80055d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80055d4:	2300      	movs	r3, #0
}
 80055d6:	4618      	mov	r0, r3
 80055d8:	3714      	adds	r7, #20
 80055da:	46bd      	mov	sp, r7
 80055dc:	bc80      	pop	{r7}
 80055de:	4770      	bx	lr
 80055e0:	40012c00 	.word	0x40012c00
 80055e4:	40000400 	.word	0x40000400
 80055e8:	40000800 	.word	0x40000800

080055ec <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80055ec:	b580      	push	{r7, lr}
 80055ee:	b082      	sub	sp, #8
 80055f0:	af00      	add	r7, sp, #0
 80055f2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d101      	bne.n	80055fe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80055fa:	2301      	movs	r3, #1
 80055fc:	e042      	b.n	8005684 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005604:	b2db      	uxtb	r3, r3
 8005606:	2b00      	cmp	r3, #0
 8005608:	d106      	bne.n	8005618 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	2200      	movs	r2, #0
 800560e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005612:	6878      	ldr	r0, [r7, #4]
 8005614:	f7fc fa92 	bl	8001b3c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	2224      	movs	r2, #36	@ 0x24
 800561c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	68da      	ldr	r2, [r3, #12]
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800562e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005630:	6878      	ldr	r0, [r7, #4]
 8005632:	f000 f971 	bl	8005918 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	691a      	ldr	r2, [r3, #16]
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005644:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	695a      	ldr	r2, [r3, #20]
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005654:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	68da      	ldr	r2, [r3, #12]
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005664:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	2200      	movs	r2, #0
 800566a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	2220      	movs	r2, #32
 8005670:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	2220      	movs	r2, #32
 8005678:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	2200      	movs	r2, #0
 8005680:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8005682:	2300      	movs	r3, #0
}
 8005684:	4618      	mov	r0, r3
 8005686:	3708      	adds	r7, #8
 8005688:	46bd      	mov	sp, r7
 800568a:	bd80      	pop	{r7, pc}

0800568c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800568c:	b580      	push	{r7, lr}
 800568e:	b08a      	sub	sp, #40	@ 0x28
 8005690:	af02      	add	r7, sp, #8
 8005692:	60f8      	str	r0, [r7, #12]
 8005694:	60b9      	str	r1, [r7, #8]
 8005696:	603b      	str	r3, [r7, #0]
 8005698:	4613      	mov	r3, r2
 800569a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800569c:	2300      	movs	r3, #0
 800569e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80056a6:	b2db      	uxtb	r3, r3
 80056a8:	2b20      	cmp	r3, #32
 80056aa:	d175      	bne.n	8005798 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80056ac:	68bb      	ldr	r3, [r7, #8]
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d002      	beq.n	80056b8 <HAL_UART_Transmit+0x2c>
 80056b2:	88fb      	ldrh	r3, [r7, #6]
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d101      	bne.n	80056bc <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80056b8:	2301      	movs	r3, #1
 80056ba:	e06e      	b.n	800579a <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	2200      	movs	r2, #0
 80056c0:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	2221      	movs	r2, #33	@ 0x21
 80056c6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80056ca:	f7fc ff0d 	bl	80024e8 <HAL_GetTick>
 80056ce:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	88fa      	ldrh	r2, [r7, #6]
 80056d4:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	88fa      	ldrh	r2, [r7, #6]
 80056da:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	689b      	ldr	r3, [r3, #8]
 80056e0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80056e4:	d108      	bne.n	80056f8 <HAL_UART_Transmit+0x6c>
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	691b      	ldr	r3, [r3, #16]
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d104      	bne.n	80056f8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80056ee:	2300      	movs	r3, #0
 80056f0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80056f2:	68bb      	ldr	r3, [r7, #8]
 80056f4:	61bb      	str	r3, [r7, #24]
 80056f6:	e003      	b.n	8005700 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80056f8:	68bb      	ldr	r3, [r7, #8]
 80056fa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80056fc:	2300      	movs	r3, #0
 80056fe:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005700:	e02e      	b.n	8005760 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005702:	683b      	ldr	r3, [r7, #0]
 8005704:	9300      	str	r3, [sp, #0]
 8005706:	697b      	ldr	r3, [r7, #20]
 8005708:	2200      	movs	r2, #0
 800570a:	2180      	movs	r1, #128	@ 0x80
 800570c:	68f8      	ldr	r0, [r7, #12]
 800570e:	f000 f848 	bl	80057a2 <UART_WaitOnFlagUntilTimeout>
 8005712:	4603      	mov	r3, r0
 8005714:	2b00      	cmp	r3, #0
 8005716:	d005      	beq.n	8005724 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	2220      	movs	r2, #32
 800571c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8005720:	2303      	movs	r3, #3
 8005722:	e03a      	b.n	800579a <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8005724:	69fb      	ldr	r3, [r7, #28]
 8005726:	2b00      	cmp	r3, #0
 8005728:	d10b      	bne.n	8005742 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800572a:	69bb      	ldr	r3, [r7, #24]
 800572c:	881b      	ldrh	r3, [r3, #0]
 800572e:	461a      	mov	r2, r3
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005738:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800573a:	69bb      	ldr	r3, [r7, #24]
 800573c:	3302      	adds	r3, #2
 800573e:	61bb      	str	r3, [r7, #24]
 8005740:	e007      	b.n	8005752 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005742:	69fb      	ldr	r3, [r7, #28]
 8005744:	781a      	ldrb	r2, [r3, #0]
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800574c:	69fb      	ldr	r3, [r7, #28]
 800574e:	3301      	adds	r3, #1
 8005750:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005756:	b29b      	uxth	r3, r3
 8005758:	3b01      	subs	r3, #1
 800575a:	b29a      	uxth	r2, r3
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005764:	b29b      	uxth	r3, r3
 8005766:	2b00      	cmp	r3, #0
 8005768:	d1cb      	bne.n	8005702 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800576a:	683b      	ldr	r3, [r7, #0]
 800576c:	9300      	str	r3, [sp, #0]
 800576e:	697b      	ldr	r3, [r7, #20]
 8005770:	2200      	movs	r2, #0
 8005772:	2140      	movs	r1, #64	@ 0x40
 8005774:	68f8      	ldr	r0, [r7, #12]
 8005776:	f000 f814 	bl	80057a2 <UART_WaitOnFlagUntilTimeout>
 800577a:	4603      	mov	r3, r0
 800577c:	2b00      	cmp	r3, #0
 800577e:	d005      	beq.n	800578c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	2220      	movs	r2, #32
 8005784:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8005788:	2303      	movs	r3, #3
 800578a:	e006      	b.n	800579a <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	2220      	movs	r2, #32
 8005790:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8005794:	2300      	movs	r3, #0
 8005796:	e000      	b.n	800579a <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8005798:	2302      	movs	r3, #2
  }
}
 800579a:	4618      	mov	r0, r3
 800579c:	3720      	adds	r7, #32
 800579e:	46bd      	mov	sp, r7
 80057a0:	bd80      	pop	{r7, pc}

080057a2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80057a2:	b580      	push	{r7, lr}
 80057a4:	b086      	sub	sp, #24
 80057a6:	af00      	add	r7, sp, #0
 80057a8:	60f8      	str	r0, [r7, #12]
 80057aa:	60b9      	str	r1, [r7, #8]
 80057ac:	603b      	str	r3, [r7, #0]
 80057ae:	4613      	mov	r3, r2
 80057b0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80057b2:	e03b      	b.n	800582c <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80057b4:	6a3b      	ldr	r3, [r7, #32]
 80057b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057ba:	d037      	beq.n	800582c <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80057bc:	f7fc fe94 	bl	80024e8 <HAL_GetTick>
 80057c0:	4602      	mov	r2, r0
 80057c2:	683b      	ldr	r3, [r7, #0]
 80057c4:	1ad3      	subs	r3, r2, r3
 80057c6:	6a3a      	ldr	r2, [r7, #32]
 80057c8:	429a      	cmp	r2, r3
 80057ca:	d302      	bcc.n	80057d2 <UART_WaitOnFlagUntilTimeout+0x30>
 80057cc:	6a3b      	ldr	r3, [r7, #32]
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d101      	bne.n	80057d6 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80057d2:	2303      	movs	r3, #3
 80057d4:	e03a      	b.n	800584c <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	68db      	ldr	r3, [r3, #12]
 80057dc:	f003 0304 	and.w	r3, r3, #4
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d023      	beq.n	800582c <UART_WaitOnFlagUntilTimeout+0x8a>
 80057e4:	68bb      	ldr	r3, [r7, #8]
 80057e6:	2b80      	cmp	r3, #128	@ 0x80
 80057e8:	d020      	beq.n	800582c <UART_WaitOnFlagUntilTimeout+0x8a>
 80057ea:	68bb      	ldr	r3, [r7, #8]
 80057ec:	2b40      	cmp	r3, #64	@ 0x40
 80057ee:	d01d      	beq.n	800582c <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	f003 0308 	and.w	r3, r3, #8
 80057fa:	2b08      	cmp	r3, #8
 80057fc:	d116      	bne.n	800582c <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80057fe:	2300      	movs	r3, #0
 8005800:	617b      	str	r3, [r7, #20]
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	617b      	str	r3, [r7, #20]
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	685b      	ldr	r3, [r3, #4]
 8005810:	617b      	str	r3, [r7, #20]
 8005812:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005814:	68f8      	ldr	r0, [r7, #12]
 8005816:	f000 f81d 	bl	8005854 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	2208      	movs	r2, #8
 800581e:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	2200      	movs	r2, #0
 8005824:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8005828:	2301      	movs	r3, #1
 800582a:	e00f      	b.n	800584c <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	681a      	ldr	r2, [r3, #0]
 8005832:	68bb      	ldr	r3, [r7, #8]
 8005834:	4013      	ands	r3, r2
 8005836:	68ba      	ldr	r2, [r7, #8]
 8005838:	429a      	cmp	r2, r3
 800583a:	bf0c      	ite	eq
 800583c:	2301      	moveq	r3, #1
 800583e:	2300      	movne	r3, #0
 8005840:	b2db      	uxtb	r3, r3
 8005842:	461a      	mov	r2, r3
 8005844:	79fb      	ldrb	r3, [r7, #7]
 8005846:	429a      	cmp	r2, r3
 8005848:	d0b4      	beq.n	80057b4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800584a:	2300      	movs	r3, #0
}
 800584c:	4618      	mov	r0, r3
 800584e:	3718      	adds	r7, #24
 8005850:	46bd      	mov	sp, r7
 8005852:	bd80      	pop	{r7, pc}

08005854 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005854:	b480      	push	{r7}
 8005856:	b095      	sub	sp, #84	@ 0x54
 8005858:	af00      	add	r7, sp, #0
 800585a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	330c      	adds	r3, #12
 8005862:	637b      	str	r3, [r7, #52]	@ 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005864:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005866:	e853 3f00 	ldrex	r3, [r3]
 800586a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800586c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800586e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005872:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	330c      	adds	r3, #12
 800587a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800587c:	643a      	str	r2, [r7, #64]	@ 0x40
 800587e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005880:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005882:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005884:	e841 2300 	strex	r3, r2, [r1]
 8005888:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800588a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800588c:	2b00      	cmp	r3, #0
 800588e:	d1e5      	bne.n	800585c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	3314      	adds	r3, #20
 8005896:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005898:	6a3b      	ldr	r3, [r7, #32]
 800589a:	e853 3f00 	ldrex	r3, [r3]
 800589e:	61fb      	str	r3, [r7, #28]
   return(result);
 80058a0:	69fb      	ldr	r3, [r7, #28]
 80058a2:	f023 0301 	bic.w	r3, r3, #1
 80058a6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	3314      	adds	r3, #20
 80058ae:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80058b0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80058b2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058b4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80058b6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80058b8:	e841 2300 	strex	r3, r2, [r1]
 80058bc:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80058be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d1e5      	bne.n	8005890 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80058c8:	2b01      	cmp	r3, #1
 80058ca:	d119      	bne.n	8005900 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	330c      	adds	r3, #12
 80058d2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	e853 3f00 	ldrex	r3, [r3]
 80058da:	60bb      	str	r3, [r7, #8]
   return(result);
 80058dc:	68bb      	ldr	r3, [r7, #8]
 80058de:	f023 0310 	bic.w	r3, r3, #16
 80058e2:	647b      	str	r3, [r7, #68]	@ 0x44
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	330c      	adds	r3, #12
 80058ea:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80058ec:	61ba      	str	r2, [r7, #24]
 80058ee:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058f0:	6979      	ldr	r1, [r7, #20]
 80058f2:	69ba      	ldr	r2, [r7, #24]
 80058f4:	e841 2300 	strex	r3, r2, [r1]
 80058f8:	613b      	str	r3, [r7, #16]
   return(result);
 80058fa:	693b      	ldr	r3, [r7, #16]
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d1e5      	bne.n	80058cc <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	2220      	movs	r2, #32
 8005904:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	2200      	movs	r2, #0
 800590c:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800590e:	bf00      	nop
 8005910:	3754      	adds	r7, #84	@ 0x54
 8005912:	46bd      	mov	sp, r7
 8005914:	bc80      	pop	{r7}
 8005916:	4770      	bx	lr

08005918 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005918:	b580      	push	{r7, lr}
 800591a:	b084      	sub	sp, #16
 800591c:	af00      	add	r7, sp, #0
 800591e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	691b      	ldr	r3, [r3, #16]
 8005926:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	68da      	ldr	r2, [r3, #12]
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	430a      	orrs	r2, r1
 8005934:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	689a      	ldr	r2, [r3, #8]
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	691b      	ldr	r3, [r3, #16]
 800593e:	431a      	orrs	r2, r3
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	695b      	ldr	r3, [r3, #20]
 8005944:	4313      	orrs	r3, r2
 8005946:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	68db      	ldr	r3, [r3, #12]
 800594e:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8005952:	f023 030c 	bic.w	r3, r3, #12
 8005956:	687a      	ldr	r2, [r7, #4]
 8005958:	6812      	ldr	r2, [r2, #0]
 800595a:	68b9      	ldr	r1, [r7, #8]
 800595c:	430b      	orrs	r3, r1
 800595e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	695b      	ldr	r3, [r3, #20]
 8005966:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	699a      	ldr	r2, [r3, #24]
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	430a      	orrs	r2, r1
 8005974:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	4a2c      	ldr	r2, [pc, #176]	@ (8005a2c <UART_SetConfig+0x114>)
 800597c:	4293      	cmp	r3, r2
 800597e:	d103      	bne.n	8005988 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8005980:	f7ff fb3e 	bl	8005000 <HAL_RCC_GetPCLK2Freq>
 8005984:	60f8      	str	r0, [r7, #12]
 8005986:	e002      	b.n	800598e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8005988:	f7ff fb26 	bl	8004fd8 <HAL_RCC_GetPCLK1Freq>
 800598c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800598e:	68fa      	ldr	r2, [r7, #12]
 8005990:	4613      	mov	r3, r2
 8005992:	009b      	lsls	r3, r3, #2
 8005994:	4413      	add	r3, r2
 8005996:	009a      	lsls	r2, r3, #2
 8005998:	441a      	add	r2, r3
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	685b      	ldr	r3, [r3, #4]
 800599e:	009b      	lsls	r3, r3, #2
 80059a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80059a4:	4a22      	ldr	r2, [pc, #136]	@ (8005a30 <UART_SetConfig+0x118>)
 80059a6:	fba2 2303 	umull	r2, r3, r2, r3
 80059aa:	095b      	lsrs	r3, r3, #5
 80059ac:	0119      	lsls	r1, r3, #4
 80059ae:	68fa      	ldr	r2, [r7, #12]
 80059b0:	4613      	mov	r3, r2
 80059b2:	009b      	lsls	r3, r3, #2
 80059b4:	4413      	add	r3, r2
 80059b6:	009a      	lsls	r2, r3, #2
 80059b8:	441a      	add	r2, r3
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	685b      	ldr	r3, [r3, #4]
 80059be:	009b      	lsls	r3, r3, #2
 80059c0:	fbb2 f2f3 	udiv	r2, r2, r3
 80059c4:	4b1a      	ldr	r3, [pc, #104]	@ (8005a30 <UART_SetConfig+0x118>)
 80059c6:	fba3 0302 	umull	r0, r3, r3, r2
 80059ca:	095b      	lsrs	r3, r3, #5
 80059cc:	2064      	movs	r0, #100	@ 0x64
 80059ce:	fb00 f303 	mul.w	r3, r0, r3
 80059d2:	1ad3      	subs	r3, r2, r3
 80059d4:	011b      	lsls	r3, r3, #4
 80059d6:	3332      	adds	r3, #50	@ 0x32
 80059d8:	4a15      	ldr	r2, [pc, #84]	@ (8005a30 <UART_SetConfig+0x118>)
 80059da:	fba2 2303 	umull	r2, r3, r2, r3
 80059de:	095b      	lsrs	r3, r3, #5
 80059e0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80059e4:	4419      	add	r1, r3
 80059e6:	68fa      	ldr	r2, [r7, #12]
 80059e8:	4613      	mov	r3, r2
 80059ea:	009b      	lsls	r3, r3, #2
 80059ec:	4413      	add	r3, r2
 80059ee:	009a      	lsls	r2, r3, #2
 80059f0:	441a      	add	r2, r3
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	685b      	ldr	r3, [r3, #4]
 80059f6:	009b      	lsls	r3, r3, #2
 80059f8:	fbb2 f2f3 	udiv	r2, r2, r3
 80059fc:	4b0c      	ldr	r3, [pc, #48]	@ (8005a30 <UART_SetConfig+0x118>)
 80059fe:	fba3 0302 	umull	r0, r3, r3, r2
 8005a02:	095b      	lsrs	r3, r3, #5
 8005a04:	2064      	movs	r0, #100	@ 0x64
 8005a06:	fb00 f303 	mul.w	r3, r0, r3
 8005a0a:	1ad3      	subs	r3, r2, r3
 8005a0c:	011b      	lsls	r3, r3, #4
 8005a0e:	3332      	adds	r3, #50	@ 0x32
 8005a10:	4a07      	ldr	r2, [pc, #28]	@ (8005a30 <UART_SetConfig+0x118>)
 8005a12:	fba2 2303 	umull	r2, r3, r2, r3
 8005a16:	095b      	lsrs	r3, r3, #5
 8005a18:	f003 020f 	and.w	r2, r3, #15
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	440a      	add	r2, r1
 8005a22:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8005a24:	bf00      	nop
 8005a26:	3710      	adds	r7, #16
 8005a28:	46bd      	mov	sp, r7
 8005a2a:	bd80      	pop	{r7, pc}
 8005a2c:	40013800 	.word	0x40013800
 8005a30:	51eb851f 	.word	0x51eb851f

08005a34 <__cvt>:
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005a3a:	461d      	mov	r5, r3
 8005a3c:	bfbb      	ittet	lt
 8005a3e:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 8005a42:	461d      	movlt	r5, r3
 8005a44:	2300      	movge	r3, #0
 8005a46:	232d      	movlt	r3, #45	@ 0x2d
 8005a48:	b088      	sub	sp, #32
 8005a4a:	4614      	mov	r4, r2
 8005a4c:	bfb8      	it	lt
 8005a4e:	4614      	movlt	r4, r2
 8005a50:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8005a52:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 8005a54:	7013      	strb	r3, [r2, #0]
 8005a56:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8005a58:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 8005a5c:	f023 0820 	bic.w	r8, r3, #32
 8005a60:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8005a64:	d005      	beq.n	8005a72 <__cvt+0x3e>
 8005a66:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8005a6a:	d100      	bne.n	8005a6e <__cvt+0x3a>
 8005a6c:	3601      	adds	r6, #1
 8005a6e:	2302      	movs	r3, #2
 8005a70:	e000      	b.n	8005a74 <__cvt+0x40>
 8005a72:	2303      	movs	r3, #3
 8005a74:	aa07      	add	r2, sp, #28
 8005a76:	9204      	str	r2, [sp, #16]
 8005a78:	aa06      	add	r2, sp, #24
 8005a7a:	e9cd a202 	strd	sl, r2, [sp, #8]
 8005a7e:	e9cd 3600 	strd	r3, r6, [sp]
 8005a82:	4622      	mov	r2, r4
 8005a84:	462b      	mov	r3, r5
 8005a86:	f000 fea3 	bl	80067d0 <_dtoa_r>
 8005a8a:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8005a8e:	4607      	mov	r7, r0
 8005a90:	d119      	bne.n	8005ac6 <__cvt+0x92>
 8005a92:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8005a94:	07db      	lsls	r3, r3, #31
 8005a96:	d50e      	bpl.n	8005ab6 <__cvt+0x82>
 8005a98:	eb00 0906 	add.w	r9, r0, r6
 8005a9c:	2200      	movs	r2, #0
 8005a9e:	2300      	movs	r3, #0
 8005aa0:	4620      	mov	r0, r4
 8005aa2:	4629      	mov	r1, r5
 8005aa4:	f7fa ff80 	bl	80009a8 <__aeabi_dcmpeq>
 8005aa8:	b108      	cbz	r0, 8005aae <__cvt+0x7a>
 8005aaa:	f8cd 901c 	str.w	r9, [sp, #28]
 8005aae:	2230      	movs	r2, #48	@ 0x30
 8005ab0:	9b07      	ldr	r3, [sp, #28]
 8005ab2:	454b      	cmp	r3, r9
 8005ab4:	d31e      	bcc.n	8005af4 <__cvt+0xc0>
 8005ab6:	4638      	mov	r0, r7
 8005ab8:	9b07      	ldr	r3, [sp, #28]
 8005aba:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8005abc:	1bdb      	subs	r3, r3, r7
 8005abe:	6013      	str	r3, [r2, #0]
 8005ac0:	b008      	add	sp, #32
 8005ac2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005ac6:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8005aca:	eb00 0906 	add.w	r9, r0, r6
 8005ace:	d1e5      	bne.n	8005a9c <__cvt+0x68>
 8005ad0:	7803      	ldrb	r3, [r0, #0]
 8005ad2:	2b30      	cmp	r3, #48	@ 0x30
 8005ad4:	d10a      	bne.n	8005aec <__cvt+0xb8>
 8005ad6:	2200      	movs	r2, #0
 8005ad8:	2300      	movs	r3, #0
 8005ada:	4620      	mov	r0, r4
 8005adc:	4629      	mov	r1, r5
 8005ade:	f7fa ff63 	bl	80009a8 <__aeabi_dcmpeq>
 8005ae2:	b918      	cbnz	r0, 8005aec <__cvt+0xb8>
 8005ae4:	f1c6 0601 	rsb	r6, r6, #1
 8005ae8:	f8ca 6000 	str.w	r6, [sl]
 8005aec:	f8da 3000 	ldr.w	r3, [sl]
 8005af0:	4499      	add	r9, r3
 8005af2:	e7d3      	b.n	8005a9c <__cvt+0x68>
 8005af4:	1c59      	adds	r1, r3, #1
 8005af6:	9107      	str	r1, [sp, #28]
 8005af8:	701a      	strb	r2, [r3, #0]
 8005afa:	e7d9      	b.n	8005ab0 <__cvt+0x7c>

08005afc <__exponent>:
 8005afc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005afe:	2900      	cmp	r1, #0
 8005b00:	bfb6      	itet	lt
 8005b02:	232d      	movlt	r3, #45	@ 0x2d
 8005b04:	232b      	movge	r3, #43	@ 0x2b
 8005b06:	4249      	neglt	r1, r1
 8005b08:	2909      	cmp	r1, #9
 8005b0a:	7002      	strb	r2, [r0, #0]
 8005b0c:	7043      	strb	r3, [r0, #1]
 8005b0e:	dd29      	ble.n	8005b64 <__exponent+0x68>
 8005b10:	f10d 0307 	add.w	r3, sp, #7
 8005b14:	461d      	mov	r5, r3
 8005b16:	270a      	movs	r7, #10
 8005b18:	fbb1 f6f7 	udiv	r6, r1, r7
 8005b1c:	461a      	mov	r2, r3
 8005b1e:	fb07 1416 	mls	r4, r7, r6, r1
 8005b22:	3430      	adds	r4, #48	@ 0x30
 8005b24:	f802 4c01 	strb.w	r4, [r2, #-1]
 8005b28:	460c      	mov	r4, r1
 8005b2a:	2c63      	cmp	r4, #99	@ 0x63
 8005b2c:	4631      	mov	r1, r6
 8005b2e:	f103 33ff 	add.w	r3, r3, #4294967295
 8005b32:	dcf1      	bgt.n	8005b18 <__exponent+0x1c>
 8005b34:	3130      	adds	r1, #48	@ 0x30
 8005b36:	1e94      	subs	r4, r2, #2
 8005b38:	f803 1c01 	strb.w	r1, [r3, #-1]
 8005b3c:	4623      	mov	r3, r4
 8005b3e:	1c41      	adds	r1, r0, #1
 8005b40:	42ab      	cmp	r3, r5
 8005b42:	d30a      	bcc.n	8005b5a <__exponent+0x5e>
 8005b44:	f10d 0309 	add.w	r3, sp, #9
 8005b48:	1a9b      	subs	r3, r3, r2
 8005b4a:	42ac      	cmp	r4, r5
 8005b4c:	bf88      	it	hi
 8005b4e:	2300      	movhi	r3, #0
 8005b50:	3302      	adds	r3, #2
 8005b52:	4403      	add	r3, r0
 8005b54:	1a18      	subs	r0, r3, r0
 8005b56:	b003      	add	sp, #12
 8005b58:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005b5a:	f813 6b01 	ldrb.w	r6, [r3], #1
 8005b5e:	f801 6f01 	strb.w	r6, [r1, #1]!
 8005b62:	e7ed      	b.n	8005b40 <__exponent+0x44>
 8005b64:	2330      	movs	r3, #48	@ 0x30
 8005b66:	3130      	adds	r1, #48	@ 0x30
 8005b68:	7083      	strb	r3, [r0, #2]
 8005b6a:	70c1      	strb	r1, [r0, #3]
 8005b6c:	1d03      	adds	r3, r0, #4
 8005b6e:	e7f1      	b.n	8005b54 <__exponent+0x58>

08005b70 <_printf_float>:
 8005b70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b74:	b091      	sub	sp, #68	@ 0x44
 8005b76:	460c      	mov	r4, r1
 8005b78:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 8005b7c:	4616      	mov	r6, r2
 8005b7e:	461f      	mov	r7, r3
 8005b80:	4605      	mov	r5, r0
 8005b82:	f000 fd07 	bl	8006594 <_localeconv_r>
 8005b86:	6803      	ldr	r3, [r0, #0]
 8005b88:	4618      	mov	r0, r3
 8005b8a:	9308      	str	r3, [sp, #32]
 8005b8c:	f7fa fae0 	bl	8000150 <strlen>
 8005b90:	2300      	movs	r3, #0
 8005b92:	930e      	str	r3, [sp, #56]	@ 0x38
 8005b94:	f8d8 3000 	ldr.w	r3, [r8]
 8005b98:	9009      	str	r0, [sp, #36]	@ 0x24
 8005b9a:	3307      	adds	r3, #7
 8005b9c:	f023 0307 	bic.w	r3, r3, #7
 8005ba0:	f103 0208 	add.w	r2, r3, #8
 8005ba4:	f894 a018 	ldrb.w	sl, [r4, #24]
 8005ba8:	f8d4 b000 	ldr.w	fp, [r4]
 8005bac:	f8c8 2000 	str.w	r2, [r8]
 8005bb0:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005bb4:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8005bb8:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005bba:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8005bbe:	f04f 32ff 	mov.w	r2, #4294967295
 8005bc2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8005bc6:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8005bca:	4b9c      	ldr	r3, [pc, #624]	@ (8005e3c <_printf_float+0x2cc>)
 8005bcc:	f7fa ff1e 	bl	8000a0c <__aeabi_dcmpun>
 8005bd0:	bb70      	cbnz	r0, 8005c30 <_printf_float+0xc0>
 8005bd2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8005bd6:	f04f 32ff 	mov.w	r2, #4294967295
 8005bda:	4b98      	ldr	r3, [pc, #608]	@ (8005e3c <_printf_float+0x2cc>)
 8005bdc:	f7fa fef8 	bl	80009d0 <__aeabi_dcmple>
 8005be0:	bb30      	cbnz	r0, 8005c30 <_printf_float+0xc0>
 8005be2:	2200      	movs	r2, #0
 8005be4:	2300      	movs	r3, #0
 8005be6:	4640      	mov	r0, r8
 8005be8:	4649      	mov	r1, r9
 8005bea:	f7fa fee7 	bl	80009bc <__aeabi_dcmplt>
 8005bee:	b110      	cbz	r0, 8005bf6 <_printf_float+0x86>
 8005bf0:	232d      	movs	r3, #45	@ 0x2d
 8005bf2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005bf6:	4a92      	ldr	r2, [pc, #584]	@ (8005e40 <_printf_float+0x2d0>)
 8005bf8:	4b92      	ldr	r3, [pc, #584]	@ (8005e44 <_printf_float+0x2d4>)
 8005bfa:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8005bfe:	bf8c      	ite	hi
 8005c00:	4690      	movhi	r8, r2
 8005c02:	4698      	movls	r8, r3
 8005c04:	2303      	movs	r3, #3
 8005c06:	f04f 0900 	mov.w	r9, #0
 8005c0a:	6123      	str	r3, [r4, #16]
 8005c0c:	f02b 0304 	bic.w	r3, fp, #4
 8005c10:	6023      	str	r3, [r4, #0]
 8005c12:	4633      	mov	r3, r6
 8005c14:	4621      	mov	r1, r4
 8005c16:	4628      	mov	r0, r5
 8005c18:	9700      	str	r7, [sp, #0]
 8005c1a:	aa0f      	add	r2, sp, #60	@ 0x3c
 8005c1c:	f000 f9d4 	bl	8005fc8 <_printf_common>
 8005c20:	3001      	adds	r0, #1
 8005c22:	f040 8090 	bne.w	8005d46 <_printf_float+0x1d6>
 8005c26:	f04f 30ff 	mov.w	r0, #4294967295
 8005c2a:	b011      	add	sp, #68	@ 0x44
 8005c2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005c30:	4642      	mov	r2, r8
 8005c32:	464b      	mov	r3, r9
 8005c34:	4640      	mov	r0, r8
 8005c36:	4649      	mov	r1, r9
 8005c38:	f7fa fee8 	bl	8000a0c <__aeabi_dcmpun>
 8005c3c:	b148      	cbz	r0, 8005c52 <_printf_float+0xe2>
 8005c3e:	464b      	mov	r3, r9
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	bfb8      	it	lt
 8005c44:	232d      	movlt	r3, #45	@ 0x2d
 8005c46:	4a80      	ldr	r2, [pc, #512]	@ (8005e48 <_printf_float+0x2d8>)
 8005c48:	bfb8      	it	lt
 8005c4a:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8005c4e:	4b7f      	ldr	r3, [pc, #508]	@ (8005e4c <_printf_float+0x2dc>)
 8005c50:	e7d3      	b.n	8005bfa <_printf_float+0x8a>
 8005c52:	6863      	ldr	r3, [r4, #4]
 8005c54:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 8005c58:	1c5a      	adds	r2, r3, #1
 8005c5a:	d13f      	bne.n	8005cdc <_printf_float+0x16c>
 8005c5c:	2306      	movs	r3, #6
 8005c5e:	6063      	str	r3, [r4, #4]
 8005c60:	2200      	movs	r2, #0
 8005c62:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 8005c66:	6023      	str	r3, [r4, #0]
 8005c68:	9206      	str	r2, [sp, #24]
 8005c6a:	aa0e      	add	r2, sp, #56	@ 0x38
 8005c6c:	e9cd a204 	strd	sl, r2, [sp, #16]
 8005c70:	aa0d      	add	r2, sp, #52	@ 0x34
 8005c72:	9203      	str	r2, [sp, #12]
 8005c74:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 8005c78:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8005c7c:	6863      	ldr	r3, [r4, #4]
 8005c7e:	4642      	mov	r2, r8
 8005c80:	9300      	str	r3, [sp, #0]
 8005c82:	4628      	mov	r0, r5
 8005c84:	464b      	mov	r3, r9
 8005c86:	910a      	str	r1, [sp, #40]	@ 0x28
 8005c88:	f7ff fed4 	bl	8005a34 <__cvt>
 8005c8c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8005c8e:	4680      	mov	r8, r0
 8005c90:	2947      	cmp	r1, #71	@ 0x47
 8005c92:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8005c94:	d128      	bne.n	8005ce8 <_printf_float+0x178>
 8005c96:	1cc8      	adds	r0, r1, #3
 8005c98:	db02      	blt.n	8005ca0 <_printf_float+0x130>
 8005c9a:	6863      	ldr	r3, [r4, #4]
 8005c9c:	4299      	cmp	r1, r3
 8005c9e:	dd40      	ble.n	8005d22 <_printf_float+0x1b2>
 8005ca0:	f1aa 0a02 	sub.w	sl, sl, #2
 8005ca4:	fa5f fa8a 	uxtb.w	sl, sl
 8005ca8:	4652      	mov	r2, sl
 8005caa:	3901      	subs	r1, #1
 8005cac:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8005cb0:	910d      	str	r1, [sp, #52]	@ 0x34
 8005cb2:	f7ff ff23 	bl	8005afc <__exponent>
 8005cb6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8005cb8:	4681      	mov	r9, r0
 8005cba:	1813      	adds	r3, r2, r0
 8005cbc:	2a01      	cmp	r2, #1
 8005cbe:	6123      	str	r3, [r4, #16]
 8005cc0:	dc02      	bgt.n	8005cc8 <_printf_float+0x158>
 8005cc2:	6822      	ldr	r2, [r4, #0]
 8005cc4:	07d2      	lsls	r2, r2, #31
 8005cc6:	d501      	bpl.n	8005ccc <_printf_float+0x15c>
 8005cc8:	3301      	adds	r3, #1
 8005cca:	6123      	str	r3, [r4, #16]
 8005ccc:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d09e      	beq.n	8005c12 <_printf_float+0xa2>
 8005cd4:	232d      	movs	r3, #45	@ 0x2d
 8005cd6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005cda:	e79a      	b.n	8005c12 <_printf_float+0xa2>
 8005cdc:	2947      	cmp	r1, #71	@ 0x47
 8005cde:	d1bf      	bne.n	8005c60 <_printf_float+0xf0>
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d1bd      	bne.n	8005c60 <_printf_float+0xf0>
 8005ce4:	2301      	movs	r3, #1
 8005ce6:	e7ba      	b.n	8005c5e <_printf_float+0xee>
 8005ce8:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8005cec:	d9dc      	bls.n	8005ca8 <_printf_float+0x138>
 8005cee:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8005cf2:	d118      	bne.n	8005d26 <_printf_float+0x1b6>
 8005cf4:	2900      	cmp	r1, #0
 8005cf6:	6863      	ldr	r3, [r4, #4]
 8005cf8:	dd0b      	ble.n	8005d12 <_printf_float+0x1a2>
 8005cfa:	6121      	str	r1, [r4, #16]
 8005cfc:	b913      	cbnz	r3, 8005d04 <_printf_float+0x194>
 8005cfe:	6822      	ldr	r2, [r4, #0]
 8005d00:	07d0      	lsls	r0, r2, #31
 8005d02:	d502      	bpl.n	8005d0a <_printf_float+0x19a>
 8005d04:	3301      	adds	r3, #1
 8005d06:	440b      	add	r3, r1
 8005d08:	6123      	str	r3, [r4, #16]
 8005d0a:	f04f 0900 	mov.w	r9, #0
 8005d0e:	65a1      	str	r1, [r4, #88]	@ 0x58
 8005d10:	e7dc      	b.n	8005ccc <_printf_float+0x15c>
 8005d12:	b913      	cbnz	r3, 8005d1a <_printf_float+0x1aa>
 8005d14:	6822      	ldr	r2, [r4, #0]
 8005d16:	07d2      	lsls	r2, r2, #31
 8005d18:	d501      	bpl.n	8005d1e <_printf_float+0x1ae>
 8005d1a:	3302      	adds	r3, #2
 8005d1c:	e7f4      	b.n	8005d08 <_printf_float+0x198>
 8005d1e:	2301      	movs	r3, #1
 8005d20:	e7f2      	b.n	8005d08 <_printf_float+0x198>
 8005d22:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8005d26:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005d28:	4299      	cmp	r1, r3
 8005d2a:	db05      	blt.n	8005d38 <_printf_float+0x1c8>
 8005d2c:	6823      	ldr	r3, [r4, #0]
 8005d2e:	6121      	str	r1, [r4, #16]
 8005d30:	07d8      	lsls	r0, r3, #31
 8005d32:	d5ea      	bpl.n	8005d0a <_printf_float+0x19a>
 8005d34:	1c4b      	adds	r3, r1, #1
 8005d36:	e7e7      	b.n	8005d08 <_printf_float+0x198>
 8005d38:	2900      	cmp	r1, #0
 8005d3a:	bfcc      	ite	gt
 8005d3c:	2201      	movgt	r2, #1
 8005d3e:	f1c1 0202 	rsble	r2, r1, #2
 8005d42:	4413      	add	r3, r2
 8005d44:	e7e0      	b.n	8005d08 <_printf_float+0x198>
 8005d46:	6823      	ldr	r3, [r4, #0]
 8005d48:	055a      	lsls	r2, r3, #21
 8005d4a:	d407      	bmi.n	8005d5c <_printf_float+0x1ec>
 8005d4c:	6923      	ldr	r3, [r4, #16]
 8005d4e:	4642      	mov	r2, r8
 8005d50:	4631      	mov	r1, r6
 8005d52:	4628      	mov	r0, r5
 8005d54:	47b8      	blx	r7
 8005d56:	3001      	adds	r0, #1
 8005d58:	d12b      	bne.n	8005db2 <_printf_float+0x242>
 8005d5a:	e764      	b.n	8005c26 <_printf_float+0xb6>
 8005d5c:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8005d60:	f240 80dc 	bls.w	8005f1c <_printf_float+0x3ac>
 8005d64:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8005d68:	2200      	movs	r2, #0
 8005d6a:	2300      	movs	r3, #0
 8005d6c:	f7fa fe1c 	bl	80009a8 <__aeabi_dcmpeq>
 8005d70:	2800      	cmp	r0, #0
 8005d72:	d033      	beq.n	8005ddc <_printf_float+0x26c>
 8005d74:	2301      	movs	r3, #1
 8005d76:	4631      	mov	r1, r6
 8005d78:	4628      	mov	r0, r5
 8005d7a:	4a35      	ldr	r2, [pc, #212]	@ (8005e50 <_printf_float+0x2e0>)
 8005d7c:	47b8      	blx	r7
 8005d7e:	3001      	adds	r0, #1
 8005d80:	f43f af51 	beq.w	8005c26 <_printf_float+0xb6>
 8005d84:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 8005d88:	4543      	cmp	r3, r8
 8005d8a:	db02      	blt.n	8005d92 <_printf_float+0x222>
 8005d8c:	6823      	ldr	r3, [r4, #0]
 8005d8e:	07d8      	lsls	r0, r3, #31
 8005d90:	d50f      	bpl.n	8005db2 <_printf_float+0x242>
 8005d92:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8005d96:	4631      	mov	r1, r6
 8005d98:	4628      	mov	r0, r5
 8005d9a:	47b8      	blx	r7
 8005d9c:	3001      	adds	r0, #1
 8005d9e:	f43f af42 	beq.w	8005c26 <_printf_float+0xb6>
 8005da2:	f04f 0900 	mov.w	r9, #0
 8005da6:	f108 38ff 	add.w	r8, r8, #4294967295
 8005daa:	f104 0a1a 	add.w	sl, r4, #26
 8005dae:	45c8      	cmp	r8, r9
 8005db0:	dc09      	bgt.n	8005dc6 <_printf_float+0x256>
 8005db2:	6823      	ldr	r3, [r4, #0]
 8005db4:	079b      	lsls	r3, r3, #30
 8005db6:	f100 8102 	bmi.w	8005fbe <_printf_float+0x44e>
 8005dba:	68e0      	ldr	r0, [r4, #12]
 8005dbc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005dbe:	4298      	cmp	r0, r3
 8005dc0:	bfb8      	it	lt
 8005dc2:	4618      	movlt	r0, r3
 8005dc4:	e731      	b.n	8005c2a <_printf_float+0xba>
 8005dc6:	2301      	movs	r3, #1
 8005dc8:	4652      	mov	r2, sl
 8005dca:	4631      	mov	r1, r6
 8005dcc:	4628      	mov	r0, r5
 8005dce:	47b8      	blx	r7
 8005dd0:	3001      	adds	r0, #1
 8005dd2:	f43f af28 	beq.w	8005c26 <_printf_float+0xb6>
 8005dd6:	f109 0901 	add.w	r9, r9, #1
 8005dda:	e7e8      	b.n	8005dae <_printf_float+0x23e>
 8005ddc:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	dc38      	bgt.n	8005e54 <_printf_float+0x2e4>
 8005de2:	2301      	movs	r3, #1
 8005de4:	4631      	mov	r1, r6
 8005de6:	4628      	mov	r0, r5
 8005de8:	4a19      	ldr	r2, [pc, #100]	@ (8005e50 <_printf_float+0x2e0>)
 8005dea:	47b8      	blx	r7
 8005dec:	3001      	adds	r0, #1
 8005dee:	f43f af1a 	beq.w	8005c26 <_printf_float+0xb6>
 8005df2:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 8005df6:	ea59 0303 	orrs.w	r3, r9, r3
 8005dfa:	d102      	bne.n	8005e02 <_printf_float+0x292>
 8005dfc:	6823      	ldr	r3, [r4, #0]
 8005dfe:	07d9      	lsls	r1, r3, #31
 8005e00:	d5d7      	bpl.n	8005db2 <_printf_float+0x242>
 8005e02:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8005e06:	4631      	mov	r1, r6
 8005e08:	4628      	mov	r0, r5
 8005e0a:	47b8      	blx	r7
 8005e0c:	3001      	adds	r0, #1
 8005e0e:	f43f af0a 	beq.w	8005c26 <_printf_float+0xb6>
 8005e12:	f04f 0a00 	mov.w	sl, #0
 8005e16:	f104 0b1a 	add.w	fp, r4, #26
 8005e1a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005e1c:	425b      	negs	r3, r3
 8005e1e:	4553      	cmp	r3, sl
 8005e20:	dc01      	bgt.n	8005e26 <_printf_float+0x2b6>
 8005e22:	464b      	mov	r3, r9
 8005e24:	e793      	b.n	8005d4e <_printf_float+0x1de>
 8005e26:	2301      	movs	r3, #1
 8005e28:	465a      	mov	r2, fp
 8005e2a:	4631      	mov	r1, r6
 8005e2c:	4628      	mov	r0, r5
 8005e2e:	47b8      	blx	r7
 8005e30:	3001      	adds	r0, #1
 8005e32:	f43f aef8 	beq.w	8005c26 <_printf_float+0xb6>
 8005e36:	f10a 0a01 	add.w	sl, sl, #1
 8005e3a:	e7ee      	b.n	8005e1a <_printf_float+0x2aa>
 8005e3c:	7fefffff 	.word	0x7fefffff
 8005e40:	080089a6 	.word	0x080089a6
 8005e44:	080089a2 	.word	0x080089a2
 8005e48:	080089ae 	.word	0x080089ae
 8005e4c:	080089aa 	.word	0x080089aa
 8005e50:	080089b2 	.word	0x080089b2
 8005e54:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8005e56:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8005e5a:	4553      	cmp	r3, sl
 8005e5c:	bfa8      	it	ge
 8005e5e:	4653      	movge	r3, sl
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	4699      	mov	r9, r3
 8005e64:	dc36      	bgt.n	8005ed4 <_printf_float+0x364>
 8005e66:	f04f 0b00 	mov.w	fp, #0
 8005e6a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005e6e:	f104 021a 	add.w	r2, r4, #26
 8005e72:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8005e74:	930a      	str	r3, [sp, #40]	@ 0x28
 8005e76:	eba3 0309 	sub.w	r3, r3, r9
 8005e7a:	455b      	cmp	r3, fp
 8005e7c:	dc31      	bgt.n	8005ee2 <_printf_float+0x372>
 8005e7e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005e80:	459a      	cmp	sl, r3
 8005e82:	dc3a      	bgt.n	8005efa <_printf_float+0x38a>
 8005e84:	6823      	ldr	r3, [r4, #0]
 8005e86:	07da      	lsls	r2, r3, #31
 8005e88:	d437      	bmi.n	8005efa <_printf_float+0x38a>
 8005e8a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005e8c:	ebaa 0903 	sub.w	r9, sl, r3
 8005e90:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005e92:	ebaa 0303 	sub.w	r3, sl, r3
 8005e96:	4599      	cmp	r9, r3
 8005e98:	bfa8      	it	ge
 8005e9a:	4699      	movge	r9, r3
 8005e9c:	f1b9 0f00 	cmp.w	r9, #0
 8005ea0:	dc33      	bgt.n	8005f0a <_printf_float+0x39a>
 8005ea2:	f04f 0800 	mov.w	r8, #0
 8005ea6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005eaa:	f104 0b1a 	add.w	fp, r4, #26
 8005eae:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005eb0:	ebaa 0303 	sub.w	r3, sl, r3
 8005eb4:	eba3 0309 	sub.w	r3, r3, r9
 8005eb8:	4543      	cmp	r3, r8
 8005eba:	f77f af7a 	ble.w	8005db2 <_printf_float+0x242>
 8005ebe:	2301      	movs	r3, #1
 8005ec0:	465a      	mov	r2, fp
 8005ec2:	4631      	mov	r1, r6
 8005ec4:	4628      	mov	r0, r5
 8005ec6:	47b8      	blx	r7
 8005ec8:	3001      	adds	r0, #1
 8005eca:	f43f aeac 	beq.w	8005c26 <_printf_float+0xb6>
 8005ece:	f108 0801 	add.w	r8, r8, #1
 8005ed2:	e7ec      	b.n	8005eae <_printf_float+0x33e>
 8005ed4:	4642      	mov	r2, r8
 8005ed6:	4631      	mov	r1, r6
 8005ed8:	4628      	mov	r0, r5
 8005eda:	47b8      	blx	r7
 8005edc:	3001      	adds	r0, #1
 8005ede:	d1c2      	bne.n	8005e66 <_printf_float+0x2f6>
 8005ee0:	e6a1      	b.n	8005c26 <_printf_float+0xb6>
 8005ee2:	2301      	movs	r3, #1
 8005ee4:	4631      	mov	r1, r6
 8005ee6:	4628      	mov	r0, r5
 8005ee8:	920a      	str	r2, [sp, #40]	@ 0x28
 8005eea:	47b8      	blx	r7
 8005eec:	3001      	adds	r0, #1
 8005eee:	f43f ae9a 	beq.w	8005c26 <_printf_float+0xb6>
 8005ef2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005ef4:	f10b 0b01 	add.w	fp, fp, #1
 8005ef8:	e7bb      	b.n	8005e72 <_printf_float+0x302>
 8005efa:	4631      	mov	r1, r6
 8005efc:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8005f00:	4628      	mov	r0, r5
 8005f02:	47b8      	blx	r7
 8005f04:	3001      	adds	r0, #1
 8005f06:	d1c0      	bne.n	8005e8a <_printf_float+0x31a>
 8005f08:	e68d      	b.n	8005c26 <_printf_float+0xb6>
 8005f0a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005f0c:	464b      	mov	r3, r9
 8005f0e:	4631      	mov	r1, r6
 8005f10:	4628      	mov	r0, r5
 8005f12:	4442      	add	r2, r8
 8005f14:	47b8      	blx	r7
 8005f16:	3001      	adds	r0, #1
 8005f18:	d1c3      	bne.n	8005ea2 <_printf_float+0x332>
 8005f1a:	e684      	b.n	8005c26 <_printf_float+0xb6>
 8005f1c:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8005f20:	f1ba 0f01 	cmp.w	sl, #1
 8005f24:	dc01      	bgt.n	8005f2a <_printf_float+0x3ba>
 8005f26:	07db      	lsls	r3, r3, #31
 8005f28:	d536      	bpl.n	8005f98 <_printf_float+0x428>
 8005f2a:	2301      	movs	r3, #1
 8005f2c:	4642      	mov	r2, r8
 8005f2e:	4631      	mov	r1, r6
 8005f30:	4628      	mov	r0, r5
 8005f32:	47b8      	blx	r7
 8005f34:	3001      	adds	r0, #1
 8005f36:	f43f ae76 	beq.w	8005c26 <_printf_float+0xb6>
 8005f3a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8005f3e:	4631      	mov	r1, r6
 8005f40:	4628      	mov	r0, r5
 8005f42:	47b8      	blx	r7
 8005f44:	3001      	adds	r0, #1
 8005f46:	f43f ae6e 	beq.w	8005c26 <_printf_float+0xb6>
 8005f4a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8005f4e:	2200      	movs	r2, #0
 8005f50:	2300      	movs	r3, #0
 8005f52:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005f56:	f7fa fd27 	bl	80009a8 <__aeabi_dcmpeq>
 8005f5a:	b9c0      	cbnz	r0, 8005f8e <_printf_float+0x41e>
 8005f5c:	4653      	mov	r3, sl
 8005f5e:	f108 0201 	add.w	r2, r8, #1
 8005f62:	4631      	mov	r1, r6
 8005f64:	4628      	mov	r0, r5
 8005f66:	47b8      	blx	r7
 8005f68:	3001      	adds	r0, #1
 8005f6a:	d10c      	bne.n	8005f86 <_printf_float+0x416>
 8005f6c:	e65b      	b.n	8005c26 <_printf_float+0xb6>
 8005f6e:	2301      	movs	r3, #1
 8005f70:	465a      	mov	r2, fp
 8005f72:	4631      	mov	r1, r6
 8005f74:	4628      	mov	r0, r5
 8005f76:	47b8      	blx	r7
 8005f78:	3001      	adds	r0, #1
 8005f7a:	f43f ae54 	beq.w	8005c26 <_printf_float+0xb6>
 8005f7e:	f108 0801 	add.w	r8, r8, #1
 8005f82:	45d0      	cmp	r8, sl
 8005f84:	dbf3      	blt.n	8005f6e <_printf_float+0x3fe>
 8005f86:	464b      	mov	r3, r9
 8005f88:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8005f8c:	e6e0      	b.n	8005d50 <_printf_float+0x1e0>
 8005f8e:	f04f 0800 	mov.w	r8, #0
 8005f92:	f104 0b1a 	add.w	fp, r4, #26
 8005f96:	e7f4      	b.n	8005f82 <_printf_float+0x412>
 8005f98:	2301      	movs	r3, #1
 8005f9a:	4642      	mov	r2, r8
 8005f9c:	e7e1      	b.n	8005f62 <_printf_float+0x3f2>
 8005f9e:	2301      	movs	r3, #1
 8005fa0:	464a      	mov	r2, r9
 8005fa2:	4631      	mov	r1, r6
 8005fa4:	4628      	mov	r0, r5
 8005fa6:	47b8      	blx	r7
 8005fa8:	3001      	adds	r0, #1
 8005faa:	f43f ae3c 	beq.w	8005c26 <_printf_float+0xb6>
 8005fae:	f108 0801 	add.w	r8, r8, #1
 8005fb2:	68e3      	ldr	r3, [r4, #12]
 8005fb4:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8005fb6:	1a5b      	subs	r3, r3, r1
 8005fb8:	4543      	cmp	r3, r8
 8005fba:	dcf0      	bgt.n	8005f9e <_printf_float+0x42e>
 8005fbc:	e6fd      	b.n	8005dba <_printf_float+0x24a>
 8005fbe:	f04f 0800 	mov.w	r8, #0
 8005fc2:	f104 0919 	add.w	r9, r4, #25
 8005fc6:	e7f4      	b.n	8005fb2 <_printf_float+0x442>

08005fc8 <_printf_common>:
 8005fc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005fcc:	4616      	mov	r6, r2
 8005fce:	4698      	mov	r8, r3
 8005fd0:	688a      	ldr	r2, [r1, #8]
 8005fd2:	690b      	ldr	r3, [r1, #16]
 8005fd4:	4607      	mov	r7, r0
 8005fd6:	4293      	cmp	r3, r2
 8005fd8:	bfb8      	it	lt
 8005fda:	4613      	movlt	r3, r2
 8005fdc:	6033      	str	r3, [r6, #0]
 8005fde:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005fe2:	460c      	mov	r4, r1
 8005fe4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005fe8:	b10a      	cbz	r2, 8005fee <_printf_common+0x26>
 8005fea:	3301      	adds	r3, #1
 8005fec:	6033      	str	r3, [r6, #0]
 8005fee:	6823      	ldr	r3, [r4, #0]
 8005ff0:	0699      	lsls	r1, r3, #26
 8005ff2:	bf42      	ittt	mi
 8005ff4:	6833      	ldrmi	r3, [r6, #0]
 8005ff6:	3302      	addmi	r3, #2
 8005ff8:	6033      	strmi	r3, [r6, #0]
 8005ffa:	6825      	ldr	r5, [r4, #0]
 8005ffc:	f015 0506 	ands.w	r5, r5, #6
 8006000:	d106      	bne.n	8006010 <_printf_common+0x48>
 8006002:	f104 0a19 	add.w	sl, r4, #25
 8006006:	68e3      	ldr	r3, [r4, #12]
 8006008:	6832      	ldr	r2, [r6, #0]
 800600a:	1a9b      	subs	r3, r3, r2
 800600c:	42ab      	cmp	r3, r5
 800600e:	dc2b      	bgt.n	8006068 <_printf_common+0xa0>
 8006010:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006014:	6822      	ldr	r2, [r4, #0]
 8006016:	3b00      	subs	r3, #0
 8006018:	bf18      	it	ne
 800601a:	2301      	movne	r3, #1
 800601c:	0692      	lsls	r2, r2, #26
 800601e:	d430      	bmi.n	8006082 <_printf_common+0xba>
 8006020:	4641      	mov	r1, r8
 8006022:	4638      	mov	r0, r7
 8006024:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006028:	47c8      	blx	r9
 800602a:	3001      	adds	r0, #1
 800602c:	d023      	beq.n	8006076 <_printf_common+0xae>
 800602e:	6823      	ldr	r3, [r4, #0]
 8006030:	6922      	ldr	r2, [r4, #16]
 8006032:	f003 0306 	and.w	r3, r3, #6
 8006036:	2b04      	cmp	r3, #4
 8006038:	bf14      	ite	ne
 800603a:	2500      	movne	r5, #0
 800603c:	6833      	ldreq	r3, [r6, #0]
 800603e:	f04f 0600 	mov.w	r6, #0
 8006042:	bf08      	it	eq
 8006044:	68e5      	ldreq	r5, [r4, #12]
 8006046:	f104 041a 	add.w	r4, r4, #26
 800604a:	bf08      	it	eq
 800604c:	1aed      	subeq	r5, r5, r3
 800604e:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8006052:	bf08      	it	eq
 8006054:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006058:	4293      	cmp	r3, r2
 800605a:	bfc4      	itt	gt
 800605c:	1a9b      	subgt	r3, r3, r2
 800605e:	18ed      	addgt	r5, r5, r3
 8006060:	42b5      	cmp	r5, r6
 8006062:	d11a      	bne.n	800609a <_printf_common+0xd2>
 8006064:	2000      	movs	r0, #0
 8006066:	e008      	b.n	800607a <_printf_common+0xb2>
 8006068:	2301      	movs	r3, #1
 800606a:	4652      	mov	r2, sl
 800606c:	4641      	mov	r1, r8
 800606e:	4638      	mov	r0, r7
 8006070:	47c8      	blx	r9
 8006072:	3001      	adds	r0, #1
 8006074:	d103      	bne.n	800607e <_printf_common+0xb6>
 8006076:	f04f 30ff 	mov.w	r0, #4294967295
 800607a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800607e:	3501      	adds	r5, #1
 8006080:	e7c1      	b.n	8006006 <_printf_common+0x3e>
 8006082:	2030      	movs	r0, #48	@ 0x30
 8006084:	18e1      	adds	r1, r4, r3
 8006086:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800608a:	1c5a      	adds	r2, r3, #1
 800608c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006090:	4422      	add	r2, r4
 8006092:	3302      	adds	r3, #2
 8006094:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006098:	e7c2      	b.n	8006020 <_printf_common+0x58>
 800609a:	2301      	movs	r3, #1
 800609c:	4622      	mov	r2, r4
 800609e:	4641      	mov	r1, r8
 80060a0:	4638      	mov	r0, r7
 80060a2:	47c8      	blx	r9
 80060a4:	3001      	adds	r0, #1
 80060a6:	d0e6      	beq.n	8006076 <_printf_common+0xae>
 80060a8:	3601      	adds	r6, #1
 80060aa:	e7d9      	b.n	8006060 <_printf_common+0x98>

080060ac <_printf_i>:
 80060ac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80060b0:	7e0f      	ldrb	r7, [r1, #24]
 80060b2:	4691      	mov	r9, r2
 80060b4:	2f78      	cmp	r7, #120	@ 0x78
 80060b6:	4680      	mov	r8, r0
 80060b8:	460c      	mov	r4, r1
 80060ba:	469a      	mov	sl, r3
 80060bc:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80060be:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80060c2:	d807      	bhi.n	80060d4 <_printf_i+0x28>
 80060c4:	2f62      	cmp	r7, #98	@ 0x62
 80060c6:	d80a      	bhi.n	80060de <_printf_i+0x32>
 80060c8:	2f00      	cmp	r7, #0
 80060ca:	f000 80d1 	beq.w	8006270 <_printf_i+0x1c4>
 80060ce:	2f58      	cmp	r7, #88	@ 0x58
 80060d0:	f000 80b8 	beq.w	8006244 <_printf_i+0x198>
 80060d4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80060d8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80060dc:	e03a      	b.n	8006154 <_printf_i+0xa8>
 80060de:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80060e2:	2b15      	cmp	r3, #21
 80060e4:	d8f6      	bhi.n	80060d4 <_printf_i+0x28>
 80060e6:	a101      	add	r1, pc, #4	@ (adr r1, 80060ec <_printf_i+0x40>)
 80060e8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80060ec:	08006145 	.word	0x08006145
 80060f0:	08006159 	.word	0x08006159
 80060f4:	080060d5 	.word	0x080060d5
 80060f8:	080060d5 	.word	0x080060d5
 80060fc:	080060d5 	.word	0x080060d5
 8006100:	080060d5 	.word	0x080060d5
 8006104:	08006159 	.word	0x08006159
 8006108:	080060d5 	.word	0x080060d5
 800610c:	080060d5 	.word	0x080060d5
 8006110:	080060d5 	.word	0x080060d5
 8006114:	080060d5 	.word	0x080060d5
 8006118:	08006257 	.word	0x08006257
 800611c:	08006183 	.word	0x08006183
 8006120:	08006211 	.word	0x08006211
 8006124:	080060d5 	.word	0x080060d5
 8006128:	080060d5 	.word	0x080060d5
 800612c:	08006279 	.word	0x08006279
 8006130:	080060d5 	.word	0x080060d5
 8006134:	08006183 	.word	0x08006183
 8006138:	080060d5 	.word	0x080060d5
 800613c:	080060d5 	.word	0x080060d5
 8006140:	08006219 	.word	0x08006219
 8006144:	6833      	ldr	r3, [r6, #0]
 8006146:	1d1a      	adds	r2, r3, #4
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	6032      	str	r2, [r6, #0]
 800614c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006150:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006154:	2301      	movs	r3, #1
 8006156:	e09c      	b.n	8006292 <_printf_i+0x1e6>
 8006158:	6833      	ldr	r3, [r6, #0]
 800615a:	6820      	ldr	r0, [r4, #0]
 800615c:	1d19      	adds	r1, r3, #4
 800615e:	6031      	str	r1, [r6, #0]
 8006160:	0606      	lsls	r6, r0, #24
 8006162:	d501      	bpl.n	8006168 <_printf_i+0xbc>
 8006164:	681d      	ldr	r5, [r3, #0]
 8006166:	e003      	b.n	8006170 <_printf_i+0xc4>
 8006168:	0645      	lsls	r5, r0, #25
 800616a:	d5fb      	bpl.n	8006164 <_printf_i+0xb8>
 800616c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006170:	2d00      	cmp	r5, #0
 8006172:	da03      	bge.n	800617c <_printf_i+0xd0>
 8006174:	232d      	movs	r3, #45	@ 0x2d
 8006176:	426d      	negs	r5, r5
 8006178:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800617c:	230a      	movs	r3, #10
 800617e:	4858      	ldr	r0, [pc, #352]	@ (80062e0 <_printf_i+0x234>)
 8006180:	e011      	b.n	80061a6 <_printf_i+0xfa>
 8006182:	6821      	ldr	r1, [r4, #0]
 8006184:	6833      	ldr	r3, [r6, #0]
 8006186:	0608      	lsls	r0, r1, #24
 8006188:	f853 5b04 	ldr.w	r5, [r3], #4
 800618c:	d402      	bmi.n	8006194 <_printf_i+0xe8>
 800618e:	0649      	lsls	r1, r1, #25
 8006190:	bf48      	it	mi
 8006192:	b2ad      	uxthmi	r5, r5
 8006194:	2f6f      	cmp	r7, #111	@ 0x6f
 8006196:	6033      	str	r3, [r6, #0]
 8006198:	bf14      	ite	ne
 800619a:	230a      	movne	r3, #10
 800619c:	2308      	moveq	r3, #8
 800619e:	4850      	ldr	r0, [pc, #320]	@ (80062e0 <_printf_i+0x234>)
 80061a0:	2100      	movs	r1, #0
 80061a2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80061a6:	6866      	ldr	r6, [r4, #4]
 80061a8:	2e00      	cmp	r6, #0
 80061aa:	60a6      	str	r6, [r4, #8]
 80061ac:	db05      	blt.n	80061ba <_printf_i+0x10e>
 80061ae:	6821      	ldr	r1, [r4, #0]
 80061b0:	432e      	orrs	r6, r5
 80061b2:	f021 0104 	bic.w	r1, r1, #4
 80061b6:	6021      	str	r1, [r4, #0]
 80061b8:	d04b      	beq.n	8006252 <_printf_i+0x1a6>
 80061ba:	4616      	mov	r6, r2
 80061bc:	fbb5 f1f3 	udiv	r1, r5, r3
 80061c0:	fb03 5711 	mls	r7, r3, r1, r5
 80061c4:	5dc7      	ldrb	r7, [r0, r7]
 80061c6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80061ca:	462f      	mov	r7, r5
 80061cc:	42bb      	cmp	r3, r7
 80061ce:	460d      	mov	r5, r1
 80061d0:	d9f4      	bls.n	80061bc <_printf_i+0x110>
 80061d2:	2b08      	cmp	r3, #8
 80061d4:	d10b      	bne.n	80061ee <_printf_i+0x142>
 80061d6:	6823      	ldr	r3, [r4, #0]
 80061d8:	07df      	lsls	r7, r3, #31
 80061da:	d508      	bpl.n	80061ee <_printf_i+0x142>
 80061dc:	6923      	ldr	r3, [r4, #16]
 80061de:	6861      	ldr	r1, [r4, #4]
 80061e0:	4299      	cmp	r1, r3
 80061e2:	bfde      	ittt	le
 80061e4:	2330      	movle	r3, #48	@ 0x30
 80061e6:	f806 3c01 	strble.w	r3, [r6, #-1]
 80061ea:	f106 36ff 	addle.w	r6, r6, #4294967295
 80061ee:	1b92      	subs	r2, r2, r6
 80061f0:	6122      	str	r2, [r4, #16]
 80061f2:	464b      	mov	r3, r9
 80061f4:	4621      	mov	r1, r4
 80061f6:	4640      	mov	r0, r8
 80061f8:	f8cd a000 	str.w	sl, [sp]
 80061fc:	aa03      	add	r2, sp, #12
 80061fe:	f7ff fee3 	bl	8005fc8 <_printf_common>
 8006202:	3001      	adds	r0, #1
 8006204:	d14a      	bne.n	800629c <_printf_i+0x1f0>
 8006206:	f04f 30ff 	mov.w	r0, #4294967295
 800620a:	b004      	add	sp, #16
 800620c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006210:	6823      	ldr	r3, [r4, #0]
 8006212:	f043 0320 	orr.w	r3, r3, #32
 8006216:	6023      	str	r3, [r4, #0]
 8006218:	2778      	movs	r7, #120	@ 0x78
 800621a:	4832      	ldr	r0, [pc, #200]	@ (80062e4 <_printf_i+0x238>)
 800621c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006220:	6823      	ldr	r3, [r4, #0]
 8006222:	6831      	ldr	r1, [r6, #0]
 8006224:	061f      	lsls	r7, r3, #24
 8006226:	f851 5b04 	ldr.w	r5, [r1], #4
 800622a:	d402      	bmi.n	8006232 <_printf_i+0x186>
 800622c:	065f      	lsls	r7, r3, #25
 800622e:	bf48      	it	mi
 8006230:	b2ad      	uxthmi	r5, r5
 8006232:	6031      	str	r1, [r6, #0]
 8006234:	07d9      	lsls	r1, r3, #31
 8006236:	bf44      	itt	mi
 8006238:	f043 0320 	orrmi.w	r3, r3, #32
 800623c:	6023      	strmi	r3, [r4, #0]
 800623e:	b11d      	cbz	r5, 8006248 <_printf_i+0x19c>
 8006240:	2310      	movs	r3, #16
 8006242:	e7ad      	b.n	80061a0 <_printf_i+0xf4>
 8006244:	4826      	ldr	r0, [pc, #152]	@ (80062e0 <_printf_i+0x234>)
 8006246:	e7e9      	b.n	800621c <_printf_i+0x170>
 8006248:	6823      	ldr	r3, [r4, #0]
 800624a:	f023 0320 	bic.w	r3, r3, #32
 800624e:	6023      	str	r3, [r4, #0]
 8006250:	e7f6      	b.n	8006240 <_printf_i+0x194>
 8006252:	4616      	mov	r6, r2
 8006254:	e7bd      	b.n	80061d2 <_printf_i+0x126>
 8006256:	6833      	ldr	r3, [r6, #0]
 8006258:	6825      	ldr	r5, [r4, #0]
 800625a:	1d18      	adds	r0, r3, #4
 800625c:	6961      	ldr	r1, [r4, #20]
 800625e:	6030      	str	r0, [r6, #0]
 8006260:	062e      	lsls	r6, r5, #24
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	d501      	bpl.n	800626a <_printf_i+0x1be>
 8006266:	6019      	str	r1, [r3, #0]
 8006268:	e002      	b.n	8006270 <_printf_i+0x1c4>
 800626a:	0668      	lsls	r0, r5, #25
 800626c:	d5fb      	bpl.n	8006266 <_printf_i+0x1ba>
 800626e:	8019      	strh	r1, [r3, #0]
 8006270:	2300      	movs	r3, #0
 8006272:	4616      	mov	r6, r2
 8006274:	6123      	str	r3, [r4, #16]
 8006276:	e7bc      	b.n	80061f2 <_printf_i+0x146>
 8006278:	6833      	ldr	r3, [r6, #0]
 800627a:	2100      	movs	r1, #0
 800627c:	1d1a      	adds	r2, r3, #4
 800627e:	6032      	str	r2, [r6, #0]
 8006280:	681e      	ldr	r6, [r3, #0]
 8006282:	6862      	ldr	r2, [r4, #4]
 8006284:	4630      	mov	r0, r6
 8006286:	f000 f9fc 	bl	8006682 <memchr>
 800628a:	b108      	cbz	r0, 8006290 <_printf_i+0x1e4>
 800628c:	1b80      	subs	r0, r0, r6
 800628e:	6060      	str	r0, [r4, #4]
 8006290:	6863      	ldr	r3, [r4, #4]
 8006292:	6123      	str	r3, [r4, #16]
 8006294:	2300      	movs	r3, #0
 8006296:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800629a:	e7aa      	b.n	80061f2 <_printf_i+0x146>
 800629c:	4632      	mov	r2, r6
 800629e:	4649      	mov	r1, r9
 80062a0:	4640      	mov	r0, r8
 80062a2:	6923      	ldr	r3, [r4, #16]
 80062a4:	47d0      	blx	sl
 80062a6:	3001      	adds	r0, #1
 80062a8:	d0ad      	beq.n	8006206 <_printf_i+0x15a>
 80062aa:	6823      	ldr	r3, [r4, #0]
 80062ac:	079b      	lsls	r3, r3, #30
 80062ae:	d413      	bmi.n	80062d8 <_printf_i+0x22c>
 80062b0:	68e0      	ldr	r0, [r4, #12]
 80062b2:	9b03      	ldr	r3, [sp, #12]
 80062b4:	4298      	cmp	r0, r3
 80062b6:	bfb8      	it	lt
 80062b8:	4618      	movlt	r0, r3
 80062ba:	e7a6      	b.n	800620a <_printf_i+0x15e>
 80062bc:	2301      	movs	r3, #1
 80062be:	4632      	mov	r2, r6
 80062c0:	4649      	mov	r1, r9
 80062c2:	4640      	mov	r0, r8
 80062c4:	47d0      	blx	sl
 80062c6:	3001      	adds	r0, #1
 80062c8:	d09d      	beq.n	8006206 <_printf_i+0x15a>
 80062ca:	3501      	adds	r5, #1
 80062cc:	68e3      	ldr	r3, [r4, #12]
 80062ce:	9903      	ldr	r1, [sp, #12]
 80062d0:	1a5b      	subs	r3, r3, r1
 80062d2:	42ab      	cmp	r3, r5
 80062d4:	dcf2      	bgt.n	80062bc <_printf_i+0x210>
 80062d6:	e7eb      	b.n	80062b0 <_printf_i+0x204>
 80062d8:	2500      	movs	r5, #0
 80062da:	f104 0619 	add.w	r6, r4, #25
 80062de:	e7f5      	b.n	80062cc <_printf_i+0x220>
 80062e0:	080089b4 	.word	0x080089b4
 80062e4:	080089c5 	.word	0x080089c5

080062e8 <std>:
 80062e8:	2300      	movs	r3, #0
 80062ea:	b510      	push	{r4, lr}
 80062ec:	4604      	mov	r4, r0
 80062ee:	e9c0 3300 	strd	r3, r3, [r0]
 80062f2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80062f6:	6083      	str	r3, [r0, #8]
 80062f8:	8181      	strh	r1, [r0, #12]
 80062fa:	6643      	str	r3, [r0, #100]	@ 0x64
 80062fc:	81c2      	strh	r2, [r0, #14]
 80062fe:	6183      	str	r3, [r0, #24]
 8006300:	4619      	mov	r1, r3
 8006302:	2208      	movs	r2, #8
 8006304:	305c      	adds	r0, #92	@ 0x5c
 8006306:	f000 f93c 	bl	8006582 <memset>
 800630a:	4b0d      	ldr	r3, [pc, #52]	@ (8006340 <std+0x58>)
 800630c:	6224      	str	r4, [r4, #32]
 800630e:	6263      	str	r3, [r4, #36]	@ 0x24
 8006310:	4b0c      	ldr	r3, [pc, #48]	@ (8006344 <std+0x5c>)
 8006312:	62a3      	str	r3, [r4, #40]	@ 0x28
 8006314:	4b0c      	ldr	r3, [pc, #48]	@ (8006348 <std+0x60>)
 8006316:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8006318:	4b0c      	ldr	r3, [pc, #48]	@ (800634c <std+0x64>)
 800631a:	6323      	str	r3, [r4, #48]	@ 0x30
 800631c:	4b0c      	ldr	r3, [pc, #48]	@ (8006350 <std+0x68>)
 800631e:	429c      	cmp	r4, r3
 8006320:	d006      	beq.n	8006330 <std+0x48>
 8006322:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8006326:	4294      	cmp	r4, r2
 8006328:	d002      	beq.n	8006330 <std+0x48>
 800632a:	33d0      	adds	r3, #208	@ 0xd0
 800632c:	429c      	cmp	r4, r3
 800632e:	d105      	bne.n	800633c <std+0x54>
 8006330:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006334:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006338:	f000 b9a0 	b.w	800667c <__retarget_lock_init_recursive>
 800633c:	bd10      	pop	{r4, pc}
 800633e:	bf00      	nop
 8006340:	080064fd 	.word	0x080064fd
 8006344:	0800651f 	.word	0x0800651f
 8006348:	08006557 	.word	0x08006557
 800634c:	0800657b 	.word	0x0800657b
 8006350:	20000354 	.word	0x20000354

08006354 <stdio_exit_handler>:
 8006354:	4a02      	ldr	r2, [pc, #8]	@ (8006360 <stdio_exit_handler+0xc>)
 8006356:	4903      	ldr	r1, [pc, #12]	@ (8006364 <stdio_exit_handler+0x10>)
 8006358:	4803      	ldr	r0, [pc, #12]	@ (8006368 <stdio_exit_handler+0x14>)
 800635a:	f000 b869 	b.w	8006430 <_fwalk_sglue>
 800635e:	bf00      	nop
 8006360:	2000000c 	.word	0x2000000c
 8006364:	08008299 	.word	0x08008299
 8006368:	2000001c 	.word	0x2000001c

0800636c <cleanup_stdio>:
 800636c:	6841      	ldr	r1, [r0, #4]
 800636e:	4b0c      	ldr	r3, [pc, #48]	@ (80063a0 <cleanup_stdio+0x34>)
 8006370:	b510      	push	{r4, lr}
 8006372:	4299      	cmp	r1, r3
 8006374:	4604      	mov	r4, r0
 8006376:	d001      	beq.n	800637c <cleanup_stdio+0x10>
 8006378:	f001 ff8e 	bl	8008298 <_fflush_r>
 800637c:	68a1      	ldr	r1, [r4, #8]
 800637e:	4b09      	ldr	r3, [pc, #36]	@ (80063a4 <cleanup_stdio+0x38>)
 8006380:	4299      	cmp	r1, r3
 8006382:	d002      	beq.n	800638a <cleanup_stdio+0x1e>
 8006384:	4620      	mov	r0, r4
 8006386:	f001 ff87 	bl	8008298 <_fflush_r>
 800638a:	68e1      	ldr	r1, [r4, #12]
 800638c:	4b06      	ldr	r3, [pc, #24]	@ (80063a8 <cleanup_stdio+0x3c>)
 800638e:	4299      	cmp	r1, r3
 8006390:	d004      	beq.n	800639c <cleanup_stdio+0x30>
 8006392:	4620      	mov	r0, r4
 8006394:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006398:	f001 bf7e 	b.w	8008298 <_fflush_r>
 800639c:	bd10      	pop	{r4, pc}
 800639e:	bf00      	nop
 80063a0:	20000354 	.word	0x20000354
 80063a4:	200003bc 	.word	0x200003bc
 80063a8:	20000424 	.word	0x20000424

080063ac <global_stdio_init.part.0>:
 80063ac:	b510      	push	{r4, lr}
 80063ae:	4b0b      	ldr	r3, [pc, #44]	@ (80063dc <global_stdio_init.part.0+0x30>)
 80063b0:	4c0b      	ldr	r4, [pc, #44]	@ (80063e0 <global_stdio_init.part.0+0x34>)
 80063b2:	4a0c      	ldr	r2, [pc, #48]	@ (80063e4 <global_stdio_init.part.0+0x38>)
 80063b4:	4620      	mov	r0, r4
 80063b6:	601a      	str	r2, [r3, #0]
 80063b8:	2104      	movs	r1, #4
 80063ba:	2200      	movs	r2, #0
 80063bc:	f7ff ff94 	bl	80062e8 <std>
 80063c0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80063c4:	2201      	movs	r2, #1
 80063c6:	2109      	movs	r1, #9
 80063c8:	f7ff ff8e 	bl	80062e8 <std>
 80063cc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80063d0:	2202      	movs	r2, #2
 80063d2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80063d6:	2112      	movs	r1, #18
 80063d8:	f7ff bf86 	b.w	80062e8 <std>
 80063dc:	2000048c 	.word	0x2000048c
 80063e0:	20000354 	.word	0x20000354
 80063e4:	08006355 	.word	0x08006355

080063e8 <__sfp_lock_acquire>:
 80063e8:	4801      	ldr	r0, [pc, #4]	@ (80063f0 <__sfp_lock_acquire+0x8>)
 80063ea:	f000 b948 	b.w	800667e <__retarget_lock_acquire_recursive>
 80063ee:	bf00      	nop
 80063f0:	20000495 	.word	0x20000495

080063f4 <__sfp_lock_release>:
 80063f4:	4801      	ldr	r0, [pc, #4]	@ (80063fc <__sfp_lock_release+0x8>)
 80063f6:	f000 b943 	b.w	8006680 <__retarget_lock_release_recursive>
 80063fa:	bf00      	nop
 80063fc:	20000495 	.word	0x20000495

08006400 <__sinit>:
 8006400:	b510      	push	{r4, lr}
 8006402:	4604      	mov	r4, r0
 8006404:	f7ff fff0 	bl	80063e8 <__sfp_lock_acquire>
 8006408:	6a23      	ldr	r3, [r4, #32]
 800640a:	b11b      	cbz	r3, 8006414 <__sinit+0x14>
 800640c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006410:	f7ff bff0 	b.w	80063f4 <__sfp_lock_release>
 8006414:	4b04      	ldr	r3, [pc, #16]	@ (8006428 <__sinit+0x28>)
 8006416:	6223      	str	r3, [r4, #32]
 8006418:	4b04      	ldr	r3, [pc, #16]	@ (800642c <__sinit+0x2c>)
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	2b00      	cmp	r3, #0
 800641e:	d1f5      	bne.n	800640c <__sinit+0xc>
 8006420:	f7ff ffc4 	bl	80063ac <global_stdio_init.part.0>
 8006424:	e7f2      	b.n	800640c <__sinit+0xc>
 8006426:	bf00      	nop
 8006428:	0800636d 	.word	0x0800636d
 800642c:	2000048c 	.word	0x2000048c

08006430 <_fwalk_sglue>:
 8006430:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006434:	4607      	mov	r7, r0
 8006436:	4688      	mov	r8, r1
 8006438:	4614      	mov	r4, r2
 800643a:	2600      	movs	r6, #0
 800643c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006440:	f1b9 0901 	subs.w	r9, r9, #1
 8006444:	d505      	bpl.n	8006452 <_fwalk_sglue+0x22>
 8006446:	6824      	ldr	r4, [r4, #0]
 8006448:	2c00      	cmp	r4, #0
 800644a:	d1f7      	bne.n	800643c <_fwalk_sglue+0xc>
 800644c:	4630      	mov	r0, r6
 800644e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006452:	89ab      	ldrh	r3, [r5, #12]
 8006454:	2b01      	cmp	r3, #1
 8006456:	d907      	bls.n	8006468 <_fwalk_sglue+0x38>
 8006458:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800645c:	3301      	adds	r3, #1
 800645e:	d003      	beq.n	8006468 <_fwalk_sglue+0x38>
 8006460:	4629      	mov	r1, r5
 8006462:	4638      	mov	r0, r7
 8006464:	47c0      	blx	r8
 8006466:	4306      	orrs	r6, r0
 8006468:	3568      	adds	r5, #104	@ 0x68
 800646a:	e7e9      	b.n	8006440 <_fwalk_sglue+0x10>

0800646c <iprintf>:
 800646c:	b40f      	push	{r0, r1, r2, r3}
 800646e:	b507      	push	{r0, r1, r2, lr}
 8006470:	4906      	ldr	r1, [pc, #24]	@ (800648c <iprintf+0x20>)
 8006472:	ab04      	add	r3, sp, #16
 8006474:	6808      	ldr	r0, [r1, #0]
 8006476:	f853 2b04 	ldr.w	r2, [r3], #4
 800647a:	6881      	ldr	r1, [r0, #8]
 800647c:	9301      	str	r3, [sp, #4]
 800647e:	f001 fd73 	bl	8007f68 <_vfiprintf_r>
 8006482:	b003      	add	sp, #12
 8006484:	f85d eb04 	ldr.w	lr, [sp], #4
 8006488:	b004      	add	sp, #16
 800648a:	4770      	bx	lr
 800648c:	20000018 	.word	0x20000018

08006490 <sniprintf>:
 8006490:	b40c      	push	{r2, r3}
 8006492:	b530      	push	{r4, r5, lr}
 8006494:	4b18      	ldr	r3, [pc, #96]	@ (80064f8 <sniprintf+0x68>)
 8006496:	1e0c      	subs	r4, r1, #0
 8006498:	681d      	ldr	r5, [r3, #0]
 800649a:	b09d      	sub	sp, #116	@ 0x74
 800649c:	da08      	bge.n	80064b0 <sniprintf+0x20>
 800649e:	238b      	movs	r3, #139	@ 0x8b
 80064a0:	f04f 30ff 	mov.w	r0, #4294967295
 80064a4:	602b      	str	r3, [r5, #0]
 80064a6:	b01d      	add	sp, #116	@ 0x74
 80064a8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80064ac:	b002      	add	sp, #8
 80064ae:	4770      	bx	lr
 80064b0:	f44f 7302 	mov.w	r3, #520	@ 0x208
 80064b4:	f8ad 3014 	strh.w	r3, [sp, #20]
 80064b8:	f04f 0300 	mov.w	r3, #0
 80064bc:	931b      	str	r3, [sp, #108]	@ 0x6c
 80064be:	bf0c      	ite	eq
 80064c0:	4623      	moveq	r3, r4
 80064c2:	f104 33ff 	addne.w	r3, r4, #4294967295
 80064c6:	9304      	str	r3, [sp, #16]
 80064c8:	9307      	str	r3, [sp, #28]
 80064ca:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80064ce:	9002      	str	r0, [sp, #8]
 80064d0:	9006      	str	r0, [sp, #24]
 80064d2:	f8ad 3016 	strh.w	r3, [sp, #22]
 80064d6:	4628      	mov	r0, r5
 80064d8:	ab21      	add	r3, sp, #132	@ 0x84
 80064da:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80064dc:	a902      	add	r1, sp, #8
 80064de:	9301      	str	r3, [sp, #4]
 80064e0:	f001 fc1e 	bl	8007d20 <_svfiprintf_r>
 80064e4:	1c43      	adds	r3, r0, #1
 80064e6:	bfbc      	itt	lt
 80064e8:	238b      	movlt	r3, #139	@ 0x8b
 80064ea:	602b      	strlt	r3, [r5, #0]
 80064ec:	2c00      	cmp	r4, #0
 80064ee:	d0da      	beq.n	80064a6 <sniprintf+0x16>
 80064f0:	2200      	movs	r2, #0
 80064f2:	9b02      	ldr	r3, [sp, #8]
 80064f4:	701a      	strb	r2, [r3, #0]
 80064f6:	e7d6      	b.n	80064a6 <sniprintf+0x16>
 80064f8:	20000018 	.word	0x20000018

080064fc <__sread>:
 80064fc:	b510      	push	{r4, lr}
 80064fe:	460c      	mov	r4, r1
 8006500:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006504:	f000 f86c 	bl	80065e0 <_read_r>
 8006508:	2800      	cmp	r0, #0
 800650a:	bfab      	itete	ge
 800650c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800650e:	89a3      	ldrhlt	r3, [r4, #12]
 8006510:	181b      	addge	r3, r3, r0
 8006512:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8006516:	bfac      	ite	ge
 8006518:	6563      	strge	r3, [r4, #84]	@ 0x54
 800651a:	81a3      	strhlt	r3, [r4, #12]
 800651c:	bd10      	pop	{r4, pc}

0800651e <__swrite>:
 800651e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006522:	461f      	mov	r7, r3
 8006524:	898b      	ldrh	r3, [r1, #12]
 8006526:	4605      	mov	r5, r0
 8006528:	05db      	lsls	r3, r3, #23
 800652a:	460c      	mov	r4, r1
 800652c:	4616      	mov	r6, r2
 800652e:	d505      	bpl.n	800653c <__swrite+0x1e>
 8006530:	2302      	movs	r3, #2
 8006532:	2200      	movs	r2, #0
 8006534:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006538:	f000 f840 	bl	80065bc <_lseek_r>
 800653c:	89a3      	ldrh	r3, [r4, #12]
 800653e:	4632      	mov	r2, r6
 8006540:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006544:	81a3      	strh	r3, [r4, #12]
 8006546:	4628      	mov	r0, r5
 8006548:	463b      	mov	r3, r7
 800654a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800654e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006552:	f000 b857 	b.w	8006604 <_write_r>

08006556 <__sseek>:
 8006556:	b510      	push	{r4, lr}
 8006558:	460c      	mov	r4, r1
 800655a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800655e:	f000 f82d 	bl	80065bc <_lseek_r>
 8006562:	1c43      	adds	r3, r0, #1
 8006564:	89a3      	ldrh	r3, [r4, #12]
 8006566:	bf15      	itete	ne
 8006568:	6560      	strne	r0, [r4, #84]	@ 0x54
 800656a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800656e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8006572:	81a3      	strheq	r3, [r4, #12]
 8006574:	bf18      	it	ne
 8006576:	81a3      	strhne	r3, [r4, #12]
 8006578:	bd10      	pop	{r4, pc}

0800657a <__sclose>:
 800657a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800657e:	f000 b80d 	b.w	800659c <_close_r>

08006582 <memset>:
 8006582:	4603      	mov	r3, r0
 8006584:	4402      	add	r2, r0
 8006586:	4293      	cmp	r3, r2
 8006588:	d100      	bne.n	800658c <memset+0xa>
 800658a:	4770      	bx	lr
 800658c:	f803 1b01 	strb.w	r1, [r3], #1
 8006590:	e7f9      	b.n	8006586 <memset+0x4>
	...

08006594 <_localeconv_r>:
 8006594:	4800      	ldr	r0, [pc, #0]	@ (8006598 <_localeconv_r+0x4>)
 8006596:	4770      	bx	lr
 8006598:	20000158 	.word	0x20000158

0800659c <_close_r>:
 800659c:	b538      	push	{r3, r4, r5, lr}
 800659e:	2300      	movs	r3, #0
 80065a0:	4d05      	ldr	r5, [pc, #20]	@ (80065b8 <_close_r+0x1c>)
 80065a2:	4604      	mov	r4, r0
 80065a4:	4608      	mov	r0, r1
 80065a6:	602b      	str	r3, [r5, #0]
 80065a8:	f7fb fbc1 	bl	8001d2e <_close>
 80065ac:	1c43      	adds	r3, r0, #1
 80065ae:	d102      	bne.n	80065b6 <_close_r+0x1a>
 80065b0:	682b      	ldr	r3, [r5, #0]
 80065b2:	b103      	cbz	r3, 80065b6 <_close_r+0x1a>
 80065b4:	6023      	str	r3, [r4, #0]
 80065b6:	bd38      	pop	{r3, r4, r5, pc}
 80065b8:	20000490 	.word	0x20000490

080065bc <_lseek_r>:
 80065bc:	b538      	push	{r3, r4, r5, lr}
 80065be:	4604      	mov	r4, r0
 80065c0:	4608      	mov	r0, r1
 80065c2:	4611      	mov	r1, r2
 80065c4:	2200      	movs	r2, #0
 80065c6:	4d05      	ldr	r5, [pc, #20]	@ (80065dc <_lseek_r+0x20>)
 80065c8:	602a      	str	r2, [r5, #0]
 80065ca:	461a      	mov	r2, r3
 80065cc:	f7fb fbd3 	bl	8001d76 <_lseek>
 80065d0:	1c43      	adds	r3, r0, #1
 80065d2:	d102      	bne.n	80065da <_lseek_r+0x1e>
 80065d4:	682b      	ldr	r3, [r5, #0]
 80065d6:	b103      	cbz	r3, 80065da <_lseek_r+0x1e>
 80065d8:	6023      	str	r3, [r4, #0]
 80065da:	bd38      	pop	{r3, r4, r5, pc}
 80065dc:	20000490 	.word	0x20000490

080065e0 <_read_r>:
 80065e0:	b538      	push	{r3, r4, r5, lr}
 80065e2:	4604      	mov	r4, r0
 80065e4:	4608      	mov	r0, r1
 80065e6:	4611      	mov	r1, r2
 80065e8:	2200      	movs	r2, #0
 80065ea:	4d05      	ldr	r5, [pc, #20]	@ (8006600 <_read_r+0x20>)
 80065ec:	602a      	str	r2, [r5, #0]
 80065ee:	461a      	mov	r2, r3
 80065f0:	f7fb fb64 	bl	8001cbc <_read>
 80065f4:	1c43      	adds	r3, r0, #1
 80065f6:	d102      	bne.n	80065fe <_read_r+0x1e>
 80065f8:	682b      	ldr	r3, [r5, #0]
 80065fa:	b103      	cbz	r3, 80065fe <_read_r+0x1e>
 80065fc:	6023      	str	r3, [r4, #0]
 80065fe:	bd38      	pop	{r3, r4, r5, pc}
 8006600:	20000490 	.word	0x20000490

08006604 <_write_r>:
 8006604:	b538      	push	{r3, r4, r5, lr}
 8006606:	4604      	mov	r4, r0
 8006608:	4608      	mov	r0, r1
 800660a:	4611      	mov	r1, r2
 800660c:	2200      	movs	r2, #0
 800660e:	4d05      	ldr	r5, [pc, #20]	@ (8006624 <_write_r+0x20>)
 8006610:	602a      	str	r2, [r5, #0]
 8006612:	461a      	mov	r2, r3
 8006614:	f7fb fb6f 	bl	8001cf6 <_write>
 8006618:	1c43      	adds	r3, r0, #1
 800661a:	d102      	bne.n	8006622 <_write_r+0x1e>
 800661c:	682b      	ldr	r3, [r5, #0]
 800661e:	b103      	cbz	r3, 8006622 <_write_r+0x1e>
 8006620:	6023      	str	r3, [r4, #0]
 8006622:	bd38      	pop	{r3, r4, r5, pc}
 8006624:	20000490 	.word	0x20000490

08006628 <__errno>:
 8006628:	4b01      	ldr	r3, [pc, #4]	@ (8006630 <__errno+0x8>)
 800662a:	6818      	ldr	r0, [r3, #0]
 800662c:	4770      	bx	lr
 800662e:	bf00      	nop
 8006630:	20000018 	.word	0x20000018

08006634 <__libc_init_array>:
 8006634:	b570      	push	{r4, r5, r6, lr}
 8006636:	2600      	movs	r6, #0
 8006638:	4d0c      	ldr	r5, [pc, #48]	@ (800666c <__libc_init_array+0x38>)
 800663a:	4c0d      	ldr	r4, [pc, #52]	@ (8006670 <__libc_init_array+0x3c>)
 800663c:	1b64      	subs	r4, r4, r5
 800663e:	10a4      	asrs	r4, r4, #2
 8006640:	42a6      	cmp	r6, r4
 8006642:	d109      	bne.n	8006658 <__libc_init_array+0x24>
 8006644:	f002 f8a8 	bl	8008798 <_init>
 8006648:	2600      	movs	r6, #0
 800664a:	4d0a      	ldr	r5, [pc, #40]	@ (8006674 <__libc_init_array+0x40>)
 800664c:	4c0a      	ldr	r4, [pc, #40]	@ (8006678 <__libc_init_array+0x44>)
 800664e:	1b64      	subs	r4, r4, r5
 8006650:	10a4      	asrs	r4, r4, #2
 8006652:	42a6      	cmp	r6, r4
 8006654:	d105      	bne.n	8006662 <__libc_init_array+0x2e>
 8006656:	bd70      	pop	{r4, r5, r6, pc}
 8006658:	f855 3b04 	ldr.w	r3, [r5], #4
 800665c:	4798      	blx	r3
 800665e:	3601      	adds	r6, #1
 8006660:	e7ee      	b.n	8006640 <__libc_init_array+0xc>
 8006662:	f855 3b04 	ldr.w	r3, [r5], #4
 8006666:	4798      	blx	r3
 8006668:	3601      	adds	r6, #1
 800666a:	e7f2      	b.n	8006652 <__libc_init_array+0x1e>
 800666c:	08008d1c 	.word	0x08008d1c
 8006670:	08008d1c 	.word	0x08008d1c
 8006674:	08008d1c 	.word	0x08008d1c
 8006678:	08008d20 	.word	0x08008d20

0800667c <__retarget_lock_init_recursive>:
 800667c:	4770      	bx	lr

0800667e <__retarget_lock_acquire_recursive>:
 800667e:	4770      	bx	lr

08006680 <__retarget_lock_release_recursive>:
 8006680:	4770      	bx	lr

08006682 <memchr>:
 8006682:	4603      	mov	r3, r0
 8006684:	b510      	push	{r4, lr}
 8006686:	b2c9      	uxtb	r1, r1
 8006688:	4402      	add	r2, r0
 800668a:	4293      	cmp	r3, r2
 800668c:	4618      	mov	r0, r3
 800668e:	d101      	bne.n	8006694 <memchr+0x12>
 8006690:	2000      	movs	r0, #0
 8006692:	e003      	b.n	800669c <memchr+0x1a>
 8006694:	7804      	ldrb	r4, [r0, #0]
 8006696:	3301      	adds	r3, #1
 8006698:	428c      	cmp	r4, r1
 800669a:	d1f6      	bne.n	800668a <memchr+0x8>
 800669c:	bd10      	pop	{r4, pc}

0800669e <memcpy>:
 800669e:	440a      	add	r2, r1
 80066a0:	4291      	cmp	r1, r2
 80066a2:	f100 33ff 	add.w	r3, r0, #4294967295
 80066a6:	d100      	bne.n	80066aa <memcpy+0xc>
 80066a8:	4770      	bx	lr
 80066aa:	b510      	push	{r4, lr}
 80066ac:	f811 4b01 	ldrb.w	r4, [r1], #1
 80066b0:	4291      	cmp	r1, r2
 80066b2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80066b6:	d1f9      	bne.n	80066ac <memcpy+0xe>
 80066b8:	bd10      	pop	{r4, pc}

080066ba <quorem>:
 80066ba:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80066be:	6903      	ldr	r3, [r0, #16]
 80066c0:	690c      	ldr	r4, [r1, #16]
 80066c2:	4607      	mov	r7, r0
 80066c4:	42a3      	cmp	r3, r4
 80066c6:	db7e      	blt.n	80067c6 <quorem+0x10c>
 80066c8:	3c01      	subs	r4, #1
 80066ca:	00a3      	lsls	r3, r4, #2
 80066cc:	f100 0514 	add.w	r5, r0, #20
 80066d0:	f101 0814 	add.w	r8, r1, #20
 80066d4:	9300      	str	r3, [sp, #0]
 80066d6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80066da:	9301      	str	r3, [sp, #4]
 80066dc:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80066e0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80066e4:	3301      	adds	r3, #1
 80066e6:	429a      	cmp	r2, r3
 80066e8:	fbb2 f6f3 	udiv	r6, r2, r3
 80066ec:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80066f0:	d32e      	bcc.n	8006750 <quorem+0x96>
 80066f2:	f04f 0a00 	mov.w	sl, #0
 80066f6:	46c4      	mov	ip, r8
 80066f8:	46ae      	mov	lr, r5
 80066fa:	46d3      	mov	fp, sl
 80066fc:	f85c 3b04 	ldr.w	r3, [ip], #4
 8006700:	b298      	uxth	r0, r3
 8006702:	fb06 a000 	mla	r0, r6, r0, sl
 8006706:	0c1b      	lsrs	r3, r3, #16
 8006708:	0c02      	lsrs	r2, r0, #16
 800670a:	fb06 2303 	mla	r3, r6, r3, r2
 800670e:	f8de 2000 	ldr.w	r2, [lr]
 8006712:	b280      	uxth	r0, r0
 8006714:	b292      	uxth	r2, r2
 8006716:	1a12      	subs	r2, r2, r0
 8006718:	445a      	add	r2, fp
 800671a:	f8de 0000 	ldr.w	r0, [lr]
 800671e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006722:	b29b      	uxth	r3, r3
 8006724:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8006728:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800672c:	b292      	uxth	r2, r2
 800672e:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8006732:	45e1      	cmp	r9, ip
 8006734:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8006738:	f84e 2b04 	str.w	r2, [lr], #4
 800673c:	d2de      	bcs.n	80066fc <quorem+0x42>
 800673e:	9b00      	ldr	r3, [sp, #0]
 8006740:	58eb      	ldr	r3, [r5, r3]
 8006742:	b92b      	cbnz	r3, 8006750 <quorem+0x96>
 8006744:	9b01      	ldr	r3, [sp, #4]
 8006746:	3b04      	subs	r3, #4
 8006748:	429d      	cmp	r5, r3
 800674a:	461a      	mov	r2, r3
 800674c:	d32f      	bcc.n	80067ae <quorem+0xf4>
 800674e:	613c      	str	r4, [r7, #16]
 8006750:	4638      	mov	r0, r7
 8006752:	f001 f981 	bl	8007a58 <__mcmp>
 8006756:	2800      	cmp	r0, #0
 8006758:	db25      	blt.n	80067a6 <quorem+0xec>
 800675a:	4629      	mov	r1, r5
 800675c:	2000      	movs	r0, #0
 800675e:	f858 2b04 	ldr.w	r2, [r8], #4
 8006762:	f8d1 c000 	ldr.w	ip, [r1]
 8006766:	fa1f fe82 	uxth.w	lr, r2
 800676a:	fa1f f38c 	uxth.w	r3, ip
 800676e:	eba3 030e 	sub.w	r3, r3, lr
 8006772:	4403      	add	r3, r0
 8006774:	0c12      	lsrs	r2, r2, #16
 8006776:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800677a:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800677e:	b29b      	uxth	r3, r3
 8006780:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006784:	45c1      	cmp	r9, r8
 8006786:	ea4f 4022 	mov.w	r0, r2, asr #16
 800678a:	f841 3b04 	str.w	r3, [r1], #4
 800678e:	d2e6      	bcs.n	800675e <quorem+0xa4>
 8006790:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006794:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006798:	b922      	cbnz	r2, 80067a4 <quorem+0xea>
 800679a:	3b04      	subs	r3, #4
 800679c:	429d      	cmp	r5, r3
 800679e:	461a      	mov	r2, r3
 80067a0:	d30b      	bcc.n	80067ba <quorem+0x100>
 80067a2:	613c      	str	r4, [r7, #16]
 80067a4:	3601      	adds	r6, #1
 80067a6:	4630      	mov	r0, r6
 80067a8:	b003      	add	sp, #12
 80067aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80067ae:	6812      	ldr	r2, [r2, #0]
 80067b0:	3b04      	subs	r3, #4
 80067b2:	2a00      	cmp	r2, #0
 80067b4:	d1cb      	bne.n	800674e <quorem+0x94>
 80067b6:	3c01      	subs	r4, #1
 80067b8:	e7c6      	b.n	8006748 <quorem+0x8e>
 80067ba:	6812      	ldr	r2, [r2, #0]
 80067bc:	3b04      	subs	r3, #4
 80067be:	2a00      	cmp	r2, #0
 80067c0:	d1ef      	bne.n	80067a2 <quorem+0xe8>
 80067c2:	3c01      	subs	r4, #1
 80067c4:	e7ea      	b.n	800679c <quorem+0xe2>
 80067c6:	2000      	movs	r0, #0
 80067c8:	e7ee      	b.n	80067a8 <quorem+0xee>
 80067ca:	0000      	movs	r0, r0
 80067cc:	0000      	movs	r0, r0
	...

080067d0 <_dtoa_r>:
 80067d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80067d4:	4614      	mov	r4, r2
 80067d6:	461d      	mov	r5, r3
 80067d8:	69c7      	ldr	r7, [r0, #28]
 80067da:	b097      	sub	sp, #92	@ 0x5c
 80067dc:	4681      	mov	r9, r0
 80067de:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80067e2:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 80067e4:	b97f      	cbnz	r7, 8006806 <_dtoa_r+0x36>
 80067e6:	2010      	movs	r0, #16
 80067e8:	f000 fe0e 	bl	8007408 <malloc>
 80067ec:	4602      	mov	r2, r0
 80067ee:	f8c9 001c 	str.w	r0, [r9, #28]
 80067f2:	b920      	cbnz	r0, 80067fe <_dtoa_r+0x2e>
 80067f4:	21ef      	movs	r1, #239	@ 0xef
 80067f6:	4bac      	ldr	r3, [pc, #688]	@ (8006aa8 <_dtoa_r+0x2d8>)
 80067f8:	48ac      	ldr	r0, [pc, #688]	@ (8006aac <_dtoa_r+0x2dc>)
 80067fa:	f001 fe33 	bl	8008464 <__assert_func>
 80067fe:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8006802:	6007      	str	r7, [r0, #0]
 8006804:	60c7      	str	r7, [r0, #12]
 8006806:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800680a:	6819      	ldr	r1, [r3, #0]
 800680c:	b159      	cbz	r1, 8006826 <_dtoa_r+0x56>
 800680e:	685a      	ldr	r2, [r3, #4]
 8006810:	2301      	movs	r3, #1
 8006812:	4093      	lsls	r3, r2
 8006814:	604a      	str	r2, [r1, #4]
 8006816:	608b      	str	r3, [r1, #8]
 8006818:	4648      	mov	r0, r9
 800681a:	f000 feeb 	bl	80075f4 <_Bfree>
 800681e:	2200      	movs	r2, #0
 8006820:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8006824:	601a      	str	r2, [r3, #0]
 8006826:	1e2b      	subs	r3, r5, #0
 8006828:	bfaf      	iteee	ge
 800682a:	2300      	movge	r3, #0
 800682c:	2201      	movlt	r2, #1
 800682e:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8006832:	9307      	strlt	r3, [sp, #28]
 8006834:	bfa8      	it	ge
 8006836:	6033      	strge	r3, [r6, #0]
 8006838:	f8dd 801c 	ldr.w	r8, [sp, #28]
 800683c:	4b9c      	ldr	r3, [pc, #624]	@ (8006ab0 <_dtoa_r+0x2e0>)
 800683e:	bfb8      	it	lt
 8006840:	6032      	strlt	r2, [r6, #0]
 8006842:	ea33 0308 	bics.w	r3, r3, r8
 8006846:	d112      	bne.n	800686e <_dtoa_r+0x9e>
 8006848:	f242 730f 	movw	r3, #9999	@ 0x270f
 800684c:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800684e:	6013      	str	r3, [r2, #0]
 8006850:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8006854:	4323      	orrs	r3, r4
 8006856:	f000 855e 	beq.w	8007316 <_dtoa_r+0xb46>
 800685a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800685c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8006ab4 <_dtoa_r+0x2e4>
 8006860:	2b00      	cmp	r3, #0
 8006862:	f000 8560 	beq.w	8007326 <_dtoa_r+0xb56>
 8006866:	f10a 0303 	add.w	r3, sl, #3
 800686a:	f000 bd5a 	b.w	8007322 <_dtoa_r+0xb52>
 800686e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006872:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8006876:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800687a:	2200      	movs	r2, #0
 800687c:	2300      	movs	r3, #0
 800687e:	f7fa f893 	bl	80009a8 <__aeabi_dcmpeq>
 8006882:	4607      	mov	r7, r0
 8006884:	b158      	cbz	r0, 800689e <_dtoa_r+0xce>
 8006886:	2301      	movs	r3, #1
 8006888:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800688a:	6013      	str	r3, [r2, #0]
 800688c:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800688e:	b113      	cbz	r3, 8006896 <_dtoa_r+0xc6>
 8006890:	4b89      	ldr	r3, [pc, #548]	@ (8006ab8 <_dtoa_r+0x2e8>)
 8006892:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8006894:	6013      	str	r3, [r2, #0]
 8006896:	f8df a224 	ldr.w	sl, [pc, #548]	@ 8006abc <_dtoa_r+0x2ec>
 800689a:	f000 bd44 	b.w	8007326 <_dtoa_r+0xb56>
 800689e:	ab14      	add	r3, sp, #80	@ 0x50
 80068a0:	9301      	str	r3, [sp, #4]
 80068a2:	ab15      	add	r3, sp, #84	@ 0x54
 80068a4:	9300      	str	r3, [sp, #0]
 80068a6:	4648      	mov	r0, r9
 80068a8:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 80068ac:	f001 f984 	bl	8007bb8 <__d2b>
 80068b0:	f3c8 560a 	ubfx	r6, r8, #20, #11
 80068b4:	9003      	str	r0, [sp, #12]
 80068b6:	2e00      	cmp	r6, #0
 80068b8:	d078      	beq.n	80069ac <_dtoa_r+0x1dc>
 80068ba:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80068be:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80068c0:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80068c4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80068c8:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80068cc:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80068d0:	9712      	str	r7, [sp, #72]	@ 0x48
 80068d2:	4619      	mov	r1, r3
 80068d4:	2200      	movs	r2, #0
 80068d6:	4b7a      	ldr	r3, [pc, #488]	@ (8006ac0 <_dtoa_r+0x2f0>)
 80068d8:	f7f9 fc46 	bl	8000168 <__aeabi_dsub>
 80068dc:	a36c      	add	r3, pc, #432	@ (adr r3, 8006a90 <_dtoa_r+0x2c0>)
 80068de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068e2:	f7f9 fdf9 	bl	80004d8 <__aeabi_dmul>
 80068e6:	a36c      	add	r3, pc, #432	@ (adr r3, 8006a98 <_dtoa_r+0x2c8>)
 80068e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068ec:	f7f9 fc3e 	bl	800016c <__adddf3>
 80068f0:	4604      	mov	r4, r0
 80068f2:	4630      	mov	r0, r6
 80068f4:	460d      	mov	r5, r1
 80068f6:	f7f9 fd85 	bl	8000404 <__aeabi_i2d>
 80068fa:	a369      	add	r3, pc, #420	@ (adr r3, 8006aa0 <_dtoa_r+0x2d0>)
 80068fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006900:	f7f9 fdea 	bl	80004d8 <__aeabi_dmul>
 8006904:	4602      	mov	r2, r0
 8006906:	460b      	mov	r3, r1
 8006908:	4620      	mov	r0, r4
 800690a:	4629      	mov	r1, r5
 800690c:	f7f9 fc2e 	bl	800016c <__adddf3>
 8006910:	4604      	mov	r4, r0
 8006912:	460d      	mov	r5, r1
 8006914:	f7fa f890 	bl	8000a38 <__aeabi_d2iz>
 8006918:	2200      	movs	r2, #0
 800691a:	4607      	mov	r7, r0
 800691c:	2300      	movs	r3, #0
 800691e:	4620      	mov	r0, r4
 8006920:	4629      	mov	r1, r5
 8006922:	f7fa f84b 	bl	80009bc <__aeabi_dcmplt>
 8006926:	b140      	cbz	r0, 800693a <_dtoa_r+0x16a>
 8006928:	4638      	mov	r0, r7
 800692a:	f7f9 fd6b 	bl	8000404 <__aeabi_i2d>
 800692e:	4622      	mov	r2, r4
 8006930:	462b      	mov	r3, r5
 8006932:	f7fa f839 	bl	80009a8 <__aeabi_dcmpeq>
 8006936:	b900      	cbnz	r0, 800693a <_dtoa_r+0x16a>
 8006938:	3f01      	subs	r7, #1
 800693a:	2f16      	cmp	r7, #22
 800693c:	d854      	bhi.n	80069e8 <_dtoa_r+0x218>
 800693e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006942:	4b60      	ldr	r3, [pc, #384]	@ (8006ac4 <_dtoa_r+0x2f4>)
 8006944:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006948:	e9d3 2300 	ldrd	r2, r3, [r3]
 800694c:	f7fa f836 	bl	80009bc <__aeabi_dcmplt>
 8006950:	2800      	cmp	r0, #0
 8006952:	d04b      	beq.n	80069ec <_dtoa_r+0x21c>
 8006954:	2300      	movs	r3, #0
 8006956:	3f01      	subs	r7, #1
 8006958:	930f      	str	r3, [sp, #60]	@ 0x3c
 800695a:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800695c:	1b9b      	subs	r3, r3, r6
 800695e:	1e5a      	subs	r2, r3, #1
 8006960:	bf49      	itett	mi
 8006962:	f1c3 0301 	rsbmi	r3, r3, #1
 8006966:	2300      	movpl	r3, #0
 8006968:	9304      	strmi	r3, [sp, #16]
 800696a:	2300      	movmi	r3, #0
 800696c:	9209      	str	r2, [sp, #36]	@ 0x24
 800696e:	bf54      	ite	pl
 8006970:	9304      	strpl	r3, [sp, #16]
 8006972:	9309      	strmi	r3, [sp, #36]	@ 0x24
 8006974:	2f00      	cmp	r7, #0
 8006976:	db3b      	blt.n	80069f0 <_dtoa_r+0x220>
 8006978:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800697a:	970e      	str	r7, [sp, #56]	@ 0x38
 800697c:	443b      	add	r3, r7
 800697e:	9309      	str	r3, [sp, #36]	@ 0x24
 8006980:	2300      	movs	r3, #0
 8006982:	930a      	str	r3, [sp, #40]	@ 0x28
 8006984:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8006986:	2b09      	cmp	r3, #9
 8006988:	d865      	bhi.n	8006a56 <_dtoa_r+0x286>
 800698a:	2b05      	cmp	r3, #5
 800698c:	bfc4      	itt	gt
 800698e:	3b04      	subgt	r3, #4
 8006990:	9320      	strgt	r3, [sp, #128]	@ 0x80
 8006992:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8006994:	bfc8      	it	gt
 8006996:	2400      	movgt	r4, #0
 8006998:	f1a3 0302 	sub.w	r3, r3, #2
 800699c:	bfd8      	it	le
 800699e:	2401      	movle	r4, #1
 80069a0:	2b03      	cmp	r3, #3
 80069a2:	d864      	bhi.n	8006a6e <_dtoa_r+0x29e>
 80069a4:	e8df f003 	tbb	[pc, r3]
 80069a8:	2c385553 	.word	0x2c385553
 80069ac:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 80069b0:	441e      	add	r6, r3
 80069b2:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80069b6:	2b20      	cmp	r3, #32
 80069b8:	bfc1      	itttt	gt
 80069ba:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 80069be:	fa08 f803 	lslgt.w	r8, r8, r3
 80069c2:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 80069c6:	fa24 f303 	lsrgt.w	r3, r4, r3
 80069ca:	bfd6      	itet	le
 80069cc:	f1c3 0320 	rsble	r3, r3, #32
 80069d0:	ea48 0003 	orrgt.w	r0, r8, r3
 80069d4:	fa04 f003 	lslle.w	r0, r4, r3
 80069d8:	f7f9 fd04 	bl	80003e4 <__aeabi_ui2d>
 80069dc:	2201      	movs	r2, #1
 80069de:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 80069e2:	3e01      	subs	r6, #1
 80069e4:	9212      	str	r2, [sp, #72]	@ 0x48
 80069e6:	e774      	b.n	80068d2 <_dtoa_r+0x102>
 80069e8:	2301      	movs	r3, #1
 80069ea:	e7b5      	b.n	8006958 <_dtoa_r+0x188>
 80069ec:	900f      	str	r0, [sp, #60]	@ 0x3c
 80069ee:	e7b4      	b.n	800695a <_dtoa_r+0x18a>
 80069f0:	9b04      	ldr	r3, [sp, #16]
 80069f2:	1bdb      	subs	r3, r3, r7
 80069f4:	9304      	str	r3, [sp, #16]
 80069f6:	427b      	negs	r3, r7
 80069f8:	930a      	str	r3, [sp, #40]	@ 0x28
 80069fa:	2300      	movs	r3, #0
 80069fc:	930e      	str	r3, [sp, #56]	@ 0x38
 80069fe:	e7c1      	b.n	8006984 <_dtoa_r+0x1b4>
 8006a00:	2301      	movs	r3, #1
 8006a02:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006a04:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8006a06:	eb07 0b03 	add.w	fp, r7, r3
 8006a0a:	f10b 0301 	add.w	r3, fp, #1
 8006a0e:	2b01      	cmp	r3, #1
 8006a10:	9308      	str	r3, [sp, #32]
 8006a12:	bfb8      	it	lt
 8006a14:	2301      	movlt	r3, #1
 8006a16:	e006      	b.n	8006a26 <_dtoa_r+0x256>
 8006a18:	2301      	movs	r3, #1
 8006a1a:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006a1c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	dd28      	ble.n	8006a74 <_dtoa_r+0x2a4>
 8006a22:	469b      	mov	fp, r3
 8006a24:	9308      	str	r3, [sp, #32]
 8006a26:	2100      	movs	r1, #0
 8006a28:	2204      	movs	r2, #4
 8006a2a:	f8d9 001c 	ldr.w	r0, [r9, #28]
 8006a2e:	f102 0514 	add.w	r5, r2, #20
 8006a32:	429d      	cmp	r5, r3
 8006a34:	d926      	bls.n	8006a84 <_dtoa_r+0x2b4>
 8006a36:	6041      	str	r1, [r0, #4]
 8006a38:	4648      	mov	r0, r9
 8006a3a:	f000 fd9b 	bl	8007574 <_Balloc>
 8006a3e:	4682      	mov	sl, r0
 8006a40:	2800      	cmp	r0, #0
 8006a42:	d143      	bne.n	8006acc <_dtoa_r+0x2fc>
 8006a44:	4602      	mov	r2, r0
 8006a46:	f240 11af 	movw	r1, #431	@ 0x1af
 8006a4a:	4b1f      	ldr	r3, [pc, #124]	@ (8006ac8 <_dtoa_r+0x2f8>)
 8006a4c:	e6d4      	b.n	80067f8 <_dtoa_r+0x28>
 8006a4e:	2300      	movs	r3, #0
 8006a50:	e7e3      	b.n	8006a1a <_dtoa_r+0x24a>
 8006a52:	2300      	movs	r3, #0
 8006a54:	e7d5      	b.n	8006a02 <_dtoa_r+0x232>
 8006a56:	2401      	movs	r4, #1
 8006a58:	2300      	movs	r3, #0
 8006a5a:	940b      	str	r4, [sp, #44]	@ 0x2c
 8006a5c:	9320      	str	r3, [sp, #128]	@ 0x80
 8006a5e:	f04f 3bff 	mov.w	fp, #4294967295
 8006a62:	2200      	movs	r2, #0
 8006a64:	2312      	movs	r3, #18
 8006a66:	f8cd b020 	str.w	fp, [sp, #32]
 8006a6a:	9221      	str	r2, [sp, #132]	@ 0x84
 8006a6c:	e7db      	b.n	8006a26 <_dtoa_r+0x256>
 8006a6e:	2301      	movs	r3, #1
 8006a70:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006a72:	e7f4      	b.n	8006a5e <_dtoa_r+0x28e>
 8006a74:	f04f 0b01 	mov.w	fp, #1
 8006a78:	465b      	mov	r3, fp
 8006a7a:	f8cd b020 	str.w	fp, [sp, #32]
 8006a7e:	f8cd b084 	str.w	fp, [sp, #132]	@ 0x84
 8006a82:	e7d0      	b.n	8006a26 <_dtoa_r+0x256>
 8006a84:	3101      	adds	r1, #1
 8006a86:	0052      	lsls	r2, r2, #1
 8006a88:	e7d1      	b.n	8006a2e <_dtoa_r+0x25e>
 8006a8a:	bf00      	nop
 8006a8c:	f3af 8000 	nop.w
 8006a90:	636f4361 	.word	0x636f4361
 8006a94:	3fd287a7 	.word	0x3fd287a7
 8006a98:	8b60c8b3 	.word	0x8b60c8b3
 8006a9c:	3fc68a28 	.word	0x3fc68a28
 8006aa0:	509f79fb 	.word	0x509f79fb
 8006aa4:	3fd34413 	.word	0x3fd34413
 8006aa8:	080089e3 	.word	0x080089e3
 8006aac:	080089fa 	.word	0x080089fa
 8006ab0:	7ff00000 	.word	0x7ff00000
 8006ab4:	080089df 	.word	0x080089df
 8006ab8:	080089b3 	.word	0x080089b3
 8006abc:	080089b2 	.word	0x080089b2
 8006ac0:	3ff80000 	.word	0x3ff80000
 8006ac4:	08008b48 	.word	0x08008b48
 8006ac8:	08008a52 	.word	0x08008a52
 8006acc:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8006ad0:	6018      	str	r0, [r3, #0]
 8006ad2:	9b08      	ldr	r3, [sp, #32]
 8006ad4:	2b0e      	cmp	r3, #14
 8006ad6:	f200 80a1 	bhi.w	8006c1c <_dtoa_r+0x44c>
 8006ada:	2c00      	cmp	r4, #0
 8006adc:	f000 809e 	beq.w	8006c1c <_dtoa_r+0x44c>
 8006ae0:	2f00      	cmp	r7, #0
 8006ae2:	dd33      	ble.n	8006b4c <_dtoa_r+0x37c>
 8006ae4:	4b9c      	ldr	r3, [pc, #624]	@ (8006d58 <_dtoa_r+0x588>)
 8006ae6:	f007 020f 	and.w	r2, r7, #15
 8006aea:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006aee:	05f8      	lsls	r0, r7, #23
 8006af0:	e9d3 3400 	ldrd	r3, r4, [r3]
 8006af4:	e9cd 3410 	strd	r3, r4, [sp, #64]	@ 0x40
 8006af8:	ea4f 1427 	mov.w	r4, r7, asr #4
 8006afc:	d516      	bpl.n	8006b2c <_dtoa_r+0x35c>
 8006afe:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006b02:	4b96      	ldr	r3, [pc, #600]	@ (8006d5c <_dtoa_r+0x58c>)
 8006b04:	2603      	movs	r6, #3
 8006b06:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006b0a:	f7f9 fe0f 	bl	800072c <__aeabi_ddiv>
 8006b0e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8006b12:	f004 040f 	and.w	r4, r4, #15
 8006b16:	4d91      	ldr	r5, [pc, #580]	@ (8006d5c <_dtoa_r+0x58c>)
 8006b18:	b954      	cbnz	r4, 8006b30 <_dtoa_r+0x360>
 8006b1a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006b1e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006b22:	f7f9 fe03 	bl	800072c <__aeabi_ddiv>
 8006b26:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8006b2a:	e028      	b.n	8006b7e <_dtoa_r+0x3ae>
 8006b2c:	2602      	movs	r6, #2
 8006b2e:	e7f2      	b.n	8006b16 <_dtoa_r+0x346>
 8006b30:	07e1      	lsls	r1, r4, #31
 8006b32:	d508      	bpl.n	8006b46 <_dtoa_r+0x376>
 8006b34:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8006b38:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006b3c:	f7f9 fccc 	bl	80004d8 <__aeabi_dmul>
 8006b40:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006b44:	3601      	adds	r6, #1
 8006b46:	1064      	asrs	r4, r4, #1
 8006b48:	3508      	adds	r5, #8
 8006b4a:	e7e5      	b.n	8006b18 <_dtoa_r+0x348>
 8006b4c:	f000 80af 	beq.w	8006cae <_dtoa_r+0x4de>
 8006b50:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006b54:	427c      	negs	r4, r7
 8006b56:	4b80      	ldr	r3, [pc, #512]	@ (8006d58 <_dtoa_r+0x588>)
 8006b58:	f004 020f 	and.w	r2, r4, #15
 8006b5c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006b60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b64:	f7f9 fcb8 	bl	80004d8 <__aeabi_dmul>
 8006b68:	2602      	movs	r6, #2
 8006b6a:	2300      	movs	r3, #0
 8006b6c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8006b70:	4d7a      	ldr	r5, [pc, #488]	@ (8006d5c <_dtoa_r+0x58c>)
 8006b72:	1124      	asrs	r4, r4, #4
 8006b74:	2c00      	cmp	r4, #0
 8006b76:	f040 808f 	bne.w	8006c98 <_dtoa_r+0x4c8>
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d1d3      	bne.n	8006b26 <_dtoa_r+0x356>
 8006b7e:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 8006b82:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	f000 8094 	beq.w	8006cb2 <_dtoa_r+0x4e2>
 8006b8a:	2200      	movs	r2, #0
 8006b8c:	4620      	mov	r0, r4
 8006b8e:	4629      	mov	r1, r5
 8006b90:	4b73      	ldr	r3, [pc, #460]	@ (8006d60 <_dtoa_r+0x590>)
 8006b92:	f7f9 ff13 	bl	80009bc <__aeabi_dcmplt>
 8006b96:	2800      	cmp	r0, #0
 8006b98:	f000 808b 	beq.w	8006cb2 <_dtoa_r+0x4e2>
 8006b9c:	9b08      	ldr	r3, [sp, #32]
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	f000 8087 	beq.w	8006cb2 <_dtoa_r+0x4e2>
 8006ba4:	f1bb 0f00 	cmp.w	fp, #0
 8006ba8:	dd34      	ble.n	8006c14 <_dtoa_r+0x444>
 8006baa:	4620      	mov	r0, r4
 8006bac:	2200      	movs	r2, #0
 8006bae:	4629      	mov	r1, r5
 8006bb0:	4b6c      	ldr	r3, [pc, #432]	@ (8006d64 <_dtoa_r+0x594>)
 8006bb2:	f7f9 fc91 	bl	80004d8 <__aeabi_dmul>
 8006bb6:	465c      	mov	r4, fp
 8006bb8:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8006bbc:	f107 38ff 	add.w	r8, r7, #4294967295
 8006bc0:	3601      	adds	r6, #1
 8006bc2:	4630      	mov	r0, r6
 8006bc4:	f7f9 fc1e 	bl	8000404 <__aeabi_i2d>
 8006bc8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006bcc:	f7f9 fc84 	bl	80004d8 <__aeabi_dmul>
 8006bd0:	2200      	movs	r2, #0
 8006bd2:	4b65      	ldr	r3, [pc, #404]	@ (8006d68 <_dtoa_r+0x598>)
 8006bd4:	f7f9 faca 	bl	800016c <__adddf3>
 8006bd8:	4605      	mov	r5, r0
 8006bda:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8006bde:	2c00      	cmp	r4, #0
 8006be0:	d16a      	bne.n	8006cb8 <_dtoa_r+0x4e8>
 8006be2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006be6:	2200      	movs	r2, #0
 8006be8:	4b60      	ldr	r3, [pc, #384]	@ (8006d6c <_dtoa_r+0x59c>)
 8006bea:	f7f9 fabd 	bl	8000168 <__aeabi_dsub>
 8006bee:	4602      	mov	r2, r0
 8006bf0:	460b      	mov	r3, r1
 8006bf2:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8006bf6:	462a      	mov	r2, r5
 8006bf8:	4633      	mov	r3, r6
 8006bfa:	f7f9 fefd 	bl	80009f8 <__aeabi_dcmpgt>
 8006bfe:	2800      	cmp	r0, #0
 8006c00:	f040 8298 	bne.w	8007134 <_dtoa_r+0x964>
 8006c04:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006c08:	462a      	mov	r2, r5
 8006c0a:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8006c0e:	f7f9 fed5 	bl	80009bc <__aeabi_dcmplt>
 8006c12:	bb38      	cbnz	r0, 8006c64 <_dtoa_r+0x494>
 8006c14:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8006c18:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8006c1c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	f2c0 8157 	blt.w	8006ed2 <_dtoa_r+0x702>
 8006c24:	2f0e      	cmp	r7, #14
 8006c26:	f300 8154 	bgt.w	8006ed2 <_dtoa_r+0x702>
 8006c2a:	4b4b      	ldr	r3, [pc, #300]	@ (8006d58 <_dtoa_r+0x588>)
 8006c2c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006c30:	e9d3 3400 	ldrd	r3, r4, [r3]
 8006c34:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8006c38:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	f280 80e5 	bge.w	8006e0a <_dtoa_r+0x63a>
 8006c40:	9b08      	ldr	r3, [sp, #32]
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	f300 80e1 	bgt.w	8006e0a <_dtoa_r+0x63a>
 8006c48:	d10c      	bne.n	8006c64 <_dtoa_r+0x494>
 8006c4a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006c4e:	2200      	movs	r2, #0
 8006c50:	4b46      	ldr	r3, [pc, #280]	@ (8006d6c <_dtoa_r+0x59c>)
 8006c52:	f7f9 fc41 	bl	80004d8 <__aeabi_dmul>
 8006c56:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006c5a:	f7f9 fec3 	bl	80009e4 <__aeabi_dcmpge>
 8006c5e:	2800      	cmp	r0, #0
 8006c60:	f000 8266 	beq.w	8007130 <_dtoa_r+0x960>
 8006c64:	2400      	movs	r4, #0
 8006c66:	4625      	mov	r5, r4
 8006c68:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8006c6a:	4656      	mov	r6, sl
 8006c6c:	ea6f 0803 	mvn.w	r8, r3
 8006c70:	2700      	movs	r7, #0
 8006c72:	4621      	mov	r1, r4
 8006c74:	4648      	mov	r0, r9
 8006c76:	f000 fcbd 	bl	80075f4 <_Bfree>
 8006c7a:	2d00      	cmp	r5, #0
 8006c7c:	f000 80bd 	beq.w	8006dfa <_dtoa_r+0x62a>
 8006c80:	b12f      	cbz	r7, 8006c8e <_dtoa_r+0x4be>
 8006c82:	42af      	cmp	r7, r5
 8006c84:	d003      	beq.n	8006c8e <_dtoa_r+0x4be>
 8006c86:	4639      	mov	r1, r7
 8006c88:	4648      	mov	r0, r9
 8006c8a:	f000 fcb3 	bl	80075f4 <_Bfree>
 8006c8e:	4629      	mov	r1, r5
 8006c90:	4648      	mov	r0, r9
 8006c92:	f000 fcaf 	bl	80075f4 <_Bfree>
 8006c96:	e0b0      	b.n	8006dfa <_dtoa_r+0x62a>
 8006c98:	07e2      	lsls	r2, r4, #31
 8006c9a:	d505      	bpl.n	8006ca8 <_dtoa_r+0x4d8>
 8006c9c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006ca0:	f7f9 fc1a 	bl	80004d8 <__aeabi_dmul>
 8006ca4:	2301      	movs	r3, #1
 8006ca6:	3601      	adds	r6, #1
 8006ca8:	1064      	asrs	r4, r4, #1
 8006caa:	3508      	adds	r5, #8
 8006cac:	e762      	b.n	8006b74 <_dtoa_r+0x3a4>
 8006cae:	2602      	movs	r6, #2
 8006cb0:	e765      	b.n	8006b7e <_dtoa_r+0x3ae>
 8006cb2:	46b8      	mov	r8, r7
 8006cb4:	9c08      	ldr	r4, [sp, #32]
 8006cb6:	e784      	b.n	8006bc2 <_dtoa_r+0x3f2>
 8006cb8:	4b27      	ldr	r3, [pc, #156]	@ (8006d58 <_dtoa_r+0x588>)
 8006cba:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8006cbc:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006cc0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006cc4:	4454      	add	r4, sl
 8006cc6:	2900      	cmp	r1, #0
 8006cc8:	d054      	beq.n	8006d74 <_dtoa_r+0x5a4>
 8006cca:	2000      	movs	r0, #0
 8006ccc:	4928      	ldr	r1, [pc, #160]	@ (8006d70 <_dtoa_r+0x5a0>)
 8006cce:	f7f9 fd2d 	bl	800072c <__aeabi_ddiv>
 8006cd2:	4633      	mov	r3, r6
 8006cd4:	462a      	mov	r2, r5
 8006cd6:	f7f9 fa47 	bl	8000168 <__aeabi_dsub>
 8006cda:	4656      	mov	r6, sl
 8006cdc:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006ce0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006ce4:	f7f9 fea8 	bl	8000a38 <__aeabi_d2iz>
 8006ce8:	4605      	mov	r5, r0
 8006cea:	f7f9 fb8b 	bl	8000404 <__aeabi_i2d>
 8006cee:	4602      	mov	r2, r0
 8006cf0:	460b      	mov	r3, r1
 8006cf2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006cf6:	f7f9 fa37 	bl	8000168 <__aeabi_dsub>
 8006cfa:	4602      	mov	r2, r0
 8006cfc:	460b      	mov	r3, r1
 8006cfe:	3530      	adds	r5, #48	@ 0x30
 8006d00:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8006d04:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006d08:	f806 5b01 	strb.w	r5, [r6], #1
 8006d0c:	f7f9 fe56 	bl	80009bc <__aeabi_dcmplt>
 8006d10:	2800      	cmp	r0, #0
 8006d12:	d172      	bne.n	8006dfa <_dtoa_r+0x62a>
 8006d14:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006d18:	2000      	movs	r0, #0
 8006d1a:	4911      	ldr	r1, [pc, #68]	@ (8006d60 <_dtoa_r+0x590>)
 8006d1c:	f7f9 fa24 	bl	8000168 <__aeabi_dsub>
 8006d20:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006d24:	f7f9 fe4a 	bl	80009bc <__aeabi_dcmplt>
 8006d28:	2800      	cmp	r0, #0
 8006d2a:	f040 80b4 	bne.w	8006e96 <_dtoa_r+0x6c6>
 8006d2e:	42a6      	cmp	r6, r4
 8006d30:	f43f af70 	beq.w	8006c14 <_dtoa_r+0x444>
 8006d34:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8006d38:	2200      	movs	r2, #0
 8006d3a:	4b0a      	ldr	r3, [pc, #40]	@ (8006d64 <_dtoa_r+0x594>)
 8006d3c:	f7f9 fbcc 	bl	80004d8 <__aeabi_dmul>
 8006d40:	2200      	movs	r2, #0
 8006d42:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006d46:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006d4a:	4b06      	ldr	r3, [pc, #24]	@ (8006d64 <_dtoa_r+0x594>)
 8006d4c:	f7f9 fbc4 	bl	80004d8 <__aeabi_dmul>
 8006d50:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8006d54:	e7c4      	b.n	8006ce0 <_dtoa_r+0x510>
 8006d56:	bf00      	nop
 8006d58:	08008b48 	.word	0x08008b48
 8006d5c:	08008b20 	.word	0x08008b20
 8006d60:	3ff00000 	.word	0x3ff00000
 8006d64:	40240000 	.word	0x40240000
 8006d68:	401c0000 	.word	0x401c0000
 8006d6c:	40140000 	.word	0x40140000
 8006d70:	3fe00000 	.word	0x3fe00000
 8006d74:	4631      	mov	r1, r6
 8006d76:	4628      	mov	r0, r5
 8006d78:	f7f9 fbae 	bl	80004d8 <__aeabi_dmul>
 8006d7c:	4656      	mov	r6, sl
 8006d7e:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006d82:	9413      	str	r4, [sp, #76]	@ 0x4c
 8006d84:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006d88:	f7f9 fe56 	bl	8000a38 <__aeabi_d2iz>
 8006d8c:	4605      	mov	r5, r0
 8006d8e:	f7f9 fb39 	bl	8000404 <__aeabi_i2d>
 8006d92:	4602      	mov	r2, r0
 8006d94:	460b      	mov	r3, r1
 8006d96:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006d9a:	f7f9 f9e5 	bl	8000168 <__aeabi_dsub>
 8006d9e:	4602      	mov	r2, r0
 8006da0:	460b      	mov	r3, r1
 8006da2:	3530      	adds	r5, #48	@ 0x30
 8006da4:	f806 5b01 	strb.w	r5, [r6], #1
 8006da8:	42a6      	cmp	r6, r4
 8006daa:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8006dae:	f04f 0200 	mov.w	r2, #0
 8006db2:	d124      	bne.n	8006dfe <_dtoa_r+0x62e>
 8006db4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8006db8:	4bae      	ldr	r3, [pc, #696]	@ (8007074 <_dtoa_r+0x8a4>)
 8006dba:	f7f9 f9d7 	bl	800016c <__adddf3>
 8006dbe:	4602      	mov	r2, r0
 8006dc0:	460b      	mov	r3, r1
 8006dc2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006dc6:	f7f9 fe17 	bl	80009f8 <__aeabi_dcmpgt>
 8006dca:	2800      	cmp	r0, #0
 8006dcc:	d163      	bne.n	8006e96 <_dtoa_r+0x6c6>
 8006dce:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006dd2:	2000      	movs	r0, #0
 8006dd4:	49a7      	ldr	r1, [pc, #668]	@ (8007074 <_dtoa_r+0x8a4>)
 8006dd6:	f7f9 f9c7 	bl	8000168 <__aeabi_dsub>
 8006dda:	4602      	mov	r2, r0
 8006ddc:	460b      	mov	r3, r1
 8006dde:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006de2:	f7f9 fdeb 	bl	80009bc <__aeabi_dcmplt>
 8006de6:	2800      	cmp	r0, #0
 8006de8:	f43f af14 	beq.w	8006c14 <_dtoa_r+0x444>
 8006dec:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8006dee:	1e73      	subs	r3, r6, #1
 8006df0:	9313      	str	r3, [sp, #76]	@ 0x4c
 8006df2:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8006df6:	2b30      	cmp	r3, #48	@ 0x30
 8006df8:	d0f8      	beq.n	8006dec <_dtoa_r+0x61c>
 8006dfa:	4647      	mov	r7, r8
 8006dfc:	e03b      	b.n	8006e76 <_dtoa_r+0x6a6>
 8006dfe:	4b9e      	ldr	r3, [pc, #632]	@ (8007078 <_dtoa_r+0x8a8>)
 8006e00:	f7f9 fb6a 	bl	80004d8 <__aeabi_dmul>
 8006e04:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8006e08:	e7bc      	b.n	8006d84 <_dtoa_r+0x5b4>
 8006e0a:	4656      	mov	r6, sl
 8006e0c:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 8006e10:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006e14:	4620      	mov	r0, r4
 8006e16:	4629      	mov	r1, r5
 8006e18:	f7f9 fc88 	bl	800072c <__aeabi_ddiv>
 8006e1c:	f7f9 fe0c 	bl	8000a38 <__aeabi_d2iz>
 8006e20:	4680      	mov	r8, r0
 8006e22:	f7f9 faef 	bl	8000404 <__aeabi_i2d>
 8006e26:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006e2a:	f7f9 fb55 	bl	80004d8 <__aeabi_dmul>
 8006e2e:	4602      	mov	r2, r0
 8006e30:	460b      	mov	r3, r1
 8006e32:	4620      	mov	r0, r4
 8006e34:	4629      	mov	r1, r5
 8006e36:	f7f9 f997 	bl	8000168 <__aeabi_dsub>
 8006e3a:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8006e3e:	9d08      	ldr	r5, [sp, #32]
 8006e40:	f806 4b01 	strb.w	r4, [r6], #1
 8006e44:	eba6 040a 	sub.w	r4, r6, sl
 8006e48:	42a5      	cmp	r5, r4
 8006e4a:	4602      	mov	r2, r0
 8006e4c:	460b      	mov	r3, r1
 8006e4e:	d133      	bne.n	8006eb8 <_dtoa_r+0x6e8>
 8006e50:	f7f9 f98c 	bl	800016c <__adddf3>
 8006e54:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006e58:	4604      	mov	r4, r0
 8006e5a:	460d      	mov	r5, r1
 8006e5c:	f7f9 fdcc 	bl	80009f8 <__aeabi_dcmpgt>
 8006e60:	b9c0      	cbnz	r0, 8006e94 <_dtoa_r+0x6c4>
 8006e62:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006e66:	4620      	mov	r0, r4
 8006e68:	4629      	mov	r1, r5
 8006e6a:	f7f9 fd9d 	bl	80009a8 <__aeabi_dcmpeq>
 8006e6e:	b110      	cbz	r0, 8006e76 <_dtoa_r+0x6a6>
 8006e70:	f018 0f01 	tst.w	r8, #1
 8006e74:	d10e      	bne.n	8006e94 <_dtoa_r+0x6c4>
 8006e76:	4648      	mov	r0, r9
 8006e78:	9903      	ldr	r1, [sp, #12]
 8006e7a:	f000 fbbb 	bl	80075f4 <_Bfree>
 8006e7e:	2300      	movs	r3, #0
 8006e80:	7033      	strb	r3, [r6, #0]
 8006e82:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8006e84:	3701      	adds	r7, #1
 8006e86:	601f      	str	r7, [r3, #0]
 8006e88:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	f000 824b 	beq.w	8007326 <_dtoa_r+0xb56>
 8006e90:	601e      	str	r6, [r3, #0]
 8006e92:	e248      	b.n	8007326 <_dtoa_r+0xb56>
 8006e94:	46b8      	mov	r8, r7
 8006e96:	4633      	mov	r3, r6
 8006e98:	461e      	mov	r6, r3
 8006e9a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006e9e:	2a39      	cmp	r2, #57	@ 0x39
 8006ea0:	d106      	bne.n	8006eb0 <_dtoa_r+0x6e0>
 8006ea2:	459a      	cmp	sl, r3
 8006ea4:	d1f8      	bne.n	8006e98 <_dtoa_r+0x6c8>
 8006ea6:	2230      	movs	r2, #48	@ 0x30
 8006ea8:	f108 0801 	add.w	r8, r8, #1
 8006eac:	f88a 2000 	strb.w	r2, [sl]
 8006eb0:	781a      	ldrb	r2, [r3, #0]
 8006eb2:	3201      	adds	r2, #1
 8006eb4:	701a      	strb	r2, [r3, #0]
 8006eb6:	e7a0      	b.n	8006dfa <_dtoa_r+0x62a>
 8006eb8:	2200      	movs	r2, #0
 8006eba:	4b6f      	ldr	r3, [pc, #444]	@ (8007078 <_dtoa_r+0x8a8>)
 8006ebc:	f7f9 fb0c 	bl	80004d8 <__aeabi_dmul>
 8006ec0:	2200      	movs	r2, #0
 8006ec2:	2300      	movs	r3, #0
 8006ec4:	4604      	mov	r4, r0
 8006ec6:	460d      	mov	r5, r1
 8006ec8:	f7f9 fd6e 	bl	80009a8 <__aeabi_dcmpeq>
 8006ecc:	2800      	cmp	r0, #0
 8006ece:	d09f      	beq.n	8006e10 <_dtoa_r+0x640>
 8006ed0:	e7d1      	b.n	8006e76 <_dtoa_r+0x6a6>
 8006ed2:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8006ed4:	2a00      	cmp	r2, #0
 8006ed6:	f000 80ea 	beq.w	80070ae <_dtoa_r+0x8de>
 8006eda:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8006edc:	2a01      	cmp	r2, #1
 8006ede:	f300 80cd 	bgt.w	800707c <_dtoa_r+0x8ac>
 8006ee2:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8006ee4:	2a00      	cmp	r2, #0
 8006ee6:	f000 80c1 	beq.w	800706c <_dtoa_r+0x89c>
 8006eea:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8006eee:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8006ef0:	9e04      	ldr	r6, [sp, #16]
 8006ef2:	9a04      	ldr	r2, [sp, #16]
 8006ef4:	2101      	movs	r1, #1
 8006ef6:	441a      	add	r2, r3
 8006ef8:	9204      	str	r2, [sp, #16]
 8006efa:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006efc:	4648      	mov	r0, r9
 8006efe:	441a      	add	r2, r3
 8006f00:	9209      	str	r2, [sp, #36]	@ 0x24
 8006f02:	f000 fc2b 	bl	800775c <__i2b>
 8006f06:	4605      	mov	r5, r0
 8006f08:	b166      	cbz	r6, 8006f24 <_dtoa_r+0x754>
 8006f0a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	dd09      	ble.n	8006f24 <_dtoa_r+0x754>
 8006f10:	42b3      	cmp	r3, r6
 8006f12:	bfa8      	it	ge
 8006f14:	4633      	movge	r3, r6
 8006f16:	9a04      	ldr	r2, [sp, #16]
 8006f18:	1af6      	subs	r6, r6, r3
 8006f1a:	1ad2      	subs	r2, r2, r3
 8006f1c:	9204      	str	r2, [sp, #16]
 8006f1e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006f20:	1ad3      	subs	r3, r2, r3
 8006f22:	9309      	str	r3, [sp, #36]	@ 0x24
 8006f24:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006f26:	b30b      	cbz	r3, 8006f6c <_dtoa_r+0x79c>
 8006f28:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	f000 80c6 	beq.w	80070bc <_dtoa_r+0x8ec>
 8006f30:	2c00      	cmp	r4, #0
 8006f32:	f000 80c0 	beq.w	80070b6 <_dtoa_r+0x8e6>
 8006f36:	4629      	mov	r1, r5
 8006f38:	4622      	mov	r2, r4
 8006f3a:	4648      	mov	r0, r9
 8006f3c:	f000 fcc6 	bl	80078cc <__pow5mult>
 8006f40:	9a03      	ldr	r2, [sp, #12]
 8006f42:	4601      	mov	r1, r0
 8006f44:	4605      	mov	r5, r0
 8006f46:	4648      	mov	r0, r9
 8006f48:	f000 fc1e 	bl	8007788 <__multiply>
 8006f4c:	9903      	ldr	r1, [sp, #12]
 8006f4e:	4680      	mov	r8, r0
 8006f50:	4648      	mov	r0, r9
 8006f52:	f000 fb4f 	bl	80075f4 <_Bfree>
 8006f56:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006f58:	1b1b      	subs	r3, r3, r4
 8006f5a:	930a      	str	r3, [sp, #40]	@ 0x28
 8006f5c:	f000 80b1 	beq.w	80070c2 <_dtoa_r+0x8f2>
 8006f60:	4641      	mov	r1, r8
 8006f62:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006f64:	4648      	mov	r0, r9
 8006f66:	f000 fcb1 	bl	80078cc <__pow5mult>
 8006f6a:	9003      	str	r0, [sp, #12]
 8006f6c:	2101      	movs	r1, #1
 8006f6e:	4648      	mov	r0, r9
 8006f70:	f000 fbf4 	bl	800775c <__i2b>
 8006f74:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006f76:	4604      	mov	r4, r0
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	f000 81d8 	beq.w	800732e <_dtoa_r+0xb5e>
 8006f7e:	461a      	mov	r2, r3
 8006f80:	4601      	mov	r1, r0
 8006f82:	4648      	mov	r0, r9
 8006f84:	f000 fca2 	bl	80078cc <__pow5mult>
 8006f88:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8006f8a:	4604      	mov	r4, r0
 8006f8c:	2b01      	cmp	r3, #1
 8006f8e:	f300 809f 	bgt.w	80070d0 <_dtoa_r+0x900>
 8006f92:	9b06      	ldr	r3, [sp, #24]
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	f040 8097 	bne.w	80070c8 <_dtoa_r+0x8f8>
 8006f9a:	9b07      	ldr	r3, [sp, #28]
 8006f9c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	f040 8093 	bne.w	80070cc <_dtoa_r+0x8fc>
 8006fa6:	9b07      	ldr	r3, [sp, #28]
 8006fa8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006fac:	0d1b      	lsrs	r3, r3, #20
 8006fae:	051b      	lsls	r3, r3, #20
 8006fb0:	b133      	cbz	r3, 8006fc0 <_dtoa_r+0x7f0>
 8006fb2:	9b04      	ldr	r3, [sp, #16]
 8006fb4:	3301      	adds	r3, #1
 8006fb6:	9304      	str	r3, [sp, #16]
 8006fb8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006fba:	3301      	adds	r3, #1
 8006fbc:	9309      	str	r3, [sp, #36]	@ 0x24
 8006fbe:	2301      	movs	r3, #1
 8006fc0:	930a      	str	r3, [sp, #40]	@ 0x28
 8006fc2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	f000 81b8 	beq.w	800733a <_dtoa_r+0xb6a>
 8006fca:	6923      	ldr	r3, [r4, #16]
 8006fcc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8006fd0:	6918      	ldr	r0, [r3, #16]
 8006fd2:	f000 fb77 	bl	80076c4 <__hi0bits>
 8006fd6:	f1c0 0020 	rsb	r0, r0, #32
 8006fda:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006fdc:	4418      	add	r0, r3
 8006fde:	f010 001f 	ands.w	r0, r0, #31
 8006fe2:	f000 8082 	beq.w	80070ea <_dtoa_r+0x91a>
 8006fe6:	f1c0 0320 	rsb	r3, r0, #32
 8006fea:	2b04      	cmp	r3, #4
 8006fec:	dd73      	ble.n	80070d6 <_dtoa_r+0x906>
 8006fee:	9b04      	ldr	r3, [sp, #16]
 8006ff0:	f1c0 001c 	rsb	r0, r0, #28
 8006ff4:	4403      	add	r3, r0
 8006ff6:	9304      	str	r3, [sp, #16]
 8006ff8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006ffa:	4406      	add	r6, r0
 8006ffc:	4403      	add	r3, r0
 8006ffe:	9309      	str	r3, [sp, #36]	@ 0x24
 8007000:	9b04      	ldr	r3, [sp, #16]
 8007002:	2b00      	cmp	r3, #0
 8007004:	dd05      	ble.n	8007012 <_dtoa_r+0x842>
 8007006:	461a      	mov	r2, r3
 8007008:	4648      	mov	r0, r9
 800700a:	9903      	ldr	r1, [sp, #12]
 800700c:	f000 fcb8 	bl	8007980 <__lshift>
 8007010:	9003      	str	r0, [sp, #12]
 8007012:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007014:	2b00      	cmp	r3, #0
 8007016:	dd05      	ble.n	8007024 <_dtoa_r+0x854>
 8007018:	4621      	mov	r1, r4
 800701a:	461a      	mov	r2, r3
 800701c:	4648      	mov	r0, r9
 800701e:	f000 fcaf 	bl	8007980 <__lshift>
 8007022:	4604      	mov	r4, r0
 8007024:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007026:	2b00      	cmp	r3, #0
 8007028:	d061      	beq.n	80070ee <_dtoa_r+0x91e>
 800702a:	4621      	mov	r1, r4
 800702c:	9803      	ldr	r0, [sp, #12]
 800702e:	f000 fd13 	bl	8007a58 <__mcmp>
 8007032:	2800      	cmp	r0, #0
 8007034:	da5b      	bge.n	80070ee <_dtoa_r+0x91e>
 8007036:	2300      	movs	r3, #0
 8007038:	220a      	movs	r2, #10
 800703a:	4648      	mov	r0, r9
 800703c:	9903      	ldr	r1, [sp, #12]
 800703e:	f000 fafb 	bl	8007638 <__multadd>
 8007042:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007044:	f107 38ff 	add.w	r8, r7, #4294967295
 8007048:	9003      	str	r0, [sp, #12]
 800704a:	2b00      	cmp	r3, #0
 800704c:	f000 8177 	beq.w	800733e <_dtoa_r+0xb6e>
 8007050:	4629      	mov	r1, r5
 8007052:	2300      	movs	r3, #0
 8007054:	220a      	movs	r2, #10
 8007056:	4648      	mov	r0, r9
 8007058:	f000 faee 	bl	8007638 <__multadd>
 800705c:	f1bb 0f00 	cmp.w	fp, #0
 8007060:	4605      	mov	r5, r0
 8007062:	dc6f      	bgt.n	8007144 <_dtoa_r+0x974>
 8007064:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8007066:	2b02      	cmp	r3, #2
 8007068:	dc49      	bgt.n	80070fe <_dtoa_r+0x92e>
 800706a:	e06b      	b.n	8007144 <_dtoa_r+0x974>
 800706c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800706e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8007072:	e73c      	b.n	8006eee <_dtoa_r+0x71e>
 8007074:	3fe00000 	.word	0x3fe00000
 8007078:	40240000 	.word	0x40240000
 800707c:	9b08      	ldr	r3, [sp, #32]
 800707e:	1e5c      	subs	r4, r3, #1
 8007080:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007082:	42a3      	cmp	r3, r4
 8007084:	db09      	blt.n	800709a <_dtoa_r+0x8ca>
 8007086:	1b1c      	subs	r4, r3, r4
 8007088:	9b08      	ldr	r3, [sp, #32]
 800708a:	2b00      	cmp	r3, #0
 800708c:	f6bf af30 	bge.w	8006ef0 <_dtoa_r+0x720>
 8007090:	9b04      	ldr	r3, [sp, #16]
 8007092:	9a08      	ldr	r2, [sp, #32]
 8007094:	1a9e      	subs	r6, r3, r2
 8007096:	2300      	movs	r3, #0
 8007098:	e72b      	b.n	8006ef2 <_dtoa_r+0x722>
 800709a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800709c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800709e:	1ae3      	subs	r3, r4, r3
 80070a0:	441a      	add	r2, r3
 80070a2:	940a      	str	r4, [sp, #40]	@ 0x28
 80070a4:	9e04      	ldr	r6, [sp, #16]
 80070a6:	2400      	movs	r4, #0
 80070a8:	9b08      	ldr	r3, [sp, #32]
 80070aa:	920e      	str	r2, [sp, #56]	@ 0x38
 80070ac:	e721      	b.n	8006ef2 <_dtoa_r+0x722>
 80070ae:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80070b0:	9e04      	ldr	r6, [sp, #16]
 80070b2:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 80070b4:	e728      	b.n	8006f08 <_dtoa_r+0x738>
 80070b6:	f8dd 800c 	ldr.w	r8, [sp, #12]
 80070ba:	e751      	b.n	8006f60 <_dtoa_r+0x790>
 80070bc:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80070be:	9903      	ldr	r1, [sp, #12]
 80070c0:	e750      	b.n	8006f64 <_dtoa_r+0x794>
 80070c2:	f8cd 800c 	str.w	r8, [sp, #12]
 80070c6:	e751      	b.n	8006f6c <_dtoa_r+0x79c>
 80070c8:	2300      	movs	r3, #0
 80070ca:	e779      	b.n	8006fc0 <_dtoa_r+0x7f0>
 80070cc:	9b06      	ldr	r3, [sp, #24]
 80070ce:	e777      	b.n	8006fc0 <_dtoa_r+0x7f0>
 80070d0:	2300      	movs	r3, #0
 80070d2:	930a      	str	r3, [sp, #40]	@ 0x28
 80070d4:	e779      	b.n	8006fca <_dtoa_r+0x7fa>
 80070d6:	d093      	beq.n	8007000 <_dtoa_r+0x830>
 80070d8:	9a04      	ldr	r2, [sp, #16]
 80070da:	331c      	adds	r3, #28
 80070dc:	441a      	add	r2, r3
 80070de:	9204      	str	r2, [sp, #16]
 80070e0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80070e2:	441e      	add	r6, r3
 80070e4:	441a      	add	r2, r3
 80070e6:	9209      	str	r2, [sp, #36]	@ 0x24
 80070e8:	e78a      	b.n	8007000 <_dtoa_r+0x830>
 80070ea:	4603      	mov	r3, r0
 80070ec:	e7f4      	b.n	80070d8 <_dtoa_r+0x908>
 80070ee:	9b08      	ldr	r3, [sp, #32]
 80070f0:	46b8      	mov	r8, r7
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	dc20      	bgt.n	8007138 <_dtoa_r+0x968>
 80070f6:	469b      	mov	fp, r3
 80070f8:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80070fa:	2b02      	cmp	r3, #2
 80070fc:	dd1e      	ble.n	800713c <_dtoa_r+0x96c>
 80070fe:	f1bb 0f00 	cmp.w	fp, #0
 8007102:	f47f adb1 	bne.w	8006c68 <_dtoa_r+0x498>
 8007106:	4621      	mov	r1, r4
 8007108:	465b      	mov	r3, fp
 800710a:	2205      	movs	r2, #5
 800710c:	4648      	mov	r0, r9
 800710e:	f000 fa93 	bl	8007638 <__multadd>
 8007112:	4601      	mov	r1, r0
 8007114:	4604      	mov	r4, r0
 8007116:	9803      	ldr	r0, [sp, #12]
 8007118:	f000 fc9e 	bl	8007a58 <__mcmp>
 800711c:	2800      	cmp	r0, #0
 800711e:	f77f ada3 	ble.w	8006c68 <_dtoa_r+0x498>
 8007122:	4656      	mov	r6, sl
 8007124:	2331      	movs	r3, #49	@ 0x31
 8007126:	f108 0801 	add.w	r8, r8, #1
 800712a:	f806 3b01 	strb.w	r3, [r6], #1
 800712e:	e59f      	b.n	8006c70 <_dtoa_r+0x4a0>
 8007130:	46b8      	mov	r8, r7
 8007132:	9c08      	ldr	r4, [sp, #32]
 8007134:	4625      	mov	r5, r4
 8007136:	e7f4      	b.n	8007122 <_dtoa_r+0x952>
 8007138:	f8dd b020 	ldr.w	fp, [sp, #32]
 800713c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800713e:	2b00      	cmp	r3, #0
 8007140:	f000 8101 	beq.w	8007346 <_dtoa_r+0xb76>
 8007144:	2e00      	cmp	r6, #0
 8007146:	dd05      	ble.n	8007154 <_dtoa_r+0x984>
 8007148:	4629      	mov	r1, r5
 800714a:	4632      	mov	r2, r6
 800714c:	4648      	mov	r0, r9
 800714e:	f000 fc17 	bl	8007980 <__lshift>
 8007152:	4605      	mov	r5, r0
 8007154:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007156:	2b00      	cmp	r3, #0
 8007158:	d05c      	beq.n	8007214 <_dtoa_r+0xa44>
 800715a:	4648      	mov	r0, r9
 800715c:	6869      	ldr	r1, [r5, #4]
 800715e:	f000 fa09 	bl	8007574 <_Balloc>
 8007162:	4606      	mov	r6, r0
 8007164:	b928      	cbnz	r0, 8007172 <_dtoa_r+0x9a2>
 8007166:	4602      	mov	r2, r0
 8007168:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800716c:	4b80      	ldr	r3, [pc, #512]	@ (8007370 <_dtoa_r+0xba0>)
 800716e:	f7ff bb43 	b.w	80067f8 <_dtoa_r+0x28>
 8007172:	692a      	ldr	r2, [r5, #16]
 8007174:	f105 010c 	add.w	r1, r5, #12
 8007178:	3202      	adds	r2, #2
 800717a:	0092      	lsls	r2, r2, #2
 800717c:	300c      	adds	r0, #12
 800717e:	f7ff fa8e 	bl	800669e <memcpy>
 8007182:	2201      	movs	r2, #1
 8007184:	4631      	mov	r1, r6
 8007186:	4648      	mov	r0, r9
 8007188:	f000 fbfa 	bl	8007980 <__lshift>
 800718c:	462f      	mov	r7, r5
 800718e:	4605      	mov	r5, r0
 8007190:	f10a 0301 	add.w	r3, sl, #1
 8007194:	9304      	str	r3, [sp, #16]
 8007196:	eb0a 030b 	add.w	r3, sl, fp
 800719a:	930a      	str	r3, [sp, #40]	@ 0x28
 800719c:	9b06      	ldr	r3, [sp, #24]
 800719e:	f003 0301 	and.w	r3, r3, #1
 80071a2:	9309      	str	r3, [sp, #36]	@ 0x24
 80071a4:	9b04      	ldr	r3, [sp, #16]
 80071a6:	4621      	mov	r1, r4
 80071a8:	9803      	ldr	r0, [sp, #12]
 80071aa:	f103 3bff 	add.w	fp, r3, #4294967295
 80071ae:	f7ff fa84 	bl	80066ba <quorem>
 80071b2:	4603      	mov	r3, r0
 80071b4:	4639      	mov	r1, r7
 80071b6:	3330      	adds	r3, #48	@ 0x30
 80071b8:	9006      	str	r0, [sp, #24]
 80071ba:	9803      	ldr	r0, [sp, #12]
 80071bc:	930b      	str	r3, [sp, #44]	@ 0x2c
 80071be:	f000 fc4b 	bl	8007a58 <__mcmp>
 80071c2:	462a      	mov	r2, r5
 80071c4:	9008      	str	r0, [sp, #32]
 80071c6:	4621      	mov	r1, r4
 80071c8:	4648      	mov	r0, r9
 80071ca:	f000 fc61 	bl	8007a90 <__mdiff>
 80071ce:	68c2      	ldr	r2, [r0, #12]
 80071d0:	4606      	mov	r6, r0
 80071d2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80071d4:	bb02      	cbnz	r2, 8007218 <_dtoa_r+0xa48>
 80071d6:	4601      	mov	r1, r0
 80071d8:	9803      	ldr	r0, [sp, #12]
 80071da:	f000 fc3d 	bl	8007a58 <__mcmp>
 80071de:	4602      	mov	r2, r0
 80071e0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80071e2:	4631      	mov	r1, r6
 80071e4:	4648      	mov	r0, r9
 80071e6:	e9cd 320b 	strd	r3, r2, [sp, #44]	@ 0x2c
 80071ea:	f000 fa03 	bl	80075f4 <_Bfree>
 80071ee:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80071f0:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80071f2:	9e04      	ldr	r6, [sp, #16]
 80071f4:	ea42 0103 	orr.w	r1, r2, r3
 80071f8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80071fa:	4319      	orrs	r1, r3
 80071fc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80071fe:	d10d      	bne.n	800721c <_dtoa_r+0xa4c>
 8007200:	2b39      	cmp	r3, #57	@ 0x39
 8007202:	d027      	beq.n	8007254 <_dtoa_r+0xa84>
 8007204:	9a08      	ldr	r2, [sp, #32]
 8007206:	2a00      	cmp	r2, #0
 8007208:	dd01      	ble.n	800720e <_dtoa_r+0xa3e>
 800720a:	9b06      	ldr	r3, [sp, #24]
 800720c:	3331      	adds	r3, #49	@ 0x31
 800720e:	f88b 3000 	strb.w	r3, [fp]
 8007212:	e52e      	b.n	8006c72 <_dtoa_r+0x4a2>
 8007214:	4628      	mov	r0, r5
 8007216:	e7b9      	b.n	800718c <_dtoa_r+0x9bc>
 8007218:	2201      	movs	r2, #1
 800721a:	e7e2      	b.n	80071e2 <_dtoa_r+0xa12>
 800721c:	9908      	ldr	r1, [sp, #32]
 800721e:	2900      	cmp	r1, #0
 8007220:	db04      	blt.n	800722c <_dtoa_r+0xa5c>
 8007222:	9820      	ldr	r0, [sp, #128]	@ 0x80
 8007224:	4301      	orrs	r1, r0
 8007226:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007228:	4301      	orrs	r1, r0
 800722a:	d120      	bne.n	800726e <_dtoa_r+0xa9e>
 800722c:	2a00      	cmp	r2, #0
 800722e:	ddee      	ble.n	800720e <_dtoa_r+0xa3e>
 8007230:	2201      	movs	r2, #1
 8007232:	9903      	ldr	r1, [sp, #12]
 8007234:	4648      	mov	r0, r9
 8007236:	9304      	str	r3, [sp, #16]
 8007238:	f000 fba2 	bl	8007980 <__lshift>
 800723c:	4621      	mov	r1, r4
 800723e:	9003      	str	r0, [sp, #12]
 8007240:	f000 fc0a 	bl	8007a58 <__mcmp>
 8007244:	2800      	cmp	r0, #0
 8007246:	9b04      	ldr	r3, [sp, #16]
 8007248:	dc02      	bgt.n	8007250 <_dtoa_r+0xa80>
 800724a:	d1e0      	bne.n	800720e <_dtoa_r+0xa3e>
 800724c:	07da      	lsls	r2, r3, #31
 800724e:	d5de      	bpl.n	800720e <_dtoa_r+0xa3e>
 8007250:	2b39      	cmp	r3, #57	@ 0x39
 8007252:	d1da      	bne.n	800720a <_dtoa_r+0xa3a>
 8007254:	2339      	movs	r3, #57	@ 0x39
 8007256:	f88b 3000 	strb.w	r3, [fp]
 800725a:	4633      	mov	r3, r6
 800725c:	461e      	mov	r6, r3
 800725e:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8007262:	3b01      	subs	r3, #1
 8007264:	2a39      	cmp	r2, #57	@ 0x39
 8007266:	d04e      	beq.n	8007306 <_dtoa_r+0xb36>
 8007268:	3201      	adds	r2, #1
 800726a:	701a      	strb	r2, [r3, #0]
 800726c:	e501      	b.n	8006c72 <_dtoa_r+0x4a2>
 800726e:	2a00      	cmp	r2, #0
 8007270:	dd03      	ble.n	800727a <_dtoa_r+0xaaa>
 8007272:	2b39      	cmp	r3, #57	@ 0x39
 8007274:	d0ee      	beq.n	8007254 <_dtoa_r+0xa84>
 8007276:	3301      	adds	r3, #1
 8007278:	e7c9      	b.n	800720e <_dtoa_r+0xa3e>
 800727a:	9a04      	ldr	r2, [sp, #16]
 800727c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800727e:	f802 3c01 	strb.w	r3, [r2, #-1]
 8007282:	428a      	cmp	r2, r1
 8007284:	d028      	beq.n	80072d8 <_dtoa_r+0xb08>
 8007286:	2300      	movs	r3, #0
 8007288:	220a      	movs	r2, #10
 800728a:	9903      	ldr	r1, [sp, #12]
 800728c:	4648      	mov	r0, r9
 800728e:	f000 f9d3 	bl	8007638 <__multadd>
 8007292:	42af      	cmp	r7, r5
 8007294:	9003      	str	r0, [sp, #12]
 8007296:	f04f 0300 	mov.w	r3, #0
 800729a:	f04f 020a 	mov.w	r2, #10
 800729e:	4639      	mov	r1, r7
 80072a0:	4648      	mov	r0, r9
 80072a2:	d107      	bne.n	80072b4 <_dtoa_r+0xae4>
 80072a4:	f000 f9c8 	bl	8007638 <__multadd>
 80072a8:	4607      	mov	r7, r0
 80072aa:	4605      	mov	r5, r0
 80072ac:	9b04      	ldr	r3, [sp, #16]
 80072ae:	3301      	adds	r3, #1
 80072b0:	9304      	str	r3, [sp, #16]
 80072b2:	e777      	b.n	80071a4 <_dtoa_r+0x9d4>
 80072b4:	f000 f9c0 	bl	8007638 <__multadd>
 80072b8:	4629      	mov	r1, r5
 80072ba:	4607      	mov	r7, r0
 80072bc:	2300      	movs	r3, #0
 80072be:	220a      	movs	r2, #10
 80072c0:	4648      	mov	r0, r9
 80072c2:	f000 f9b9 	bl	8007638 <__multadd>
 80072c6:	4605      	mov	r5, r0
 80072c8:	e7f0      	b.n	80072ac <_dtoa_r+0xadc>
 80072ca:	f1bb 0f00 	cmp.w	fp, #0
 80072ce:	bfcc      	ite	gt
 80072d0:	465e      	movgt	r6, fp
 80072d2:	2601      	movle	r6, #1
 80072d4:	2700      	movs	r7, #0
 80072d6:	4456      	add	r6, sl
 80072d8:	2201      	movs	r2, #1
 80072da:	9903      	ldr	r1, [sp, #12]
 80072dc:	4648      	mov	r0, r9
 80072de:	9304      	str	r3, [sp, #16]
 80072e0:	f000 fb4e 	bl	8007980 <__lshift>
 80072e4:	4621      	mov	r1, r4
 80072e6:	9003      	str	r0, [sp, #12]
 80072e8:	f000 fbb6 	bl	8007a58 <__mcmp>
 80072ec:	2800      	cmp	r0, #0
 80072ee:	dcb4      	bgt.n	800725a <_dtoa_r+0xa8a>
 80072f0:	d102      	bne.n	80072f8 <_dtoa_r+0xb28>
 80072f2:	9b04      	ldr	r3, [sp, #16]
 80072f4:	07db      	lsls	r3, r3, #31
 80072f6:	d4b0      	bmi.n	800725a <_dtoa_r+0xa8a>
 80072f8:	4633      	mov	r3, r6
 80072fa:	461e      	mov	r6, r3
 80072fc:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007300:	2a30      	cmp	r2, #48	@ 0x30
 8007302:	d0fa      	beq.n	80072fa <_dtoa_r+0xb2a>
 8007304:	e4b5      	b.n	8006c72 <_dtoa_r+0x4a2>
 8007306:	459a      	cmp	sl, r3
 8007308:	d1a8      	bne.n	800725c <_dtoa_r+0xa8c>
 800730a:	2331      	movs	r3, #49	@ 0x31
 800730c:	f108 0801 	add.w	r8, r8, #1
 8007310:	f88a 3000 	strb.w	r3, [sl]
 8007314:	e4ad      	b.n	8006c72 <_dtoa_r+0x4a2>
 8007316:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8007318:	f8df a058 	ldr.w	sl, [pc, #88]	@ 8007374 <_dtoa_r+0xba4>
 800731c:	b11b      	cbz	r3, 8007326 <_dtoa_r+0xb56>
 800731e:	f10a 0308 	add.w	r3, sl, #8
 8007322:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8007324:	6013      	str	r3, [r2, #0]
 8007326:	4650      	mov	r0, sl
 8007328:	b017      	add	sp, #92	@ 0x5c
 800732a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800732e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8007330:	2b01      	cmp	r3, #1
 8007332:	f77f ae2e 	ble.w	8006f92 <_dtoa_r+0x7c2>
 8007336:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007338:	930a      	str	r3, [sp, #40]	@ 0x28
 800733a:	2001      	movs	r0, #1
 800733c:	e64d      	b.n	8006fda <_dtoa_r+0x80a>
 800733e:	f1bb 0f00 	cmp.w	fp, #0
 8007342:	f77f aed9 	ble.w	80070f8 <_dtoa_r+0x928>
 8007346:	4656      	mov	r6, sl
 8007348:	4621      	mov	r1, r4
 800734a:	9803      	ldr	r0, [sp, #12]
 800734c:	f7ff f9b5 	bl	80066ba <quorem>
 8007350:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 8007354:	f806 3b01 	strb.w	r3, [r6], #1
 8007358:	eba6 020a 	sub.w	r2, r6, sl
 800735c:	4593      	cmp	fp, r2
 800735e:	ddb4      	ble.n	80072ca <_dtoa_r+0xafa>
 8007360:	2300      	movs	r3, #0
 8007362:	220a      	movs	r2, #10
 8007364:	4648      	mov	r0, r9
 8007366:	9903      	ldr	r1, [sp, #12]
 8007368:	f000 f966 	bl	8007638 <__multadd>
 800736c:	9003      	str	r0, [sp, #12]
 800736e:	e7eb      	b.n	8007348 <_dtoa_r+0xb78>
 8007370:	08008a52 	.word	0x08008a52
 8007374:	080089d6 	.word	0x080089d6

08007378 <_free_r>:
 8007378:	b538      	push	{r3, r4, r5, lr}
 800737a:	4605      	mov	r5, r0
 800737c:	2900      	cmp	r1, #0
 800737e:	d040      	beq.n	8007402 <_free_r+0x8a>
 8007380:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007384:	1f0c      	subs	r4, r1, #4
 8007386:	2b00      	cmp	r3, #0
 8007388:	bfb8      	it	lt
 800738a:	18e4      	addlt	r4, r4, r3
 800738c:	f000 f8e6 	bl	800755c <__malloc_lock>
 8007390:	4a1c      	ldr	r2, [pc, #112]	@ (8007404 <_free_r+0x8c>)
 8007392:	6813      	ldr	r3, [r2, #0]
 8007394:	b933      	cbnz	r3, 80073a4 <_free_r+0x2c>
 8007396:	6063      	str	r3, [r4, #4]
 8007398:	6014      	str	r4, [r2, #0]
 800739a:	4628      	mov	r0, r5
 800739c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80073a0:	f000 b8e2 	b.w	8007568 <__malloc_unlock>
 80073a4:	42a3      	cmp	r3, r4
 80073a6:	d908      	bls.n	80073ba <_free_r+0x42>
 80073a8:	6820      	ldr	r0, [r4, #0]
 80073aa:	1821      	adds	r1, r4, r0
 80073ac:	428b      	cmp	r3, r1
 80073ae:	bf01      	itttt	eq
 80073b0:	6819      	ldreq	r1, [r3, #0]
 80073b2:	685b      	ldreq	r3, [r3, #4]
 80073b4:	1809      	addeq	r1, r1, r0
 80073b6:	6021      	streq	r1, [r4, #0]
 80073b8:	e7ed      	b.n	8007396 <_free_r+0x1e>
 80073ba:	461a      	mov	r2, r3
 80073bc:	685b      	ldr	r3, [r3, #4]
 80073be:	b10b      	cbz	r3, 80073c4 <_free_r+0x4c>
 80073c0:	42a3      	cmp	r3, r4
 80073c2:	d9fa      	bls.n	80073ba <_free_r+0x42>
 80073c4:	6811      	ldr	r1, [r2, #0]
 80073c6:	1850      	adds	r0, r2, r1
 80073c8:	42a0      	cmp	r0, r4
 80073ca:	d10b      	bne.n	80073e4 <_free_r+0x6c>
 80073cc:	6820      	ldr	r0, [r4, #0]
 80073ce:	4401      	add	r1, r0
 80073d0:	1850      	adds	r0, r2, r1
 80073d2:	4283      	cmp	r3, r0
 80073d4:	6011      	str	r1, [r2, #0]
 80073d6:	d1e0      	bne.n	800739a <_free_r+0x22>
 80073d8:	6818      	ldr	r0, [r3, #0]
 80073da:	685b      	ldr	r3, [r3, #4]
 80073dc:	4408      	add	r0, r1
 80073de:	6010      	str	r0, [r2, #0]
 80073e0:	6053      	str	r3, [r2, #4]
 80073e2:	e7da      	b.n	800739a <_free_r+0x22>
 80073e4:	d902      	bls.n	80073ec <_free_r+0x74>
 80073e6:	230c      	movs	r3, #12
 80073e8:	602b      	str	r3, [r5, #0]
 80073ea:	e7d6      	b.n	800739a <_free_r+0x22>
 80073ec:	6820      	ldr	r0, [r4, #0]
 80073ee:	1821      	adds	r1, r4, r0
 80073f0:	428b      	cmp	r3, r1
 80073f2:	bf01      	itttt	eq
 80073f4:	6819      	ldreq	r1, [r3, #0]
 80073f6:	685b      	ldreq	r3, [r3, #4]
 80073f8:	1809      	addeq	r1, r1, r0
 80073fa:	6021      	streq	r1, [r4, #0]
 80073fc:	6063      	str	r3, [r4, #4]
 80073fe:	6054      	str	r4, [r2, #4]
 8007400:	e7cb      	b.n	800739a <_free_r+0x22>
 8007402:	bd38      	pop	{r3, r4, r5, pc}
 8007404:	2000049c 	.word	0x2000049c

08007408 <malloc>:
 8007408:	4b02      	ldr	r3, [pc, #8]	@ (8007414 <malloc+0xc>)
 800740a:	4601      	mov	r1, r0
 800740c:	6818      	ldr	r0, [r3, #0]
 800740e:	f000 b825 	b.w	800745c <_malloc_r>
 8007412:	bf00      	nop
 8007414:	20000018 	.word	0x20000018

08007418 <sbrk_aligned>:
 8007418:	b570      	push	{r4, r5, r6, lr}
 800741a:	4e0f      	ldr	r6, [pc, #60]	@ (8007458 <sbrk_aligned+0x40>)
 800741c:	460c      	mov	r4, r1
 800741e:	6831      	ldr	r1, [r6, #0]
 8007420:	4605      	mov	r5, r0
 8007422:	b911      	cbnz	r1, 800742a <sbrk_aligned+0x12>
 8007424:	f001 f80e 	bl	8008444 <_sbrk_r>
 8007428:	6030      	str	r0, [r6, #0]
 800742a:	4621      	mov	r1, r4
 800742c:	4628      	mov	r0, r5
 800742e:	f001 f809 	bl	8008444 <_sbrk_r>
 8007432:	1c43      	adds	r3, r0, #1
 8007434:	d103      	bne.n	800743e <sbrk_aligned+0x26>
 8007436:	f04f 34ff 	mov.w	r4, #4294967295
 800743a:	4620      	mov	r0, r4
 800743c:	bd70      	pop	{r4, r5, r6, pc}
 800743e:	1cc4      	adds	r4, r0, #3
 8007440:	f024 0403 	bic.w	r4, r4, #3
 8007444:	42a0      	cmp	r0, r4
 8007446:	d0f8      	beq.n	800743a <sbrk_aligned+0x22>
 8007448:	1a21      	subs	r1, r4, r0
 800744a:	4628      	mov	r0, r5
 800744c:	f000 fffa 	bl	8008444 <_sbrk_r>
 8007450:	3001      	adds	r0, #1
 8007452:	d1f2      	bne.n	800743a <sbrk_aligned+0x22>
 8007454:	e7ef      	b.n	8007436 <sbrk_aligned+0x1e>
 8007456:	bf00      	nop
 8007458:	20000498 	.word	0x20000498

0800745c <_malloc_r>:
 800745c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007460:	1ccd      	adds	r5, r1, #3
 8007462:	f025 0503 	bic.w	r5, r5, #3
 8007466:	3508      	adds	r5, #8
 8007468:	2d0c      	cmp	r5, #12
 800746a:	bf38      	it	cc
 800746c:	250c      	movcc	r5, #12
 800746e:	2d00      	cmp	r5, #0
 8007470:	4606      	mov	r6, r0
 8007472:	db01      	blt.n	8007478 <_malloc_r+0x1c>
 8007474:	42a9      	cmp	r1, r5
 8007476:	d904      	bls.n	8007482 <_malloc_r+0x26>
 8007478:	230c      	movs	r3, #12
 800747a:	6033      	str	r3, [r6, #0]
 800747c:	2000      	movs	r0, #0
 800747e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007482:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007558 <_malloc_r+0xfc>
 8007486:	f000 f869 	bl	800755c <__malloc_lock>
 800748a:	f8d8 3000 	ldr.w	r3, [r8]
 800748e:	461c      	mov	r4, r3
 8007490:	bb44      	cbnz	r4, 80074e4 <_malloc_r+0x88>
 8007492:	4629      	mov	r1, r5
 8007494:	4630      	mov	r0, r6
 8007496:	f7ff ffbf 	bl	8007418 <sbrk_aligned>
 800749a:	1c43      	adds	r3, r0, #1
 800749c:	4604      	mov	r4, r0
 800749e:	d158      	bne.n	8007552 <_malloc_r+0xf6>
 80074a0:	f8d8 4000 	ldr.w	r4, [r8]
 80074a4:	4627      	mov	r7, r4
 80074a6:	2f00      	cmp	r7, #0
 80074a8:	d143      	bne.n	8007532 <_malloc_r+0xd6>
 80074aa:	2c00      	cmp	r4, #0
 80074ac:	d04b      	beq.n	8007546 <_malloc_r+0xea>
 80074ae:	6823      	ldr	r3, [r4, #0]
 80074b0:	4639      	mov	r1, r7
 80074b2:	4630      	mov	r0, r6
 80074b4:	eb04 0903 	add.w	r9, r4, r3
 80074b8:	f000 ffc4 	bl	8008444 <_sbrk_r>
 80074bc:	4581      	cmp	r9, r0
 80074be:	d142      	bne.n	8007546 <_malloc_r+0xea>
 80074c0:	6821      	ldr	r1, [r4, #0]
 80074c2:	4630      	mov	r0, r6
 80074c4:	1a6d      	subs	r5, r5, r1
 80074c6:	4629      	mov	r1, r5
 80074c8:	f7ff ffa6 	bl	8007418 <sbrk_aligned>
 80074cc:	3001      	adds	r0, #1
 80074ce:	d03a      	beq.n	8007546 <_malloc_r+0xea>
 80074d0:	6823      	ldr	r3, [r4, #0]
 80074d2:	442b      	add	r3, r5
 80074d4:	6023      	str	r3, [r4, #0]
 80074d6:	f8d8 3000 	ldr.w	r3, [r8]
 80074da:	685a      	ldr	r2, [r3, #4]
 80074dc:	bb62      	cbnz	r2, 8007538 <_malloc_r+0xdc>
 80074de:	f8c8 7000 	str.w	r7, [r8]
 80074e2:	e00f      	b.n	8007504 <_malloc_r+0xa8>
 80074e4:	6822      	ldr	r2, [r4, #0]
 80074e6:	1b52      	subs	r2, r2, r5
 80074e8:	d420      	bmi.n	800752c <_malloc_r+0xd0>
 80074ea:	2a0b      	cmp	r2, #11
 80074ec:	d917      	bls.n	800751e <_malloc_r+0xc2>
 80074ee:	1961      	adds	r1, r4, r5
 80074f0:	42a3      	cmp	r3, r4
 80074f2:	6025      	str	r5, [r4, #0]
 80074f4:	bf18      	it	ne
 80074f6:	6059      	strne	r1, [r3, #4]
 80074f8:	6863      	ldr	r3, [r4, #4]
 80074fa:	bf08      	it	eq
 80074fc:	f8c8 1000 	streq.w	r1, [r8]
 8007500:	5162      	str	r2, [r4, r5]
 8007502:	604b      	str	r3, [r1, #4]
 8007504:	4630      	mov	r0, r6
 8007506:	f000 f82f 	bl	8007568 <__malloc_unlock>
 800750a:	f104 000b 	add.w	r0, r4, #11
 800750e:	1d23      	adds	r3, r4, #4
 8007510:	f020 0007 	bic.w	r0, r0, #7
 8007514:	1ac2      	subs	r2, r0, r3
 8007516:	bf1c      	itt	ne
 8007518:	1a1b      	subne	r3, r3, r0
 800751a:	50a3      	strne	r3, [r4, r2]
 800751c:	e7af      	b.n	800747e <_malloc_r+0x22>
 800751e:	6862      	ldr	r2, [r4, #4]
 8007520:	42a3      	cmp	r3, r4
 8007522:	bf0c      	ite	eq
 8007524:	f8c8 2000 	streq.w	r2, [r8]
 8007528:	605a      	strne	r2, [r3, #4]
 800752a:	e7eb      	b.n	8007504 <_malloc_r+0xa8>
 800752c:	4623      	mov	r3, r4
 800752e:	6864      	ldr	r4, [r4, #4]
 8007530:	e7ae      	b.n	8007490 <_malloc_r+0x34>
 8007532:	463c      	mov	r4, r7
 8007534:	687f      	ldr	r7, [r7, #4]
 8007536:	e7b6      	b.n	80074a6 <_malloc_r+0x4a>
 8007538:	461a      	mov	r2, r3
 800753a:	685b      	ldr	r3, [r3, #4]
 800753c:	42a3      	cmp	r3, r4
 800753e:	d1fb      	bne.n	8007538 <_malloc_r+0xdc>
 8007540:	2300      	movs	r3, #0
 8007542:	6053      	str	r3, [r2, #4]
 8007544:	e7de      	b.n	8007504 <_malloc_r+0xa8>
 8007546:	230c      	movs	r3, #12
 8007548:	4630      	mov	r0, r6
 800754a:	6033      	str	r3, [r6, #0]
 800754c:	f000 f80c 	bl	8007568 <__malloc_unlock>
 8007550:	e794      	b.n	800747c <_malloc_r+0x20>
 8007552:	6005      	str	r5, [r0, #0]
 8007554:	e7d6      	b.n	8007504 <_malloc_r+0xa8>
 8007556:	bf00      	nop
 8007558:	2000049c 	.word	0x2000049c

0800755c <__malloc_lock>:
 800755c:	4801      	ldr	r0, [pc, #4]	@ (8007564 <__malloc_lock+0x8>)
 800755e:	f7ff b88e 	b.w	800667e <__retarget_lock_acquire_recursive>
 8007562:	bf00      	nop
 8007564:	20000494 	.word	0x20000494

08007568 <__malloc_unlock>:
 8007568:	4801      	ldr	r0, [pc, #4]	@ (8007570 <__malloc_unlock+0x8>)
 800756a:	f7ff b889 	b.w	8006680 <__retarget_lock_release_recursive>
 800756e:	bf00      	nop
 8007570:	20000494 	.word	0x20000494

08007574 <_Balloc>:
 8007574:	b570      	push	{r4, r5, r6, lr}
 8007576:	69c6      	ldr	r6, [r0, #28]
 8007578:	4604      	mov	r4, r0
 800757a:	460d      	mov	r5, r1
 800757c:	b976      	cbnz	r6, 800759c <_Balloc+0x28>
 800757e:	2010      	movs	r0, #16
 8007580:	f7ff ff42 	bl	8007408 <malloc>
 8007584:	4602      	mov	r2, r0
 8007586:	61e0      	str	r0, [r4, #28]
 8007588:	b920      	cbnz	r0, 8007594 <_Balloc+0x20>
 800758a:	216b      	movs	r1, #107	@ 0x6b
 800758c:	4b17      	ldr	r3, [pc, #92]	@ (80075ec <_Balloc+0x78>)
 800758e:	4818      	ldr	r0, [pc, #96]	@ (80075f0 <_Balloc+0x7c>)
 8007590:	f000 ff68 	bl	8008464 <__assert_func>
 8007594:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007598:	6006      	str	r6, [r0, #0]
 800759a:	60c6      	str	r6, [r0, #12]
 800759c:	69e6      	ldr	r6, [r4, #28]
 800759e:	68f3      	ldr	r3, [r6, #12]
 80075a0:	b183      	cbz	r3, 80075c4 <_Balloc+0x50>
 80075a2:	69e3      	ldr	r3, [r4, #28]
 80075a4:	68db      	ldr	r3, [r3, #12]
 80075a6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80075aa:	b9b8      	cbnz	r0, 80075dc <_Balloc+0x68>
 80075ac:	2101      	movs	r1, #1
 80075ae:	fa01 f605 	lsl.w	r6, r1, r5
 80075b2:	1d72      	adds	r2, r6, #5
 80075b4:	4620      	mov	r0, r4
 80075b6:	0092      	lsls	r2, r2, #2
 80075b8:	f000 ff72 	bl	80084a0 <_calloc_r>
 80075bc:	b160      	cbz	r0, 80075d8 <_Balloc+0x64>
 80075be:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80075c2:	e00e      	b.n	80075e2 <_Balloc+0x6e>
 80075c4:	2221      	movs	r2, #33	@ 0x21
 80075c6:	2104      	movs	r1, #4
 80075c8:	4620      	mov	r0, r4
 80075ca:	f000 ff69 	bl	80084a0 <_calloc_r>
 80075ce:	69e3      	ldr	r3, [r4, #28]
 80075d0:	60f0      	str	r0, [r6, #12]
 80075d2:	68db      	ldr	r3, [r3, #12]
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d1e4      	bne.n	80075a2 <_Balloc+0x2e>
 80075d8:	2000      	movs	r0, #0
 80075da:	bd70      	pop	{r4, r5, r6, pc}
 80075dc:	6802      	ldr	r2, [r0, #0]
 80075de:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80075e2:	2300      	movs	r3, #0
 80075e4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80075e8:	e7f7      	b.n	80075da <_Balloc+0x66>
 80075ea:	bf00      	nop
 80075ec:	080089e3 	.word	0x080089e3
 80075f0:	08008a63 	.word	0x08008a63

080075f4 <_Bfree>:
 80075f4:	b570      	push	{r4, r5, r6, lr}
 80075f6:	69c6      	ldr	r6, [r0, #28]
 80075f8:	4605      	mov	r5, r0
 80075fa:	460c      	mov	r4, r1
 80075fc:	b976      	cbnz	r6, 800761c <_Bfree+0x28>
 80075fe:	2010      	movs	r0, #16
 8007600:	f7ff ff02 	bl	8007408 <malloc>
 8007604:	4602      	mov	r2, r0
 8007606:	61e8      	str	r0, [r5, #28]
 8007608:	b920      	cbnz	r0, 8007614 <_Bfree+0x20>
 800760a:	218f      	movs	r1, #143	@ 0x8f
 800760c:	4b08      	ldr	r3, [pc, #32]	@ (8007630 <_Bfree+0x3c>)
 800760e:	4809      	ldr	r0, [pc, #36]	@ (8007634 <_Bfree+0x40>)
 8007610:	f000 ff28 	bl	8008464 <__assert_func>
 8007614:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007618:	6006      	str	r6, [r0, #0]
 800761a:	60c6      	str	r6, [r0, #12]
 800761c:	b13c      	cbz	r4, 800762e <_Bfree+0x3a>
 800761e:	69eb      	ldr	r3, [r5, #28]
 8007620:	6862      	ldr	r2, [r4, #4]
 8007622:	68db      	ldr	r3, [r3, #12]
 8007624:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007628:	6021      	str	r1, [r4, #0]
 800762a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800762e:	bd70      	pop	{r4, r5, r6, pc}
 8007630:	080089e3 	.word	0x080089e3
 8007634:	08008a63 	.word	0x08008a63

08007638 <__multadd>:
 8007638:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800763c:	4607      	mov	r7, r0
 800763e:	460c      	mov	r4, r1
 8007640:	461e      	mov	r6, r3
 8007642:	2000      	movs	r0, #0
 8007644:	690d      	ldr	r5, [r1, #16]
 8007646:	f101 0c14 	add.w	ip, r1, #20
 800764a:	f8dc 3000 	ldr.w	r3, [ip]
 800764e:	3001      	adds	r0, #1
 8007650:	b299      	uxth	r1, r3
 8007652:	fb02 6101 	mla	r1, r2, r1, r6
 8007656:	0c1e      	lsrs	r6, r3, #16
 8007658:	0c0b      	lsrs	r3, r1, #16
 800765a:	fb02 3306 	mla	r3, r2, r6, r3
 800765e:	b289      	uxth	r1, r1
 8007660:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007664:	4285      	cmp	r5, r0
 8007666:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800766a:	f84c 1b04 	str.w	r1, [ip], #4
 800766e:	dcec      	bgt.n	800764a <__multadd+0x12>
 8007670:	b30e      	cbz	r6, 80076b6 <__multadd+0x7e>
 8007672:	68a3      	ldr	r3, [r4, #8]
 8007674:	42ab      	cmp	r3, r5
 8007676:	dc19      	bgt.n	80076ac <__multadd+0x74>
 8007678:	6861      	ldr	r1, [r4, #4]
 800767a:	4638      	mov	r0, r7
 800767c:	3101      	adds	r1, #1
 800767e:	f7ff ff79 	bl	8007574 <_Balloc>
 8007682:	4680      	mov	r8, r0
 8007684:	b928      	cbnz	r0, 8007692 <__multadd+0x5a>
 8007686:	4602      	mov	r2, r0
 8007688:	21ba      	movs	r1, #186	@ 0xba
 800768a:	4b0c      	ldr	r3, [pc, #48]	@ (80076bc <__multadd+0x84>)
 800768c:	480c      	ldr	r0, [pc, #48]	@ (80076c0 <__multadd+0x88>)
 800768e:	f000 fee9 	bl	8008464 <__assert_func>
 8007692:	6922      	ldr	r2, [r4, #16]
 8007694:	f104 010c 	add.w	r1, r4, #12
 8007698:	3202      	adds	r2, #2
 800769a:	0092      	lsls	r2, r2, #2
 800769c:	300c      	adds	r0, #12
 800769e:	f7fe fffe 	bl	800669e <memcpy>
 80076a2:	4621      	mov	r1, r4
 80076a4:	4638      	mov	r0, r7
 80076a6:	f7ff ffa5 	bl	80075f4 <_Bfree>
 80076aa:	4644      	mov	r4, r8
 80076ac:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80076b0:	3501      	adds	r5, #1
 80076b2:	615e      	str	r6, [r3, #20]
 80076b4:	6125      	str	r5, [r4, #16]
 80076b6:	4620      	mov	r0, r4
 80076b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80076bc:	08008a52 	.word	0x08008a52
 80076c0:	08008a63 	.word	0x08008a63

080076c4 <__hi0bits>:
 80076c4:	4603      	mov	r3, r0
 80076c6:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80076ca:	bf3a      	itte	cc
 80076cc:	0403      	lslcc	r3, r0, #16
 80076ce:	2010      	movcc	r0, #16
 80076d0:	2000      	movcs	r0, #0
 80076d2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80076d6:	bf3c      	itt	cc
 80076d8:	021b      	lslcc	r3, r3, #8
 80076da:	3008      	addcc	r0, #8
 80076dc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80076e0:	bf3c      	itt	cc
 80076e2:	011b      	lslcc	r3, r3, #4
 80076e4:	3004      	addcc	r0, #4
 80076e6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80076ea:	bf3c      	itt	cc
 80076ec:	009b      	lslcc	r3, r3, #2
 80076ee:	3002      	addcc	r0, #2
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	db05      	blt.n	8007700 <__hi0bits+0x3c>
 80076f4:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80076f8:	f100 0001 	add.w	r0, r0, #1
 80076fc:	bf08      	it	eq
 80076fe:	2020      	moveq	r0, #32
 8007700:	4770      	bx	lr

08007702 <__lo0bits>:
 8007702:	6803      	ldr	r3, [r0, #0]
 8007704:	4602      	mov	r2, r0
 8007706:	f013 0007 	ands.w	r0, r3, #7
 800770a:	d00b      	beq.n	8007724 <__lo0bits+0x22>
 800770c:	07d9      	lsls	r1, r3, #31
 800770e:	d421      	bmi.n	8007754 <__lo0bits+0x52>
 8007710:	0798      	lsls	r0, r3, #30
 8007712:	bf49      	itett	mi
 8007714:	085b      	lsrmi	r3, r3, #1
 8007716:	089b      	lsrpl	r3, r3, #2
 8007718:	2001      	movmi	r0, #1
 800771a:	6013      	strmi	r3, [r2, #0]
 800771c:	bf5c      	itt	pl
 800771e:	2002      	movpl	r0, #2
 8007720:	6013      	strpl	r3, [r2, #0]
 8007722:	4770      	bx	lr
 8007724:	b299      	uxth	r1, r3
 8007726:	b909      	cbnz	r1, 800772c <__lo0bits+0x2a>
 8007728:	2010      	movs	r0, #16
 800772a:	0c1b      	lsrs	r3, r3, #16
 800772c:	b2d9      	uxtb	r1, r3
 800772e:	b909      	cbnz	r1, 8007734 <__lo0bits+0x32>
 8007730:	3008      	adds	r0, #8
 8007732:	0a1b      	lsrs	r3, r3, #8
 8007734:	0719      	lsls	r1, r3, #28
 8007736:	bf04      	itt	eq
 8007738:	091b      	lsreq	r3, r3, #4
 800773a:	3004      	addeq	r0, #4
 800773c:	0799      	lsls	r1, r3, #30
 800773e:	bf04      	itt	eq
 8007740:	089b      	lsreq	r3, r3, #2
 8007742:	3002      	addeq	r0, #2
 8007744:	07d9      	lsls	r1, r3, #31
 8007746:	d403      	bmi.n	8007750 <__lo0bits+0x4e>
 8007748:	085b      	lsrs	r3, r3, #1
 800774a:	f100 0001 	add.w	r0, r0, #1
 800774e:	d003      	beq.n	8007758 <__lo0bits+0x56>
 8007750:	6013      	str	r3, [r2, #0]
 8007752:	4770      	bx	lr
 8007754:	2000      	movs	r0, #0
 8007756:	4770      	bx	lr
 8007758:	2020      	movs	r0, #32
 800775a:	4770      	bx	lr

0800775c <__i2b>:
 800775c:	b510      	push	{r4, lr}
 800775e:	460c      	mov	r4, r1
 8007760:	2101      	movs	r1, #1
 8007762:	f7ff ff07 	bl	8007574 <_Balloc>
 8007766:	4602      	mov	r2, r0
 8007768:	b928      	cbnz	r0, 8007776 <__i2b+0x1a>
 800776a:	f240 1145 	movw	r1, #325	@ 0x145
 800776e:	4b04      	ldr	r3, [pc, #16]	@ (8007780 <__i2b+0x24>)
 8007770:	4804      	ldr	r0, [pc, #16]	@ (8007784 <__i2b+0x28>)
 8007772:	f000 fe77 	bl	8008464 <__assert_func>
 8007776:	2301      	movs	r3, #1
 8007778:	6144      	str	r4, [r0, #20]
 800777a:	6103      	str	r3, [r0, #16]
 800777c:	bd10      	pop	{r4, pc}
 800777e:	bf00      	nop
 8007780:	08008a52 	.word	0x08008a52
 8007784:	08008a63 	.word	0x08008a63

08007788 <__multiply>:
 8007788:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800778c:	4617      	mov	r7, r2
 800778e:	690a      	ldr	r2, [r1, #16]
 8007790:	693b      	ldr	r3, [r7, #16]
 8007792:	4689      	mov	r9, r1
 8007794:	429a      	cmp	r2, r3
 8007796:	bfa2      	ittt	ge
 8007798:	463b      	movge	r3, r7
 800779a:	460f      	movge	r7, r1
 800779c:	4699      	movge	r9, r3
 800779e:	693d      	ldr	r5, [r7, #16]
 80077a0:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80077a4:	68bb      	ldr	r3, [r7, #8]
 80077a6:	6879      	ldr	r1, [r7, #4]
 80077a8:	eb05 060a 	add.w	r6, r5, sl
 80077ac:	42b3      	cmp	r3, r6
 80077ae:	b085      	sub	sp, #20
 80077b0:	bfb8      	it	lt
 80077b2:	3101      	addlt	r1, #1
 80077b4:	f7ff fede 	bl	8007574 <_Balloc>
 80077b8:	b930      	cbnz	r0, 80077c8 <__multiply+0x40>
 80077ba:	4602      	mov	r2, r0
 80077bc:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80077c0:	4b40      	ldr	r3, [pc, #256]	@ (80078c4 <__multiply+0x13c>)
 80077c2:	4841      	ldr	r0, [pc, #260]	@ (80078c8 <__multiply+0x140>)
 80077c4:	f000 fe4e 	bl	8008464 <__assert_func>
 80077c8:	f100 0414 	add.w	r4, r0, #20
 80077cc:	4623      	mov	r3, r4
 80077ce:	2200      	movs	r2, #0
 80077d0:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 80077d4:	4573      	cmp	r3, lr
 80077d6:	d320      	bcc.n	800781a <__multiply+0x92>
 80077d8:	f107 0814 	add.w	r8, r7, #20
 80077dc:	f109 0114 	add.w	r1, r9, #20
 80077e0:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 80077e4:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 80077e8:	9302      	str	r3, [sp, #8]
 80077ea:	1beb      	subs	r3, r5, r7
 80077ec:	3b15      	subs	r3, #21
 80077ee:	f023 0303 	bic.w	r3, r3, #3
 80077f2:	3304      	adds	r3, #4
 80077f4:	3715      	adds	r7, #21
 80077f6:	42bd      	cmp	r5, r7
 80077f8:	bf38      	it	cc
 80077fa:	2304      	movcc	r3, #4
 80077fc:	9301      	str	r3, [sp, #4]
 80077fe:	9b02      	ldr	r3, [sp, #8]
 8007800:	9103      	str	r1, [sp, #12]
 8007802:	428b      	cmp	r3, r1
 8007804:	d80c      	bhi.n	8007820 <__multiply+0x98>
 8007806:	2e00      	cmp	r6, #0
 8007808:	dd03      	ble.n	8007812 <__multiply+0x8a>
 800780a:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800780e:	2b00      	cmp	r3, #0
 8007810:	d055      	beq.n	80078be <__multiply+0x136>
 8007812:	6106      	str	r6, [r0, #16]
 8007814:	b005      	add	sp, #20
 8007816:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800781a:	f843 2b04 	str.w	r2, [r3], #4
 800781e:	e7d9      	b.n	80077d4 <__multiply+0x4c>
 8007820:	f8b1 a000 	ldrh.w	sl, [r1]
 8007824:	f1ba 0f00 	cmp.w	sl, #0
 8007828:	d01f      	beq.n	800786a <__multiply+0xe2>
 800782a:	46c4      	mov	ip, r8
 800782c:	46a1      	mov	r9, r4
 800782e:	2700      	movs	r7, #0
 8007830:	f85c 2b04 	ldr.w	r2, [ip], #4
 8007834:	f8d9 3000 	ldr.w	r3, [r9]
 8007838:	fa1f fb82 	uxth.w	fp, r2
 800783c:	b29b      	uxth	r3, r3
 800783e:	fb0a 330b 	mla	r3, sl, fp, r3
 8007842:	443b      	add	r3, r7
 8007844:	f8d9 7000 	ldr.w	r7, [r9]
 8007848:	0c12      	lsrs	r2, r2, #16
 800784a:	0c3f      	lsrs	r7, r7, #16
 800784c:	fb0a 7202 	mla	r2, sl, r2, r7
 8007850:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 8007854:	b29b      	uxth	r3, r3
 8007856:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800785a:	4565      	cmp	r5, ip
 800785c:	ea4f 4712 	mov.w	r7, r2, lsr #16
 8007860:	f849 3b04 	str.w	r3, [r9], #4
 8007864:	d8e4      	bhi.n	8007830 <__multiply+0xa8>
 8007866:	9b01      	ldr	r3, [sp, #4]
 8007868:	50e7      	str	r7, [r4, r3]
 800786a:	9b03      	ldr	r3, [sp, #12]
 800786c:	3104      	adds	r1, #4
 800786e:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8007872:	f1b9 0f00 	cmp.w	r9, #0
 8007876:	d020      	beq.n	80078ba <__multiply+0x132>
 8007878:	4647      	mov	r7, r8
 800787a:	46a4      	mov	ip, r4
 800787c:	f04f 0a00 	mov.w	sl, #0
 8007880:	6823      	ldr	r3, [r4, #0]
 8007882:	f8b7 b000 	ldrh.w	fp, [r7]
 8007886:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800788a:	b29b      	uxth	r3, r3
 800788c:	fb09 220b 	mla	r2, r9, fp, r2
 8007890:	4452      	add	r2, sl
 8007892:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007896:	f84c 3b04 	str.w	r3, [ip], #4
 800789a:	f857 3b04 	ldr.w	r3, [r7], #4
 800789e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80078a2:	f8bc 3000 	ldrh.w	r3, [ip]
 80078a6:	42bd      	cmp	r5, r7
 80078a8:	fb09 330a 	mla	r3, r9, sl, r3
 80078ac:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 80078b0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80078b4:	d8e5      	bhi.n	8007882 <__multiply+0xfa>
 80078b6:	9a01      	ldr	r2, [sp, #4]
 80078b8:	50a3      	str	r3, [r4, r2]
 80078ba:	3404      	adds	r4, #4
 80078bc:	e79f      	b.n	80077fe <__multiply+0x76>
 80078be:	3e01      	subs	r6, #1
 80078c0:	e7a1      	b.n	8007806 <__multiply+0x7e>
 80078c2:	bf00      	nop
 80078c4:	08008a52 	.word	0x08008a52
 80078c8:	08008a63 	.word	0x08008a63

080078cc <__pow5mult>:
 80078cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80078d0:	4615      	mov	r5, r2
 80078d2:	f012 0203 	ands.w	r2, r2, #3
 80078d6:	4607      	mov	r7, r0
 80078d8:	460e      	mov	r6, r1
 80078da:	d007      	beq.n	80078ec <__pow5mult+0x20>
 80078dc:	4c25      	ldr	r4, [pc, #148]	@ (8007974 <__pow5mult+0xa8>)
 80078de:	3a01      	subs	r2, #1
 80078e0:	2300      	movs	r3, #0
 80078e2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80078e6:	f7ff fea7 	bl	8007638 <__multadd>
 80078ea:	4606      	mov	r6, r0
 80078ec:	10ad      	asrs	r5, r5, #2
 80078ee:	d03d      	beq.n	800796c <__pow5mult+0xa0>
 80078f0:	69fc      	ldr	r4, [r7, #28]
 80078f2:	b97c      	cbnz	r4, 8007914 <__pow5mult+0x48>
 80078f4:	2010      	movs	r0, #16
 80078f6:	f7ff fd87 	bl	8007408 <malloc>
 80078fa:	4602      	mov	r2, r0
 80078fc:	61f8      	str	r0, [r7, #28]
 80078fe:	b928      	cbnz	r0, 800790c <__pow5mult+0x40>
 8007900:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8007904:	4b1c      	ldr	r3, [pc, #112]	@ (8007978 <__pow5mult+0xac>)
 8007906:	481d      	ldr	r0, [pc, #116]	@ (800797c <__pow5mult+0xb0>)
 8007908:	f000 fdac 	bl	8008464 <__assert_func>
 800790c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007910:	6004      	str	r4, [r0, #0]
 8007912:	60c4      	str	r4, [r0, #12]
 8007914:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8007918:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800791c:	b94c      	cbnz	r4, 8007932 <__pow5mult+0x66>
 800791e:	f240 2171 	movw	r1, #625	@ 0x271
 8007922:	4638      	mov	r0, r7
 8007924:	f7ff ff1a 	bl	800775c <__i2b>
 8007928:	2300      	movs	r3, #0
 800792a:	4604      	mov	r4, r0
 800792c:	f8c8 0008 	str.w	r0, [r8, #8]
 8007930:	6003      	str	r3, [r0, #0]
 8007932:	f04f 0900 	mov.w	r9, #0
 8007936:	07eb      	lsls	r3, r5, #31
 8007938:	d50a      	bpl.n	8007950 <__pow5mult+0x84>
 800793a:	4631      	mov	r1, r6
 800793c:	4622      	mov	r2, r4
 800793e:	4638      	mov	r0, r7
 8007940:	f7ff ff22 	bl	8007788 <__multiply>
 8007944:	4680      	mov	r8, r0
 8007946:	4631      	mov	r1, r6
 8007948:	4638      	mov	r0, r7
 800794a:	f7ff fe53 	bl	80075f4 <_Bfree>
 800794e:	4646      	mov	r6, r8
 8007950:	106d      	asrs	r5, r5, #1
 8007952:	d00b      	beq.n	800796c <__pow5mult+0xa0>
 8007954:	6820      	ldr	r0, [r4, #0]
 8007956:	b938      	cbnz	r0, 8007968 <__pow5mult+0x9c>
 8007958:	4622      	mov	r2, r4
 800795a:	4621      	mov	r1, r4
 800795c:	4638      	mov	r0, r7
 800795e:	f7ff ff13 	bl	8007788 <__multiply>
 8007962:	6020      	str	r0, [r4, #0]
 8007964:	f8c0 9000 	str.w	r9, [r0]
 8007968:	4604      	mov	r4, r0
 800796a:	e7e4      	b.n	8007936 <__pow5mult+0x6a>
 800796c:	4630      	mov	r0, r6
 800796e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007972:	bf00      	nop
 8007974:	08008b14 	.word	0x08008b14
 8007978:	080089e3 	.word	0x080089e3
 800797c:	08008a63 	.word	0x08008a63

08007980 <__lshift>:
 8007980:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007984:	460c      	mov	r4, r1
 8007986:	4607      	mov	r7, r0
 8007988:	4691      	mov	r9, r2
 800798a:	6923      	ldr	r3, [r4, #16]
 800798c:	6849      	ldr	r1, [r1, #4]
 800798e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007992:	68a3      	ldr	r3, [r4, #8]
 8007994:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007998:	f108 0601 	add.w	r6, r8, #1
 800799c:	42b3      	cmp	r3, r6
 800799e:	db0b      	blt.n	80079b8 <__lshift+0x38>
 80079a0:	4638      	mov	r0, r7
 80079a2:	f7ff fde7 	bl	8007574 <_Balloc>
 80079a6:	4605      	mov	r5, r0
 80079a8:	b948      	cbnz	r0, 80079be <__lshift+0x3e>
 80079aa:	4602      	mov	r2, r0
 80079ac:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80079b0:	4b27      	ldr	r3, [pc, #156]	@ (8007a50 <__lshift+0xd0>)
 80079b2:	4828      	ldr	r0, [pc, #160]	@ (8007a54 <__lshift+0xd4>)
 80079b4:	f000 fd56 	bl	8008464 <__assert_func>
 80079b8:	3101      	adds	r1, #1
 80079ba:	005b      	lsls	r3, r3, #1
 80079bc:	e7ee      	b.n	800799c <__lshift+0x1c>
 80079be:	2300      	movs	r3, #0
 80079c0:	f100 0114 	add.w	r1, r0, #20
 80079c4:	f100 0210 	add.w	r2, r0, #16
 80079c8:	4618      	mov	r0, r3
 80079ca:	4553      	cmp	r3, sl
 80079cc:	db33      	blt.n	8007a36 <__lshift+0xb6>
 80079ce:	6920      	ldr	r0, [r4, #16]
 80079d0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80079d4:	f104 0314 	add.w	r3, r4, #20
 80079d8:	f019 091f 	ands.w	r9, r9, #31
 80079dc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80079e0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80079e4:	d02b      	beq.n	8007a3e <__lshift+0xbe>
 80079e6:	468a      	mov	sl, r1
 80079e8:	2200      	movs	r2, #0
 80079ea:	f1c9 0e20 	rsb	lr, r9, #32
 80079ee:	6818      	ldr	r0, [r3, #0]
 80079f0:	fa00 f009 	lsl.w	r0, r0, r9
 80079f4:	4310      	orrs	r0, r2
 80079f6:	f84a 0b04 	str.w	r0, [sl], #4
 80079fa:	f853 2b04 	ldr.w	r2, [r3], #4
 80079fe:	459c      	cmp	ip, r3
 8007a00:	fa22 f20e 	lsr.w	r2, r2, lr
 8007a04:	d8f3      	bhi.n	80079ee <__lshift+0x6e>
 8007a06:	ebac 0304 	sub.w	r3, ip, r4
 8007a0a:	3b15      	subs	r3, #21
 8007a0c:	f023 0303 	bic.w	r3, r3, #3
 8007a10:	3304      	adds	r3, #4
 8007a12:	f104 0015 	add.w	r0, r4, #21
 8007a16:	4560      	cmp	r0, ip
 8007a18:	bf88      	it	hi
 8007a1a:	2304      	movhi	r3, #4
 8007a1c:	50ca      	str	r2, [r1, r3]
 8007a1e:	b10a      	cbz	r2, 8007a24 <__lshift+0xa4>
 8007a20:	f108 0602 	add.w	r6, r8, #2
 8007a24:	3e01      	subs	r6, #1
 8007a26:	4638      	mov	r0, r7
 8007a28:	4621      	mov	r1, r4
 8007a2a:	612e      	str	r6, [r5, #16]
 8007a2c:	f7ff fde2 	bl	80075f4 <_Bfree>
 8007a30:	4628      	mov	r0, r5
 8007a32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007a36:	f842 0f04 	str.w	r0, [r2, #4]!
 8007a3a:	3301      	adds	r3, #1
 8007a3c:	e7c5      	b.n	80079ca <__lshift+0x4a>
 8007a3e:	3904      	subs	r1, #4
 8007a40:	f853 2b04 	ldr.w	r2, [r3], #4
 8007a44:	459c      	cmp	ip, r3
 8007a46:	f841 2f04 	str.w	r2, [r1, #4]!
 8007a4a:	d8f9      	bhi.n	8007a40 <__lshift+0xc0>
 8007a4c:	e7ea      	b.n	8007a24 <__lshift+0xa4>
 8007a4e:	bf00      	nop
 8007a50:	08008a52 	.word	0x08008a52
 8007a54:	08008a63 	.word	0x08008a63

08007a58 <__mcmp>:
 8007a58:	4603      	mov	r3, r0
 8007a5a:	690a      	ldr	r2, [r1, #16]
 8007a5c:	6900      	ldr	r0, [r0, #16]
 8007a5e:	b530      	push	{r4, r5, lr}
 8007a60:	1a80      	subs	r0, r0, r2
 8007a62:	d10e      	bne.n	8007a82 <__mcmp+0x2a>
 8007a64:	3314      	adds	r3, #20
 8007a66:	3114      	adds	r1, #20
 8007a68:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8007a6c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8007a70:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8007a74:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8007a78:	4295      	cmp	r5, r2
 8007a7a:	d003      	beq.n	8007a84 <__mcmp+0x2c>
 8007a7c:	d205      	bcs.n	8007a8a <__mcmp+0x32>
 8007a7e:	f04f 30ff 	mov.w	r0, #4294967295
 8007a82:	bd30      	pop	{r4, r5, pc}
 8007a84:	42a3      	cmp	r3, r4
 8007a86:	d3f3      	bcc.n	8007a70 <__mcmp+0x18>
 8007a88:	e7fb      	b.n	8007a82 <__mcmp+0x2a>
 8007a8a:	2001      	movs	r0, #1
 8007a8c:	e7f9      	b.n	8007a82 <__mcmp+0x2a>
	...

08007a90 <__mdiff>:
 8007a90:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a94:	4689      	mov	r9, r1
 8007a96:	4606      	mov	r6, r0
 8007a98:	4611      	mov	r1, r2
 8007a9a:	4648      	mov	r0, r9
 8007a9c:	4614      	mov	r4, r2
 8007a9e:	f7ff ffdb 	bl	8007a58 <__mcmp>
 8007aa2:	1e05      	subs	r5, r0, #0
 8007aa4:	d112      	bne.n	8007acc <__mdiff+0x3c>
 8007aa6:	4629      	mov	r1, r5
 8007aa8:	4630      	mov	r0, r6
 8007aaa:	f7ff fd63 	bl	8007574 <_Balloc>
 8007aae:	4602      	mov	r2, r0
 8007ab0:	b928      	cbnz	r0, 8007abe <__mdiff+0x2e>
 8007ab2:	f240 2137 	movw	r1, #567	@ 0x237
 8007ab6:	4b3e      	ldr	r3, [pc, #248]	@ (8007bb0 <__mdiff+0x120>)
 8007ab8:	483e      	ldr	r0, [pc, #248]	@ (8007bb4 <__mdiff+0x124>)
 8007aba:	f000 fcd3 	bl	8008464 <__assert_func>
 8007abe:	2301      	movs	r3, #1
 8007ac0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007ac4:	4610      	mov	r0, r2
 8007ac6:	b003      	add	sp, #12
 8007ac8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007acc:	bfbc      	itt	lt
 8007ace:	464b      	movlt	r3, r9
 8007ad0:	46a1      	movlt	r9, r4
 8007ad2:	4630      	mov	r0, r6
 8007ad4:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8007ad8:	bfba      	itte	lt
 8007ada:	461c      	movlt	r4, r3
 8007adc:	2501      	movlt	r5, #1
 8007ade:	2500      	movge	r5, #0
 8007ae0:	f7ff fd48 	bl	8007574 <_Balloc>
 8007ae4:	4602      	mov	r2, r0
 8007ae6:	b918      	cbnz	r0, 8007af0 <__mdiff+0x60>
 8007ae8:	f240 2145 	movw	r1, #581	@ 0x245
 8007aec:	4b30      	ldr	r3, [pc, #192]	@ (8007bb0 <__mdiff+0x120>)
 8007aee:	e7e3      	b.n	8007ab8 <__mdiff+0x28>
 8007af0:	f100 0b14 	add.w	fp, r0, #20
 8007af4:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8007af8:	f109 0310 	add.w	r3, r9, #16
 8007afc:	60c5      	str	r5, [r0, #12]
 8007afe:	f04f 0c00 	mov.w	ip, #0
 8007b02:	f109 0514 	add.w	r5, r9, #20
 8007b06:	46d9      	mov	r9, fp
 8007b08:	6926      	ldr	r6, [r4, #16]
 8007b0a:	f104 0e14 	add.w	lr, r4, #20
 8007b0e:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8007b12:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8007b16:	9301      	str	r3, [sp, #4]
 8007b18:	9b01      	ldr	r3, [sp, #4]
 8007b1a:	f85e 0b04 	ldr.w	r0, [lr], #4
 8007b1e:	f853 af04 	ldr.w	sl, [r3, #4]!
 8007b22:	b281      	uxth	r1, r0
 8007b24:	9301      	str	r3, [sp, #4]
 8007b26:	fa1f f38a 	uxth.w	r3, sl
 8007b2a:	1a5b      	subs	r3, r3, r1
 8007b2c:	0c00      	lsrs	r0, r0, #16
 8007b2e:	4463      	add	r3, ip
 8007b30:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8007b34:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8007b38:	b29b      	uxth	r3, r3
 8007b3a:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8007b3e:	4576      	cmp	r6, lr
 8007b40:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8007b44:	f849 3b04 	str.w	r3, [r9], #4
 8007b48:	d8e6      	bhi.n	8007b18 <__mdiff+0x88>
 8007b4a:	1b33      	subs	r3, r6, r4
 8007b4c:	3b15      	subs	r3, #21
 8007b4e:	f023 0303 	bic.w	r3, r3, #3
 8007b52:	3415      	adds	r4, #21
 8007b54:	3304      	adds	r3, #4
 8007b56:	42a6      	cmp	r6, r4
 8007b58:	bf38      	it	cc
 8007b5a:	2304      	movcc	r3, #4
 8007b5c:	441d      	add	r5, r3
 8007b5e:	445b      	add	r3, fp
 8007b60:	461e      	mov	r6, r3
 8007b62:	462c      	mov	r4, r5
 8007b64:	4544      	cmp	r4, r8
 8007b66:	d30e      	bcc.n	8007b86 <__mdiff+0xf6>
 8007b68:	f108 0103 	add.w	r1, r8, #3
 8007b6c:	1b49      	subs	r1, r1, r5
 8007b6e:	f021 0103 	bic.w	r1, r1, #3
 8007b72:	3d03      	subs	r5, #3
 8007b74:	45a8      	cmp	r8, r5
 8007b76:	bf38      	it	cc
 8007b78:	2100      	movcc	r1, #0
 8007b7a:	440b      	add	r3, r1
 8007b7c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8007b80:	b199      	cbz	r1, 8007baa <__mdiff+0x11a>
 8007b82:	6117      	str	r7, [r2, #16]
 8007b84:	e79e      	b.n	8007ac4 <__mdiff+0x34>
 8007b86:	46e6      	mov	lr, ip
 8007b88:	f854 1b04 	ldr.w	r1, [r4], #4
 8007b8c:	fa1f fc81 	uxth.w	ip, r1
 8007b90:	44f4      	add	ip, lr
 8007b92:	0c08      	lsrs	r0, r1, #16
 8007b94:	4471      	add	r1, lr
 8007b96:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8007b9a:	b289      	uxth	r1, r1
 8007b9c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8007ba0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8007ba4:	f846 1b04 	str.w	r1, [r6], #4
 8007ba8:	e7dc      	b.n	8007b64 <__mdiff+0xd4>
 8007baa:	3f01      	subs	r7, #1
 8007bac:	e7e6      	b.n	8007b7c <__mdiff+0xec>
 8007bae:	bf00      	nop
 8007bb0:	08008a52 	.word	0x08008a52
 8007bb4:	08008a63 	.word	0x08008a63

08007bb8 <__d2b>:
 8007bb8:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 8007bbc:	2101      	movs	r1, #1
 8007bbe:	4690      	mov	r8, r2
 8007bc0:	4699      	mov	r9, r3
 8007bc2:	9e08      	ldr	r6, [sp, #32]
 8007bc4:	f7ff fcd6 	bl	8007574 <_Balloc>
 8007bc8:	4604      	mov	r4, r0
 8007bca:	b930      	cbnz	r0, 8007bda <__d2b+0x22>
 8007bcc:	4602      	mov	r2, r0
 8007bce:	f240 310f 	movw	r1, #783	@ 0x30f
 8007bd2:	4b23      	ldr	r3, [pc, #140]	@ (8007c60 <__d2b+0xa8>)
 8007bd4:	4823      	ldr	r0, [pc, #140]	@ (8007c64 <__d2b+0xac>)
 8007bd6:	f000 fc45 	bl	8008464 <__assert_func>
 8007bda:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8007bde:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007be2:	b10d      	cbz	r5, 8007be8 <__d2b+0x30>
 8007be4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007be8:	9301      	str	r3, [sp, #4]
 8007bea:	f1b8 0300 	subs.w	r3, r8, #0
 8007bee:	d024      	beq.n	8007c3a <__d2b+0x82>
 8007bf0:	4668      	mov	r0, sp
 8007bf2:	9300      	str	r3, [sp, #0]
 8007bf4:	f7ff fd85 	bl	8007702 <__lo0bits>
 8007bf8:	e9dd 1200 	ldrd	r1, r2, [sp]
 8007bfc:	b1d8      	cbz	r0, 8007c36 <__d2b+0x7e>
 8007bfe:	f1c0 0320 	rsb	r3, r0, #32
 8007c02:	fa02 f303 	lsl.w	r3, r2, r3
 8007c06:	430b      	orrs	r3, r1
 8007c08:	40c2      	lsrs	r2, r0
 8007c0a:	6163      	str	r3, [r4, #20]
 8007c0c:	9201      	str	r2, [sp, #4]
 8007c0e:	9b01      	ldr	r3, [sp, #4]
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	bf0c      	ite	eq
 8007c14:	2201      	moveq	r2, #1
 8007c16:	2202      	movne	r2, #2
 8007c18:	61a3      	str	r3, [r4, #24]
 8007c1a:	6122      	str	r2, [r4, #16]
 8007c1c:	b1ad      	cbz	r5, 8007c4a <__d2b+0x92>
 8007c1e:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8007c22:	4405      	add	r5, r0
 8007c24:	6035      	str	r5, [r6, #0]
 8007c26:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8007c2a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007c2c:	6018      	str	r0, [r3, #0]
 8007c2e:	4620      	mov	r0, r4
 8007c30:	b002      	add	sp, #8
 8007c32:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 8007c36:	6161      	str	r1, [r4, #20]
 8007c38:	e7e9      	b.n	8007c0e <__d2b+0x56>
 8007c3a:	a801      	add	r0, sp, #4
 8007c3c:	f7ff fd61 	bl	8007702 <__lo0bits>
 8007c40:	9b01      	ldr	r3, [sp, #4]
 8007c42:	2201      	movs	r2, #1
 8007c44:	6163      	str	r3, [r4, #20]
 8007c46:	3020      	adds	r0, #32
 8007c48:	e7e7      	b.n	8007c1a <__d2b+0x62>
 8007c4a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8007c4e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007c52:	6030      	str	r0, [r6, #0]
 8007c54:	6918      	ldr	r0, [r3, #16]
 8007c56:	f7ff fd35 	bl	80076c4 <__hi0bits>
 8007c5a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8007c5e:	e7e4      	b.n	8007c2a <__d2b+0x72>
 8007c60:	08008a52 	.word	0x08008a52
 8007c64:	08008a63 	.word	0x08008a63

08007c68 <__ssputs_r>:
 8007c68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007c6c:	461f      	mov	r7, r3
 8007c6e:	688e      	ldr	r6, [r1, #8]
 8007c70:	4682      	mov	sl, r0
 8007c72:	42be      	cmp	r6, r7
 8007c74:	460c      	mov	r4, r1
 8007c76:	4690      	mov	r8, r2
 8007c78:	680b      	ldr	r3, [r1, #0]
 8007c7a:	d82d      	bhi.n	8007cd8 <__ssputs_r+0x70>
 8007c7c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007c80:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8007c84:	d026      	beq.n	8007cd4 <__ssputs_r+0x6c>
 8007c86:	6965      	ldr	r5, [r4, #20]
 8007c88:	6909      	ldr	r1, [r1, #16]
 8007c8a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007c8e:	eba3 0901 	sub.w	r9, r3, r1
 8007c92:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007c96:	1c7b      	adds	r3, r7, #1
 8007c98:	444b      	add	r3, r9
 8007c9a:	106d      	asrs	r5, r5, #1
 8007c9c:	429d      	cmp	r5, r3
 8007c9e:	bf38      	it	cc
 8007ca0:	461d      	movcc	r5, r3
 8007ca2:	0553      	lsls	r3, r2, #21
 8007ca4:	d527      	bpl.n	8007cf6 <__ssputs_r+0x8e>
 8007ca6:	4629      	mov	r1, r5
 8007ca8:	f7ff fbd8 	bl	800745c <_malloc_r>
 8007cac:	4606      	mov	r6, r0
 8007cae:	b360      	cbz	r0, 8007d0a <__ssputs_r+0xa2>
 8007cb0:	464a      	mov	r2, r9
 8007cb2:	6921      	ldr	r1, [r4, #16]
 8007cb4:	f7fe fcf3 	bl	800669e <memcpy>
 8007cb8:	89a3      	ldrh	r3, [r4, #12]
 8007cba:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8007cbe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007cc2:	81a3      	strh	r3, [r4, #12]
 8007cc4:	6126      	str	r6, [r4, #16]
 8007cc6:	444e      	add	r6, r9
 8007cc8:	6026      	str	r6, [r4, #0]
 8007cca:	463e      	mov	r6, r7
 8007ccc:	6165      	str	r5, [r4, #20]
 8007cce:	eba5 0509 	sub.w	r5, r5, r9
 8007cd2:	60a5      	str	r5, [r4, #8]
 8007cd4:	42be      	cmp	r6, r7
 8007cd6:	d900      	bls.n	8007cda <__ssputs_r+0x72>
 8007cd8:	463e      	mov	r6, r7
 8007cda:	4632      	mov	r2, r6
 8007cdc:	4641      	mov	r1, r8
 8007cde:	6820      	ldr	r0, [r4, #0]
 8007ce0:	f000 fb96 	bl	8008410 <memmove>
 8007ce4:	2000      	movs	r0, #0
 8007ce6:	68a3      	ldr	r3, [r4, #8]
 8007ce8:	1b9b      	subs	r3, r3, r6
 8007cea:	60a3      	str	r3, [r4, #8]
 8007cec:	6823      	ldr	r3, [r4, #0]
 8007cee:	4433      	add	r3, r6
 8007cf0:	6023      	str	r3, [r4, #0]
 8007cf2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007cf6:	462a      	mov	r2, r5
 8007cf8:	f000 fbf8 	bl	80084ec <_realloc_r>
 8007cfc:	4606      	mov	r6, r0
 8007cfe:	2800      	cmp	r0, #0
 8007d00:	d1e0      	bne.n	8007cc4 <__ssputs_r+0x5c>
 8007d02:	4650      	mov	r0, sl
 8007d04:	6921      	ldr	r1, [r4, #16]
 8007d06:	f7ff fb37 	bl	8007378 <_free_r>
 8007d0a:	230c      	movs	r3, #12
 8007d0c:	f8ca 3000 	str.w	r3, [sl]
 8007d10:	89a3      	ldrh	r3, [r4, #12]
 8007d12:	f04f 30ff 	mov.w	r0, #4294967295
 8007d16:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007d1a:	81a3      	strh	r3, [r4, #12]
 8007d1c:	e7e9      	b.n	8007cf2 <__ssputs_r+0x8a>
	...

08007d20 <_svfiprintf_r>:
 8007d20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d24:	4698      	mov	r8, r3
 8007d26:	898b      	ldrh	r3, [r1, #12]
 8007d28:	4607      	mov	r7, r0
 8007d2a:	061b      	lsls	r3, r3, #24
 8007d2c:	460d      	mov	r5, r1
 8007d2e:	4614      	mov	r4, r2
 8007d30:	b09d      	sub	sp, #116	@ 0x74
 8007d32:	d510      	bpl.n	8007d56 <_svfiprintf_r+0x36>
 8007d34:	690b      	ldr	r3, [r1, #16]
 8007d36:	b973      	cbnz	r3, 8007d56 <_svfiprintf_r+0x36>
 8007d38:	2140      	movs	r1, #64	@ 0x40
 8007d3a:	f7ff fb8f 	bl	800745c <_malloc_r>
 8007d3e:	6028      	str	r0, [r5, #0]
 8007d40:	6128      	str	r0, [r5, #16]
 8007d42:	b930      	cbnz	r0, 8007d52 <_svfiprintf_r+0x32>
 8007d44:	230c      	movs	r3, #12
 8007d46:	603b      	str	r3, [r7, #0]
 8007d48:	f04f 30ff 	mov.w	r0, #4294967295
 8007d4c:	b01d      	add	sp, #116	@ 0x74
 8007d4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d52:	2340      	movs	r3, #64	@ 0x40
 8007d54:	616b      	str	r3, [r5, #20]
 8007d56:	2300      	movs	r3, #0
 8007d58:	9309      	str	r3, [sp, #36]	@ 0x24
 8007d5a:	2320      	movs	r3, #32
 8007d5c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007d60:	2330      	movs	r3, #48	@ 0x30
 8007d62:	f04f 0901 	mov.w	r9, #1
 8007d66:	f8cd 800c 	str.w	r8, [sp, #12]
 8007d6a:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8007f04 <_svfiprintf_r+0x1e4>
 8007d6e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007d72:	4623      	mov	r3, r4
 8007d74:	469a      	mov	sl, r3
 8007d76:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007d7a:	b10a      	cbz	r2, 8007d80 <_svfiprintf_r+0x60>
 8007d7c:	2a25      	cmp	r2, #37	@ 0x25
 8007d7e:	d1f9      	bne.n	8007d74 <_svfiprintf_r+0x54>
 8007d80:	ebba 0b04 	subs.w	fp, sl, r4
 8007d84:	d00b      	beq.n	8007d9e <_svfiprintf_r+0x7e>
 8007d86:	465b      	mov	r3, fp
 8007d88:	4622      	mov	r2, r4
 8007d8a:	4629      	mov	r1, r5
 8007d8c:	4638      	mov	r0, r7
 8007d8e:	f7ff ff6b 	bl	8007c68 <__ssputs_r>
 8007d92:	3001      	adds	r0, #1
 8007d94:	f000 80a7 	beq.w	8007ee6 <_svfiprintf_r+0x1c6>
 8007d98:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007d9a:	445a      	add	r2, fp
 8007d9c:	9209      	str	r2, [sp, #36]	@ 0x24
 8007d9e:	f89a 3000 	ldrb.w	r3, [sl]
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	f000 809f 	beq.w	8007ee6 <_svfiprintf_r+0x1c6>
 8007da8:	2300      	movs	r3, #0
 8007daa:	f04f 32ff 	mov.w	r2, #4294967295
 8007dae:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007db2:	f10a 0a01 	add.w	sl, sl, #1
 8007db6:	9304      	str	r3, [sp, #16]
 8007db8:	9307      	str	r3, [sp, #28]
 8007dba:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007dbe:	931a      	str	r3, [sp, #104]	@ 0x68
 8007dc0:	4654      	mov	r4, sl
 8007dc2:	2205      	movs	r2, #5
 8007dc4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007dc8:	484e      	ldr	r0, [pc, #312]	@ (8007f04 <_svfiprintf_r+0x1e4>)
 8007dca:	f7fe fc5a 	bl	8006682 <memchr>
 8007dce:	9a04      	ldr	r2, [sp, #16]
 8007dd0:	b9d8      	cbnz	r0, 8007e0a <_svfiprintf_r+0xea>
 8007dd2:	06d0      	lsls	r0, r2, #27
 8007dd4:	bf44      	itt	mi
 8007dd6:	2320      	movmi	r3, #32
 8007dd8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007ddc:	0711      	lsls	r1, r2, #28
 8007dde:	bf44      	itt	mi
 8007de0:	232b      	movmi	r3, #43	@ 0x2b
 8007de2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007de6:	f89a 3000 	ldrb.w	r3, [sl]
 8007dea:	2b2a      	cmp	r3, #42	@ 0x2a
 8007dec:	d015      	beq.n	8007e1a <_svfiprintf_r+0xfa>
 8007dee:	4654      	mov	r4, sl
 8007df0:	2000      	movs	r0, #0
 8007df2:	f04f 0c0a 	mov.w	ip, #10
 8007df6:	9a07      	ldr	r2, [sp, #28]
 8007df8:	4621      	mov	r1, r4
 8007dfa:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007dfe:	3b30      	subs	r3, #48	@ 0x30
 8007e00:	2b09      	cmp	r3, #9
 8007e02:	d94b      	bls.n	8007e9c <_svfiprintf_r+0x17c>
 8007e04:	b1b0      	cbz	r0, 8007e34 <_svfiprintf_r+0x114>
 8007e06:	9207      	str	r2, [sp, #28]
 8007e08:	e014      	b.n	8007e34 <_svfiprintf_r+0x114>
 8007e0a:	eba0 0308 	sub.w	r3, r0, r8
 8007e0e:	fa09 f303 	lsl.w	r3, r9, r3
 8007e12:	4313      	orrs	r3, r2
 8007e14:	46a2      	mov	sl, r4
 8007e16:	9304      	str	r3, [sp, #16]
 8007e18:	e7d2      	b.n	8007dc0 <_svfiprintf_r+0xa0>
 8007e1a:	9b03      	ldr	r3, [sp, #12]
 8007e1c:	1d19      	adds	r1, r3, #4
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	9103      	str	r1, [sp, #12]
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	bfbb      	ittet	lt
 8007e26:	425b      	neglt	r3, r3
 8007e28:	f042 0202 	orrlt.w	r2, r2, #2
 8007e2c:	9307      	strge	r3, [sp, #28]
 8007e2e:	9307      	strlt	r3, [sp, #28]
 8007e30:	bfb8      	it	lt
 8007e32:	9204      	strlt	r2, [sp, #16]
 8007e34:	7823      	ldrb	r3, [r4, #0]
 8007e36:	2b2e      	cmp	r3, #46	@ 0x2e
 8007e38:	d10a      	bne.n	8007e50 <_svfiprintf_r+0x130>
 8007e3a:	7863      	ldrb	r3, [r4, #1]
 8007e3c:	2b2a      	cmp	r3, #42	@ 0x2a
 8007e3e:	d132      	bne.n	8007ea6 <_svfiprintf_r+0x186>
 8007e40:	9b03      	ldr	r3, [sp, #12]
 8007e42:	3402      	adds	r4, #2
 8007e44:	1d1a      	adds	r2, r3, #4
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	9203      	str	r2, [sp, #12]
 8007e4a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007e4e:	9305      	str	r3, [sp, #20]
 8007e50:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8007f08 <_svfiprintf_r+0x1e8>
 8007e54:	2203      	movs	r2, #3
 8007e56:	4650      	mov	r0, sl
 8007e58:	7821      	ldrb	r1, [r4, #0]
 8007e5a:	f7fe fc12 	bl	8006682 <memchr>
 8007e5e:	b138      	cbz	r0, 8007e70 <_svfiprintf_r+0x150>
 8007e60:	2240      	movs	r2, #64	@ 0x40
 8007e62:	9b04      	ldr	r3, [sp, #16]
 8007e64:	eba0 000a 	sub.w	r0, r0, sl
 8007e68:	4082      	lsls	r2, r0
 8007e6a:	4313      	orrs	r3, r2
 8007e6c:	3401      	adds	r4, #1
 8007e6e:	9304      	str	r3, [sp, #16]
 8007e70:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007e74:	2206      	movs	r2, #6
 8007e76:	4825      	ldr	r0, [pc, #148]	@ (8007f0c <_svfiprintf_r+0x1ec>)
 8007e78:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007e7c:	f7fe fc01 	bl	8006682 <memchr>
 8007e80:	2800      	cmp	r0, #0
 8007e82:	d036      	beq.n	8007ef2 <_svfiprintf_r+0x1d2>
 8007e84:	4b22      	ldr	r3, [pc, #136]	@ (8007f10 <_svfiprintf_r+0x1f0>)
 8007e86:	bb1b      	cbnz	r3, 8007ed0 <_svfiprintf_r+0x1b0>
 8007e88:	9b03      	ldr	r3, [sp, #12]
 8007e8a:	3307      	adds	r3, #7
 8007e8c:	f023 0307 	bic.w	r3, r3, #7
 8007e90:	3308      	adds	r3, #8
 8007e92:	9303      	str	r3, [sp, #12]
 8007e94:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007e96:	4433      	add	r3, r6
 8007e98:	9309      	str	r3, [sp, #36]	@ 0x24
 8007e9a:	e76a      	b.n	8007d72 <_svfiprintf_r+0x52>
 8007e9c:	460c      	mov	r4, r1
 8007e9e:	2001      	movs	r0, #1
 8007ea0:	fb0c 3202 	mla	r2, ip, r2, r3
 8007ea4:	e7a8      	b.n	8007df8 <_svfiprintf_r+0xd8>
 8007ea6:	2300      	movs	r3, #0
 8007ea8:	f04f 0c0a 	mov.w	ip, #10
 8007eac:	4619      	mov	r1, r3
 8007eae:	3401      	adds	r4, #1
 8007eb0:	9305      	str	r3, [sp, #20]
 8007eb2:	4620      	mov	r0, r4
 8007eb4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007eb8:	3a30      	subs	r2, #48	@ 0x30
 8007eba:	2a09      	cmp	r2, #9
 8007ebc:	d903      	bls.n	8007ec6 <_svfiprintf_r+0x1a6>
 8007ebe:	2b00      	cmp	r3, #0
 8007ec0:	d0c6      	beq.n	8007e50 <_svfiprintf_r+0x130>
 8007ec2:	9105      	str	r1, [sp, #20]
 8007ec4:	e7c4      	b.n	8007e50 <_svfiprintf_r+0x130>
 8007ec6:	4604      	mov	r4, r0
 8007ec8:	2301      	movs	r3, #1
 8007eca:	fb0c 2101 	mla	r1, ip, r1, r2
 8007ece:	e7f0      	b.n	8007eb2 <_svfiprintf_r+0x192>
 8007ed0:	ab03      	add	r3, sp, #12
 8007ed2:	9300      	str	r3, [sp, #0]
 8007ed4:	462a      	mov	r2, r5
 8007ed6:	4638      	mov	r0, r7
 8007ed8:	4b0e      	ldr	r3, [pc, #56]	@ (8007f14 <_svfiprintf_r+0x1f4>)
 8007eda:	a904      	add	r1, sp, #16
 8007edc:	f7fd fe48 	bl	8005b70 <_printf_float>
 8007ee0:	1c42      	adds	r2, r0, #1
 8007ee2:	4606      	mov	r6, r0
 8007ee4:	d1d6      	bne.n	8007e94 <_svfiprintf_r+0x174>
 8007ee6:	89ab      	ldrh	r3, [r5, #12]
 8007ee8:	065b      	lsls	r3, r3, #25
 8007eea:	f53f af2d 	bmi.w	8007d48 <_svfiprintf_r+0x28>
 8007eee:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007ef0:	e72c      	b.n	8007d4c <_svfiprintf_r+0x2c>
 8007ef2:	ab03      	add	r3, sp, #12
 8007ef4:	9300      	str	r3, [sp, #0]
 8007ef6:	462a      	mov	r2, r5
 8007ef8:	4638      	mov	r0, r7
 8007efa:	4b06      	ldr	r3, [pc, #24]	@ (8007f14 <_svfiprintf_r+0x1f4>)
 8007efc:	a904      	add	r1, sp, #16
 8007efe:	f7fe f8d5 	bl	80060ac <_printf_i>
 8007f02:	e7ed      	b.n	8007ee0 <_svfiprintf_r+0x1c0>
 8007f04:	08008abc 	.word	0x08008abc
 8007f08:	08008ac2 	.word	0x08008ac2
 8007f0c:	08008ac6 	.word	0x08008ac6
 8007f10:	08005b71 	.word	0x08005b71
 8007f14:	08007c69 	.word	0x08007c69

08007f18 <__sfputc_r>:
 8007f18:	6893      	ldr	r3, [r2, #8]
 8007f1a:	b410      	push	{r4}
 8007f1c:	3b01      	subs	r3, #1
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	6093      	str	r3, [r2, #8]
 8007f22:	da07      	bge.n	8007f34 <__sfputc_r+0x1c>
 8007f24:	6994      	ldr	r4, [r2, #24]
 8007f26:	42a3      	cmp	r3, r4
 8007f28:	db01      	blt.n	8007f2e <__sfputc_r+0x16>
 8007f2a:	290a      	cmp	r1, #10
 8007f2c:	d102      	bne.n	8007f34 <__sfputc_r+0x1c>
 8007f2e:	bc10      	pop	{r4}
 8007f30:	f000 b9da 	b.w	80082e8 <__swbuf_r>
 8007f34:	6813      	ldr	r3, [r2, #0]
 8007f36:	1c58      	adds	r0, r3, #1
 8007f38:	6010      	str	r0, [r2, #0]
 8007f3a:	7019      	strb	r1, [r3, #0]
 8007f3c:	4608      	mov	r0, r1
 8007f3e:	bc10      	pop	{r4}
 8007f40:	4770      	bx	lr

08007f42 <__sfputs_r>:
 8007f42:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f44:	4606      	mov	r6, r0
 8007f46:	460f      	mov	r7, r1
 8007f48:	4614      	mov	r4, r2
 8007f4a:	18d5      	adds	r5, r2, r3
 8007f4c:	42ac      	cmp	r4, r5
 8007f4e:	d101      	bne.n	8007f54 <__sfputs_r+0x12>
 8007f50:	2000      	movs	r0, #0
 8007f52:	e007      	b.n	8007f64 <__sfputs_r+0x22>
 8007f54:	463a      	mov	r2, r7
 8007f56:	4630      	mov	r0, r6
 8007f58:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007f5c:	f7ff ffdc 	bl	8007f18 <__sfputc_r>
 8007f60:	1c43      	adds	r3, r0, #1
 8007f62:	d1f3      	bne.n	8007f4c <__sfputs_r+0xa>
 8007f64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007f68 <_vfiprintf_r>:
 8007f68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f6c:	460d      	mov	r5, r1
 8007f6e:	4614      	mov	r4, r2
 8007f70:	4698      	mov	r8, r3
 8007f72:	4606      	mov	r6, r0
 8007f74:	b09d      	sub	sp, #116	@ 0x74
 8007f76:	b118      	cbz	r0, 8007f80 <_vfiprintf_r+0x18>
 8007f78:	6a03      	ldr	r3, [r0, #32]
 8007f7a:	b90b      	cbnz	r3, 8007f80 <_vfiprintf_r+0x18>
 8007f7c:	f7fe fa40 	bl	8006400 <__sinit>
 8007f80:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007f82:	07d9      	lsls	r1, r3, #31
 8007f84:	d405      	bmi.n	8007f92 <_vfiprintf_r+0x2a>
 8007f86:	89ab      	ldrh	r3, [r5, #12]
 8007f88:	059a      	lsls	r2, r3, #22
 8007f8a:	d402      	bmi.n	8007f92 <_vfiprintf_r+0x2a>
 8007f8c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007f8e:	f7fe fb76 	bl	800667e <__retarget_lock_acquire_recursive>
 8007f92:	89ab      	ldrh	r3, [r5, #12]
 8007f94:	071b      	lsls	r3, r3, #28
 8007f96:	d501      	bpl.n	8007f9c <_vfiprintf_r+0x34>
 8007f98:	692b      	ldr	r3, [r5, #16]
 8007f9a:	b99b      	cbnz	r3, 8007fc4 <_vfiprintf_r+0x5c>
 8007f9c:	4629      	mov	r1, r5
 8007f9e:	4630      	mov	r0, r6
 8007fa0:	f000 f9e0 	bl	8008364 <__swsetup_r>
 8007fa4:	b170      	cbz	r0, 8007fc4 <_vfiprintf_r+0x5c>
 8007fa6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007fa8:	07dc      	lsls	r4, r3, #31
 8007faa:	d504      	bpl.n	8007fb6 <_vfiprintf_r+0x4e>
 8007fac:	f04f 30ff 	mov.w	r0, #4294967295
 8007fb0:	b01d      	add	sp, #116	@ 0x74
 8007fb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007fb6:	89ab      	ldrh	r3, [r5, #12]
 8007fb8:	0598      	lsls	r0, r3, #22
 8007fba:	d4f7      	bmi.n	8007fac <_vfiprintf_r+0x44>
 8007fbc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007fbe:	f7fe fb5f 	bl	8006680 <__retarget_lock_release_recursive>
 8007fc2:	e7f3      	b.n	8007fac <_vfiprintf_r+0x44>
 8007fc4:	2300      	movs	r3, #0
 8007fc6:	9309      	str	r3, [sp, #36]	@ 0x24
 8007fc8:	2320      	movs	r3, #32
 8007fca:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007fce:	2330      	movs	r3, #48	@ 0x30
 8007fd0:	f04f 0901 	mov.w	r9, #1
 8007fd4:	f8cd 800c 	str.w	r8, [sp, #12]
 8007fd8:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8008184 <_vfiprintf_r+0x21c>
 8007fdc:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007fe0:	4623      	mov	r3, r4
 8007fe2:	469a      	mov	sl, r3
 8007fe4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007fe8:	b10a      	cbz	r2, 8007fee <_vfiprintf_r+0x86>
 8007fea:	2a25      	cmp	r2, #37	@ 0x25
 8007fec:	d1f9      	bne.n	8007fe2 <_vfiprintf_r+0x7a>
 8007fee:	ebba 0b04 	subs.w	fp, sl, r4
 8007ff2:	d00b      	beq.n	800800c <_vfiprintf_r+0xa4>
 8007ff4:	465b      	mov	r3, fp
 8007ff6:	4622      	mov	r2, r4
 8007ff8:	4629      	mov	r1, r5
 8007ffa:	4630      	mov	r0, r6
 8007ffc:	f7ff ffa1 	bl	8007f42 <__sfputs_r>
 8008000:	3001      	adds	r0, #1
 8008002:	f000 80a7 	beq.w	8008154 <_vfiprintf_r+0x1ec>
 8008006:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008008:	445a      	add	r2, fp
 800800a:	9209      	str	r2, [sp, #36]	@ 0x24
 800800c:	f89a 3000 	ldrb.w	r3, [sl]
 8008010:	2b00      	cmp	r3, #0
 8008012:	f000 809f 	beq.w	8008154 <_vfiprintf_r+0x1ec>
 8008016:	2300      	movs	r3, #0
 8008018:	f04f 32ff 	mov.w	r2, #4294967295
 800801c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008020:	f10a 0a01 	add.w	sl, sl, #1
 8008024:	9304      	str	r3, [sp, #16]
 8008026:	9307      	str	r3, [sp, #28]
 8008028:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800802c:	931a      	str	r3, [sp, #104]	@ 0x68
 800802e:	4654      	mov	r4, sl
 8008030:	2205      	movs	r2, #5
 8008032:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008036:	4853      	ldr	r0, [pc, #332]	@ (8008184 <_vfiprintf_r+0x21c>)
 8008038:	f7fe fb23 	bl	8006682 <memchr>
 800803c:	9a04      	ldr	r2, [sp, #16]
 800803e:	b9d8      	cbnz	r0, 8008078 <_vfiprintf_r+0x110>
 8008040:	06d1      	lsls	r1, r2, #27
 8008042:	bf44      	itt	mi
 8008044:	2320      	movmi	r3, #32
 8008046:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800804a:	0713      	lsls	r3, r2, #28
 800804c:	bf44      	itt	mi
 800804e:	232b      	movmi	r3, #43	@ 0x2b
 8008050:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008054:	f89a 3000 	ldrb.w	r3, [sl]
 8008058:	2b2a      	cmp	r3, #42	@ 0x2a
 800805a:	d015      	beq.n	8008088 <_vfiprintf_r+0x120>
 800805c:	4654      	mov	r4, sl
 800805e:	2000      	movs	r0, #0
 8008060:	f04f 0c0a 	mov.w	ip, #10
 8008064:	9a07      	ldr	r2, [sp, #28]
 8008066:	4621      	mov	r1, r4
 8008068:	f811 3b01 	ldrb.w	r3, [r1], #1
 800806c:	3b30      	subs	r3, #48	@ 0x30
 800806e:	2b09      	cmp	r3, #9
 8008070:	d94b      	bls.n	800810a <_vfiprintf_r+0x1a2>
 8008072:	b1b0      	cbz	r0, 80080a2 <_vfiprintf_r+0x13a>
 8008074:	9207      	str	r2, [sp, #28]
 8008076:	e014      	b.n	80080a2 <_vfiprintf_r+0x13a>
 8008078:	eba0 0308 	sub.w	r3, r0, r8
 800807c:	fa09 f303 	lsl.w	r3, r9, r3
 8008080:	4313      	orrs	r3, r2
 8008082:	46a2      	mov	sl, r4
 8008084:	9304      	str	r3, [sp, #16]
 8008086:	e7d2      	b.n	800802e <_vfiprintf_r+0xc6>
 8008088:	9b03      	ldr	r3, [sp, #12]
 800808a:	1d19      	adds	r1, r3, #4
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	9103      	str	r1, [sp, #12]
 8008090:	2b00      	cmp	r3, #0
 8008092:	bfbb      	ittet	lt
 8008094:	425b      	neglt	r3, r3
 8008096:	f042 0202 	orrlt.w	r2, r2, #2
 800809a:	9307      	strge	r3, [sp, #28]
 800809c:	9307      	strlt	r3, [sp, #28]
 800809e:	bfb8      	it	lt
 80080a0:	9204      	strlt	r2, [sp, #16]
 80080a2:	7823      	ldrb	r3, [r4, #0]
 80080a4:	2b2e      	cmp	r3, #46	@ 0x2e
 80080a6:	d10a      	bne.n	80080be <_vfiprintf_r+0x156>
 80080a8:	7863      	ldrb	r3, [r4, #1]
 80080aa:	2b2a      	cmp	r3, #42	@ 0x2a
 80080ac:	d132      	bne.n	8008114 <_vfiprintf_r+0x1ac>
 80080ae:	9b03      	ldr	r3, [sp, #12]
 80080b0:	3402      	adds	r4, #2
 80080b2:	1d1a      	adds	r2, r3, #4
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	9203      	str	r2, [sp, #12]
 80080b8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80080bc:	9305      	str	r3, [sp, #20]
 80080be:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8008188 <_vfiprintf_r+0x220>
 80080c2:	2203      	movs	r2, #3
 80080c4:	4650      	mov	r0, sl
 80080c6:	7821      	ldrb	r1, [r4, #0]
 80080c8:	f7fe fadb 	bl	8006682 <memchr>
 80080cc:	b138      	cbz	r0, 80080de <_vfiprintf_r+0x176>
 80080ce:	2240      	movs	r2, #64	@ 0x40
 80080d0:	9b04      	ldr	r3, [sp, #16]
 80080d2:	eba0 000a 	sub.w	r0, r0, sl
 80080d6:	4082      	lsls	r2, r0
 80080d8:	4313      	orrs	r3, r2
 80080da:	3401      	adds	r4, #1
 80080dc:	9304      	str	r3, [sp, #16]
 80080de:	f814 1b01 	ldrb.w	r1, [r4], #1
 80080e2:	2206      	movs	r2, #6
 80080e4:	4829      	ldr	r0, [pc, #164]	@ (800818c <_vfiprintf_r+0x224>)
 80080e6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80080ea:	f7fe faca 	bl	8006682 <memchr>
 80080ee:	2800      	cmp	r0, #0
 80080f0:	d03f      	beq.n	8008172 <_vfiprintf_r+0x20a>
 80080f2:	4b27      	ldr	r3, [pc, #156]	@ (8008190 <_vfiprintf_r+0x228>)
 80080f4:	bb1b      	cbnz	r3, 800813e <_vfiprintf_r+0x1d6>
 80080f6:	9b03      	ldr	r3, [sp, #12]
 80080f8:	3307      	adds	r3, #7
 80080fa:	f023 0307 	bic.w	r3, r3, #7
 80080fe:	3308      	adds	r3, #8
 8008100:	9303      	str	r3, [sp, #12]
 8008102:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008104:	443b      	add	r3, r7
 8008106:	9309      	str	r3, [sp, #36]	@ 0x24
 8008108:	e76a      	b.n	8007fe0 <_vfiprintf_r+0x78>
 800810a:	460c      	mov	r4, r1
 800810c:	2001      	movs	r0, #1
 800810e:	fb0c 3202 	mla	r2, ip, r2, r3
 8008112:	e7a8      	b.n	8008066 <_vfiprintf_r+0xfe>
 8008114:	2300      	movs	r3, #0
 8008116:	f04f 0c0a 	mov.w	ip, #10
 800811a:	4619      	mov	r1, r3
 800811c:	3401      	adds	r4, #1
 800811e:	9305      	str	r3, [sp, #20]
 8008120:	4620      	mov	r0, r4
 8008122:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008126:	3a30      	subs	r2, #48	@ 0x30
 8008128:	2a09      	cmp	r2, #9
 800812a:	d903      	bls.n	8008134 <_vfiprintf_r+0x1cc>
 800812c:	2b00      	cmp	r3, #0
 800812e:	d0c6      	beq.n	80080be <_vfiprintf_r+0x156>
 8008130:	9105      	str	r1, [sp, #20]
 8008132:	e7c4      	b.n	80080be <_vfiprintf_r+0x156>
 8008134:	4604      	mov	r4, r0
 8008136:	2301      	movs	r3, #1
 8008138:	fb0c 2101 	mla	r1, ip, r1, r2
 800813c:	e7f0      	b.n	8008120 <_vfiprintf_r+0x1b8>
 800813e:	ab03      	add	r3, sp, #12
 8008140:	9300      	str	r3, [sp, #0]
 8008142:	462a      	mov	r2, r5
 8008144:	4630      	mov	r0, r6
 8008146:	4b13      	ldr	r3, [pc, #76]	@ (8008194 <_vfiprintf_r+0x22c>)
 8008148:	a904      	add	r1, sp, #16
 800814a:	f7fd fd11 	bl	8005b70 <_printf_float>
 800814e:	4607      	mov	r7, r0
 8008150:	1c78      	adds	r0, r7, #1
 8008152:	d1d6      	bne.n	8008102 <_vfiprintf_r+0x19a>
 8008154:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008156:	07d9      	lsls	r1, r3, #31
 8008158:	d405      	bmi.n	8008166 <_vfiprintf_r+0x1fe>
 800815a:	89ab      	ldrh	r3, [r5, #12]
 800815c:	059a      	lsls	r2, r3, #22
 800815e:	d402      	bmi.n	8008166 <_vfiprintf_r+0x1fe>
 8008160:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008162:	f7fe fa8d 	bl	8006680 <__retarget_lock_release_recursive>
 8008166:	89ab      	ldrh	r3, [r5, #12]
 8008168:	065b      	lsls	r3, r3, #25
 800816a:	f53f af1f 	bmi.w	8007fac <_vfiprintf_r+0x44>
 800816e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008170:	e71e      	b.n	8007fb0 <_vfiprintf_r+0x48>
 8008172:	ab03      	add	r3, sp, #12
 8008174:	9300      	str	r3, [sp, #0]
 8008176:	462a      	mov	r2, r5
 8008178:	4630      	mov	r0, r6
 800817a:	4b06      	ldr	r3, [pc, #24]	@ (8008194 <_vfiprintf_r+0x22c>)
 800817c:	a904      	add	r1, sp, #16
 800817e:	f7fd ff95 	bl	80060ac <_printf_i>
 8008182:	e7e4      	b.n	800814e <_vfiprintf_r+0x1e6>
 8008184:	08008abc 	.word	0x08008abc
 8008188:	08008ac2 	.word	0x08008ac2
 800818c:	08008ac6 	.word	0x08008ac6
 8008190:	08005b71 	.word	0x08005b71
 8008194:	08007f43 	.word	0x08007f43

08008198 <__sflush_r>:
 8008198:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800819c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800819e:	0716      	lsls	r6, r2, #28
 80081a0:	4605      	mov	r5, r0
 80081a2:	460c      	mov	r4, r1
 80081a4:	d454      	bmi.n	8008250 <__sflush_r+0xb8>
 80081a6:	684b      	ldr	r3, [r1, #4]
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	dc02      	bgt.n	80081b2 <__sflush_r+0x1a>
 80081ac:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	dd48      	ble.n	8008244 <__sflush_r+0xac>
 80081b2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80081b4:	2e00      	cmp	r6, #0
 80081b6:	d045      	beq.n	8008244 <__sflush_r+0xac>
 80081b8:	2300      	movs	r3, #0
 80081ba:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80081be:	682f      	ldr	r7, [r5, #0]
 80081c0:	6a21      	ldr	r1, [r4, #32]
 80081c2:	602b      	str	r3, [r5, #0]
 80081c4:	d030      	beq.n	8008228 <__sflush_r+0x90>
 80081c6:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80081c8:	89a3      	ldrh	r3, [r4, #12]
 80081ca:	0759      	lsls	r1, r3, #29
 80081cc:	d505      	bpl.n	80081da <__sflush_r+0x42>
 80081ce:	6863      	ldr	r3, [r4, #4]
 80081d0:	1ad2      	subs	r2, r2, r3
 80081d2:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80081d4:	b10b      	cbz	r3, 80081da <__sflush_r+0x42>
 80081d6:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80081d8:	1ad2      	subs	r2, r2, r3
 80081da:	2300      	movs	r3, #0
 80081dc:	4628      	mov	r0, r5
 80081de:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80081e0:	6a21      	ldr	r1, [r4, #32]
 80081e2:	47b0      	blx	r6
 80081e4:	1c43      	adds	r3, r0, #1
 80081e6:	89a3      	ldrh	r3, [r4, #12]
 80081e8:	d106      	bne.n	80081f8 <__sflush_r+0x60>
 80081ea:	6829      	ldr	r1, [r5, #0]
 80081ec:	291d      	cmp	r1, #29
 80081ee:	d82b      	bhi.n	8008248 <__sflush_r+0xb0>
 80081f0:	4a28      	ldr	r2, [pc, #160]	@ (8008294 <__sflush_r+0xfc>)
 80081f2:	40ca      	lsrs	r2, r1
 80081f4:	07d6      	lsls	r6, r2, #31
 80081f6:	d527      	bpl.n	8008248 <__sflush_r+0xb0>
 80081f8:	2200      	movs	r2, #0
 80081fa:	6062      	str	r2, [r4, #4]
 80081fc:	6922      	ldr	r2, [r4, #16]
 80081fe:	04d9      	lsls	r1, r3, #19
 8008200:	6022      	str	r2, [r4, #0]
 8008202:	d504      	bpl.n	800820e <__sflush_r+0x76>
 8008204:	1c42      	adds	r2, r0, #1
 8008206:	d101      	bne.n	800820c <__sflush_r+0x74>
 8008208:	682b      	ldr	r3, [r5, #0]
 800820a:	b903      	cbnz	r3, 800820e <__sflush_r+0x76>
 800820c:	6560      	str	r0, [r4, #84]	@ 0x54
 800820e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008210:	602f      	str	r7, [r5, #0]
 8008212:	b1b9      	cbz	r1, 8008244 <__sflush_r+0xac>
 8008214:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008218:	4299      	cmp	r1, r3
 800821a:	d002      	beq.n	8008222 <__sflush_r+0x8a>
 800821c:	4628      	mov	r0, r5
 800821e:	f7ff f8ab 	bl	8007378 <_free_r>
 8008222:	2300      	movs	r3, #0
 8008224:	6363      	str	r3, [r4, #52]	@ 0x34
 8008226:	e00d      	b.n	8008244 <__sflush_r+0xac>
 8008228:	2301      	movs	r3, #1
 800822a:	4628      	mov	r0, r5
 800822c:	47b0      	blx	r6
 800822e:	4602      	mov	r2, r0
 8008230:	1c50      	adds	r0, r2, #1
 8008232:	d1c9      	bne.n	80081c8 <__sflush_r+0x30>
 8008234:	682b      	ldr	r3, [r5, #0]
 8008236:	2b00      	cmp	r3, #0
 8008238:	d0c6      	beq.n	80081c8 <__sflush_r+0x30>
 800823a:	2b1d      	cmp	r3, #29
 800823c:	d001      	beq.n	8008242 <__sflush_r+0xaa>
 800823e:	2b16      	cmp	r3, #22
 8008240:	d11d      	bne.n	800827e <__sflush_r+0xe6>
 8008242:	602f      	str	r7, [r5, #0]
 8008244:	2000      	movs	r0, #0
 8008246:	e021      	b.n	800828c <__sflush_r+0xf4>
 8008248:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800824c:	b21b      	sxth	r3, r3
 800824e:	e01a      	b.n	8008286 <__sflush_r+0xee>
 8008250:	690f      	ldr	r7, [r1, #16]
 8008252:	2f00      	cmp	r7, #0
 8008254:	d0f6      	beq.n	8008244 <__sflush_r+0xac>
 8008256:	0793      	lsls	r3, r2, #30
 8008258:	bf18      	it	ne
 800825a:	2300      	movne	r3, #0
 800825c:	680e      	ldr	r6, [r1, #0]
 800825e:	bf08      	it	eq
 8008260:	694b      	ldreq	r3, [r1, #20]
 8008262:	1bf6      	subs	r6, r6, r7
 8008264:	600f      	str	r7, [r1, #0]
 8008266:	608b      	str	r3, [r1, #8]
 8008268:	2e00      	cmp	r6, #0
 800826a:	ddeb      	ble.n	8008244 <__sflush_r+0xac>
 800826c:	4633      	mov	r3, r6
 800826e:	463a      	mov	r2, r7
 8008270:	4628      	mov	r0, r5
 8008272:	6a21      	ldr	r1, [r4, #32]
 8008274:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8008278:	47e0      	blx	ip
 800827a:	2800      	cmp	r0, #0
 800827c:	dc07      	bgt.n	800828e <__sflush_r+0xf6>
 800827e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008282:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008286:	f04f 30ff 	mov.w	r0, #4294967295
 800828a:	81a3      	strh	r3, [r4, #12]
 800828c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800828e:	4407      	add	r7, r0
 8008290:	1a36      	subs	r6, r6, r0
 8008292:	e7e9      	b.n	8008268 <__sflush_r+0xd0>
 8008294:	20400001 	.word	0x20400001

08008298 <_fflush_r>:
 8008298:	b538      	push	{r3, r4, r5, lr}
 800829a:	690b      	ldr	r3, [r1, #16]
 800829c:	4605      	mov	r5, r0
 800829e:	460c      	mov	r4, r1
 80082a0:	b913      	cbnz	r3, 80082a8 <_fflush_r+0x10>
 80082a2:	2500      	movs	r5, #0
 80082a4:	4628      	mov	r0, r5
 80082a6:	bd38      	pop	{r3, r4, r5, pc}
 80082a8:	b118      	cbz	r0, 80082b2 <_fflush_r+0x1a>
 80082aa:	6a03      	ldr	r3, [r0, #32]
 80082ac:	b90b      	cbnz	r3, 80082b2 <_fflush_r+0x1a>
 80082ae:	f7fe f8a7 	bl	8006400 <__sinit>
 80082b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80082b6:	2b00      	cmp	r3, #0
 80082b8:	d0f3      	beq.n	80082a2 <_fflush_r+0xa>
 80082ba:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80082bc:	07d0      	lsls	r0, r2, #31
 80082be:	d404      	bmi.n	80082ca <_fflush_r+0x32>
 80082c0:	0599      	lsls	r1, r3, #22
 80082c2:	d402      	bmi.n	80082ca <_fflush_r+0x32>
 80082c4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80082c6:	f7fe f9da 	bl	800667e <__retarget_lock_acquire_recursive>
 80082ca:	4628      	mov	r0, r5
 80082cc:	4621      	mov	r1, r4
 80082ce:	f7ff ff63 	bl	8008198 <__sflush_r>
 80082d2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80082d4:	4605      	mov	r5, r0
 80082d6:	07da      	lsls	r2, r3, #31
 80082d8:	d4e4      	bmi.n	80082a4 <_fflush_r+0xc>
 80082da:	89a3      	ldrh	r3, [r4, #12]
 80082dc:	059b      	lsls	r3, r3, #22
 80082de:	d4e1      	bmi.n	80082a4 <_fflush_r+0xc>
 80082e0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80082e2:	f7fe f9cd 	bl	8006680 <__retarget_lock_release_recursive>
 80082e6:	e7dd      	b.n	80082a4 <_fflush_r+0xc>

080082e8 <__swbuf_r>:
 80082e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80082ea:	460e      	mov	r6, r1
 80082ec:	4614      	mov	r4, r2
 80082ee:	4605      	mov	r5, r0
 80082f0:	b118      	cbz	r0, 80082fa <__swbuf_r+0x12>
 80082f2:	6a03      	ldr	r3, [r0, #32]
 80082f4:	b90b      	cbnz	r3, 80082fa <__swbuf_r+0x12>
 80082f6:	f7fe f883 	bl	8006400 <__sinit>
 80082fa:	69a3      	ldr	r3, [r4, #24]
 80082fc:	60a3      	str	r3, [r4, #8]
 80082fe:	89a3      	ldrh	r3, [r4, #12]
 8008300:	071a      	lsls	r2, r3, #28
 8008302:	d501      	bpl.n	8008308 <__swbuf_r+0x20>
 8008304:	6923      	ldr	r3, [r4, #16]
 8008306:	b943      	cbnz	r3, 800831a <__swbuf_r+0x32>
 8008308:	4621      	mov	r1, r4
 800830a:	4628      	mov	r0, r5
 800830c:	f000 f82a 	bl	8008364 <__swsetup_r>
 8008310:	b118      	cbz	r0, 800831a <__swbuf_r+0x32>
 8008312:	f04f 37ff 	mov.w	r7, #4294967295
 8008316:	4638      	mov	r0, r7
 8008318:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800831a:	6823      	ldr	r3, [r4, #0]
 800831c:	6922      	ldr	r2, [r4, #16]
 800831e:	b2f6      	uxtb	r6, r6
 8008320:	1a98      	subs	r0, r3, r2
 8008322:	6963      	ldr	r3, [r4, #20]
 8008324:	4637      	mov	r7, r6
 8008326:	4283      	cmp	r3, r0
 8008328:	dc05      	bgt.n	8008336 <__swbuf_r+0x4e>
 800832a:	4621      	mov	r1, r4
 800832c:	4628      	mov	r0, r5
 800832e:	f7ff ffb3 	bl	8008298 <_fflush_r>
 8008332:	2800      	cmp	r0, #0
 8008334:	d1ed      	bne.n	8008312 <__swbuf_r+0x2a>
 8008336:	68a3      	ldr	r3, [r4, #8]
 8008338:	3b01      	subs	r3, #1
 800833a:	60a3      	str	r3, [r4, #8]
 800833c:	6823      	ldr	r3, [r4, #0]
 800833e:	1c5a      	adds	r2, r3, #1
 8008340:	6022      	str	r2, [r4, #0]
 8008342:	701e      	strb	r6, [r3, #0]
 8008344:	6962      	ldr	r2, [r4, #20]
 8008346:	1c43      	adds	r3, r0, #1
 8008348:	429a      	cmp	r2, r3
 800834a:	d004      	beq.n	8008356 <__swbuf_r+0x6e>
 800834c:	89a3      	ldrh	r3, [r4, #12]
 800834e:	07db      	lsls	r3, r3, #31
 8008350:	d5e1      	bpl.n	8008316 <__swbuf_r+0x2e>
 8008352:	2e0a      	cmp	r6, #10
 8008354:	d1df      	bne.n	8008316 <__swbuf_r+0x2e>
 8008356:	4621      	mov	r1, r4
 8008358:	4628      	mov	r0, r5
 800835a:	f7ff ff9d 	bl	8008298 <_fflush_r>
 800835e:	2800      	cmp	r0, #0
 8008360:	d0d9      	beq.n	8008316 <__swbuf_r+0x2e>
 8008362:	e7d6      	b.n	8008312 <__swbuf_r+0x2a>

08008364 <__swsetup_r>:
 8008364:	b538      	push	{r3, r4, r5, lr}
 8008366:	4b29      	ldr	r3, [pc, #164]	@ (800840c <__swsetup_r+0xa8>)
 8008368:	4605      	mov	r5, r0
 800836a:	6818      	ldr	r0, [r3, #0]
 800836c:	460c      	mov	r4, r1
 800836e:	b118      	cbz	r0, 8008378 <__swsetup_r+0x14>
 8008370:	6a03      	ldr	r3, [r0, #32]
 8008372:	b90b      	cbnz	r3, 8008378 <__swsetup_r+0x14>
 8008374:	f7fe f844 	bl	8006400 <__sinit>
 8008378:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800837c:	0719      	lsls	r1, r3, #28
 800837e:	d422      	bmi.n	80083c6 <__swsetup_r+0x62>
 8008380:	06da      	lsls	r2, r3, #27
 8008382:	d407      	bmi.n	8008394 <__swsetup_r+0x30>
 8008384:	2209      	movs	r2, #9
 8008386:	602a      	str	r2, [r5, #0]
 8008388:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800838c:	f04f 30ff 	mov.w	r0, #4294967295
 8008390:	81a3      	strh	r3, [r4, #12]
 8008392:	e033      	b.n	80083fc <__swsetup_r+0x98>
 8008394:	0758      	lsls	r0, r3, #29
 8008396:	d512      	bpl.n	80083be <__swsetup_r+0x5a>
 8008398:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800839a:	b141      	cbz	r1, 80083ae <__swsetup_r+0x4a>
 800839c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80083a0:	4299      	cmp	r1, r3
 80083a2:	d002      	beq.n	80083aa <__swsetup_r+0x46>
 80083a4:	4628      	mov	r0, r5
 80083a6:	f7fe ffe7 	bl	8007378 <_free_r>
 80083aa:	2300      	movs	r3, #0
 80083ac:	6363      	str	r3, [r4, #52]	@ 0x34
 80083ae:	89a3      	ldrh	r3, [r4, #12]
 80083b0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80083b4:	81a3      	strh	r3, [r4, #12]
 80083b6:	2300      	movs	r3, #0
 80083b8:	6063      	str	r3, [r4, #4]
 80083ba:	6923      	ldr	r3, [r4, #16]
 80083bc:	6023      	str	r3, [r4, #0]
 80083be:	89a3      	ldrh	r3, [r4, #12]
 80083c0:	f043 0308 	orr.w	r3, r3, #8
 80083c4:	81a3      	strh	r3, [r4, #12]
 80083c6:	6923      	ldr	r3, [r4, #16]
 80083c8:	b94b      	cbnz	r3, 80083de <__swsetup_r+0x7a>
 80083ca:	89a3      	ldrh	r3, [r4, #12]
 80083cc:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80083d0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80083d4:	d003      	beq.n	80083de <__swsetup_r+0x7a>
 80083d6:	4621      	mov	r1, r4
 80083d8:	4628      	mov	r0, r5
 80083da:	f000 f8fa 	bl	80085d2 <__smakebuf_r>
 80083de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80083e2:	f013 0201 	ands.w	r2, r3, #1
 80083e6:	d00a      	beq.n	80083fe <__swsetup_r+0x9a>
 80083e8:	2200      	movs	r2, #0
 80083ea:	60a2      	str	r2, [r4, #8]
 80083ec:	6962      	ldr	r2, [r4, #20]
 80083ee:	4252      	negs	r2, r2
 80083f0:	61a2      	str	r2, [r4, #24]
 80083f2:	6922      	ldr	r2, [r4, #16]
 80083f4:	b942      	cbnz	r2, 8008408 <__swsetup_r+0xa4>
 80083f6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80083fa:	d1c5      	bne.n	8008388 <__swsetup_r+0x24>
 80083fc:	bd38      	pop	{r3, r4, r5, pc}
 80083fe:	0799      	lsls	r1, r3, #30
 8008400:	bf58      	it	pl
 8008402:	6962      	ldrpl	r2, [r4, #20]
 8008404:	60a2      	str	r2, [r4, #8]
 8008406:	e7f4      	b.n	80083f2 <__swsetup_r+0x8e>
 8008408:	2000      	movs	r0, #0
 800840a:	e7f7      	b.n	80083fc <__swsetup_r+0x98>
 800840c:	20000018 	.word	0x20000018

08008410 <memmove>:
 8008410:	4288      	cmp	r0, r1
 8008412:	b510      	push	{r4, lr}
 8008414:	eb01 0402 	add.w	r4, r1, r2
 8008418:	d902      	bls.n	8008420 <memmove+0x10>
 800841a:	4284      	cmp	r4, r0
 800841c:	4623      	mov	r3, r4
 800841e:	d807      	bhi.n	8008430 <memmove+0x20>
 8008420:	1e43      	subs	r3, r0, #1
 8008422:	42a1      	cmp	r1, r4
 8008424:	d008      	beq.n	8008438 <memmove+0x28>
 8008426:	f811 2b01 	ldrb.w	r2, [r1], #1
 800842a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800842e:	e7f8      	b.n	8008422 <memmove+0x12>
 8008430:	4601      	mov	r1, r0
 8008432:	4402      	add	r2, r0
 8008434:	428a      	cmp	r2, r1
 8008436:	d100      	bne.n	800843a <memmove+0x2a>
 8008438:	bd10      	pop	{r4, pc}
 800843a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800843e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008442:	e7f7      	b.n	8008434 <memmove+0x24>

08008444 <_sbrk_r>:
 8008444:	b538      	push	{r3, r4, r5, lr}
 8008446:	2300      	movs	r3, #0
 8008448:	4d05      	ldr	r5, [pc, #20]	@ (8008460 <_sbrk_r+0x1c>)
 800844a:	4604      	mov	r4, r0
 800844c:	4608      	mov	r0, r1
 800844e:	602b      	str	r3, [r5, #0]
 8008450:	f7f9 fc9e 	bl	8001d90 <_sbrk>
 8008454:	1c43      	adds	r3, r0, #1
 8008456:	d102      	bne.n	800845e <_sbrk_r+0x1a>
 8008458:	682b      	ldr	r3, [r5, #0]
 800845a:	b103      	cbz	r3, 800845e <_sbrk_r+0x1a>
 800845c:	6023      	str	r3, [r4, #0]
 800845e:	bd38      	pop	{r3, r4, r5, pc}
 8008460:	20000490 	.word	0x20000490

08008464 <__assert_func>:
 8008464:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008466:	4614      	mov	r4, r2
 8008468:	461a      	mov	r2, r3
 800846a:	4b09      	ldr	r3, [pc, #36]	@ (8008490 <__assert_func+0x2c>)
 800846c:	4605      	mov	r5, r0
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	68d8      	ldr	r0, [r3, #12]
 8008472:	b14c      	cbz	r4, 8008488 <__assert_func+0x24>
 8008474:	4b07      	ldr	r3, [pc, #28]	@ (8008494 <__assert_func+0x30>)
 8008476:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800847a:	9100      	str	r1, [sp, #0]
 800847c:	462b      	mov	r3, r5
 800847e:	4906      	ldr	r1, [pc, #24]	@ (8008498 <__assert_func+0x34>)
 8008480:	f000 f870 	bl	8008564 <fiprintf>
 8008484:	f000 f904 	bl	8008690 <abort>
 8008488:	4b04      	ldr	r3, [pc, #16]	@ (800849c <__assert_func+0x38>)
 800848a:	461c      	mov	r4, r3
 800848c:	e7f3      	b.n	8008476 <__assert_func+0x12>
 800848e:	bf00      	nop
 8008490:	20000018 	.word	0x20000018
 8008494:	08008ad7 	.word	0x08008ad7
 8008498:	08008ae4 	.word	0x08008ae4
 800849c:	08008b12 	.word	0x08008b12

080084a0 <_calloc_r>:
 80084a0:	b570      	push	{r4, r5, r6, lr}
 80084a2:	fba1 5402 	umull	r5, r4, r1, r2
 80084a6:	b934      	cbnz	r4, 80084b6 <_calloc_r+0x16>
 80084a8:	4629      	mov	r1, r5
 80084aa:	f7fe ffd7 	bl	800745c <_malloc_r>
 80084ae:	4606      	mov	r6, r0
 80084b0:	b928      	cbnz	r0, 80084be <_calloc_r+0x1e>
 80084b2:	4630      	mov	r0, r6
 80084b4:	bd70      	pop	{r4, r5, r6, pc}
 80084b6:	220c      	movs	r2, #12
 80084b8:	2600      	movs	r6, #0
 80084ba:	6002      	str	r2, [r0, #0]
 80084bc:	e7f9      	b.n	80084b2 <_calloc_r+0x12>
 80084be:	462a      	mov	r2, r5
 80084c0:	4621      	mov	r1, r4
 80084c2:	f7fe f85e 	bl	8006582 <memset>
 80084c6:	e7f4      	b.n	80084b2 <_calloc_r+0x12>

080084c8 <__ascii_mbtowc>:
 80084c8:	b082      	sub	sp, #8
 80084ca:	b901      	cbnz	r1, 80084ce <__ascii_mbtowc+0x6>
 80084cc:	a901      	add	r1, sp, #4
 80084ce:	b142      	cbz	r2, 80084e2 <__ascii_mbtowc+0x1a>
 80084d0:	b14b      	cbz	r3, 80084e6 <__ascii_mbtowc+0x1e>
 80084d2:	7813      	ldrb	r3, [r2, #0]
 80084d4:	600b      	str	r3, [r1, #0]
 80084d6:	7812      	ldrb	r2, [r2, #0]
 80084d8:	1e10      	subs	r0, r2, #0
 80084da:	bf18      	it	ne
 80084dc:	2001      	movne	r0, #1
 80084de:	b002      	add	sp, #8
 80084e0:	4770      	bx	lr
 80084e2:	4610      	mov	r0, r2
 80084e4:	e7fb      	b.n	80084de <__ascii_mbtowc+0x16>
 80084e6:	f06f 0001 	mvn.w	r0, #1
 80084ea:	e7f8      	b.n	80084de <__ascii_mbtowc+0x16>

080084ec <_realloc_r>:
 80084ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80084f0:	4607      	mov	r7, r0
 80084f2:	4614      	mov	r4, r2
 80084f4:	460d      	mov	r5, r1
 80084f6:	b921      	cbnz	r1, 8008502 <_realloc_r+0x16>
 80084f8:	4611      	mov	r1, r2
 80084fa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80084fe:	f7fe bfad 	b.w	800745c <_malloc_r>
 8008502:	b92a      	cbnz	r2, 8008510 <_realloc_r+0x24>
 8008504:	f7fe ff38 	bl	8007378 <_free_r>
 8008508:	4625      	mov	r5, r4
 800850a:	4628      	mov	r0, r5
 800850c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008510:	f000 f8c5 	bl	800869e <_malloc_usable_size_r>
 8008514:	4284      	cmp	r4, r0
 8008516:	4606      	mov	r6, r0
 8008518:	d802      	bhi.n	8008520 <_realloc_r+0x34>
 800851a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800851e:	d8f4      	bhi.n	800850a <_realloc_r+0x1e>
 8008520:	4621      	mov	r1, r4
 8008522:	4638      	mov	r0, r7
 8008524:	f7fe ff9a 	bl	800745c <_malloc_r>
 8008528:	4680      	mov	r8, r0
 800852a:	b908      	cbnz	r0, 8008530 <_realloc_r+0x44>
 800852c:	4645      	mov	r5, r8
 800852e:	e7ec      	b.n	800850a <_realloc_r+0x1e>
 8008530:	42b4      	cmp	r4, r6
 8008532:	4622      	mov	r2, r4
 8008534:	4629      	mov	r1, r5
 8008536:	bf28      	it	cs
 8008538:	4632      	movcs	r2, r6
 800853a:	f7fe f8b0 	bl	800669e <memcpy>
 800853e:	4629      	mov	r1, r5
 8008540:	4638      	mov	r0, r7
 8008542:	f7fe ff19 	bl	8007378 <_free_r>
 8008546:	e7f1      	b.n	800852c <_realloc_r+0x40>

08008548 <__ascii_wctomb>:
 8008548:	4603      	mov	r3, r0
 800854a:	4608      	mov	r0, r1
 800854c:	b141      	cbz	r1, 8008560 <__ascii_wctomb+0x18>
 800854e:	2aff      	cmp	r2, #255	@ 0xff
 8008550:	d904      	bls.n	800855c <__ascii_wctomb+0x14>
 8008552:	228a      	movs	r2, #138	@ 0x8a
 8008554:	f04f 30ff 	mov.w	r0, #4294967295
 8008558:	601a      	str	r2, [r3, #0]
 800855a:	4770      	bx	lr
 800855c:	2001      	movs	r0, #1
 800855e:	700a      	strb	r2, [r1, #0]
 8008560:	4770      	bx	lr
	...

08008564 <fiprintf>:
 8008564:	b40e      	push	{r1, r2, r3}
 8008566:	b503      	push	{r0, r1, lr}
 8008568:	4601      	mov	r1, r0
 800856a:	ab03      	add	r3, sp, #12
 800856c:	4805      	ldr	r0, [pc, #20]	@ (8008584 <fiprintf+0x20>)
 800856e:	f853 2b04 	ldr.w	r2, [r3], #4
 8008572:	6800      	ldr	r0, [r0, #0]
 8008574:	9301      	str	r3, [sp, #4]
 8008576:	f7ff fcf7 	bl	8007f68 <_vfiprintf_r>
 800857a:	b002      	add	sp, #8
 800857c:	f85d eb04 	ldr.w	lr, [sp], #4
 8008580:	b003      	add	sp, #12
 8008582:	4770      	bx	lr
 8008584:	20000018 	.word	0x20000018

08008588 <__swhatbuf_r>:
 8008588:	b570      	push	{r4, r5, r6, lr}
 800858a:	460c      	mov	r4, r1
 800858c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008590:	4615      	mov	r5, r2
 8008592:	2900      	cmp	r1, #0
 8008594:	461e      	mov	r6, r3
 8008596:	b096      	sub	sp, #88	@ 0x58
 8008598:	da0c      	bge.n	80085b4 <__swhatbuf_r+0x2c>
 800859a:	89a3      	ldrh	r3, [r4, #12]
 800859c:	2100      	movs	r1, #0
 800859e:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80085a2:	bf14      	ite	ne
 80085a4:	2340      	movne	r3, #64	@ 0x40
 80085a6:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80085aa:	2000      	movs	r0, #0
 80085ac:	6031      	str	r1, [r6, #0]
 80085ae:	602b      	str	r3, [r5, #0]
 80085b0:	b016      	add	sp, #88	@ 0x58
 80085b2:	bd70      	pop	{r4, r5, r6, pc}
 80085b4:	466a      	mov	r2, sp
 80085b6:	f000 f849 	bl	800864c <_fstat_r>
 80085ba:	2800      	cmp	r0, #0
 80085bc:	dbed      	blt.n	800859a <__swhatbuf_r+0x12>
 80085be:	9901      	ldr	r1, [sp, #4]
 80085c0:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80085c4:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80085c8:	4259      	negs	r1, r3
 80085ca:	4159      	adcs	r1, r3
 80085cc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80085d0:	e7eb      	b.n	80085aa <__swhatbuf_r+0x22>

080085d2 <__smakebuf_r>:
 80085d2:	898b      	ldrh	r3, [r1, #12]
 80085d4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80085d6:	079d      	lsls	r5, r3, #30
 80085d8:	4606      	mov	r6, r0
 80085da:	460c      	mov	r4, r1
 80085dc:	d507      	bpl.n	80085ee <__smakebuf_r+0x1c>
 80085de:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80085e2:	6023      	str	r3, [r4, #0]
 80085e4:	6123      	str	r3, [r4, #16]
 80085e6:	2301      	movs	r3, #1
 80085e8:	6163      	str	r3, [r4, #20]
 80085ea:	b003      	add	sp, #12
 80085ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80085ee:	466a      	mov	r2, sp
 80085f0:	ab01      	add	r3, sp, #4
 80085f2:	f7ff ffc9 	bl	8008588 <__swhatbuf_r>
 80085f6:	9f00      	ldr	r7, [sp, #0]
 80085f8:	4605      	mov	r5, r0
 80085fa:	4639      	mov	r1, r7
 80085fc:	4630      	mov	r0, r6
 80085fe:	f7fe ff2d 	bl	800745c <_malloc_r>
 8008602:	b948      	cbnz	r0, 8008618 <__smakebuf_r+0x46>
 8008604:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008608:	059a      	lsls	r2, r3, #22
 800860a:	d4ee      	bmi.n	80085ea <__smakebuf_r+0x18>
 800860c:	f023 0303 	bic.w	r3, r3, #3
 8008610:	f043 0302 	orr.w	r3, r3, #2
 8008614:	81a3      	strh	r3, [r4, #12]
 8008616:	e7e2      	b.n	80085de <__smakebuf_r+0xc>
 8008618:	89a3      	ldrh	r3, [r4, #12]
 800861a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800861e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008622:	81a3      	strh	r3, [r4, #12]
 8008624:	9b01      	ldr	r3, [sp, #4]
 8008626:	6020      	str	r0, [r4, #0]
 8008628:	b15b      	cbz	r3, 8008642 <__smakebuf_r+0x70>
 800862a:	4630      	mov	r0, r6
 800862c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008630:	f000 f81e 	bl	8008670 <_isatty_r>
 8008634:	b128      	cbz	r0, 8008642 <__smakebuf_r+0x70>
 8008636:	89a3      	ldrh	r3, [r4, #12]
 8008638:	f023 0303 	bic.w	r3, r3, #3
 800863c:	f043 0301 	orr.w	r3, r3, #1
 8008640:	81a3      	strh	r3, [r4, #12]
 8008642:	89a3      	ldrh	r3, [r4, #12]
 8008644:	431d      	orrs	r5, r3
 8008646:	81a5      	strh	r5, [r4, #12]
 8008648:	e7cf      	b.n	80085ea <__smakebuf_r+0x18>
	...

0800864c <_fstat_r>:
 800864c:	b538      	push	{r3, r4, r5, lr}
 800864e:	2300      	movs	r3, #0
 8008650:	4d06      	ldr	r5, [pc, #24]	@ (800866c <_fstat_r+0x20>)
 8008652:	4604      	mov	r4, r0
 8008654:	4608      	mov	r0, r1
 8008656:	4611      	mov	r1, r2
 8008658:	602b      	str	r3, [r5, #0]
 800865a:	f7f9 fb73 	bl	8001d44 <_fstat>
 800865e:	1c43      	adds	r3, r0, #1
 8008660:	d102      	bne.n	8008668 <_fstat_r+0x1c>
 8008662:	682b      	ldr	r3, [r5, #0]
 8008664:	b103      	cbz	r3, 8008668 <_fstat_r+0x1c>
 8008666:	6023      	str	r3, [r4, #0]
 8008668:	bd38      	pop	{r3, r4, r5, pc}
 800866a:	bf00      	nop
 800866c:	20000490 	.word	0x20000490

08008670 <_isatty_r>:
 8008670:	b538      	push	{r3, r4, r5, lr}
 8008672:	2300      	movs	r3, #0
 8008674:	4d05      	ldr	r5, [pc, #20]	@ (800868c <_isatty_r+0x1c>)
 8008676:	4604      	mov	r4, r0
 8008678:	4608      	mov	r0, r1
 800867a:	602b      	str	r3, [r5, #0]
 800867c:	f7f9 fb71 	bl	8001d62 <_isatty>
 8008680:	1c43      	adds	r3, r0, #1
 8008682:	d102      	bne.n	800868a <_isatty_r+0x1a>
 8008684:	682b      	ldr	r3, [r5, #0]
 8008686:	b103      	cbz	r3, 800868a <_isatty_r+0x1a>
 8008688:	6023      	str	r3, [r4, #0]
 800868a:	bd38      	pop	{r3, r4, r5, pc}
 800868c:	20000490 	.word	0x20000490

08008690 <abort>:
 8008690:	2006      	movs	r0, #6
 8008692:	b508      	push	{r3, lr}
 8008694:	f000 f834 	bl	8008700 <raise>
 8008698:	2001      	movs	r0, #1
 800869a:	f7f9 fb04 	bl	8001ca6 <_exit>

0800869e <_malloc_usable_size_r>:
 800869e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80086a2:	1f18      	subs	r0, r3, #4
 80086a4:	2b00      	cmp	r3, #0
 80086a6:	bfbc      	itt	lt
 80086a8:	580b      	ldrlt	r3, [r1, r0]
 80086aa:	18c0      	addlt	r0, r0, r3
 80086ac:	4770      	bx	lr

080086ae <_raise_r>:
 80086ae:	291f      	cmp	r1, #31
 80086b0:	b538      	push	{r3, r4, r5, lr}
 80086b2:	4605      	mov	r5, r0
 80086b4:	460c      	mov	r4, r1
 80086b6:	d904      	bls.n	80086c2 <_raise_r+0x14>
 80086b8:	2316      	movs	r3, #22
 80086ba:	6003      	str	r3, [r0, #0]
 80086bc:	f04f 30ff 	mov.w	r0, #4294967295
 80086c0:	bd38      	pop	{r3, r4, r5, pc}
 80086c2:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80086c4:	b112      	cbz	r2, 80086cc <_raise_r+0x1e>
 80086c6:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80086ca:	b94b      	cbnz	r3, 80086e0 <_raise_r+0x32>
 80086cc:	4628      	mov	r0, r5
 80086ce:	f000 f831 	bl	8008734 <_getpid_r>
 80086d2:	4622      	mov	r2, r4
 80086d4:	4601      	mov	r1, r0
 80086d6:	4628      	mov	r0, r5
 80086d8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80086dc:	f000 b818 	b.w	8008710 <_kill_r>
 80086e0:	2b01      	cmp	r3, #1
 80086e2:	d00a      	beq.n	80086fa <_raise_r+0x4c>
 80086e4:	1c59      	adds	r1, r3, #1
 80086e6:	d103      	bne.n	80086f0 <_raise_r+0x42>
 80086e8:	2316      	movs	r3, #22
 80086ea:	6003      	str	r3, [r0, #0]
 80086ec:	2001      	movs	r0, #1
 80086ee:	e7e7      	b.n	80086c0 <_raise_r+0x12>
 80086f0:	2100      	movs	r1, #0
 80086f2:	4620      	mov	r0, r4
 80086f4:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80086f8:	4798      	blx	r3
 80086fa:	2000      	movs	r0, #0
 80086fc:	e7e0      	b.n	80086c0 <_raise_r+0x12>
	...

08008700 <raise>:
 8008700:	4b02      	ldr	r3, [pc, #8]	@ (800870c <raise+0xc>)
 8008702:	4601      	mov	r1, r0
 8008704:	6818      	ldr	r0, [r3, #0]
 8008706:	f7ff bfd2 	b.w	80086ae <_raise_r>
 800870a:	bf00      	nop
 800870c:	20000018 	.word	0x20000018

08008710 <_kill_r>:
 8008710:	b538      	push	{r3, r4, r5, lr}
 8008712:	2300      	movs	r3, #0
 8008714:	4d06      	ldr	r5, [pc, #24]	@ (8008730 <_kill_r+0x20>)
 8008716:	4604      	mov	r4, r0
 8008718:	4608      	mov	r0, r1
 800871a:	4611      	mov	r1, r2
 800871c:	602b      	str	r3, [r5, #0]
 800871e:	f7f9 fab2 	bl	8001c86 <_kill>
 8008722:	1c43      	adds	r3, r0, #1
 8008724:	d102      	bne.n	800872c <_kill_r+0x1c>
 8008726:	682b      	ldr	r3, [r5, #0]
 8008728:	b103      	cbz	r3, 800872c <_kill_r+0x1c>
 800872a:	6023      	str	r3, [r4, #0]
 800872c:	bd38      	pop	{r3, r4, r5, pc}
 800872e:	bf00      	nop
 8008730:	20000490 	.word	0x20000490

08008734 <_getpid_r>:
 8008734:	f7f9 baa0 	b.w	8001c78 <_getpid>

08008738 <fminf>:
 8008738:	b538      	push	{r3, r4, r5, lr}
 800873a:	4604      	mov	r4, r0
 800873c:	460d      	mov	r5, r1
 800873e:	f000 f811 	bl	8008764 <__fpclassifyf>
 8008742:	b910      	cbnz	r0, 800874a <fminf+0x12>
 8008744:	462c      	mov	r4, r5
 8008746:	4620      	mov	r0, r4
 8008748:	bd38      	pop	{r3, r4, r5, pc}
 800874a:	4628      	mov	r0, r5
 800874c:	f000 f80a 	bl	8008764 <__fpclassifyf>
 8008750:	2800      	cmp	r0, #0
 8008752:	d0f8      	beq.n	8008746 <fminf+0xe>
 8008754:	4629      	mov	r1, r5
 8008756:	4620      	mov	r0, r4
 8008758:	f7f8 fc92 	bl	8001080 <__aeabi_fcmplt>
 800875c:	2800      	cmp	r0, #0
 800875e:	d0f1      	beq.n	8008744 <fminf+0xc>
 8008760:	e7f1      	b.n	8008746 <fminf+0xe>
	...

08008764 <__fpclassifyf>:
 8008764:	f030 4000 	bics.w	r0, r0, #2147483648	@ 0x80000000
 8008768:	d00d      	beq.n	8008786 <__fpclassifyf+0x22>
 800876a:	f5a0 0300 	sub.w	r3, r0, #8388608	@ 0x800000
 800876e:	f1b3 4ffe 	cmp.w	r3, #2130706432	@ 0x7f000000
 8008772:	d30a      	bcc.n	800878a <__fpclassifyf+0x26>
 8008774:	4b07      	ldr	r3, [pc, #28]	@ (8008794 <__fpclassifyf+0x30>)
 8008776:	1e42      	subs	r2, r0, #1
 8008778:	429a      	cmp	r2, r3
 800877a:	d908      	bls.n	800878e <__fpclassifyf+0x2a>
 800877c:	f1a0 43ff 	sub.w	r3, r0, #2139095040	@ 0x7f800000
 8008780:	4258      	negs	r0, r3
 8008782:	4158      	adcs	r0, r3
 8008784:	4770      	bx	lr
 8008786:	2002      	movs	r0, #2
 8008788:	4770      	bx	lr
 800878a:	2004      	movs	r0, #4
 800878c:	4770      	bx	lr
 800878e:	2003      	movs	r0, #3
 8008790:	4770      	bx	lr
 8008792:	bf00      	nop
 8008794:	007ffffe 	.word	0x007ffffe

08008798 <_init>:
 8008798:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800879a:	bf00      	nop
 800879c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800879e:	bc08      	pop	{r3}
 80087a0:	469e      	mov	lr, r3
 80087a2:	4770      	bx	lr

080087a4 <_fini>:
 80087a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80087a6:	bf00      	nop
 80087a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80087aa:	bc08      	pop	{r3}
 80087ac:	469e      	mov	lr, r3
 80087ae:	4770      	bx	lr
